// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/admin.proto

package dspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AdminAuth_AuthMethod int32

const (
	AdminAuth_MD5_DIGEST AdminAuth_AuthMethod = 0
)

var AdminAuth_AuthMethod_name = map[int32]string{
	0: "MD5_DIGEST",
}

var AdminAuth_AuthMethod_value = map[string]int32{
	"MD5_DIGEST": 0,
}

func (x AdminAuth_AuthMethod) String() string {
	return proto.EnumName(AdminAuth_AuthMethod_name, int32(x))
}

func (AdminAuth_AuthMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{0, 0}
}

type ClearQueueRequest_QueueType int32

const (
	ClearQueueRequest_ALL         ClearQueueRequest_QueueType = 0
	ClearQueueRequest_FAST_WORKER ClearQueueRequest_QueueType = 1
	ClearQueueRequest_SLOW_WORKER ClearQueueRequest_QueueType = 2
)

var ClearQueueRequest_QueueType_name = map[int32]string{
	0: "ALL",
	1: "FAST_WORKER",
	2: "SLOW_WORKER",
}

var ClearQueueRequest_QueueType_value = map[string]int32{
	"ALL":         0,
	"FAST_WORKER": 1,
	"SLOW_WORKER": 2,
}

func (x ClearQueueRequest_QueueType) String() string {
	return proto.EnumName(ClearQueueRequest_QueueType_name, int32(x))
}

func (ClearQueueRequest_QueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{15, 0}
}

type GetPendingsRequest_PendingType int32

const (
	GetPendingsRequest_ALL          GetPendingsRequest_PendingType = 0
	GetPendingsRequest_INSERT       GetPendingsRequest_PendingType = 1
	GetPendingsRequest_SELECT       GetPendingsRequest_PendingType = 2
	GetPendingsRequest_PONIT_SELECT GetPendingsRequest_PendingType = 3
	GetPendingsRequest_RANGE_SELECT GetPendingsRequest_PendingType = 4
)

var GetPendingsRequest_PendingType_name = map[int32]string{
	0: "ALL",
	1: "INSERT",
	2: "SELECT",
	3: "PONIT_SELECT",
	4: "RANGE_SELECT",
}

var GetPendingsRequest_PendingType_value = map[string]int32{
	"ALL":          0,
	"INSERT":       1,
	"SELECT":       2,
	"PONIT_SELECT": 3,
	"RANGE_SELECT": 4,
}

func (x GetPendingsRequest_PendingType) String() string {
	return proto.EnumName(GetPendingsRequest_PendingType_name, int32(x))
}

func (GetPendingsRequest_PendingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{17, 0}
}

type ProfileRequest_ProfileType int32

const (
	ProfileRequest_CPU  ProfileRequest_ProfileType = 0
	ProfileRequest_HEAP ProfileRequest_ProfileType = 1
)

var ProfileRequest_ProfileType_name = map[int32]string{
	0: "CPU",
	1: "HEAP",
}

var ProfileRequest_ProfileType_value = map[string]int32{
	"CPU":  0,
	"HEAP": 1,
}

func (x ProfileRequest_ProfileType) String() string {
	return proto.EnumName(ProfileRequest_ProfileType_name, int32(x))
}

func (ProfileRequest_ProfileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{21, 0}
}

type AdminAuth struct {
	Method               AdminAuth_AuthMethod `protobuf:"varint,1,opt,name=method,proto3,enum=dspb.AdminAuth_AuthMethod" json:"method,omitempty"`
	Epoch                int64                `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Sign                 string               `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AdminAuth) Reset()         { *m = AdminAuth{} }
func (m *AdminAuth) String() string { return proto.CompactTextString(m) }
func (*AdminAuth) ProtoMessage()    {}
func (*AdminAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{0}
}
func (m *AdminAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAuth.Merge(m, src)
}
func (m *AdminAuth) XXX_Size() int {
	return m.Size()
}
func (m *AdminAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAuth.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAuth proto.InternalMessageInfo

func (m *AdminAuth) GetMethod() AdminAuth_AuthMethod {
	if m != nil {
		return m.Method
	}
	return AdminAuth_MD5_DIGEST
}

func (m *AdminAuth) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *AdminAuth) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type AdminRequest struct {
	Auth *AdminAuth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*AdminRequest_SetCfg
	//	*AdminRequest_GetCfg
	//	*AdminRequest_GetInfo
	//	*AdminRequest_ForceSplit
	//	*AdminRequest_Compaction
	//	*AdminRequest_ClearQueue
	//	*AdminRequest_GetPendings
	//	*AdminRequest_FlushDb
	//	*AdminRequest_Profile
	Req                  isAdminRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminRequest) Reset()         { *m = AdminRequest{} }
func (m *AdminRequest) String() string { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()    {}
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{1}
}
func (m *AdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequest.Merge(m, src)
}
func (m *AdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequest proto.InternalMessageInfo

type isAdminRequest_Req interface {
	isAdminRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminRequest_SetCfg struct {
	SetCfg *SetConfigRequest `protobuf:"bytes,10,opt,name=set_cfg,json=setCfg,proto3,oneof"`
}
type AdminRequest_GetCfg struct {
	GetCfg *GetConfigRequest `protobuf:"bytes,11,opt,name=get_cfg,json=getCfg,proto3,oneof"`
}
type AdminRequest_GetInfo struct {
	GetInfo *GetInfoRequest `protobuf:"bytes,12,opt,name=get_info,json=getInfo,proto3,oneof"`
}
type AdminRequest_ForceSplit struct {
	ForceSplit *ForceSplitRequest `protobuf:"bytes,13,opt,name=force_split,json=forceSplit,proto3,oneof"`
}
type AdminRequest_Compaction struct {
	Compaction *CompactionRequest `protobuf:"bytes,14,opt,name=compaction,proto3,oneof"`
}
type AdminRequest_ClearQueue struct {
	ClearQueue *ClearQueueRequest `protobuf:"bytes,15,opt,name=clear_queue,json=clearQueue,proto3,oneof"`
}
type AdminRequest_GetPendings struct {
	GetPendings *GetPendingsRequest `protobuf:"bytes,16,opt,name=get_pendings,json=getPendings,proto3,oneof"`
}
type AdminRequest_FlushDb struct {
	FlushDb *FlushDBRequest `protobuf:"bytes,17,opt,name=flush_db,json=flushDb,proto3,oneof"`
}
type AdminRequest_Profile struct {
	Profile *ProfileRequest `protobuf:"bytes,18,opt,name=profile,proto3,oneof"`
}

func (*AdminRequest_SetCfg) isAdminRequest_Req()      {}
func (*AdminRequest_GetCfg) isAdminRequest_Req()      {}
func (*AdminRequest_GetInfo) isAdminRequest_Req()     {}
func (*AdminRequest_ForceSplit) isAdminRequest_Req()  {}
func (*AdminRequest_Compaction) isAdminRequest_Req()  {}
func (*AdminRequest_ClearQueue) isAdminRequest_Req()  {}
func (*AdminRequest_GetPendings) isAdminRequest_Req() {}
func (*AdminRequest_FlushDb) isAdminRequest_Req()     {}
func (*AdminRequest_Profile) isAdminRequest_Req()     {}

func (m *AdminRequest) GetReq() isAdminRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *AdminRequest) GetAuth() *AdminAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *AdminRequest) GetSetCfg() *SetConfigRequest {
	if x, ok := m.GetReq().(*AdminRequest_SetCfg); ok {
		return x.SetCfg
	}
	return nil
}

func (m *AdminRequest) GetGetCfg() *GetConfigRequest {
	if x, ok := m.GetReq().(*AdminRequest_GetCfg); ok {
		return x.GetCfg
	}
	return nil
}

func (m *AdminRequest) GetGetInfo() *GetInfoRequest {
	if x, ok := m.GetReq().(*AdminRequest_GetInfo); ok {
		return x.GetInfo
	}
	return nil
}

func (m *AdminRequest) GetForceSplit() *ForceSplitRequest {
	if x, ok := m.GetReq().(*AdminRequest_ForceSplit); ok {
		return x.ForceSplit
	}
	return nil
}

func (m *AdminRequest) GetCompaction() *CompactionRequest {
	if x, ok := m.GetReq().(*AdminRequest_Compaction); ok {
		return x.Compaction
	}
	return nil
}

func (m *AdminRequest) GetClearQueue() *ClearQueueRequest {
	if x, ok := m.GetReq().(*AdminRequest_ClearQueue); ok {
		return x.ClearQueue
	}
	return nil
}

func (m *AdminRequest) GetGetPendings() *GetPendingsRequest {
	if x, ok := m.GetReq().(*AdminRequest_GetPendings); ok {
		return x.GetPendings
	}
	return nil
}

func (m *AdminRequest) GetFlushDb() *FlushDBRequest {
	if x, ok := m.GetReq().(*AdminRequest_FlushDb); ok {
		return x.FlushDb
	}
	return nil
}

func (m *AdminRequest) GetProfile() *ProfileRequest {
	if x, ok := m.GetReq().(*AdminRequest_Profile); ok {
		return x.Profile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminRequest_OneofMarshaler, _AdminRequest_OneofUnmarshaler, _AdminRequest_OneofSizer, []interface{}{
		(*AdminRequest_SetCfg)(nil),
		(*AdminRequest_GetCfg)(nil),
		(*AdminRequest_GetInfo)(nil),
		(*AdminRequest_ForceSplit)(nil),
		(*AdminRequest_Compaction)(nil),
		(*AdminRequest_ClearQueue)(nil),
		(*AdminRequest_GetPendings)(nil),
		(*AdminRequest_FlushDb)(nil),
		(*AdminRequest_Profile)(nil),
	}
}

func _AdminRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_SetCfg:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCfg); err != nil {
			return err
		}
	case *AdminRequest_GetCfg:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCfg); err != nil {
			return err
		}
	case *AdminRequest_GetInfo:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetInfo); err != nil {
			return err
		}
	case *AdminRequest_ForceSplit:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceSplit); err != nil {
			return err
		}
	case *AdminRequest_Compaction:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Compaction); err != nil {
			return err
		}
	case *AdminRequest_ClearQueue:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClearQueue); err != nil {
			return err
		}
	case *AdminRequest_GetPendings:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetPendings); err != nil {
			return err
		}
	case *AdminRequest_FlushDb:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlushDb); err != nil {
			return err
		}
	case *AdminRequest_Profile:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Profile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _AdminRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminRequest)
	switch tag {
	case 10: // req.set_cfg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetConfigRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_SetCfg{msg}
		return true, err
	case 11: // req.get_cfg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetConfigRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_GetCfg{msg}
		return true, err
	case 12: // req.get_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetInfoRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_GetInfo{msg}
		return true, err
	case 13: // req.force_split
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForceSplitRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_ForceSplit{msg}
		return true, err
	case 14: // req.compaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CompactionRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_Compaction{msg}
		return true, err
	case 15: // req.clear_queue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClearQueueRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_ClearQueue{msg}
		return true, err
	case 16: // req.get_pendings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetPendingsRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_GetPendings{msg}
		return true, err
	case 17: // req.flush_db
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlushDBRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_FlushDb{msg}
		return true, err
	case 18: // req.profile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfileRequest)
		err := b.DecodeMessage(msg)
		m.Req = &AdminRequest_Profile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminRequest)
	// req
	switch x := m.Req.(type) {
	case *AdminRequest_SetCfg:
		s := proto.Size(x.SetCfg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_GetCfg:
		s := proto.Size(x.GetCfg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_GetInfo:
		s := proto.Size(x.GetInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_ForceSplit:
		s := proto.Size(x.ForceSplit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_Compaction:
		s := proto.Size(x.Compaction)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_ClearQueue:
		s := proto.Size(x.ClearQueue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_GetPendings:
		s := proto.Size(x.GetPendings)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_FlushDb:
		s := proto.Size(x.FlushDb)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminRequest_Profile:
		s := proto.Size(x.Profile)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AdminResponse struct {
	Code     uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*AdminResponse_SetCfg
	//	*AdminResponse_GetCfg
	//	*AdminResponse_GetInfo
	//	*AdminResponse_ForceSplit
	//	*AdminResponse_Compaction
	//	*AdminResponse_ClearQueue
	//	*AdminResponse_GetPendings
	//	*AdminResponse_FlushDb
	//	*AdminResponse_Profile
	Resp                 isAdminResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AdminResponse) Reset()         { *m = AdminResponse{} }
func (m *AdminResponse) String() string { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()    {}
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{2}
}
func (m *AdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponse.Merge(m, src)
}
func (m *AdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponse proto.InternalMessageInfo

type isAdminResponse_Resp interface {
	isAdminResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminResponse_SetCfg struct {
	SetCfg *SetConfigResponse `protobuf:"bytes,10,opt,name=set_cfg,json=setCfg,proto3,oneof"`
}
type AdminResponse_GetCfg struct {
	GetCfg *GetConfigResponse `protobuf:"bytes,11,opt,name=get_cfg,json=getCfg,proto3,oneof"`
}
type AdminResponse_GetInfo struct {
	GetInfo *GetInfoResponse `protobuf:"bytes,12,opt,name=get_info,json=getInfo,proto3,oneof"`
}
type AdminResponse_ForceSplit struct {
	ForceSplit *ForceSplitResponse `protobuf:"bytes,13,opt,name=force_split,json=forceSplit,proto3,oneof"`
}
type AdminResponse_Compaction struct {
	Compaction *CompactionResponse `protobuf:"bytes,14,opt,name=compaction,proto3,oneof"`
}
type AdminResponse_ClearQueue struct {
	ClearQueue *ClearQueueResponse `protobuf:"bytes,15,opt,name=clear_queue,json=clearQueue,proto3,oneof"`
}
type AdminResponse_GetPendings struct {
	GetPendings *GetPendingsResponse `protobuf:"bytes,16,opt,name=get_pendings,json=getPendings,proto3,oneof"`
}
type AdminResponse_FlushDb struct {
	FlushDb *FlushDBResponse `protobuf:"bytes,17,opt,name=flush_db,json=flushDb,proto3,oneof"`
}
type AdminResponse_Profile struct {
	Profile *ProfileResponse `protobuf:"bytes,18,opt,name=profile,proto3,oneof"`
}

func (*AdminResponse_SetCfg) isAdminResponse_Resp()      {}
func (*AdminResponse_GetCfg) isAdminResponse_Resp()      {}
func (*AdminResponse_GetInfo) isAdminResponse_Resp()     {}
func (*AdminResponse_ForceSplit) isAdminResponse_Resp()  {}
func (*AdminResponse_Compaction) isAdminResponse_Resp()  {}
func (*AdminResponse_ClearQueue) isAdminResponse_Resp()  {}
func (*AdminResponse_GetPendings) isAdminResponse_Resp() {}
func (*AdminResponse_FlushDb) isAdminResponse_Resp()     {}
func (*AdminResponse_Profile) isAdminResponse_Resp()     {}

func (m *AdminResponse) GetResp() isAdminResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *AdminResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AdminResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *AdminResponse) GetSetCfg() *SetConfigResponse {
	if x, ok := m.GetResp().(*AdminResponse_SetCfg); ok {
		return x.SetCfg
	}
	return nil
}

func (m *AdminResponse) GetGetCfg() *GetConfigResponse {
	if x, ok := m.GetResp().(*AdminResponse_GetCfg); ok {
		return x.GetCfg
	}
	return nil
}

func (m *AdminResponse) GetGetInfo() *GetInfoResponse {
	if x, ok := m.GetResp().(*AdminResponse_GetInfo); ok {
		return x.GetInfo
	}
	return nil
}

func (m *AdminResponse) GetForceSplit() *ForceSplitResponse {
	if x, ok := m.GetResp().(*AdminResponse_ForceSplit); ok {
		return x.ForceSplit
	}
	return nil
}

func (m *AdminResponse) GetCompaction() *CompactionResponse {
	if x, ok := m.GetResp().(*AdminResponse_Compaction); ok {
		return x.Compaction
	}
	return nil
}

func (m *AdminResponse) GetClearQueue() *ClearQueueResponse {
	if x, ok := m.GetResp().(*AdminResponse_ClearQueue); ok {
		return x.ClearQueue
	}
	return nil
}

func (m *AdminResponse) GetGetPendings() *GetPendingsResponse {
	if x, ok := m.GetResp().(*AdminResponse_GetPendings); ok {
		return x.GetPendings
	}
	return nil
}

func (m *AdminResponse) GetFlushDb() *FlushDBResponse {
	if x, ok := m.GetResp().(*AdminResponse_FlushDb); ok {
		return x.FlushDb
	}
	return nil
}

func (m *AdminResponse) GetProfile() *ProfileResponse {
	if x, ok := m.GetResp().(*AdminResponse_Profile); ok {
		return x.Profile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminResponse_OneofMarshaler, _AdminResponse_OneofUnmarshaler, _AdminResponse_OneofSizer, []interface{}{
		(*AdminResponse_SetCfg)(nil),
		(*AdminResponse_GetCfg)(nil),
		(*AdminResponse_GetInfo)(nil),
		(*AdminResponse_ForceSplit)(nil),
		(*AdminResponse_Compaction)(nil),
		(*AdminResponse_ClearQueue)(nil),
		(*AdminResponse_GetPendings)(nil),
		(*AdminResponse_FlushDb)(nil),
		(*AdminResponse_Profile)(nil),
	}
}

func _AdminResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_SetCfg:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCfg); err != nil {
			return err
		}
	case *AdminResponse_GetCfg:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCfg); err != nil {
			return err
		}
	case *AdminResponse_GetInfo:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetInfo); err != nil {
			return err
		}
	case *AdminResponse_ForceSplit:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceSplit); err != nil {
			return err
		}
	case *AdminResponse_Compaction:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Compaction); err != nil {
			return err
		}
	case *AdminResponse_ClearQueue:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClearQueue); err != nil {
			return err
		}
	case *AdminResponse_GetPendings:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetPendings); err != nil {
			return err
		}
	case *AdminResponse_FlushDb:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlushDb); err != nil {
			return err
		}
	case *AdminResponse_Profile:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Profile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _AdminResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminResponse)
	switch tag {
	case 10: // resp.set_cfg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetConfigResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_SetCfg{msg}
		return true, err
	case 11: // resp.get_cfg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetConfigResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_GetCfg{msg}
		return true, err
	case 12: // resp.get_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetInfoResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_GetInfo{msg}
		return true, err
	case 13: // resp.force_split
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForceSplitResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_ForceSplit{msg}
		return true, err
	case 14: // resp.compaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CompactionResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_Compaction{msg}
		return true, err
	case 15: // resp.clear_queue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClearQueueResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_ClearQueue{msg}
		return true, err
	case 16: // resp.get_pendings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetPendingsResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_GetPendings{msg}
		return true, err
	case 17: // resp.flush_db
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlushDBResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_FlushDb{msg}
		return true, err
	case 18: // resp.profile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfileResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &AdminResponse_Profile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminResponse)
	// resp
	switch x := m.Resp.(type) {
	case *AdminResponse_SetCfg:
		s := proto.Size(x.SetCfg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_GetCfg:
		s := proto.Size(x.GetCfg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_GetInfo:
		s := proto.Size(x.GetInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_ForceSplit:
		s := proto.Size(x.ForceSplit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_Compaction:
		s := proto.Size(x.Compaction)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_ClearQueue:
		s := proto.Size(x.ClearQueue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_GetPendings:
		s := proto.Size(x.GetPendings)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_FlushDb:
		s := proto.Size(x.FlushDb)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminResponse_Profile:
		s := proto.Size(x.Profile)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConfigKey struct {
	Section              string   `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigKey) Reset()         { *m = ConfigKey{} }
func (m *ConfigKey) String() string { return proto.CompactTextString(m) }
func (*ConfigKey) ProtoMessage()    {}
func (*ConfigKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{3}
}
func (m *ConfigKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigKey.Merge(m, src)
}
func (m *ConfigKey) XXX_Size() int {
	return m.Size()
}
func (m *ConfigKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigKey.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigKey proto.InternalMessageInfo

func (m *ConfigKey) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *ConfigKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ConfigItem struct {
	Key                  *ConfigKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfigItem) Reset()         { *m = ConfigItem{} }
func (m *ConfigItem) String() string { return proto.CompactTextString(m) }
func (*ConfigItem) ProtoMessage()    {}
func (*ConfigItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{4}
}
func (m *ConfigItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigItem.Merge(m, src)
}
func (m *ConfigItem) XXX_Size() int {
	return m.Size()
}
func (m *ConfigItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigItem.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigItem proto.InternalMessageInfo

func (m *ConfigItem) GetKey() *ConfigKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ConfigItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetConfigRequest struct {
	Configs              []*ConfigItem `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetConfigRequest) Reset()         { *m = SetConfigRequest{} }
func (m *SetConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SetConfigRequest) ProtoMessage()    {}
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{5}
}
func (m *SetConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetConfigRequest.Merge(m, src)
}
func (m *SetConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetConfigRequest proto.InternalMessageInfo

func (m *SetConfigRequest) GetConfigs() []*ConfigItem {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SetConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetConfigResponse) Reset()         { *m = SetConfigResponse{} }
func (m *SetConfigResponse) String() string { return proto.CompactTextString(m) }
func (*SetConfigResponse) ProtoMessage()    {}
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{6}
}
func (m *SetConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetConfigResponse.Merge(m, src)
}
func (m *SetConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetConfigResponse proto.InternalMessageInfo

type GetConfigRequest struct {
	Key                  []*ConfigKey `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetConfigRequest) Reset()         { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()    {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{7}
}
func (m *GetConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigRequest.Merge(m, src)
}
func (m *GetConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigRequest proto.InternalMessageInfo

func (m *GetConfigRequest) GetKey() []*ConfigKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetConfigResponse struct {
	Configs              []*ConfigItem `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetConfigResponse) Reset()         { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()    {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{8}
}
func (m *GetConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigResponse.Merge(m, src)
}
func (m *GetConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigResponse proto.InternalMessageInfo

func (m *GetConfigResponse) GetConfigs() []*ConfigItem {
	if m != nil {
		return m.Configs
	}
	return nil
}

// path: diffent types that caller care about
// eg: rocksdb, rocksdb.cache-usage,
//     server, server.version, server.start
//     raft, raft.{range_id}
// if path is empty, will return server's status summary
type GetInfoRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{9}
}
func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(m, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

func (m *GetInfoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type GetInfoResponse struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoResponse) Reset()         { *m = GetInfoResponse{} }
func (m *GetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfoResponse) ProtoMessage()    {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{10}
}
func (m *GetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoResponse.Merge(m, src)
}
func (m *GetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoResponse proto.InternalMessageInfo

func (m *GetInfoResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ForceSplitRequest struct {
	RangeId              uint64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForceSplitRequest) Reset()         { *m = ForceSplitRequest{} }
func (m *ForceSplitRequest) String() string { return proto.CompactTextString(m) }
func (*ForceSplitRequest) ProtoMessage()    {}
func (*ForceSplitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{11}
}
func (m *ForceSplitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceSplitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceSplitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceSplitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceSplitRequest.Merge(m, src)
}
func (m *ForceSplitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForceSplitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceSplitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForceSplitRequest proto.InternalMessageInfo

func (m *ForceSplitRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *ForceSplitRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ForceSplitResponse struct {
	SplitKey             []byte   `protobuf:"bytes,1,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForceSplitResponse) Reset()         { *m = ForceSplitResponse{} }
func (m *ForceSplitResponse) String() string { return proto.CompactTextString(m) }
func (*ForceSplitResponse) ProtoMessage()    {}
func (*ForceSplitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{12}
}
func (m *ForceSplitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceSplitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceSplitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceSplitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceSplitResponse.Merge(m, src)
}
func (m *ForceSplitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForceSplitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceSplitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForceSplitResponse proto.InternalMessageInfo

func (m *ForceSplitResponse) GetSplitKey() []byte {
	if m != nil {
		return m.SplitKey
	}
	return nil
}

type CompactionRequest struct {
	RangeId              uint64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	TransactionId        int64    `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactionRequest) Reset()         { *m = CompactionRequest{} }
func (m *CompactionRequest) String() string { return proto.CompactTextString(m) }
func (*CompactionRequest) ProtoMessage()    {}
func (*CompactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{13}
}
func (m *CompactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionRequest.Merge(m, src)
}
func (m *CompactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionRequest proto.InternalMessageInfo

func (m *CompactionRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *CompactionRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

type CompactionResponse struct {
	BeginKey             []byte   `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey               []byte   `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactionResponse) Reset()         { *m = CompactionResponse{} }
func (m *CompactionResponse) String() string { return proto.CompactTextString(m) }
func (*CompactionResponse) ProtoMessage()    {}
func (*CompactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{14}
}
func (m *CompactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionResponse.Merge(m, src)
}
func (m *CompactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionResponse proto.InternalMessageInfo

func (m *CompactionResponse) GetBeginKey() []byte {
	if m != nil {
		return m.BeginKey
	}
	return nil
}

func (m *CompactionResponse) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type ClearQueueRequest struct {
	QueueType            ClearQueueRequest_QueueType `protobuf:"varint,1,opt,name=queue_type,json=queueType,proto3,enum=dspb.ClearQueueRequest_QueueType" json:"queue_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ClearQueueRequest) Reset()         { *m = ClearQueueRequest{} }
func (m *ClearQueueRequest) String() string { return proto.CompactTextString(m) }
func (*ClearQueueRequest) ProtoMessage()    {}
func (*ClearQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{15}
}
func (m *ClearQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearQueueRequest.Merge(m, src)
}
func (m *ClearQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearQueueRequest proto.InternalMessageInfo

func (m *ClearQueueRequest) GetQueueType() ClearQueueRequest_QueueType {
	if m != nil {
		return m.QueueType
	}
	return ClearQueueRequest_ALL
}

type ClearQueueResponse struct {
	Cleared              uint64   `protobuf:"varint,1,opt,name=cleared,proto3" json:"cleared,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearQueueResponse) Reset()         { *m = ClearQueueResponse{} }
func (m *ClearQueueResponse) String() string { return proto.CompactTextString(m) }
func (*ClearQueueResponse) ProtoMessage()    {}
func (*ClearQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{16}
}
func (m *ClearQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearQueueResponse.Merge(m, src)
}
func (m *ClearQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClearQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearQueueResponse proto.InternalMessageInfo

func (m *ClearQueueResponse) GetCleared() uint64 {
	if m != nil {
		return m.Cleared
	}
	return 0
}

type GetPendingsRequest struct {
	Ptype                GetPendingsRequest_PendingType `protobuf:"varint,1,opt,name=ptype,proto3,enum=dspb.GetPendingsRequest_PendingType" json:"ptype,omitempty"`
	Count                uint64                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GetPendingsRequest) Reset()         { *m = GetPendingsRequest{} }
func (m *GetPendingsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPendingsRequest) ProtoMessage()    {}
func (*GetPendingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{17}
}
func (m *GetPendingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPendingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPendingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPendingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingsRequest.Merge(m, src)
}
func (m *GetPendingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPendingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingsRequest proto.InternalMessageInfo

func (m *GetPendingsRequest) GetPtype() GetPendingsRequest_PendingType {
	if m != nil {
		return m.Ptype
	}
	return GetPendingsRequest_ALL
}

func (m *GetPendingsRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetPendingsResponse struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPendingsResponse) Reset()         { *m = GetPendingsResponse{} }
func (m *GetPendingsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPendingsResponse) ProtoMessage()    {}
func (*GetPendingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{18}
}
func (m *GetPendingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPendingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPendingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPendingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingsResponse.Merge(m, src)
}
func (m *GetPendingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPendingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingsResponse proto.InternalMessageInfo

func (m *GetPendingsResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type FlushDBRequest struct {
	Wait                 bool     `protobuf:"varint,1,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushDBRequest) Reset()         { *m = FlushDBRequest{} }
func (m *FlushDBRequest) String() string { return proto.CompactTextString(m) }
func (*FlushDBRequest) ProtoMessage()    {}
func (*FlushDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{19}
}
func (m *FlushDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushDBRequest.Merge(m, src)
}
func (m *FlushDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *FlushDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlushDBRequest proto.InternalMessageInfo

func (m *FlushDBRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type FlushDBResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushDBResponse) Reset()         { *m = FlushDBResponse{} }
func (m *FlushDBResponse) String() string { return proto.CompactTextString(m) }
func (*FlushDBResponse) ProtoMessage()    {}
func (*FlushDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{20}
}
func (m *FlushDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushDBResponse.Merge(m, src)
}
func (m *FlushDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *FlushDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlushDBResponse proto.InternalMessageInfo

type ProfileRequest struct {
	Ptype                ProfileRequest_ProfileType `protobuf:"varint,1,opt,name=ptype,proto3,enum=dspb.ProfileRequest_ProfileType" json:"ptype,omitempty"`
	OutputPath           string                     `protobuf:"bytes,2,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	Seconds              uint64                     `protobuf:"varint,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{21}
}
func (m *ProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRequest.Merge(m, src)
}
func (m *ProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRequest proto.InternalMessageInfo

func (m *ProfileRequest) GetPtype() ProfileRequest_ProfileType {
	if m != nil {
		return m.Ptype
	}
	return ProfileRequest_CPU
}

func (m *ProfileRequest) GetOutputPath() string {
	if m != nil {
		return m.OutputPath
	}
	return ""
}

func (m *ProfileRequest) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type ProfileResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileResponse) Reset()         { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()    {}
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22b85a14dbb1119, []int{22}
}
func (m *ProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileResponse.Merge(m, src)
}
func (m *ProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dspb.AdminAuth_AuthMethod", AdminAuth_AuthMethod_name, AdminAuth_AuthMethod_value)
	proto.RegisterEnum("dspb.ClearQueueRequest_QueueType", ClearQueueRequest_QueueType_name, ClearQueueRequest_QueueType_value)
	proto.RegisterEnum("dspb.GetPendingsRequest_PendingType", GetPendingsRequest_PendingType_name, GetPendingsRequest_PendingType_value)
	proto.RegisterEnum("dspb.ProfileRequest_ProfileType", ProfileRequest_ProfileType_name, ProfileRequest_ProfileType_value)
	proto.RegisterType((*AdminAuth)(nil), "dspb.AdminAuth")
	proto.RegisterType((*AdminRequest)(nil), "dspb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "dspb.AdminResponse")
	proto.RegisterType((*ConfigKey)(nil), "dspb.ConfigKey")
	proto.RegisterType((*ConfigItem)(nil), "dspb.ConfigItem")
	proto.RegisterType((*SetConfigRequest)(nil), "dspb.SetConfigRequest")
	proto.RegisterType((*SetConfigResponse)(nil), "dspb.SetConfigResponse")
	proto.RegisterType((*GetConfigRequest)(nil), "dspb.GetConfigRequest")
	proto.RegisterType((*GetConfigResponse)(nil), "dspb.GetConfigResponse")
	proto.RegisterType((*GetInfoRequest)(nil), "dspb.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "dspb.GetInfoResponse")
	proto.RegisterType((*ForceSplitRequest)(nil), "dspb.ForceSplitRequest")
	proto.RegisterType((*ForceSplitResponse)(nil), "dspb.ForceSplitResponse")
	proto.RegisterType((*CompactionRequest)(nil), "dspb.CompactionRequest")
	proto.RegisterType((*CompactionResponse)(nil), "dspb.CompactionResponse")
	proto.RegisterType((*ClearQueueRequest)(nil), "dspb.ClearQueueRequest")
	proto.RegisterType((*ClearQueueResponse)(nil), "dspb.ClearQueueResponse")
	proto.RegisterType((*GetPendingsRequest)(nil), "dspb.GetPendingsRequest")
	proto.RegisterType((*GetPendingsResponse)(nil), "dspb.GetPendingsResponse")
	proto.RegisterType((*FlushDBRequest)(nil), "dspb.FlushDBRequest")
	proto.RegisterType((*FlushDBResponse)(nil), "dspb.FlushDBResponse")
	proto.RegisterType((*ProfileRequest)(nil), "dspb.ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "dspb.ProfileResponse")
}

func init() { proto.RegisterFile("dspb/admin.proto", fileDescriptor_f22b85a14dbb1119) }

var fileDescriptor_f22b85a14dbb1119 = []byte{
	// 1094 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xeb, 0x26, 0xcd, 0xc7, 0x49, 0x9b, 0x3a, 0xb3, 0x5b, 0xea, 0x05, 0x54, 0xb2, 0xc3,
	0xae, 0x54, 0xb8, 0x08, 0x34, 0x68, 0x57, 0xda, 0xae, 0x58, 0x48, 0xdb, 0xb4, 0x0d, 0xfd, 0x0a,
	0x93, 0xac, 0xf6, 0xd2, 0x72, 0xed, 0x89, 0x63, 0xd1, 0xd8, 0xae, 0xed, 0x2c, 0xea, 0x13, 0x70,
	0xc5, 0x3d, 0x2f, 0xc0, 0x0d, 0x8f, 0xc0, 0x1d, 0x77, 0x5c, 0xf2, 0x08, 0xa8, 0xbc, 0x08, 0x3a,
	0xe3, 0xcf, 0xd8, 0x29, 0x12, 0x37, 0xd1, 0x9c, 0xff, 0x9c, 0xff, 0xf8, 0x78, 0xfc, 0x9b, 0x33,
	0x01, 0xd9, 0xf0, 0xdd, 0xeb, 0x2f, 0x34, 0x63, 0x66, 0xd9, 0x1d, 0xd7, 0x73, 0x02, 0x87, 0x94,
	0x51, 0xa1, 0x3f, 0x49, 0x50, 0xef, 0xa1, 0xda, 0x9b, 0x07, 0x53, 0xd2, 0x85, 0xca, 0x8c, 0x07,
	0x53, 0xc7, 0x50, 0xa4, 0xb6, 0xb4, 0xdb, 0xec, 0x7e, 0xd8, 0xc1, 0xa4, 0x4e, 0x92, 0xd0, 0xc1,
	0x9f, 0x0b, 0x91, 0xc1, 0xa2, 0x4c, 0xf2, 0x18, 0xd6, 0xb8, 0xeb, 0xe8, 0x53, 0x65, 0xb5, 0x2d,
	0xed, 0x96, 0x58, 0x18, 0x10, 0x02, 0x65, 0xdf, 0x32, 0x6d, 0xa5, 0xd4, 0x96, 0x76, 0xeb, 0x4c,
	0x8c, 0xe9, 0xc7, 0x00, 0xa9, 0x9f, 0x34, 0x01, 0x2e, 0x8e, 0x5e, 0xa8, 0x47, 0x83, 0x93, 0xfe,
	0x68, 0x2c, 0xaf, 0xd0, 0xdf, 0xca, 0xb0, 0x2e, 0x1e, 0xc4, 0xf8, 0xed, 0x9c, 0xfb, 0x01, 0xf9,
	0x14, 0xca, 0xda, 0x3c, 0x98, 0x8a, 0x52, 0x1a, 0xdd, 0xcd, 0x5c, 0x29, 0x4c, 0x4c, 0x92, 0x3d,
	0xa8, 0xfa, 0x3c, 0x50, 0xf5, 0x89, 0xa9, 0x80, 0xc8, 0xfb, 0x20, 0xcc, 0x1b, 0xf1, 0xe0, 0xd0,
	0xb1, 0x27, 0x96, 0x19, 0xad, 0x76, 0xba, 0xc2, 0x2a, 0x3e, 0x0f, 0x0e, 0x27, 0x26, 0x5a, 0xcc,
	0xc8, 0xd2, 0xc8, 0x5a, 0x4e, 0x96, 0x58, 0xcc, 0xd8, 0x52, 0x43, 0x8b, 0x65, 0x4f, 0x1c, 0x65,
	0x5d, 0x78, 0x1e, 0x27, 0x9e, 0x81, 0x3d, 0x71, 0x52, 0x07, 0x2e, 0x8d, 0x0a, 0xd9, 0x87, 0xc6,
	0xc4, 0xf1, 0x74, 0xae, 0xfa, 0xee, 0x8d, 0x15, 0x28, 0x1b, 0xc2, 0xb5, 0x1d, 0xba, 0x8e, 0x71,
	0x62, 0x84, 0x7a, 0x6a, 0x84, 0x49, 0x22, 0x92, 0x57, 0x00, 0xba, 0x33, 0x73, 0x35, 0x3d, 0xb0,
	0x1c, 0x5b, 0x69, 0x66, 0xad, 0x87, 0x89, 0x9e, 0xb1, 0xa6, 0xc9, 0xf8, 0x58, 0xfd, 0x86, 0x6b,
	0x9e, 0x7a, 0x3b, 0xe7, 0x73, 0xae, 0x6c, 0x2e, 0x78, 0x71, 0xe2, 0x7b, 0xd4, 0xb3, 0xde, 0x44,
	0x24, 0x5f, 0xc3, 0x3a, 0xbe, 0xa5, 0xcb, 0x6d, 0xc3, 0xb2, 0x4d, 0x5f, 0x91, 0x85, 0x59, 0x49,
	0xde, 0x74, 0x18, 0x4d, 0xa4, 0xee, 0x86, 0x99, 0xaa, 0xb8, 0x49, 0x93, 0x9b, 0xb9, 0x3f, 0x55,
	0x8d, 0x6b, 0xa5, 0x95, 0xdd, 0xa4, 0x63, 0x54, 0x8f, 0x0e, 0x32, 0x9b, 0x24, 0xf2, 0x8e, 0xae,
	0xc9, 0x97, 0x50, 0x75, 0x3d, 0x67, 0x62, 0xdd, 0x70, 0x85, 0x64, 0x1d, 0xc3, 0x50, 0xcc, 0x38,
	0xa2, 0xb4, 0x83, 0x35, 0x28, 0x79, 0xfc, 0x96, 0xfe, 0x51, 0x86, 0x8d, 0x08, 0x16, 0xdf, 0x75,
	0x6c, 0x9f, 0x23, 0x70, 0xba, 0x63, 0x70, 0x41, 0xcb, 0x06, 0x13, 0x63, 0xf2, 0x11, 0xd4, 0xb9,
	0xe7, 0x39, 0x9e, 0x3a, 0xf3, 0x4d, 0x81, 0x67, 0x9d, 0xd5, 0x84, 0x70, 0xe1, 0x9b, 0xa4, 0x9b,
	0x27, 0x67, 0xbb, 0x40, 0x4e, 0xb8, 0x74, 0x06, 0x9d, 0x6e, 0x1e, 0x9d, 0xed, 0x02, 0x3a, 0xa9,
	0xc7, 0x8c, 0x3d, 0x79, 0x76, 0xb6, 0x72, 0xec, 0x24, 0x96, 0x04, 0x9e, 0xd7, 0xcb, 0xe0, 0x51,
	0x8a, 0xf0, 0x24, 0xce, 0x2c, 0x3d, 0xfb, 0x4b, 0xe8, 0x51, 0x8a, 0xf4, 0xa4, 0xde, 0x0c, 0x3e,
	0xaf, 0x97, 0xe1, 0xa3, 0x14, 0xf1, 0xc9, 0x98, 0x53, 0x7e, 0xde, 0x2c, 0xe5, 0xe7, 0xc9, 0x12,
	0x7e, 0x12, 0xfb, 0x02, 0x40, 0xdd, 0x02, 0x40, 0x5b, 0x39, 0x80, 0xd2, 0x9d, 0x8a, 0x09, 0xda,
	0xcb, 0x13, 0xb4, 0x95, 0x23, 0x28, 0xb5, 0xc4, 0x08, 0x55, 0xa0, 0xec, 0x71, 0xdf, 0xa5, 0xaf,
	0xa0, 0x1e, 0x7e, 0xb4, 0x33, 0x7e, 0x47, 0x14, 0xa4, 0x21, 0xdc, 0x31, 0x49, 0x80, 0x12, 0x87,
	0x08, 0x96, 0xad, 0xcd, 0x78, 0xc4, 0x8f, 0x18, 0xd3, 0x3e, 0x40, 0x68, 0x1d, 0x04, 0x7c, 0x46,
	0x9e, 0x42, 0xe9, 0x07, 0x7e, 0xb7, 0xd8, 0xa7, 0x92, 0x95, 0x19, 0xce, 0x61, 0x93, 0x7c, 0xaf,
	0xdd, 0xcc, 0xe3, 0x55, 0xc2, 0x80, 0xbe, 0x01, 0x39, 0xdf, 0xa7, 0xc8, 0xe7, 0x50, 0xd5, 0x85,
	0xe0, 0x2b, 0x52, 0xbb, 0xb4, 0xdb, 0xe8, 0xca, 0xd9, 0x05, 0xf1, 0x79, 0x2c, 0x4e, 0xa0, 0x8f,
	0xa0, 0x55, 0xa0, 0x95, 0xbe, 0x00, 0x39, 0xdf, 0xc9, 0xd2, 0x0a, 0x4b, 0x0f, 0x55, 0x48, 0xbf,
	0x81, 0x56, 0x81, 0xe2, 0xff, 0x55, 0xcc, 0x33, 0x68, 0x2e, 0x76, 0x43, 0xdc, 0x39, 0x57, 0x8b,
	0x1a, 0x78, 0x9d, 0x89, 0x31, 0x7d, 0x0e, 0x9b, 0x39, 0xee, 0x31, 0xcd, 0xd0, 0x02, 0x2d, 0x4e,
	0xc3, 0x31, 0x3d, 0x85, 0x56, 0xa1, 0x49, 0x92, 0x27, 0x50, 0xf3, 0x34, 0xdb, 0xe4, 0xaa, 0x15,
	0xde, 0x4f, 0x65, 0x56, 0x15, 0xf1, 0xc0, 0xc0, 0xcf, 0xf7, 0x9e, 0x7b, 0x3e, 0x7e, 0xbe, 0xd5,
	0x70, 0x26, 0x0a, 0xe9, 0x1e, 0x90, 0xe2, 0x89, 0xc1, 0xce, 0x20, 0x8e, 0x96, 0x1a, 0x7f, 0xb8,
	0x75, 0x56, 0x13, 0xc2, 0x19, 0xbf, 0xa3, 0x6f, 0xa1, 0x55, 0x68, 0xb3, 0xff, 0xf5, 0xf0, 0xe7,
	0xd0, 0x0c, 0x3c, 0xcd, 0xf6, 0x43, 0x03, 0x26, 0x84, 0x57, 0xe1, 0x46, 0x46, 0x1d, 0x18, 0xf4,
	0x3b, 0x20, 0xc5, 0xf3, 0x87, 0x95, 0x5c, 0x73, 0xd3, 0xb2, 0xb3, 0x95, 0x08, 0x01, 0xa9, 0xdc,
	0x86, 0x2a, 0xb7, 0x0d, 0x31, 0xb5, 0x2a, 0xa6, 0x2a, 0xdc, 0x36, 0xb0, 0xc4, 0x9f, 0x25, 0x68,
	0x15, 0xda, 0x39, 0xf9, 0x16, 0x40, 0x9c, 0x5b, 0x35, 0xb8, 0x73, 0x79, 0x74, 0x85, 0x3f, 0x7d,
	0xa0, 0xf7, 0x77, 0x44, 0x30, 0xbe, 0x73, 0x39, 0xab, 0xdf, 0xc6, 0x43, 0xfa, 0x12, 0xea, 0x89,
	0x4e, 0xaa, 0x50, 0xea, 0x9d, 0x9f, 0xcb, 0x2b, 0x64, 0x13, 0x1a, 0xc7, 0xbd, 0xd1, 0x58, 0x7d,
	0x77, 0xc5, 0xce, 0xfa, 0x4c, 0x96, 0x50, 0x18, 0x9d, 0x5f, 0xbd, 0x8b, 0x85, 0x55, 0xda, 0x01,
	0x52, 0x6c, 0x0f, 0xf8, 0x55, 0x44, 0x7b, 0xe0, 0xc9, 0x96, 0x45, 0x21, 0xfd, 0x5d, 0x02, 0x52,
	0xbc, 0x51, 0xc8, 0x3e, 0xac, 0xb9, 0x99, 0xda, 0x9f, 0x3d, 0x74, 0xf5, 0x74, 0xa2, 0x58, 0x94,
	0x1f, 0x5a, 0xf0, 0x88, 0xe9, 0xce, 0xdc, 0x0e, 0x22, 0x00, 0xc2, 0x80, 0x32, 0x68, 0x64, 0x72,
	0xd3, 0x57, 0x02, 0xa8, 0x0c, 0x2e, 0x47, 0x7d, 0x36, 0x96, 0x25, 0x1c, 0x8f, 0xfa, 0xe7, 0xfd,
	0xc3, 0xb1, 0xbc, 0x4a, 0x64, 0x58, 0x1f, 0x5e, 0x5d, 0x0e, 0xc6, 0x6a, 0xa4, 0x94, 0x50, 0x61,
	0xbd, 0xcb, 0x93, 0x7e, 0xac, 0x94, 0xe9, 0x67, 0xf0, 0x68, 0x49, 0x37, 0x13, 0x1c, 0x73, 0x5f,
	0x4f, 0x38, 0xe6, 0xbe, 0x8e, 0x87, 0x62, 0xf1, 0xf6, 0xc3, 0xac, 0x1f, 0x35, 0x2b, 0x10, 0x59,
	0x35, 0x26, 0xc6, 0xb4, 0x05, 0x9b, 0xb9, 0x16, 0x47, 0x7f, 0x95, 0xa0, 0xb9, 0x78, 0x0b, 0x92,
	0x97, 0x8b, 0x9b, 0xd3, 0x5e, 0x76, 0x55, 0xc6, 0x61, 0x76, 0x63, 0x3e, 0x81, 0x86, 0x33, 0x0f,
	0xdc, 0x79, 0xa0, 0x8a, 0xd3, 0x18, 0x76, 0x20, 0x08, 0xa5, 0xa1, 0x16, 0x4c, 0xa3, 0xde, 0xe7,
	0xd8, 0x86, 0x2f, 0xfe, 0xae, 0x95, 0x59, 0x1c, 0xd2, 0x36, 0x34, 0x32, 0x0b, 0xe2, 0xee, 0x1d,
	0x0e, 0xdf, 0xca, 0x2b, 0xa4, 0x06, 0xe5, 0xd3, 0x7e, 0x6f, 0x28, 0x4b, 0x58, 0x7a, 0xae, 0xd5,
	0x1e, 0xc8, 0x7f, 0xde, 0xef, 0x48, 0x7f, 0xdd, 0xef, 0x48, 0x7f, 0xdf, 0xef, 0x48, 0xbf, 0xfc,
	0xb3, 0xb3, 0x72, 0x5d, 0x11, 0xff, 0x38, 0xbf, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xba, 0x25,
	0x6d, 0xb0, 0x85, 0x0a, 0x00, 0x00,
}

func (m *AdminAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Method))
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Auth.Size()))
		n1, err := m.Auth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest_SetCfg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetCfg != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.SetCfg.Size()))
		n3, err := m.SetCfg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AdminRequest_GetCfg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetCfg != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.GetCfg.Size()))
		n4, err := m.GetCfg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AdminRequest_GetInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetInfo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.GetInfo.Size()))
		n5, err := m.GetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AdminRequest_ForceSplit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceSplit != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ForceSplit.Size()))
		n6, err := m.ForceSplit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AdminRequest_Compaction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Compaction != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Compaction.Size()))
		n7, err := m.Compaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *AdminRequest_ClearQueue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClearQueue != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ClearQueue.Size()))
		n8, err := m.ClearQueue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *AdminRequest_GetPendings) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetPendings != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.GetPendings.Size()))
		n9, err := m.GetPendings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AdminRequest_FlushDb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FlushDb != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.FlushDb.Size()))
		n10, err := m.FlushDb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AdminRequest_Profile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Profile != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Profile.Size()))
		n11, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Code))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.Resp != nil {
		nn12, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponse_SetCfg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetCfg != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.SetCfg.Size()))
		n13, err := m.SetCfg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *AdminResponse_GetCfg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetCfg != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.GetCfg.Size()))
		n14, err := m.GetCfg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *AdminResponse_GetInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetInfo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.GetInfo.Size()))
		n15, err := m.GetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *AdminResponse_ForceSplit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForceSplit != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ForceSplit.Size()))
		n16, err := m.ForceSplit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *AdminResponse_Compaction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Compaction != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Compaction.Size()))
		n17, err := m.Compaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *AdminResponse_ClearQueue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClearQueue != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ClearQueue.Size()))
		n18, err := m.ClearQueue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *AdminResponse_GetPendings) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetPendings != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.GetPendings.Size()))
		n19, err := m.GetPendings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *AdminResponse_FlushDb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FlushDb != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.FlushDb.Size()))
		n20, err := m.FlushDb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *AdminResponse_Profile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Profile != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Profile.Size()))
		n21, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *ConfigKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Section) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Section)))
		i += copy(dAtA[i:], m.Section)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Key.Size()))
		n22, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, msg := range m.Key {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ForceSplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceSplitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.RangeId))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ForceSplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceSplitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SplitKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.SplitKey)))
		i += copy(dAtA[i:], m.SplitKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CompactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.RangeId))
	}
	if m.TransactionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.TransactionId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CompactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BeginKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.BeginKey)))
		i += copy(dAtA[i:], m.BeginKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClearQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.QueueType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClearQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cleared != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Cleared))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPendingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ptype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Ptype))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPendingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wait {
		dAtA[i] = 0x8
		i++
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ptype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Ptype))
	}
	if len(m.OutputPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.OutputPath)))
		i += copy(dAtA[i:], m.OutputPath)
	}
	if m.Seconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Seconds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovAdmin(uint64(m.Method))
	}
	if m.Epoch != 0 {
		n += 1 + sovAdmin(uint64(m.Epoch))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest_SetCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetCfg != nil {
		l = m.SetCfg.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_GetCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetCfg != nil {
		l = m.GetCfg.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_GetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetInfo != nil {
		l = m.GetInfo.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_ForceSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceSplit != nil {
		l = m.ForceSplit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_Compaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_ClearQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearQueue != nil {
		l = m.ClearQueue.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_GetPendings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetPendings != nil {
		l = m.GetPendings.Size()
		n += 2 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_FlushDb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlushDb != nil {
		l = m.FlushDb.Size()
		n += 2 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminRequest_Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 2 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAdmin(uint64(m.Code))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponse_SetCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetCfg != nil {
		l = m.SetCfg.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_GetCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetCfg != nil {
		l = m.GetCfg.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_GetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetInfo != nil {
		l = m.GetInfo.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_ForceSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceSplit != nil {
		l = m.ForceSplit.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_Compaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_ClearQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearQueue != nil {
		l = m.ClearQueue.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_GetPendings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetPendings != nil {
		l = m.GetPendings.Size()
		n += 2 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_FlushDb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlushDb != nil {
		l = m.FlushDb.Size()
		n += 2 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *AdminResponse_Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 2 + l + sovAdmin(uint64(l))
	}
	return n
}
func (m *ConfigKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Section)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, e := range m.Key {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForceSplitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovAdmin(uint64(m.RangeId))
	}
	if m.Version != 0 {
		n += 1 + sovAdmin(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForceSplitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SplitKey)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovAdmin(uint64(m.RangeId))
	}
	if m.TransactionId != 0 {
		n += 1 + sovAdmin(uint64(m.TransactionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BeginKey)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueueType != 0 {
		n += 1 + sovAdmin(uint64(m.QueueType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cleared != 0 {
		n += 1 + sovAdmin(uint64(m.Cleared))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPendingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ptype != 0 {
		n += 1 + sovAdmin(uint64(m.Ptype))
	}
	if m.Count != 0 {
		n += 1 + sovAdmin(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPendingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushDBRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wait {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushDBResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ptype != 0 {
		n += 1 + sovAdmin(uint64(m.Ptype))
	}
	l = len(m.OutputPath)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Seconds != 0 {
		n += 1 + sovAdmin(uint64(m.Seconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= AdminAuth_AuthMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &AdminAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetConfigRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_SetCfg{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetConfigRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_GetCfg{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetInfoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_GetInfo{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceSplit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceSplitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_ForceSplit{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompactionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_Compaction{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearQueueRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_ClearQueue{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPendings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetPendingsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_GetPendings{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushDb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlushDBRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_FlushDb{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProfileRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &AdminRequest_Profile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetConfigResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_SetCfg{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetConfigResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_GetCfg{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetInfoResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_GetInfo{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceSplit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceSplitResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_ForceSplit{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompactionResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_Compaction{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearQueueResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_ClearQueue{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPendings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetPendingsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_GetPendings{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushDb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlushDBResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_FlushDb{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProfileResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &AdminResponse_Profile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &ConfigKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigItem{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, &ConfigKey{})
			if err := m.Key[len(m.Key)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigItem{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceSplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceSplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceSplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceSplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceSplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceSplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKey = append(m.SplitKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitKey == nil {
				m.SplitKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginKey = append(m.BeginKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BeginKey == nil {
				m.BeginKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueType", wireType)
			}
			m.QueueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueType |= ClearQueueRequest_QueueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cleared", wireType)
			}
			m.Cleared = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cleared |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPendingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= GetPendingsRequest_PendingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPendingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= ProfileRequest_ProfileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAdmin
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin   = fmt.Errorf("proto: integer overflow")
)
