// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/expr.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExprType int32

const (
	ExprType_Invalid_Expr  ExprType = 0
	ExprType_Column        ExprType = 1
	ExprType_Const_Int     ExprType = 2
	ExprType_Const_UInt    ExprType = 3
	ExprType_Const_Double  ExprType = 4
	ExprType_Const_Bytes   ExprType = 5
	ExprType_Equal         ExprType = 20
	ExprType_NotEqual      ExprType = 21
	ExprType_Less          ExprType = 22
	ExprType_LessOrEqual   ExprType = 23
	ExprType_Larger        ExprType = 24
	ExprType_LargerOrEqual ExprType = 25
	// Aggregation
	ExprType_Avg      ExprType = 151
	ExprType_Count    ExprType = 152
	ExprType_Max      ExprType = 153
	ExprType_Min      ExprType = 154
	ExprType_Sum      ExprType = 155
	ExprType_Std      ExprType = 156
	ExprType_Distinct ExprType = 157
	// Logical Operators
	ExprType_LogicAnd      ExprType = 201
	ExprType_LogicOr       ExprType = 202
	ExprType_LogicNot      ExprType = 203
	ExprType_LogicXor      ExprType = 204
	ExprType_UnaryNot      ExprType = 205
	ExprType_UnaryMinus    ExprType = 206
	ExprType_IsNull        ExprType = 207
	ExprType_DecimalIsNull ExprType = 208
	ExprType_DateIsNull    ExprType = 209
	ExprType_RealIsNull    ExprType = 210
	ExprType_StringIsNull  ExprType = 211
	ExprType_TimeIsNull    ExprType = 212
	ExprType_IntIsNull     ExprType = 213
	ExprType_JsonIsNull    ExprType = 214
	ExprType_IsNotNull     ExprType = 215
	ExprType_IsTrue        ExprType = 216
	ExprType_IsFalse       ExprType = 217
	ExprType_LeftShift     ExprType = 218
	ExprType_RightShift    ExprType = 219
	// casting
	ExprType_CastIntToInt         ExprType = 301
	ExprType_CastIntToReal        ExprType = 302
	ExprType_CastIntToString      ExprType = 303
	ExprType_CastIntToDecimal     ExprType = 304
	ExprType_CastIntToTime        ExprType = 305
	ExprType_CastIntToDate        ExprType = 306
	ExprType_CastIntToJson        ExprType = 307
	ExprType_CastRealToInt        ExprType = 308
	ExprType_CastRealToReal       ExprType = 309
	ExprType_CastRealToString     ExprType = 310
	ExprType_CastRealToDecimal    ExprType = 311
	ExprType_CastRealToTime       ExprType = 312
	ExprType_CastRealToDate       ExprType = 313
	ExprType_CastRealToJson       ExprType = 314
	ExprType_CastDecimalToInt     ExprType = 315
	ExprType_CastDecimalToReal    ExprType = 316
	ExprType_CastDecimalToString  ExprType = 317
	ExprType_CastDecimalToDecimal ExprType = 318
	ExprType_CastDecimalToTime    ExprType = 319
	ExprType_CastDecimalToDate    ExprType = 320
	ExprType_CastDecimalToJson    ExprType = 321
	ExprType_CastStringToInt      ExprType = 322
	ExprType_CastStringToReal     ExprType = 323
	ExprType_CastStringToString   ExprType = 324
	ExprType_CastStringToDecimal  ExprType = 325
	ExprType_CastStringToTime     ExprType = 326
	ExprType_CastStringToDate     ExprType = 327
	ExprType_CastStringToJson     ExprType = 328
	ExprType_CastTimeToInt        ExprType = 329
	ExprType_CastTimeToReal       ExprType = 330
	ExprType_CastTimeToString     ExprType = 331
	ExprType_CastTimeToDecimal    ExprType = 332
	ExprType_CastTimeToTime       ExprType = 333
	ExprType_CastTimeToDate       ExprType = 334
	ExprType_CastTimeToJson       ExprType = 335
	ExprType_CastDateToInt        ExprType = 336
	ExprType_CastDateToReal       ExprType = 337
	ExprType_CastDateToString     ExprType = 338
	ExprType_CastDateToDecimal    ExprType = 339
	ExprType_CastDateToTime       ExprType = 340
	ExprType_CastDateToDate       ExprType = 341
	ExprType_CastDateToJson       ExprType = 342
	ExprType_CastJsonToInt        ExprType = 343
	ExprType_CastJsonToReal       ExprType = 344
	ExprType_CastJsonToString     ExprType = 345
	ExprType_CastJsonToDecimal    ExprType = 346
	ExprType_CastJsonToTime       ExprType = 347
	ExprType_CastJsonToDate       ExprType = 348
	ExprType_CastJsonToJson       ExprType = 349
	// Comparison Functions and Operators
	ExprType_Coalesce              ExprType = 401
	ExprType_EqualInt              ExprType = 402
	ExprType_EqualReal             ExprType = 403
	ExprType_EqualString           ExprType = 404
	ExprType_EqualDecimal          ExprType = 405
	ExprType_EqualTime             ExprType = 406
	ExprType_EqualDate             ExprType = 407
	ExprType_EqualJson             ExprType = 408
	ExprType_NotEqualInt           ExprType = 409
	ExprType_NotEqualReal          ExprType = 410
	ExprType_NotEqualDecimal       ExprType = 411
	ExprType_NotEqualString        ExprType = 412
	ExprType_NotEqualTime          ExprType = 413
	ExprType_NotEqualDate          ExprType = 414
	ExprType_NotEqualJson          ExprType = 415
	ExprType_LessInt               ExprType = 416
	ExprType_LessReal              ExprType = 417
	ExprType_LessDecimal           ExprType = 418
	ExprType_LessString            ExprType = 419
	ExprType_LessTime              ExprType = 420
	ExprType_LessDate              ExprType = 421
	ExprType_LessJson              ExprType = 422
	ExprType_LessOrEqualInt        ExprType = 423
	ExprType_LessOrEqualReal       ExprType = 424
	ExprType_LessOrEqualDecimal    ExprType = 425
	ExprType_LessOrEqualString     ExprType = 426
	ExprType_LessOrEqualTime       ExprType = 427
	ExprType_LessOrEqualDate       ExprType = 428
	ExprType_LessOrEqualJson       ExprType = 429
	ExprType_GreaterInt            ExprType = 430
	ExprType_GreaterReal           ExprType = 431
	ExprType_GreaterDecimal        ExprType = 432
	ExprType_GreaterString         ExprType = 433
	ExprType_GreaterTime           ExprType = 434
	ExprType_GreaterDate           ExprType = 435
	ExprType_GreaterJson           ExprType = 436
	ExprType_GreaterOrEqualInt     ExprType = 437
	ExprType_GreaterOrEqualReal    ExprType = 438
	ExprType_GreaterOrEqualDecimal ExprType = 439
	ExprType_GreaterOrEqualString  ExprType = 440
	ExprType_GreaterOrEqualTime    ExprType = 441
	ExprType_GreaterOrEqualDate    ExprType = 442
	ExprType_GreaterOrEqualJson    ExprType = 443
	ExprType_Like                  ExprType = 444
	ExprType_NotLike               ExprType = 445
	ExprType_RegexpLike            ExprType = 446
	ExprType_Regexp                ExprType = 447
	ExprType_NotRegexp             ExprType = 448
	ExprType_IN                    ExprType = 449
	// Arithmetic Operator
	ExprType_Plus            ExprType = 551
	ExprType_PlusReal        ExprType = 552
	ExprType_PlusDecimal     ExprType = 553
	ExprType_PlusInt         ExprType = 554
	ExprType_Minus           ExprType = 561
	ExprType_MinusReal       ExprType = 562
	ExprType_MinusDecimal    ExprType = 563
	ExprType_MinusInt        ExprType = 564
	ExprType_Mult            ExprType = 571
	ExprType_MultReal        ExprType = 572
	ExprType_MultDecimal     ExprType = 573
	ExprType_MultInt         ExprType = 574
	ExprType_MultIntUnsigned ExprType = 575
	ExprType_Div             ExprType = 581
	ExprType_DivReal         ExprType = 582
	ExprType_DivDecimal      ExprType = 583
	ExprType_IntDivInt       ExprType = 584
	ExprType_IntDivDecimal   ExprType = 585
	ExprType_Mod             ExprType = 591
	ExprType_ModReal         ExprType = 592
	ExprType_ModDecimal      ExprType = 593
	ExprType_ModInt          ExprType = 594
	// Mathematical Functions
	ExprType_Abs      ExprType = 701
	ExprType_Ceil     ExprType = 702
	ExprType_Floor    ExprType = 703
	ExprType_Round    ExprType = 704
	ExprType_Rand     ExprType = 705
	ExprType_Conv     ExprType = 706
	ExprType_CRC32    ExprType = 707
	ExprType_Degrees  ExprType = 708
	ExprType_Exp      ExprType = 709
	ExprType_Acos     ExprType = 710
	ExprType_Asin     ExprType = 711
	ExprType_Atan     ExprType = 712
	ExprType_Atan2    ExprType = 713
	ExprType_Cos      ExprType = 714
	ExprType_Cot      ExprType = 715
	ExprType_Ln       ExprType = 716
	ExprType_Log      ExprType = 717
	ExprType_Log10    ExprType = 718
	ExprType_Log2     ExprType = 719
	ExprType_PI       ExprType = 720
	ExprType_Pow      ExprType = 721
	ExprType_Radians  ExprType = 722
	ExprType_Sign     ExprType = 723
	ExprType_Sin      ExprType = 724
	ExprType_Sqrt     ExprType = 725
	ExprType_Tan      ExprType = 726
	ExprType_Truncate ExprType = 727
	// control flow functions
	ExprType_CaseWhen   ExprType = 751
	ExprType_If         ExprType = 752
	ExprType_IfInt      ExprType = 753
	ExprType_IfReal     ExprType = 754
	ExprType_IfDecimal  ExprType = 755
	ExprType_IfString   ExprType = 756
	ExprType_IfTime     ExprType = 757
	ExprType_IfDate     ExprType = 758
	ExprType_IfNullJson ExprType = 759
	ExprType_IfJson     ExprType = 760
	ExprType_IfNull     ExprType = 761
	// Encryption and Compression Functions
	ExprType_Aes_decrypt ExprType = 901
	ExprType_Aes_encrypt ExprType = 902
	ExprType_Compress    ExprType = 903
	ExprType_Uncompress  ExprType = 904
	ExprType_Md5         ExprType = 905
	ExprType_Password    ExprType = 906
	ExprType_SHA1        ExprType = 907
	ExprType_SHA2        ExprType = 908
	// String Comparison Functions and Operators
	ExprType_Ascii            ExprType = 1201
	ExprType_Bin              ExprType = 1202
	ExprType_Bit_length       ExprType = 1203
	ExprType_Char             ExprType = 1204
	ExprType_Char_length      ExprType = 1205
	ExprType_Character_length ExprType = 1206
	ExprType_Concat           ExprType = 1207
	ExprType_Concat_ws        ExprType = 1208
	ExprType_Elt              ExprType = 1209
	ExprType_Export_set       ExprType = 1210
	ExprType_Field            ExprType = 1211
	ExprType_Find_in_set      ExprType = 1212
	ExprType_Format           ExprType = 1213
	ExprType_From_base64      ExprType = 1214
	ExprType_Hex              ExprType = 1215
	ExprType_Insert           ExprType = 1216
	ExprType_Instr            ExprType = 1217
	ExprType_Lcase            ExprType = 1218
	ExprType_Left             ExprType = 1219
	ExprType_Length           ExprType = 1220
	ExprType_Str_Like         ExprType = 1221
	ExprType_Load_file        ExprType = 1222
	ExprType_Locate           ExprType = 1223
	ExprType_Lower            ExprType = 1224
	ExprType_Lpad             ExprType = 1225
	ExprType_Ltrim            ExprType = 1226
	ExprType_Make_set         ExprType = 1227
	ExprType_Match            ExprType = 1228
	ExprType_Mid              ExprType = 1229
	ExprType_Str_Not_like     ExprType = 1230
	ExprType_Str_Not_regexp   ExprType = 1231
	ExprType_Oct              ExprType = 1232
	ExprType_Octet_length     ExprType = 1233
	ExprType_Ord              ExprType = 1234
	ExprType_Position         ExprType = 1235
	ExprType_Quote            ExprType = 1236
	ExprType_StrRegexp        ExprType = 1237
	ExprType_Repeat           ExprType = 1238
	ExprType_Replace          ExprType = 1239
	ExprType_Reverse          ExprType = 1240
	ExprType_Right            ExprType = 1241
	ExprType_Rlike            ExprType = 1242
	ExprType_Rpad             ExprType = 1243
	ExprType_Rtrim            ExprType = 1244
	ExprType_Soundex          ExprType = 1245
	ExprType_SoundsLike       ExprType = 1246
	ExprType_Space            ExprType = 1247
	ExprType_Strcmp           ExprType = 1248
	ExprType_Substr           ExprType = 1249
	ExprType_Substring        ExprType = 1250
	ExprType_SubstringIndex   ExprType = 1251
	ExprType_ToBase64         ExprType = 1252
	ExprType_Trim             ExprType = 1253
	ExprType_Ucase            ExprType = 1254
	ExprType_Unhex            ExprType = 1255
	ExprType_Upper            ExprType = 1256
	ExprType_WeightString     ExprType = 1257
	// Date and Time Functions
	ExprType_Adddate          ExprType = 2001
	ExprType_Addtime          ExprType = 2002
	ExprType_Convert_tz       ExprType = 2003
	ExprType_Curdate          ExprType = 2004
	ExprType_CurrentDate      ExprType = 2005
	ExprType_CurrentTime      ExprType = 2006
	ExprType_CurrentTimestamp ExprType = 2007
	ExprType_Curtime          ExprType = 2008
	ExprType_Date             ExprType = 2009
	ExprType_Date_add         ExprType = 2010
	ExprType_Date_format      ExprType = 2011
	ExprType_Date_sub         ExprType = 2012
	ExprType_Datediff         ExprType = 2013
	ExprType_Day              ExprType = 2014
	ExprType_Dayname          ExprType = 2015
	ExprType_Dayofmonth       ExprType = 2016
	ExprType_Dayofweek        ExprType = 2017
	ExprType_Dayofyear        ExprType = 2018
	ExprType_Extract          ExprType = 2019
	ExprType_From_days        ExprType = 2020
	ExprType_From_unixtime    ExprType = 2021
	ExprType_Get_format       ExprType = 2022
	ExprType_Hour             ExprType = 2023
	ExprType_Last_day         ExprType = 2024
	ExprType_Localtime        ExprType = 2025
	ExprType_Localtimestamp   ExprType = 2026
	ExprType_Makedate         ExprType = 2027
	ExprType_Maketime         ExprType = 2028
	ExprType_Microsecond      ExprType = 2029
	ExprType_Minute           ExprType = 2030
	ExprType_Month            ExprType = 2031
	ExprType_Monthname        ExprType = 2032
	ExprType_Now              ExprType = 2033
	ExprType_Period_add       ExprType = 2034
	ExprType_Period_diff      ExprType = 2035
	ExprType_Quarter          ExprType = 2036
	ExprType_Sec_to_time      ExprType = 2037
	ExprType_Second           ExprType = 2038
	ExprType_Str_to_date      ExprType = 2039
	ExprType_Subdate          ExprType = 2040
	ExprType_Subtime          ExprType = 2041
	ExprType_Sysdate          ExprType = 2042
	ExprType_Time             ExprType = 2043
	ExprType_Time_format      ExprType = 2044
	ExprType_Time_to_sec      ExprType = 2045
	ExprType_Timediff         ExprType = 2046
	ExprType_Timestamp        ExprType = 2047
	ExprType_Timestampadd     ExprType = 2048
	ExprType_Timestampdiff    ExprType = 2049
	ExprType_To_days          ExprType = 2050
	ExprType_To_seconds       ExprType = 2051
	ExprType_Unix_timestamp   ExprType = 2052
	ExprType_Utc_date         ExprType = 2053
	ExprType_Utc_time         ExprType = 2054
	ExprType_Utc_timestamp    ExprType = 2055
	ExprType_Week             ExprType = 2056
	ExprType_Weekday          ExprType = 2057
	ExprType_Weekofyear       ExprType = 2058
	ExprType_Year             ExprType = 2059
	ExprType_Yearweek         ExprType = 2060
)

var ExprType_name = map[int32]string{
	0:    "Invalid_Expr",
	1:    "Column",
	2:    "Const_Int",
	3:    "Const_UInt",
	4:    "Const_Double",
	5:    "Const_Bytes",
	20:   "Equal",
	21:   "NotEqual",
	22:   "Less",
	23:   "LessOrEqual",
	24:   "Larger",
	25:   "LargerOrEqual",
	151:  "Avg",
	152:  "Count",
	153:  "Max",
	154:  "Min",
	155:  "Sum",
	156:  "Std",
	157:  "Distinct",
	201:  "LogicAnd",
	202:  "LogicOr",
	203:  "LogicNot",
	204:  "LogicXor",
	205:  "UnaryNot",
	206:  "UnaryMinus",
	207:  "IsNull",
	208:  "DecimalIsNull",
	209:  "DateIsNull",
	210:  "RealIsNull",
	211:  "StringIsNull",
	212:  "TimeIsNull",
	213:  "IntIsNull",
	214:  "JsonIsNull",
	215:  "IsNotNull",
	216:  "IsTrue",
	217:  "IsFalse",
	218:  "LeftShift",
	219:  "RightShift",
	301:  "CastIntToInt",
	302:  "CastIntToReal",
	303:  "CastIntToString",
	304:  "CastIntToDecimal",
	305:  "CastIntToTime",
	306:  "CastIntToDate",
	307:  "CastIntToJson",
	308:  "CastRealToInt",
	309:  "CastRealToReal",
	310:  "CastRealToString",
	311:  "CastRealToDecimal",
	312:  "CastRealToTime",
	313:  "CastRealToDate",
	314:  "CastRealToJson",
	315:  "CastDecimalToInt",
	316:  "CastDecimalToReal",
	317:  "CastDecimalToString",
	318:  "CastDecimalToDecimal",
	319:  "CastDecimalToTime",
	320:  "CastDecimalToDate",
	321:  "CastDecimalToJson",
	322:  "CastStringToInt",
	323:  "CastStringToReal",
	324:  "CastStringToString",
	325:  "CastStringToDecimal",
	326:  "CastStringToTime",
	327:  "CastStringToDate",
	328:  "CastStringToJson",
	329:  "CastTimeToInt",
	330:  "CastTimeToReal",
	331:  "CastTimeToString",
	332:  "CastTimeToDecimal",
	333:  "CastTimeToTime",
	334:  "CastTimeToDate",
	335:  "CastTimeToJson",
	336:  "CastDateToInt",
	337:  "CastDateToReal",
	338:  "CastDateToString",
	339:  "CastDateToDecimal",
	340:  "CastDateToTime",
	341:  "CastDateToDate",
	342:  "CastDateToJson",
	343:  "CastJsonToInt",
	344:  "CastJsonToReal",
	345:  "CastJsonToString",
	346:  "CastJsonToDecimal",
	347:  "CastJsonToTime",
	348:  "CastJsonToDate",
	349:  "CastJsonToJson",
	401:  "Coalesce",
	402:  "EqualInt",
	403:  "EqualReal",
	404:  "EqualString",
	405:  "EqualDecimal",
	406:  "EqualTime",
	407:  "EqualDate",
	408:  "EqualJson",
	409:  "NotEqualInt",
	410:  "NotEqualReal",
	411:  "NotEqualDecimal",
	412:  "NotEqualString",
	413:  "NotEqualTime",
	414:  "NotEqualDate",
	415:  "NotEqualJson",
	416:  "LessInt",
	417:  "LessReal",
	418:  "LessDecimal",
	419:  "LessString",
	420:  "LessTime",
	421:  "LessDate",
	422:  "LessJson",
	423:  "LessOrEqualInt",
	424:  "LessOrEqualReal",
	425:  "LessOrEqualDecimal",
	426:  "LessOrEqualString",
	427:  "LessOrEqualTime",
	428:  "LessOrEqualDate",
	429:  "LessOrEqualJson",
	430:  "GreaterInt",
	431:  "GreaterReal",
	432:  "GreaterDecimal",
	433:  "GreaterString",
	434:  "GreaterTime",
	435:  "GreaterDate",
	436:  "GreaterJson",
	437:  "GreaterOrEqualInt",
	438:  "GreaterOrEqualReal",
	439:  "GreaterOrEqualDecimal",
	440:  "GreaterOrEqualString",
	441:  "GreaterOrEqualTime",
	442:  "GreaterOrEqualDate",
	443:  "GreaterOrEqualJson",
	444:  "Like",
	445:  "NotLike",
	446:  "RegexpLike",
	447:  "Regexp",
	448:  "NotRegexp",
	449:  "IN",
	551:  "Plus",
	552:  "PlusReal",
	553:  "PlusDecimal",
	554:  "PlusInt",
	561:  "Minus",
	562:  "MinusReal",
	563:  "MinusDecimal",
	564:  "MinusInt",
	571:  "Mult",
	572:  "MultReal",
	573:  "MultDecimal",
	574:  "MultInt",
	575:  "MultIntUnsigned",
	581:  "Div",
	582:  "DivReal",
	583:  "DivDecimal",
	584:  "IntDivInt",
	585:  "IntDivDecimal",
	591:  "Mod",
	592:  "ModReal",
	593:  "ModDecimal",
	594:  "ModInt",
	701:  "Abs",
	702:  "Ceil",
	703:  "Floor",
	704:  "Round",
	705:  "Rand",
	706:  "Conv",
	707:  "CRC32",
	708:  "Degrees",
	709:  "Exp",
	710:  "Acos",
	711:  "Asin",
	712:  "Atan",
	713:  "Atan2",
	714:  "Cos",
	715:  "Cot",
	716:  "Ln",
	717:  "Log",
	718:  "Log10",
	719:  "Log2",
	720:  "PI",
	721:  "Pow",
	722:  "Radians",
	723:  "Sign",
	724:  "Sin",
	725:  "Sqrt",
	726:  "Tan",
	727:  "Truncate",
	751:  "CaseWhen",
	752:  "If",
	753:  "IfInt",
	754:  "IfReal",
	755:  "IfDecimal",
	756:  "IfString",
	757:  "IfTime",
	758:  "IfDate",
	759:  "IfNullJson",
	760:  "IfJson",
	761:  "IfNull",
	901:  "Aes_decrypt",
	902:  "Aes_encrypt",
	903:  "Compress",
	904:  "Uncompress",
	905:  "Md5",
	906:  "Password",
	907:  "SHA1",
	908:  "SHA2",
	1201: "Ascii",
	1202: "Bin",
	1203: "Bit_length",
	1204: "Char",
	1205: "Char_length",
	1206: "Character_length",
	1207: "Concat",
	1208: "Concat_ws",
	1209: "Elt",
	1210: "Export_set",
	1211: "Field",
	1212: "Find_in_set",
	1213: "Format",
	1214: "From_base64",
	1215: "Hex",
	1216: "Insert",
	1217: "Instr",
	1218: "Lcase",
	1219: "Left",
	1220: "Length",
	1221: "Str_Like",
	1222: "Load_file",
	1223: "Locate",
	1224: "Lower",
	1225: "Lpad",
	1226: "Ltrim",
	1227: "Make_set",
	1228: "Match",
	1229: "Mid",
	1230: "Str_Not_like",
	1231: "Str_Not_regexp",
	1232: "Oct",
	1233: "Octet_length",
	1234: "Ord",
	1235: "Position",
	1236: "Quote",
	1237: "StrRegexp",
	1238: "Repeat",
	1239: "Replace",
	1240: "Reverse",
	1241: "Right",
	1242: "Rlike",
	1243: "Rpad",
	1244: "Rtrim",
	1245: "Soundex",
	1246: "SoundsLike",
	1247: "Space",
	1248: "Strcmp",
	1249: "Substr",
	1250: "Substring",
	1251: "SubstringIndex",
	1252: "ToBase64",
	1253: "Trim",
	1254: "Ucase",
	1255: "Unhex",
	1256: "Upper",
	1257: "WeightString",
	2001: "Adddate",
	2002: "Addtime",
	2003: "Convert_tz",
	2004: "Curdate",
	2005: "CurrentDate",
	2006: "CurrentTime",
	2007: "CurrentTimestamp",
	2008: "Curtime",
	2009: "Date",
	2010: "Date_add",
	2011: "Date_format",
	2012: "Date_sub",
	2013: "Datediff",
	2014: "Day",
	2015: "Dayname",
	2016: "Dayofmonth",
	2017: "Dayofweek",
	2018: "Dayofyear",
	2019: "Extract",
	2020: "From_days",
	2021: "From_unixtime",
	2022: "Get_format",
	2023: "Hour",
	2024: "Last_day",
	2025: "Localtime",
	2026: "Localtimestamp",
	2027: "Makedate",
	2028: "Maketime",
	2029: "Microsecond",
	2030: "Minute",
	2031: "Month",
	2032: "Monthname",
	2033: "Now",
	2034: "Period_add",
	2035: "Period_diff",
	2036: "Quarter",
	2037: "Sec_to_time",
	2038: "Second",
	2039: "Str_to_date",
	2040: "Subdate",
	2041: "Subtime",
	2042: "Sysdate",
	2043: "Time",
	2044: "Time_format",
	2045: "Time_to_sec",
	2046: "Timediff",
	2047: "Timestamp",
	2048: "Timestampadd",
	2049: "Timestampdiff",
	2050: "To_days",
	2051: "To_seconds",
	2052: "Unix_timestamp",
	2053: "Utc_date",
	2054: "Utc_time",
	2055: "Utc_timestamp",
	2056: "Week",
	2057: "Weekday",
	2058: "Weekofyear",
	2059: "Year",
	2060: "Yearweek",
}

var ExprType_value = map[string]int32{
	"Invalid_Expr":          0,
	"Column":                1,
	"Const_Int":             2,
	"Const_UInt":            3,
	"Const_Double":          4,
	"Const_Bytes":           5,
	"Equal":                 20,
	"NotEqual":              21,
	"Less":                  22,
	"LessOrEqual":           23,
	"Larger":                24,
	"LargerOrEqual":         25,
	"Avg":                   151,
	"Count":                 152,
	"Max":                   153,
	"Min":                   154,
	"Sum":                   155,
	"Std":                   156,
	"Distinct":              157,
	"LogicAnd":              201,
	"LogicOr":               202,
	"LogicNot":              203,
	"LogicXor":              204,
	"UnaryNot":              205,
	"UnaryMinus":            206,
	"IsNull":                207,
	"DecimalIsNull":         208,
	"DateIsNull":            209,
	"RealIsNull":            210,
	"StringIsNull":          211,
	"TimeIsNull":            212,
	"IntIsNull":             213,
	"JsonIsNull":            214,
	"IsNotNull":             215,
	"IsTrue":                216,
	"IsFalse":               217,
	"LeftShift":             218,
	"RightShift":            219,
	"CastIntToInt":          301,
	"CastIntToReal":         302,
	"CastIntToString":       303,
	"CastIntToDecimal":      304,
	"CastIntToTime":         305,
	"CastIntToDate":         306,
	"CastIntToJson":         307,
	"CastRealToInt":         308,
	"CastRealToReal":        309,
	"CastRealToString":      310,
	"CastRealToDecimal":     311,
	"CastRealToTime":        312,
	"CastRealToDate":        313,
	"CastRealToJson":        314,
	"CastDecimalToInt":      315,
	"CastDecimalToReal":     316,
	"CastDecimalToString":   317,
	"CastDecimalToDecimal":  318,
	"CastDecimalToTime":     319,
	"CastDecimalToDate":     320,
	"CastDecimalToJson":     321,
	"CastStringToInt":       322,
	"CastStringToReal":      323,
	"CastStringToString":    324,
	"CastStringToDecimal":   325,
	"CastStringToTime":      326,
	"CastStringToDate":      327,
	"CastStringToJson":      328,
	"CastTimeToInt":         329,
	"CastTimeToReal":        330,
	"CastTimeToString":      331,
	"CastTimeToDecimal":     332,
	"CastTimeToTime":        333,
	"CastTimeToDate":        334,
	"CastTimeToJson":        335,
	"CastDateToInt":         336,
	"CastDateToReal":        337,
	"CastDateToString":      338,
	"CastDateToDecimal":     339,
	"CastDateToTime":        340,
	"CastDateToDate":        341,
	"CastDateToJson":        342,
	"CastJsonToInt":         343,
	"CastJsonToReal":        344,
	"CastJsonToString":      345,
	"CastJsonToDecimal":     346,
	"CastJsonToTime":        347,
	"CastJsonToDate":        348,
	"CastJsonToJson":        349,
	"Coalesce":              401,
	"EqualInt":              402,
	"EqualReal":             403,
	"EqualString":           404,
	"EqualDecimal":          405,
	"EqualTime":             406,
	"EqualDate":             407,
	"EqualJson":             408,
	"NotEqualInt":           409,
	"NotEqualReal":          410,
	"NotEqualDecimal":       411,
	"NotEqualString":        412,
	"NotEqualTime":          413,
	"NotEqualDate":          414,
	"NotEqualJson":          415,
	"LessInt":               416,
	"LessReal":              417,
	"LessDecimal":           418,
	"LessString":            419,
	"LessTime":              420,
	"LessDate":              421,
	"LessJson":              422,
	"LessOrEqualInt":        423,
	"LessOrEqualReal":       424,
	"LessOrEqualDecimal":    425,
	"LessOrEqualString":     426,
	"LessOrEqualTime":       427,
	"LessOrEqualDate":       428,
	"LessOrEqualJson":       429,
	"GreaterInt":            430,
	"GreaterReal":           431,
	"GreaterDecimal":        432,
	"GreaterString":         433,
	"GreaterTime":           434,
	"GreaterDate":           435,
	"GreaterJson":           436,
	"GreaterOrEqualInt":     437,
	"GreaterOrEqualReal":    438,
	"GreaterOrEqualDecimal": 439,
	"GreaterOrEqualString":  440,
	"GreaterOrEqualTime":    441,
	"GreaterOrEqualDate":    442,
	"GreaterOrEqualJson":    443,
	"Like":                  444,
	"NotLike":               445,
	"RegexpLike":            446,
	"Regexp":                447,
	"NotRegexp":             448,
	"IN":                    449,
	"Plus":                  551,
	"PlusReal":              552,
	"PlusDecimal":           553,
	"PlusInt":               554,
	"Minus":                 561,
	"MinusReal":             562,
	"MinusDecimal":          563,
	"MinusInt":              564,
	"Mult":                  571,
	"MultReal":              572,
	"MultDecimal":           573,
	"MultInt":               574,
	"MultIntUnsigned":       575,
	"Div":                   581,
	"DivReal":               582,
	"DivDecimal":            583,
	"IntDivInt":             584,
	"IntDivDecimal":         585,
	"Mod":                   591,
	"ModReal":               592,
	"ModDecimal":            593,
	"ModInt":                594,
	"Abs":                   701,
	"Ceil":                  702,
	"Floor":                 703,
	"Round":                 704,
	"Rand":                  705,
	"Conv":                  706,
	"CRC32":                 707,
	"Degrees":               708,
	"Exp":                   709,
	"Acos":                  710,
	"Asin":                  711,
	"Atan":                  712,
	"Atan2":                 713,
	"Cos":                   714,
	"Cot":                   715,
	"Ln":                    716,
	"Log":                   717,
	"Log10":                 718,
	"Log2":                  719,
	"PI":                    720,
	"Pow":                   721,
	"Radians":               722,
	"Sign":                  723,
	"Sin":                   724,
	"Sqrt":                  725,
	"Tan":                   726,
	"Truncate":              727,
	"CaseWhen":              751,
	"If":                    752,
	"IfInt":                 753,
	"IfReal":                754,
	"IfDecimal":             755,
	"IfString":              756,
	"IfTime":                757,
	"IfDate":                758,
	"IfNullJson":            759,
	"IfJson":                760,
	"IfNull":                761,
	"Aes_decrypt":           901,
	"Aes_encrypt":           902,
	"Compress":              903,
	"Uncompress":            904,
	"Md5":                   905,
	"Password":              906,
	"SHA1":                  907,
	"SHA2":                  908,
	"Ascii":                 1201,
	"Bin":                   1202,
	"Bit_length":            1203,
	"Char":                  1204,
	"Char_length":           1205,
	"Character_length":      1206,
	"Concat":                1207,
	"Concat_ws":             1208,
	"Elt":                   1209,
	"Export_set":            1210,
	"Field":                 1211,
	"Find_in_set":           1212,
	"Format":                1213,
	"From_base64":           1214,
	"Hex":                   1215,
	"Insert":                1216,
	"Instr":                 1217,
	"Lcase":                 1218,
	"Left":                  1219,
	"Length":                1220,
	"Str_Like":              1221,
	"Load_file":             1222,
	"Locate":                1223,
	"Lower":                 1224,
	"Lpad":                  1225,
	"Ltrim":                 1226,
	"Make_set":              1227,
	"Match":                 1228,
	"Mid":                   1229,
	"Str_Not_like":          1230,
	"Str_Not_regexp":        1231,
	"Oct":                   1232,
	"Octet_length":          1233,
	"Ord":                   1234,
	"Position":              1235,
	"Quote":                 1236,
	"StrRegexp":             1237,
	"Repeat":                1238,
	"Replace":               1239,
	"Reverse":               1240,
	"Right":                 1241,
	"Rlike":                 1242,
	"Rpad":                  1243,
	"Rtrim":                 1244,
	"Soundex":               1245,
	"SoundsLike":            1246,
	"Space":                 1247,
	"Strcmp":                1248,
	"Substr":                1249,
	"Substring":             1250,
	"SubstringIndex":        1251,
	"ToBase64":              1252,
	"Trim":                  1253,
	"Ucase":                 1254,
	"Unhex":                 1255,
	"Upper":                 1256,
	"WeightString":          1257,
	"Adddate":               2001,
	"Addtime":               2002,
	"Convert_tz":            2003,
	"Curdate":               2004,
	"CurrentDate":           2005,
	"CurrentTime":           2006,
	"CurrentTimestamp":      2007,
	"Curtime":               2008,
	"Date":                  2009,
	"Date_add":              2010,
	"Date_format":           2011,
	"Date_sub":              2012,
	"Datediff":              2013,
	"Day":                   2014,
	"Dayname":               2015,
	"Dayofmonth":            2016,
	"Dayofweek":             2017,
	"Dayofyear":             2018,
	"Extract":               2019,
	"From_days":             2020,
	"From_unixtime":         2021,
	"Get_format":            2022,
	"Hour":                  2023,
	"Last_day":              2024,
	"Localtime":             2025,
	"Localtimestamp":        2026,
	"Makedate":              2027,
	"Maketime":              2028,
	"Microsecond":           2029,
	"Minute":                2030,
	"Month":                 2031,
	"Monthname":             2032,
	"Now":                   2033,
	"Period_add":            2034,
	"Period_diff":           2035,
	"Quarter":               2036,
	"Sec_to_time":           2037,
	"Second":                2038,
	"Str_to_date":           2039,
	"Subdate":               2040,
	"Subtime":               2041,
	"Sysdate":               2042,
	"Time":                  2043,
	"Time_format":           2044,
	"Time_to_sec":           2045,
	"Timediff":              2046,
	"Timestamp":             2047,
	"Timestampadd":          2048,
	"Timestampdiff":         2049,
	"To_days":               2050,
	"To_seconds":            2051,
	"Unix_timestamp":        2052,
	"Utc_date":              2053,
	"Utc_time":              2054,
	"Utc_timestamp":         2055,
	"Week":                  2056,
	"Weekday":               2057,
	"Weekofyear":            2058,
	"Year":                  2059,
	"Yearweek":              2060,
}

func (x ExprType) String() string {
	return proto.EnumName(ExprType_name, int32(x))
}

func (ExprType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0afc6c6dc0dcd2bb, []int{0}
}

type ColumnInfo struct {
	Id                   uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ                  basepb.DataType `protobuf:"varint,2,opt,name=typ,proto3,enum=basepb.DataType" json:"typ,omitempty"`
	Unsigned             bool            `protobuf:"varint,3,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ColumnInfo) Reset()         { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()    {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afc6c6dc0dcd2bb, []int{0}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(m, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ColumnInfo) GetTyp() basepb.DataType {
	if m != nil {
		return m.Typ
	}
	return basepb.DataType_Invalid
}

func (m *ColumnInfo) GetUnsigned() bool {
	if m != nil {
		return m.Unsigned
	}
	return false
}

type Expr struct {
	ExprType             ExprType    `protobuf:"varint,1,opt,name=expr_type,json=exprType,proto3,enum=dspb.ExprType" json:"expr_type,omitempty"`
	Column               *ColumnInfo `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	Value                []byte      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Child                []*Expr     `protobuf:"bytes,4,rep,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Expr) Reset()         { *m = Expr{} }
func (m *Expr) String() string { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()    {}
func (*Expr) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afc6c6dc0dcd2bb, []int{1}
}
func (m *Expr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expr.Merge(m, src)
}
func (m *Expr) XXX_Size() int {
	return m.Size()
}
func (m *Expr) XXX_DiscardUnknown() {
	xxx_messageInfo_Expr.DiscardUnknown(m)
}

var xxx_messageInfo_Expr proto.InternalMessageInfo

func (m *Expr) GetExprType() ExprType {
	if m != nil {
		return m.ExprType
	}
	return ExprType_Invalid_Expr
}

func (m *Expr) GetColumn() *ColumnInfo {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *Expr) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Expr) GetChild() []*Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterEnum("dspb.ExprType", ExprType_name, ExprType_value)
	proto.RegisterType((*ColumnInfo)(nil), "dspb.ColumnInfo")
	proto.RegisterType((*Expr)(nil), "dspb.Expr")
}

func init() { proto.RegisterFile("dspb/expr.proto", fileDescriptor_0afc6c6dc0dcd2bb) }

var fileDescriptor_0afc6c6dc0dcd2bb = []byte{
	// 2602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x58, 0x57, 0x90, 0x1c, 0xc5,
	0x19, 0x66, 0x93, 0xee, 0x76, 0x24, 0xdd, 0xfe, 0x0c, 0x02, 0x04, 0x0f, 0x2a, 0x15, 0x4f, 0x2a,
	0xbb, 0x4a, 0x98, 0xc3, 0xe6, 0xfd, 0x74, 0x27, 0xc1, 0xba, 0xf6, 0x4e, 0xe2, 0xf6, 0x54, 0xd8,
	0x55, 0xae, 0xda, 0x9a, 0x9b, 0xe9, 0xdd, 0x9d, 0x62, 0x77, 0x7a, 0x99, 0xe9, 0x39, 0xed, 0xfa,
	0xc9, 0x89, 0xcc, 0x8b, 0x03, 0x26, 0x3b, 0xdb, 0xd8, 0xd8, 0x80, 0x25, 0x91, 0x85, 0x12, 0xa0,
	0x9c, 0x4e, 0x39, 0x11, 0x45, 0x76, 0x22, 0x27, 0xe7, 0xfa, 0xbf, 0x9e, 0x99, 0xbd, 0x5b, 0xe9,
	0xe9, 0xfa, 0xfb, 0xfa, 0x0f, 0xdf, 0xff, 0x77, 0xf7, 0x74, 0xef, 0x19, 0x05, 0x27, 0x68, 0x4d,
	0x5e, 0x2e, 0xda, 0x2d, 0x7f, 0x69, 0xcb, 0x97, 0x4a, 0x9a, 0x59, 0x26, 0x2e, 0xbd, 0xaa, 0xe6,
	0xaa, 0x7a, 0x38, 0xb9, 0xd4, 0x96, 0xcd, 0xcb, 0xed, 0x7a, 0x38, 0x69, 0x49, 0x67, 0xb2, 0x3b,
	0x80, 0xe5, 0xe5, 0x93, 0x56, 0x20, 0x5a, 0x93, 0xd1, 0x1f, 0xed, 0x7d, 0xd9, 0xb7, 0x0c, 0x63,
	0x58, 0x36, 0xc2, 0xa6, 0x57, 0xf4, 0xaa, 0xd2, 0x1c, 0x30, 0xd2, 0xae, 0xb3, 0x30, 0xb5, 0x38,
	0xb5, 0x64, 0xfe, 0x78, 0xda, 0x75, 0xcc, 0xcb, 0x8c, 0x8c, 0xea, 0xb4, 0x16, 0xa6, 0x17, 0xa7,
	0x96, 0x0c, 0x0c, 0xd2, 0xd2, 0xc8, 0x73, 0xc4, 0x52, 0xd6, 0x44, 0xa7, 0x25, 0xc6, 0x79, 0xd2,
	0xbc, 0xd4, 0xe8, 0x0f, 0xbd, 0xc0, 0xad, 0x79, 0xc2, 0x59, 0x98, 0x59, 0x9c, 0x5a, 0xd2, 0x3f,
	0x9e, 0xe0, 0xcb, 0xee, 0x4c, 0x19, 0xd9, 0xe5, 0xed, 0x96, 0x6f, 0x7e, 0xd9, 0xc8, 0xb3, 0xe4,
	0x8a, 0xea, 0xb4, 0x04, 0xe2, 0x0f, 0x0c, 0x0e, 0x2c, 0x65, 0xe1, 0x4b, 0x79, 0x1a, 0xc1, 0xfa,
	0x45, 0x34, 0x32, 0x97, 0x18, 0x73, 0x6c, 0x68, 0x42, 0xe2, 0xb9, 0x83, 0xa4, 0x2d, 0xbb, 0x3a,
	0xc7, 0xa3, 0x79, 0x73, 0x81, 0x91, 0x9b, 0xb2, 0x1a, 0xa1, 0x40, 0xe2, 0x79, 0xe3, 0x1a, 0x98,
	0x8b, 0x8d, 0x9c, 0x5d, 0x77, 0x1b, 0xce, 0xc2, 0xec, 0xe2, 0xcc, 0x92, 0xb9, 0x83, 0x46, 0x37,
	0xd1, 0xb8, 0x9e, 0xf8, 0xd2, 0xf4, 0x12, 0xa3, 0x3f, 0x4e, 0x6c, 0x92, 0x31, 0xaf, 0xe8, 0x4d,
	0x59, 0x0d, 0xd7, 0xa9, 0x30, 0x47, 0xe7, 0x99, 0x86, 0x31, 0x47, 0x27, 0xa3, 0x94, 0x39, 0xdf,
	0xc8, 0x0f, 0x4b, 0x2f, 0x50, 0x95, 0xa2, 0xa7, 0x28, 0x6d, 0x0e, 0x70, 0xbf, 0x18, 0xae, 0x66,
	0x9c, 0x61, 0x67, 0x8d, 0x47, 0x64, 0x38, 0xd9, 0x10, 0x94, 0x35, 0x0b, 0xc6, 0x5c, 0xcd, 0x2c,
	0xeb, 0x28, 0x11, 0x50, 0xce, 0xcc, 0x1b, 0xb9, 0xe5, 0x37, 0x84, 0x56, 0x83, 0x16, 0x98, 0xf3,
	0x8c, 0xfe, 0x31, 0xa9, 0x34, 0xba, 0xd0, 0xec, 0x37, 0xb2, 0x25, 0x11, 0x04, 0x74, 0x11, 0xfb,
	0xf0, 0x68, 0xa5, 0xaf, 0xa7, 0x2e, 0x66, 0x05, 0x25, 0xcb, 0xaf, 0x09, 0x9f, 0x16, 0x9a, 0xe7,
	0x1b, 0xf3, 0xf5, 0x38, 0x9e, 0xbe, 0xc4, 0xec, 0x37, 0x32, 0x43, 0x53, 0x35, 0xba, 0x2b, 0x65,
	0x1a, 0x46, 0x6e, 0x58, 0x86, 0x9e, 0xa2, 0xbb, 0x53, 0xcc, 0x8e, 0x5a, 0x6d, 0xba, 0x47, 0x8f,
	0x5c, 0x8f, 0xee, 0xc5, 0xa8, 0x1c, 0x36, 0xe9, 0x3e, 0x3d, 0x52, 0x0e, 0xdd, 0xcf, 0x25, 0xf5,
	0x8f, 0xb8, 0x81, 0x72, 0x3d, 0x5b, 0xd1, 0x03, 0x80, 0x25, 0x59, 0x73, 0xed, 0x21, 0xcf, 0xa1,
	0x5d, 0x29, 0x73, 0x9e, 0xd1, 0x07, 0xb8, 0xd2, 0xa7, 0xdd, 0xdd, 0xc9, 0x31, 0xa9, 0x68, 0x4f,
	0x17, 0x7e, 0x43, 0xfa, 0xb4, 0x17, 0x70, 0xb5, 0x67, 0xf9, 0x1d, 0x9e, 0xdd, 0x97, 0x32, 0x0b,
	0x86, 0x01, 0x38, 0xea, 0x7a, 0x61, 0x40, 0xfb, 0x53, 0xe6, 0x5c, 0x63, 0x4e, 0x31, 0x18, 0x0b,
	0x1b, 0x0d, 0x3a, 0x90, 0x32, 0x4d, 0x63, 0xfe, 0x88, 0xb0, 0xdd, 0xa6, 0xd5, 0x88, 0xb8, 0x69,
	0x78, 0x8c, 0x58, 0x4a, 0x44, 0xc4, 0x41, 0x10, 0xe3, 0x22, 0xb1, 0x38, 0x94, 0x32, 0xcf, 0x37,
	0xe6, 0x95, 0x95, 0xef, 0x7a, 0xb5, 0x88, 0x3a, 0x0c, 0x9b, 0x09, 0xb7, 0x19, 0x3b, 0x1d, 0x49,
	0x99, 0x03, 0x46, 0xbe, 0xe8, 0xa9, 0x08, 0x1f, 0x85, 0xc1, 0xd7, 0x03, 0xe9, 0x45, 0xc4, 0x31,
	0x6d, 0x10, 0x8c, 0x49, 0x05, 0x7c, 0x3c, 0xd2, 0x35, 0xe1, 0x87, 0x82, 0x4e, 0xa0, 0xe0, 0x62,
	0xb0, 0xc2, 0x6a, 0x04, 0x82, 0x4e, 0xc2, 0xb4, 0x24, 0xaa, 0xaa, 0x5c, 0x77, 0xab, 0x8a, 0x4e,
	0x69, 0x41, 0x6e, 0xad, 0x1e, 0x11, 0xa7, 0x21, 0x68, 0xd8, 0x0a, 0x54, 0xd1, 0x53, 0x13, 0x92,
	0xf7, 0xc0, 0xc3, 0x69, 0xae, 0x2c, 0xa1, 0x58, 0x3d, 0x3d, 0x92, 0x36, 0x17, 0x18, 0x85, 0x84,
	0xd3, 0x05, 0xd0, 0xa3, 0x69, 0xf3, 0x42, 0x83, 0x12, 0x36, 0x6a, 0x06, 0xfd, 0x79, 0x76, 0x00,
	0x2e, 0x8d, 0xd6, 0xce, 0xe6, 0xb8, 0x47, 0xb4, 0x6e, 0x36, 0xc7, 0x15, 0xd2, 0xfa, 0x84, 0xe3,
	0xbc, 0x5a, 0xd0, 0x63, 0x69, 0xf3, 0x02, 0x63, 0xa0, 0xcb, 0x41, 0xd1, 0xe3, 0x49, 0x6e, 0x4d,
	0x46, 0x92, 0x9e, 0x48, 0x9b, 0x17, 0x19, 0xe7, 0x77, 0xe9, 0x58, 0xd3, 0x93, 0x3d, 0x31, 0x20,
	0xea, 0xa9, 0x1e, 0x12, 0xaa, 0x9e, 0xee, 0x21, 0x21, 0xeb, 0x99, 0x24, 0x5b, 0x14, 0x50, 0x2b,
	0xdb, 0x90, 0x64, 0x4b, 0x68, 0x88, 0x7b, 0x36, 0x6d, 0x2e, 0x34, 0x2e, 0x98, 0xc5, 0x47, 0xfa,
	0x36, 0xa6, 0xcd, 0x4b, 0x8c, 0x05, 0xb3, 0x66, 0x62, 0x89, 0x9b, 0xce, 0x0e, 0x06, 0x95, 0x9b,
	0xcf, 0xe6, 0x21, 0x74, 0xcb, 0xd9, 0x3c, 0xb4, 0x6e, 0x4d, 0xd6, 0x4a, 0xe7, 0xd4, 0x52, 0x9f,
	0x4b, 0x2a, 0x88, 0x59, 0x28, 0x7d, 0x3e, 0x6d, 0x5e, 0x6c, 0x98, 0x33, 0xe9, 0x48, 0xe8, 0x0b,
	0x49, 0x09, 0xf1, 0x44, 0xac, 0x73, 0xdb, 0x59, 0x91, 0x20, 0x73, 0xfb, 0x59, 0x34, 0x54, 0xee,
	0x38, 0x8b, 0x86, 0xc8, 0x9d, 0xc9, 0x3a, 0xb3, 0xb3, 0x96, 0xb8, 0x2b, 0xe9, 0xbc, 0xe6, 0x20,
	0x70, 0x77, 0xe2, 0xaf, 0xc9, 0x48, 0xde, 0x9e, 0xa4, 0x78, 0x4d, 0xc7, 0xe2, 0xf6, 0xf6, 0xc4,
	0x80, 0xb4, 0x7d, 0x3d, 0x24, 0x84, 0xed, 0xef, 0x21, 0x21, 0xeb, 0x40, 0x22, 0x8b, 0x6d, 0xb4,
	0xac, 0xe9, 0xc4, 0x50, 0x73, 0x90, 0x75, 0xb0, 0xbb, 0x21, 0x40, 0x46, 0xb2, 0x0e, 0x75, 0xd7,
	0x04, 0x74, 0x2c, 0xeb, 0x70, 0x4f, 0x0c, 0xc8, 0x3a, 0xd2, 0x43, 0x42, 0xd6, 0xd1, 0x1e, 0x12,
	0xb2, 0x8e, 0x25, 0xb2, 0x18, 0x6a, 0x59, 0xc7, 0x13, 0x43, 0xcd, 0x41, 0xd6, 0x89, 0x44, 0x96,
	0x26, 0x23, 0x59, 0x27, 0x13, 0x59, 0x9a, 0x8e, 0x65, 0x9d, 0xea, 0x89, 0x01, 0x59, 0xa7, 0x7b,
	0x48, 0xc8, 0x7a, 0xb1, 0x87, 0x84, 0xac, 0x97, 0xd2, 0xfc, 0xc1, 0x1c, 0x96, 0x56, 0x43, 0x04,
	0xb6, 0xa0, 0x1f, 0x66, 0x18, 0xe2, 0x93, 0xce, 0x02, 0x7f, 0x94, 0xe1, 0x6f, 0x0f, 0x20, 0xb4,
	0xfd, 0x98, 0x2f, 0x97, 0xb9, 0xc0, 0x91, 0xac, 0x9f, 0x64, 0xf8, 0xe3, 0x03, 0x26, 0x56, 0x74,
	0x67, 0xd7, 0x09, 0x62, 0x7e, 0xda, 0xc5, 0xd0, 0x71, 0x57, 0x17, 0x43, 0xc2, 0xdd, 0x08, 0x1a,
	0xdf, 0x41, 0x9c, 0xf6, 0x1e, 0x04, 0x8d, 0x19, 0x64, 0xbe, 0x37, 0xc3, 0x27, 0x22, 0xa6, 0xe2,
	0x54, 0xf7, 0x65, 0xb8, 0xa4, 0x98, 0x8d, 0x24, 0xdd, 0x3f, 0xcb, 0x1b, 0x12, 0x1e, 0x98, 0x45,
	0x41, 0xc5, 0xcf, 0x66, 0x51, 0x10, 0xf2, 0xf3, 0x0c, 0x2e, 0x1a, 0x11, 0x04, 0x2c, 0xe2, 0x17,
	0x68, 0x05, 0x23, 0x08, 0xf8, 0x25, 0x54, 0x32, 0x8c, 0x93, 0xff, 0x2a, 0xc3, 0x1f, 0x62, 0x66,
	0xa2, 0xc4, 0xbf, 0x4e, 0x3c, 0x90, 0xf4, 0x37, 0x09, 0x44, 0xc2, 0xdf, 0x26, 0x10, 0xc9, 0x7e,
	0x07, 0xe9, 0x33, 0x6e, 0x58, 0xce, 0xf9, 0x20, 0xaa, 0x9c, 0x41, 0x22, 0xf5, 0xef, 0x33, 0x7c,
	0xc0, 0x67, 0xb0, 0xb1, 0x82, 0x3f, 0x64, 0x78, 0x4f, 0xcc, 0x98, 0x88, 0x84, 0x3c, 0xd4, 0x1b,
	0x06, 0x7a, 0xfe, 0xd8, 0xcb, 0x42, 0xd6, 0x9f, 0x7a, 0x59, 0xa8, 0x7b, 0x18, 0xb5, 0x5d, 0xed,
	0x0b, 0x4b, 0x09, 0x9f, 0x95, 0x3d, 0x82, 0xf2, 0x23, 0x02, 0xaa, 0x1e, 0x45, 0x01, 0x11, 0x93,
	0xdc, 0x1b, 0x19, 0xde, 0xe5, 0x11, 0x19, 0xa9, 0x59, 0x3b, 0xd3, 0x15, 0x4a, 0xd6, 0xcd, 0x64,
	0xa0, 0x62, 0xfd, 0x4c, 0x06, 0x0a, 0x1e, 0x43, 0x6d, 0x11, 0x33, 0xa3, 0x45, 0x8f, 0xa3, 0x19,
	0xb3, 0x79, 0xe8, 0x79, 0x22, 0x63, 0x5e, 0x6a, 0x5c, 0x38, 0x7b, 0x22, 0xb9, 0x3a, 0x32, 0xfc,
	0xc9, 0x9e, 0x3d, 0x17, 0xa9, 0x7b, 0xea, 0x1c, 0xf1, 0x20, 0xf2, 0xe9, 0x73, 0x4c, 0x40, 0xeb,
	0x33, 0xe7, 0x98, 0x80, 0xe4, 0x0d, 0x19, 0x33, 0x6f, 0x64, 0x4b, 0xee, 0xf5, 0x82, 0x9e, 0xc5,
	0x56, 0x1a, 0x93, 0x0a, 0x68, 0x63, 0x46, 0xbf, 0x21, 0x6a, 0xa2, 0xdd, 0x02, 0xb1, 0x29, 0xc3,
	0xd7, 0xbd, 0x26, 0x68, 0x33, 0xce, 0xc3, 0x98, 0x54, 0x11, 0xde, 0x92, 0x31, 0xfb, 0x8c, 0x74,
	0x71, 0x8c, 0xb6, 0x22, 0xde, 0xaa, 0x46, 0x18, 0xd0, 0x83, 0x59, 0xde, 0x3c, 0x3c, 0xd4, 0x3b,
	0x22, 0xcb, 0xed, 0x62, 0x98, 0x6c, 0x85, 0x2c, 0x27, 0x64, 0x86, 0x9b, 0xf4, 0x50, 0x96, 0x1f,
	0x61, 0xfa, 0xc9, 0xb3, 0x36, 0xcb, 0xe1, 0x31, 0x86, 0xef, 0xba, 0x2c, 0x6f, 0x7c, 0xe0, 0xd8,
	0x79, 0x3d, 0xa2, 0x83, 0xc2, 0x65, 0x9d, 0xe5, 0xbc, 0xa3, 0x61, 0x43, 0xd1, 0x06, 0x3d, 0x13,
	0x36, 0x94, 0xbe, 0x14, 0x91, 0x97, 0x61, 0xec, 0xba, 0x11, 0x79, 0x99, 0x61, 0xcf, 0x4d, 0x59,
	0xde, 0x4c, 0x11, 0x5a, 0x1d, 0xbd, 0xb8, 0x69, 0x73, 0x96, 0x1f, 0x7a, 0x23, 0xee, 0x14, 0x6d,
	0x83, 0xf5, 0x88, 0x3b, 0x85, 0x68, 0xdb, 0xb3, 0x78, 0x6b, 0xb9, 0x53, 0x71, 0xb0, 0x1d, 0xd9,
	0xe8, 0xd9, 0x34, 0xe2, 0x4e, 0x71, 0xb8, 0x9d, 0x59, 0xde, 0x4d, 0x1a, 0xc7, 0x36, 0xbb, 0x10,
	0x6c, 0x54, 0x3a, 0x74, 0x40, 0xa7, 0x96, 0x0e, 0x82, 0x4d, 0x23, 0xd8, 0xa8, 0x74, 0x62, 0xc3,
	0x83, 0x59, 0xee, 0xf1, 0xa8, 0x74, 0x38, 0xd2, 0x21, 0x78, 0x0d, 0x4d, 0x06, 0xb4, 0x91, 0x1f,
	0xbf, 0xd9, 0x61, 0xe1, 0x36, 0x68, 0x53, 0x8e, 0xbb, 0xb4, 0xa2, 0x21, 0xa5, 0x4f, 0x9b, 0x31,
	0x1e, 0x97, 0xa1, 0xe7, 0xd0, 0x16, 0x98, 0x8c, 0x5b, 0x9e, 0x43, 0x5b, 0xb5, 0xb5, 0xf4, 0xa6,
	0xe8, 0x39, 0x58, 0x0c, 0x8f, 0x0f, 0x5f, 0x39, 0x48, 0xcf, 0xe7, 0x50, 0x87, 0xa8, 0xf9, 0x42,
	0x04, 0xf4, 0x42, 0x8e, 0x83, 0x2f, 0x6f, 0xb7, 0x68, 0x1b, 0xcc, 0x87, 0x6c, 0x19, 0xd0, 0x76,
	0x3d, 0x0c, 0x5c, 0x8f, 0x76, 0xe8, 0xa1, 0xb2, 0x3c, 0xda, 0x89, 0x20, 0x3c, 0x1c, 0xa4, 0x5d,
	0x70, 0x1b, 0x96, 0x01, 0xed, 0x8e, 0x46, 0x8a, 0xf6, 0xe4, 0x78, 0xed, 0x4b, 0x1e, 0xed, 0x05,
	0x55, 0x92, 0x35, 0xda, 0x07, 0x97, 0x92, 0xac, 0x5d, 0xf1, 0x15, 0xda, 0x8f, 0x48, 0x25, 0x59,
	0x1b, 0xa4, 0x03, 0xb0, 0x5c, 0x55, 0xa4, 0x69, 0x58, 0xae, 0x92, 0x6b, 0xe8, 0x20, 0x54, 0x8d,
	0x5b, 0x8e, 0x6b, 0x79, 0x01, 0x1d, 0x82, 0x6d, 0xd9, 0xad, 0x79, 0x74, 0x18, 0x26, 0x65, 0xd7,
	0xa3, 0x23, 0x9a, 0xbc, 0xc1, 0x57, 0x74, 0x14, 0xe4, 0x84, 0xe5, 0xd1, 0xb1, 0x1c, 0x2f, 0xf2,
	0x84, 0x1f, 0x7a, 0x36, 0xef, 0xef, 0xe3, 0x80, 0xc3, 0x56, 0x20, 0xae, 0xab, 0x0b, 0x8f, 0xde,
	0x43, 0xa2, 0x62, 0x95, 0xde, 0x87, 0x90, 0x62, 0x95, 0xfb, 0xf9, 0x41, 0x0e, 0xef, 0xd5, 0x2a,
	0x5a, 0xff, 0x61, 0x0e, 0xcb, 0x56, 0x8d, 0x3b, 0xff, 0x11, 0x02, 0x14, 0xab, 0xd1, 0x09, 0xfb,
	0x38, 0xb2, 0xc5, 0xa9, 0xfa, 0x24, 0x02, 0x38, 0x49, 0x9f, 0xe6, 0x78, 0xcd, 0x8a, 0x55, 0x7e,
	0x02, 0xe3, 0x04, 0x7d, 0x16, 0xcd, 0x02, 0x7c, 0x1e, 0x01, 0x3c, 0x90, 0xbf, 0xc8, 0xf1, 0xce,
	0x1b, 0x12, 0x41, 0xc5, 0x11, 0xb6, 0xdf, 0x69, 0x29, 0xba, 0xb1, 0x2f, 0x66, 0x84, 0xa7, 0x99,
	0x9b, 0xfa, 0xf4, 0x5d, 0xd6, 0x6c, 0xf9, 0xfc, 0x13, 0xe6, 0xe6, 0x3e, 0xfd, 0xf8, 0xb7, 0x63,
	0xe2, 0x96, 0x3e, 0x6c, 0x1d, 0xe7, 0x6b, 0x74, 0x2b, 0x2c, 0x57, 0x59, 0x41, 0xb0, 0x46, 0xfa,
	0x0e, 0xdd, 0xd6, 0x87, 0xae, 0x5c, 0x33, 0x74, 0x05, 0xdd, 0x1e, 0x0f, 0x07, 0xe9, 0x8e, 0x3e,
	0xac, 0x55, 0x60, 0xbb, 0x2e, 0xad, 0xcd, 0xb3, 0xeb, 0x32, 0xd7, 0xa3, 0x75, 0x79, 0x8e, 0xba,
	0xcc, 0x55, 0x95, 0x86, 0xf0, 0x6a, 0xaa, 0x4e, 0xeb, 0xf3, 0xd8, 0x22, 0x75, 0xcb, 0xa7, 0xc7,
	0xf2, 0x2c, 0x89, 0x87, 0xf1, 0xe4, 0xe3, 0x79, 0x5c, 0xe6, 0x75, 0xcb, 0xb7, 0x6c, 0x25, 0x12,
	0xfa, 0x89, 0x3c, 0x97, 0x36, 0x2c, 0xb9, 0xe1, 0xf4, 0x64, 0x9e, 0xdb, 0xa7, 0x41, 0x65, 0x4d,
	0x40, 0x4f, 0x21, 0xd7, 0xf2, 0x86, 0xa2, 0xa7, 0x91, 0x6b, 0x79, 0xbb, 0x25, 0x7d, 0x55, 0x09,
	0x84, 0xa2, 0x67, 0xf2, 0xd8, 0xb1, 0xae, 0x68, 0x38, 0xb4, 0x01, 0xc9, 0x56, 0xb8, 0x9e, 0x53,
	0x71, 0x3d, 0xcc, 0x3e, 0x8b, 0xa8, 0x2b, 0xa4, 0xdf, 0xb4, 0x14, 0x6d, 0xd4, 0xd3, 0xbe, 0x6c,
	0x56, 0xf8, 0x27, 0xf2, 0x55, 0x5f, 0xa5, 0x4d, 0x88, 0x7b, 0x8d, 0x68, 0xd3, 0x66, 0x18, 0x16,
	0xbd, 0x40, 0xf8, 0x8a, 0xb6, 0x20, 0x66, 0xd1, 0x0b, 0x94, 0x4f, 0x5b, 0x31, 0x2e, 0xd9, 0x56,
	0x20, 0xe8, 0x39, 0xd4, 0xc5, 0xbf, 0x3b, 0xe8, 0x79, 0xd8, 0x97, 0xb4, 0xf6, 0x17, 0xf2, 0xdc,
	0xbb, 0xb2, 0xf2, 0x2b, 0xf8, 0x94, 0x6d, 0x83, 0xfa, 0x92, 0xb4, 0x9c, 0x4a, 0xd5, 0x6d, 0x08,
	0xda, 0xae, 0x6d, 0x25, 0xb6, 0xd2, 0x0e, 0x1d, 0x4f, 0xae, 0x11, 0x3e, 0xed, 0xd4, 0xf1, 0x5a,
	0x96, 0x43, 0xbb, 0x34, 0xad, 0x7c, 0xb7, 0x49, 0xbb, 0x11, 0x6e, 0xd4, 0xba, 0x5e, 0xa0, 0x86,
	0x3d, 0x98, 0x1a, 0xb5, 0x94, 0x5d, 0xa7, 0xbd, 0x79, 0xfd, 0xa3, 0xd1, 0xa1, 0x7d, 0xf9, 0xe8,
	0x37, 0x57, 0x65, 0x4c, 0xaa, 0x4a, 0x83, 0xf3, 0xee, 0xcf, 0xf3, 0xf5, 0x13, 0x53, 0xbe, 0xfe,
	0x74, 0x1e, 0x80, 0xc7, 0x4a, 0x5b, 0xd1, 0x34, 0x3c, 0x56, 0xda, 0x4a, 0x24, 0x0b, 0x75, 0x50,
	0x4f, 0xfa, 0x0e, 0x1d, 0x42, 0xce, 0x55, 0x32, 0x70, 0x95, 0x2b, 0x3d, 0x3a, 0x8c, 0x9c, 0xd7,
	0x86, 0x52, 0x09, 0x3a, 0x82, 0x72, 0xca, 0xca, 0x8f, 0x3e, 0xc6, 0x47, 0xf3, 0xfa, 0x4b, 0xdd,
	0x12, 0x96, 0xa2, 0x63, 0x79, 0x1c, 0x30, 0xd1, 0x6a, 0x58, 0xb6, 0xa0, 0xe3, 0x11, 0x9a, 0x12,
	0x7e, 0x20, 0xe8, 0x04, 0x82, 0xe0, 0x67, 0x19, 0x9d, 0xd4, 0x63, 0xe8, 0x3c, 0x85, 0xb2, 0xc7,
	0xb9, 0xec, 0xd3, 0x9a, 0x46, 0xd9, 0x2f, 0xc2, 0xb9, 0xcc, 0xdf, 0x1b, 0xd1, 0xa6, 0x97, 0xb0,
	0xd0, 0x40, 0x01, 0xba, 0xfa, 0x32, 0x4c, 0xcb, 0x2d, 0xce, 0xf3, 0x0a, 0x24, 0x94, 0x95, 0x6f,
	0x37, 0x5b, 0xf4, 0xaa, 0x06, 0xe1, 0x24, 0x2f, 0xd7, 0x6b, 0x5a, 0x2c, 0x00, 0x9f, 0xb4, 0x33,
	0xba, 0x27, 0x31, 0x2e, 0x22, 0xf6, 0xeb, 0x28, 0x76, 0x42, 0x2e, 0xd3, 0xbb, 0xe0, 0x0d, 0xe8,
	0x99, 0x60, 0x0d, 0x6f, 0x22, 0xc9, 0x6a, 0xac, 0xf6, 0x5b, 0x7a, 0xec, 0xd5, 0x45, 0x9b, 0xde,
	0xd6, 0xe3, 0x56, 0x4b, 0xf8, 0xf4, 0x0e, 0xfa, 0x78, 0x9d, 0xc0, 0xcf, 0x4d, 0x9d, 0xe5, 0x5d,
	0x48, 0x1f, 0x72, 0x1c, 0x87, 0x97, 0xf8, 0x60, 0x21, 0x42, 0x8a, 0x8f, 0xf7, 0xa1, 0x02, 0x17,
	0xc2, 0xdf, 0x4b, 0xe1, 0xab, 0x8a, 0xfa, 0x36, 0x1d, 0xc6, 0xf4, 0x70, 0xe8, 0xc3, 0xf8, 0x48,
	0x01, 0x07, 0x24, 0xf4, 0x7d, 0xe1, 0x29, 0xfd, 0x56, 0x9e, 0xc9, 0xe0, 0x0b, 0x71, 0xac, 0x80,
	0x23, 0xd3, 0x65, 0x02, 0x65, 0x35, 0x5b, 0x74, 0x3c, 0x0e, 0x84, 0x3c, 0x27, 0x0a, 0x5c, 0x05,
	0x22, 0x9c, 0x2c, 0xe0, 0x9f, 0x07, 0x96, 0x12, 0x15, 0xcb, 0x71, 0xe8, 0x14, 0x02, 0x02, 0x56,
	0xf5, 0x49, 0x38, 0xdd, 0x35, 0x08, 0xc2, 0x49, 0x7a, 0x31, 0x81, 0x8e, 0x5b, 0xad, 0xd2, 0x4b,
	0x05, 0x5c, 0x4e, 0x56, 0x87, 0x5e, 0x46, 0x86, 0x11, 0xab, 0xe3, 0x59, 0x4d, 0x41, 0xaf, 0x14,
	0xf4, 0x3f, 0x02, 0x3a, 0xb2, 0xda, 0x94, 0x9e, 0xaa, 0xd3, 0xab, 0x05, 0x6e, 0x36, 0x88, 0x35,
	0x42, 0x5c, 0x4f, 0xaf, 0x75, 0x71, 0x47, 0x58, 0x3e, 0x9d, 0x81, 0xfb, 0xf2, 0xb6, 0xe2, 0xa3,
	0x4e, 0xaf, 0x63, 0x16, 0xc7, 0xcf, 0xb1, 0x3a, 0x01, 0xbd, 0x51, 0xe0, 0xab, 0x0c, 0x38, 0xf4,
	0xdc, 0x36, 0x8a, 0x78, 0x13, 0x29, 0xae, 0x16, 0x2a, 0x56, 0xfa, 0x16, 0xaa, 0xba, 0x46, 0x86,
	0x3e, 0xbd, 0x0d, 0x95, 0x25, 0x2b, 0x50, 0xec, 0x4f, 0xef, 0x14, 0xf4, 0x29, 0xb3, 0xad, 0x06,
	0x5c, 0xdf, 0x2d, 0xe0, 0xf5, 0x18, 0x63, 0xdd, 0xa2, 0xbf, 0x14, 0xe2, 0xa3, 0x84, 0x66, 0xff,
	0x35, 0x81, 0x70, 0xf9, 0x1b, 0x1a, 0x33, 0xea, 0xda, 0xbe, 0x0c, 0x84, 0x2d, 0x3d, 0x87, 0xfe,
	0x5e, 0xc0, 0x0d, 0xe9, 0x7a, 0xa1, 0x12, 0xf4, 0x8f, 0x02, 0x0e, 0x1e, 0x4a, 0x7d, 0x0f, 0xd9,
	0x30, 0x46, 0x2f, 0xde, 0x47, 0x8f, 0xc6, 0xe4, 0x1a, 0xfa, 0x00, 0x92, 0x57, 0x09, 0xdf, 0x95,
	0x0e, 0xda, 0xfd, 0x21, 0xa2, 0x46, 0x04, 0x1a, 0xfa, 0x11, 0xfa, 0x70, 0x6d, 0x68, 0xf9, 0x4a,
	0xf8, 0xf4, 0x31, 0xe6, 0xcb, 0xc2, 0xae, 0x28, 0x59, 0x81, 0x8e, 0x4f, 0x90, 0xb5, 0xac, 0x25,
	0x7c, 0xaa, 0xa7, 0x95, 0xcf, 0xd3, 0x50, 0xfd, 0x19, 0xdc, 0xcb, 0xe1, 0x24, 0xd0, 0xe7, 0x31,
	0x82, 0xeb, 0x17, 0x1a, 0x75, 0x02, 0xcc, 0xfd, 0x13, 0xdd, 0xc2, 0x9e, 0xf9, 0x17, 0xc2, 0xf0,
	0x30, 0x6e, 0xe5, 0xbf, 0xbb, 0x8c, 0x92, 0x95, 0x40, 0xd8, 0xf4, 0x1f, 0xb4, 0x83, 0x19, 0xc8,
	0xfc, 0x2f, 0x6a, 0xec, 0xee, 0xaf, 0xff, 0x15, 0x78, 0xa3, 0x27, 0x98, 0x6b, 0xfb, 0x0e, 0xf1,
	0x9a, 0x25, 0x14, 0xdc, 0xbe, 0x4b, 0x2c, 0x61, 0x42, 0xea, 0x55, 0xfd, 0x1e, 0xe1, 0x1f, 0x3f,
	0x48, 0x20, 0x3d, 0x27, 0xa0, 0xef, 0x13, 0xaf, 0xcb, 0x6a, 0xcf, 0x6d, 0x57, 0xba, 0xeb, 0xf2,
	0x03, 0xc2, 0x3f, 0xa5, 0x94, 0xad, 0x2b, 0xbc, 0x31, 0x81, 0x28, 0xea, 0x26, 0x64, 0x89, 0xa1,
	0xf6, 0xb8, 0x99, 0xb8, 0xb4, 0xeb, 0x78, 0x9b, 0xdd, 0x82, 0x84, 0x3c, 0xe4, 0x7d, 0x70, 0x2b,
	0x12, 0x32, 0x8a, 0x76, 0xdd, 0x6d, 0xb0, 0xfc, 0x26, 0x0f, 0x6f, 0x47, 0x5c, 0x1e, 0x62, 0x7f,
	0xde, 0x41, 0xcb, 0x68, 0xe7, 0x99, 0x45, 0xa9, 0xe9, 0x33, 0x8b, 0x52, 0xaf, 0x9e, 0x59, 0x94,
	0xba, 0xfb, 0xf5, 0x45, 0xe7, 0x4d, 0xce, 0xc1, 0x7f, 0x58, 0xaf, 0xfc, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9a, 0xaf, 0xda, 0xee, 0xb2, 0x15, 0x00, 0x00,
}

func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Unsigned {
		i--
		if m.Unsigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Typ != 0 {
		i = encodeVarintExpr(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintExpr(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Expr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Child) > 0 {
		for iNdEx := len(m.Child) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Child[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExpr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintExpr(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Column != nil {
		{
			size, err := m.Column.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExprType != 0 {
		i = encodeVarintExpr(dAtA, i, uint64(m.ExprType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpr(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovExpr(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovExpr(uint64(m.Typ))
	}
	if m.Unsigned {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Expr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExprType != 0 {
		n += 1 + sovExpr(uint64(m.ExprType))
	}
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovExpr(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovExpr(uint64(l))
	}
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovExpr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExpr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpr(x uint64) (n int) {
	return sovExpr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= basepb.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unsigned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExprType", wireType)
			}
			m.ExprType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExprType |= ExprType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Column == nil {
				m.Column = &ColumnInfo{}
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &Expr{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpr = fmt.Errorf("proto: unexpected end of group")
)
