// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/expr.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExprType int32

const (
	ExprType_Invalid_Expr  ExprType = 0
	ExprType_Column        ExprType = 1
	ExprType_Const_Int     ExprType = 2
	ExprType_Const_UInt    ExprType = 3
	ExprType_Const_Double  ExprType = 4
	ExprType_Const_Bytes   ExprType = 5
	ExprType_LogicAnd      ExprType = 10
	ExprType_LogicOr       ExprType = 11
	ExprType_LogicNot      ExprType = 12
	ExprType_Equal         ExprType = 20
	ExprType_NotEqual      ExprType = 21
	ExprType_Less          ExprType = 22
	ExprType_LessOrEqual   ExprType = 23
	ExprType_Larger        ExprType = 24
	ExprType_LargerOrEqual ExprType = 25
	ExprType_Plus          ExprType = 31
	ExprType_Minus         ExprType = 32
	ExprType_Mult          ExprType = 33
	ExprType_Div           ExprType = 34
)

var ExprType_name = map[int32]string{
	0:  "Invalid_Expr",
	1:  "Column",
	2:  "Const_Int",
	3:  "Const_UInt",
	4:  "Const_Double",
	5:  "Const_Bytes",
	10: "LogicAnd",
	11: "LogicOr",
	12: "LogicNot",
	20: "Equal",
	21: "NotEqual",
	22: "Less",
	23: "LessOrEqual",
	24: "Larger",
	25: "LargerOrEqual",
	31: "Plus",
	32: "Minus",
	33: "Mult",
	34: "Div",
}

var ExprType_value = map[string]int32{
	"Invalid_Expr":  0,
	"Column":        1,
	"Const_Int":     2,
	"Const_UInt":    3,
	"Const_Double":  4,
	"Const_Bytes":   5,
	"LogicAnd":      10,
	"LogicOr":       11,
	"LogicNot":      12,
	"Equal":         20,
	"NotEqual":      21,
	"Less":          22,
	"LessOrEqual":   23,
	"Larger":        24,
	"LargerOrEqual": 25,
	"Plus":          31,
	"Minus":         32,
	"Mult":          33,
	"Div":           34,
}

func (x ExprType) String() string {
	return proto.EnumName(ExprType_name, int32(x))
}

func (ExprType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0afc6c6dc0dcd2bb, []int{0}
}

type ColumnInfo struct {
	Id                   uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ                  basepb.DataType `protobuf:"varint,2,opt,name=typ,proto3,enum=basepb.DataType" json:"typ,omitempty"`
	Unsigned             bool            `protobuf:"varint,3,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ColumnInfo) Reset()         { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()    {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afc6c6dc0dcd2bb, []int{0}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(m, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ColumnInfo) GetTyp() basepb.DataType {
	if m != nil {
		return m.Typ
	}
	return basepb.DataType_Invalid
}

func (m *ColumnInfo) GetUnsigned() bool {
	if m != nil {
		return m.Unsigned
	}
	return false
}

type Expr struct {
	ExprType             ExprType    `protobuf:"varint,1,opt,name=expr_type,json=exprType,proto3,enum=dspb.ExprType" json:"expr_type,omitempty"`
	Column               *ColumnInfo `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	Value                []byte      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Child                []*Expr     `protobuf:"bytes,4,rep,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Expr) Reset()         { *m = Expr{} }
func (m *Expr) String() string { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()    {}
func (*Expr) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afc6c6dc0dcd2bb, []int{1}
}
func (m *Expr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expr.Merge(m, src)
}
func (m *Expr) XXX_Size() int {
	return m.Size()
}
func (m *Expr) XXX_DiscardUnknown() {
	xxx_messageInfo_Expr.DiscardUnknown(m)
}

var xxx_messageInfo_Expr proto.InternalMessageInfo

func (m *Expr) GetExprType() ExprType {
	if m != nil {
		return m.ExprType
	}
	return ExprType_Invalid_Expr
}

func (m *Expr) GetColumn() *ColumnInfo {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *Expr) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Expr) GetChild() []*Expr {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterEnum("dspb.ExprType", ExprType_name, ExprType_value)
	proto.RegisterType((*ColumnInfo)(nil), "dspb.ColumnInfo")
	proto.RegisterType((*Expr)(nil), "dspb.Expr")
}

func init() { proto.RegisterFile("dspb/expr.proto", fileDescriptor_0afc6c6dc0dcd2bb) }

var fileDescriptor_0afc6c6dc0dcd2bb = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xeb, 0x3f, 0x49, 0x9d, 0x71, 0xe2, 0x0e, 0xa3, 0x02, 0xa6, 0x87, 0x60, 0x72, 0xb2,
	0x40, 0x72, 0xa4, 0x20, 0x71, 0xa7, 0x4d, 0x0f, 0x91, 0xd2, 0x16, 0x59, 0x70, 0x43, 0x8a, 0xfc,
	0x67, 0x49, 0x2c, 0xb9, 0x5e, 0x63, 0xef, 0x46, 0xcd, 0x4b, 0x70, 0x43, 0xe2, 0x91, 0x38, 0xf2,
	0x08, 0x28, 0xbc, 0x08, 0x5a, 0x6f, 0xda, 0x9c, 0x3c, 0xdf, 0xfc, 0x66, 0xe6, 0xfb, 0x64, 0x2d,
	0x9c, 0xe5, 0x6d, 0x9d, 0x4e, 0xd9, 0x43, 0xdd, 0x44, 0x75, 0xc3, 0x05, 0x27, 0x5b, 0x35, 0x2e,
	0x3e, 0xac, 0x0b, 0xb1, 0x91, 0x69, 0x94, 0xf1, 0xfb, 0x69, 0xb6, 0x91, 0x69, 0xc2, 0xf3, 0xf4,
	0x58, 0x74, 0x93, 0xd3, 0x34, 0x69, 0x59, 0x9d, 0x1e, 0x3e, 0x7a, 0x7b, 0xf2, 0x15, 0xe0, 0x8a,
	0x97, 0xf2, 0xbe, 0x5a, 0x54, 0xdf, 0x38, 0x79, 0x60, 0x16, 0xb9, 0x6f, 0x04, 0x46, 0x38, 0x8a,
	0xcd, 0x22, 0xa7, 0x09, 0x58, 0x62, 0x57, 0xfb, 0x66, 0x60, 0x84, 0xde, 0x0c, 0xa3, 0xc3, 0xe6,
	0x3c, 0x11, 0xc9, 0xe7, 0x5d, 0xcd, 0x62, 0x05, 0xe9, 0x02, 0x1c, 0x59, 0xb5, 0xc5, 0xba, 0x62,
	0xb9, 0x6f, 0x05, 0x46, 0xe8, 0xc4, 0x4f, 0x7a, 0xf2, 0xd3, 0x00, 0xfb, 0xfa, 0xa1, 0x6e, 0xe8,
	0x1d, 0x0c, 0x54, 0xe4, 0x95, 0xd8, 0xd5, 0xac, 0xbb, 0xef, 0xcd, 0xbc, 0x48, 0x05, 0x8f, 0x14,
	0xee, 0x8e, 0x39, 0xec, 0x50, 0x51, 0x08, 0xfd, 0xac, 0xcb, 0xd4, 0x19, 0xbb, 0x33, 0xd4, 0x93,
	0xc7, 0x9c, 0xf1, 0x81, 0xd3, 0x39, 0xf4, 0xb6, 0x49, 0x29, 0x59, 0x67, 0x3c, 0x8c, 0xb5, 0xa0,
	0x00, 0x7a, 0xd9, 0xa6, 0x28, 0x73, 0xdf, 0x0e, 0xac, 0xd0, 0x9d, 0xc1, 0xd1, 0x28, 0xd6, 0xe0,
	0xed, 0x0f, 0x13, 0x9c, 0x47, 0x63, 0x42, 0x18, 0x2e, 0xaa, 0x6d, 0x52, 0x16, 0xf9, 0x4a, 0xf5,
	0xf0, 0x84, 0x00, 0xfa, 0xda, 0x0c, 0x0d, 0x1a, 0xc1, 0xe0, 0x8a, 0x57, 0xad, 0x58, 0x2d, 0x2a,
	0x81, 0x26, 0x79, 0xea, 0x7f, 0x29, 0xf9, 0x45, 0x69, 0x4b, 0x2d, 0x6b, 0x3d, 0xe7, 0x32, 0x2d,
	0x19, 0xda, 0x74, 0x06, 0xae, 0xee, 0x5c, 0xee, 0x04, 0x6b, 0xb1, 0x47, 0x43, 0x70, 0x96, 0x7c,
	0x5d, 0x64, 0x1f, 0xab, 0x1c, 0x81, 0x5c, 0x38, 0xed, 0xd4, 0x5d, 0x83, 0xee, 0x13, 0xba, 0xe5,
	0x02, 0x87, 0x34, 0x80, 0xde, 0xf5, 0x77, 0x99, 0x94, 0x78, 0xae, 0xc0, 0x2d, 0x17, 0x5a, 0x3d,
	0x27, 0x07, 0xec, 0x25, 0x6b, 0x5b, 0x7c, 0xa1, 0x8e, 0xab, 0xea, 0xae, 0xd1, 0xe8, 0xa5, 0x8a,
	0xba, 0x4c, 0x9a, 0x35, 0x6b, 0xd0, 0xa7, 0x67, 0x30, 0xd2, 0xf5, 0x23, 0x7e, 0xa5, 0x36, 0x3f,
	0x95, 0xb2, 0xc5, 0xd7, 0xea, 0xf8, 0x4d, 0x51, 0xc9, 0x16, 0x03, 0xd5, 0xbc, 0x91, 0xa5, 0xc0,
	0x37, 0x74, 0x0a, 0xd6, 0xbc, 0xd8, 0xe2, 0xe4, 0x12, 0x7f, 0xef, 0xc7, 0xc6, 0x9f, 0xfd, 0xd8,
	0xf8, 0xbb, 0x1f, 0x1b, 0xbf, 0xfe, 0x8d, 0x4f, 0xd2, 0x7e, 0xf7, 0x3e, 0xde, 0xff, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0x76, 0x1e, 0xba, 0x97, 0x70, 0x02, 0x00, 0x00,
}

func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpr(dAtA, i, uint64(m.Id))
	}
	if m.Typ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExpr(dAtA, i, uint64(m.Typ))
	}
	if m.Unsigned {
		dAtA[i] = 0x18
		i++
		if m.Unsigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Expr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExprType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpr(dAtA, i, uint64(m.ExprType))
	}
	if m.Column != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExpr(dAtA, i, uint64(m.Column.Size()))
		n1, err := m.Column.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExpr(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Child) > 0 {
		for _, msg := range m.Child {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExpr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExpr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovExpr(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovExpr(uint64(m.Typ))
	}
	if m.Unsigned {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Expr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExprType != 0 {
		n += 1 + sovExpr(uint64(m.ExprType))
	}
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovExpr(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovExpr(uint64(l))
	}
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovExpr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExpr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExpr(x uint64) (n int) {
	return sovExpr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= basepb.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unsigned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExprType", wireType)
			}
			m.ExprType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExprType |= ExprType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Column == nil {
				m.Column = &ColumnInfo{}
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &Expr{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpr
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthExpr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExpr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExpr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthExpr
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExpr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpr   = fmt.Errorf("proto: integer overflow")
)
