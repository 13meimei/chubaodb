// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/schedule.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChangeRaftMemberRequest_ChangeType int32

const (
	ChangeRaftMemberRequest_CT_INVALID ChangeRaftMemberRequest_ChangeType = 0
	ChangeRaftMemberRequest_CT_ADD     ChangeRaftMemberRequest_ChangeType = 1
	ChangeRaftMemberRequest_CT_REMOVE  ChangeRaftMemberRequest_ChangeType = 2
)

var ChangeRaftMemberRequest_ChangeType_name = map[int32]string{
	0: "CT_INVALID",
	1: "CT_ADD",
	2: "CT_REMOVE",
}

var ChangeRaftMemberRequest_ChangeType_value = map[string]int32{
	"CT_INVALID": 0,
	"CT_ADD":     1,
	"CT_REMOVE":  2,
}

func (x ChangeRaftMemberRequest_ChangeType) String() string {
	return proto.EnumName(ChangeRaftMemberRequest_ChangeType_name, int32(x))
}

func (ChangeRaftMemberRequest_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{17, 0}
}

type SchRequest struct {
	Header *SchRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*SchRequest_CreateRange
	//	*SchRequest_DeleteRange
	//	*SchRequest_TransferRangeLeader
	//	*SchRequest_GetPeerInfo
	//	*SchRequest_IsAlive
	//	*SchRequest_NodeInfo
	//	*SchRequest_ChangeRaftMember
	Req                  isSchRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SchRequest) Reset()         { *m = SchRequest{} }
func (m *SchRequest) String() string { return proto.CompactTextString(m) }
func (*SchRequest) ProtoMessage()    {}
func (*SchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{0}
}
func (m *SchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchRequest.Merge(m, src)
}
func (m *SchRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchRequest proto.InternalMessageInfo

type isSchRequest_Req interface {
	isSchRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SchRequest_CreateRange struct {
	CreateRange *CreateRangeRequest `protobuf:"bytes,2,opt,name=create_range,json=createRange,proto3,oneof" json:"create_range,omitempty"`
}
type SchRequest_DeleteRange struct {
	DeleteRange *DeleteRangeRequest `protobuf:"bytes,3,opt,name=delete_range,json=deleteRange,proto3,oneof" json:"delete_range,omitempty"`
}
type SchRequest_TransferRangeLeader struct {
	TransferRangeLeader *TransferRangeLeaderRequest `protobuf:"bytes,4,opt,name=transfer_range_leader,json=transferRangeLeader,proto3,oneof" json:"transfer_range_leader,omitempty"`
}
type SchRequest_GetPeerInfo struct {
	GetPeerInfo *GetPeerInfoRequest `protobuf:"bytes,5,opt,name=get_peer_info,json=getPeerInfo,proto3,oneof" json:"get_peer_info,omitempty"`
}
type SchRequest_IsAlive struct {
	IsAlive *IsAliveRequest `protobuf:"bytes,6,opt,name=is_alive,json=isAlive,proto3,oneof" json:"is_alive,omitempty"`
}
type SchRequest_NodeInfo struct {
	NodeInfo *NodeInfoRequest `protobuf:"bytes,7,opt,name=node_info,json=nodeInfo,proto3,oneof" json:"node_info,omitempty"`
}
type SchRequest_ChangeRaftMember struct {
	ChangeRaftMember *ChangeRaftMemberRequest `protobuf:"bytes,8,opt,name=change_raft_member,json=changeRaftMember,proto3,oneof" json:"change_raft_member,omitempty"`
}

func (*SchRequest_CreateRange) isSchRequest_Req()         {}
func (*SchRequest_DeleteRange) isSchRequest_Req()         {}
func (*SchRequest_TransferRangeLeader) isSchRequest_Req() {}
func (*SchRequest_GetPeerInfo) isSchRequest_Req()         {}
func (*SchRequest_IsAlive) isSchRequest_Req()             {}
func (*SchRequest_NodeInfo) isSchRequest_Req()            {}
func (*SchRequest_ChangeRaftMember) isSchRequest_Req()    {}

func (m *SchRequest) GetReq() isSchRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *SchRequest) GetHeader() *SchRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SchRequest) GetCreateRange() *CreateRangeRequest {
	if x, ok := m.GetReq().(*SchRequest_CreateRange); ok {
		return x.CreateRange
	}
	return nil
}

func (m *SchRequest) GetDeleteRange() *DeleteRangeRequest {
	if x, ok := m.GetReq().(*SchRequest_DeleteRange); ok {
		return x.DeleteRange
	}
	return nil
}

func (m *SchRequest) GetTransferRangeLeader() *TransferRangeLeaderRequest {
	if x, ok := m.GetReq().(*SchRequest_TransferRangeLeader); ok {
		return x.TransferRangeLeader
	}
	return nil
}

func (m *SchRequest) GetGetPeerInfo() *GetPeerInfoRequest {
	if x, ok := m.GetReq().(*SchRequest_GetPeerInfo); ok {
		return x.GetPeerInfo
	}
	return nil
}

func (m *SchRequest) GetIsAlive() *IsAliveRequest {
	if x, ok := m.GetReq().(*SchRequest_IsAlive); ok {
		return x.IsAlive
	}
	return nil
}

func (m *SchRequest) GetNodeInfo() *NodeInfoRequest {
	if x, ok := m.GetReq().(*SchRequest_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *SchRequest) GetChangeRaftMember() *ChangeRaftMemberRequest {
	if x, ok := m.GetReq().(*SchRequest_ChangeRaftMember); ok {
		return x.ChangeRaftMember
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchRequest_CreateRange)(nil),
		(*SchRequest_DeleteRange)(nil),
		(*SchRequest_TransferRangeLeader)(nil),
		(*SchRequest_GetPeerInfo)(nil),
		(*SchRequest_IsAlive)(nil),
		(*SchRequest_NodeInfo)(nil),
		(*SchRequest_ChangeRaftMember)(nil),
	}
}

type SchRequest_Header struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchRequest_Header) Reset()         { *m = SchRequest_Header{} }
func (m *SchRequest_Header) String() string { return proto.CompactTextString(m) }
func (*SchRequest_Header) ProtoMessage()    {}
func (*SchRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{0, 0}
}
func (m *SchRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchRequest_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchRequest_Header.Merge(m, src)
}
func (m *SchRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *SchRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_SchRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_SchRequest_Header proto.InternalMessageInfo

func (m *SchRequest_Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

type SchResponse struct {
	Header *SchResponse_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*SchResponse_CreateRange
	//	*SchResponse_DeleteRange
	//	*SchResponse_TransferRangeLeader
	//	*SchResponse_GetPeerInfo
	//	*SchResponse_IsAlive
	//	*SchResponse_NodeInfo
	//	*SchResponse_ChangeRaftMember
	Resp                 isSchResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SchResponse) Reset()         { *m = SchResponse{} }
func (m *SchResponse) String() string { return proto.CompactTextString(m) }
func (*SchResponse) ProtoMessage()    {}
func (*SchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{1}
}
func (m *SchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchResponse.Merge(m, src)
}
func (m *SchResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchResponse proto.InternalMessageInfo

type isSchResponse_Resp interface {
	isSchResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SchResponse_CreateRange struct {
	CreateRange *CreateRangeResponse `protobuf:"bytes,2,opt,name=create_range,json=createRange,proto3,oneof" json:"create_range,omitempty"`
}
type SchResponse_DeleteRange struct {
	DeleteRange *DeleteRangeResponse `protobuf:"bytes,3,opt,name=delete_range,json=deleteRange,proto3,oneof" json:"delete_range,omitempty"`
}
type SchResponse_TransferRangeLeader struct {
	TransferRangeLeader *TransferRangeLeaderResponse `protobuf:"bytes,4,opt,name=transfer_range_leader,json=transferRangeLeader,proto3,oneof" json:"transfer_range_leader,omitempty"`
}
type SchResponse_GetPeerInfo struct {
	GetPeerInfo *GetPeerInfoResponse `protobuf:"bytes,5,opt,name=get_peer_info,json=getPeerInfo,proto3,oneof" json:"get_peer_info,omitempty"`
}
type SchResponse_IsAlive struct {
	IsAlive *IsAliveResponse `protobuf:"bytes,6,opt,name=is_alive,json=isAlive,proto3,oneof" json:"is_alive,omitempty"`
}
type SchResponse_NodeInfo struct {
	NodeInfo *NodeInfoResponse `protobuf:"bytes,7,opt,name=node_info,json=nodeInfo,proto3,oneof" json:"node_info,omitempty"`
}
type SchResponse_ChangeRaftMember struct {
	ChangeRaftMember *ChangeRaftMemberResponse `protobuf:"bytes,8,opt,name=change_raft_member,json=changeRaftMember,proto3,oneof" json:"change_raft_member,omitempty"`
}

func (*SchResponse_CreateRange) isSchResponse_Resp()         {}
func (*SchResponse_DeleteRange) isSchResponse_Resp()         {}
func (*SchResponse_TransferRangeLeader) isSchResponse_Resp() {}
func (*SchResponse_GetPeerInfo) isSchResponse_Resp()         {}
func (*SchResponse_IsAlive) isSchResponse_Resp()             {}
func (*SchResponse_NodeInfo) isSchResponse_Resp()            {}
func (*SchResponse_ChangeRaftMember) isSchResponse_Resp()    {}

func (m *SchResponse) GetResp() isSchResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *SchResponse) GetHeader() *SchResponse_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SchResponse) GetCreateRange() *CreateRangeResponse {
	if x, ok := m.GetResp().(*SchResponse_CreateRange); ok {
		return x.CreateRange
	}
	return nil
}

func (m *SchResponse) GetDeleteRange() *DeleteRangeResponse {
	if x, ok := m.GetResp().(*SchResponse_DeleteRange); ok {
		return x.DeleteRange
	}
	return nil
}

func (m *SchResponse) GetTransferRangeLeader() *TransferRangeLeaderResponse {
	if x, ok := m.GetResp().(*SchResponse_TransferRangeLeader); ok {
		return x.TransferRangeLeader
	}
	return nil
}

func (m *SchResponse) GetGetPeerInfo() *GetPeerInfoResponse {
	if x, ok := m.GetResp().(*SchResponse_GetPeerInfo); ok {
		return x.GetPeerInfo
	}
	return nil
}

func (m *SchResponse) GetIsAlive() *IsAliveResponse {
	if x, ok := m.GetResp().(*SchResponse_IsAlive); ok {
		return x.IsAlive
	}
	return nil
}

func (m *SchResponse) GetNodeInfo() *NodeInfoResponse {
	if x, ok := m.GetResp().(*SchResponse_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (m *SchResponse) GetChangeRaftMember() *ChangeRaftMemberResponse {
	if x, ok := m.GetResp().(*SchResponse_ChangeRaftMember); ok {
		return x.ChangeRaftMember
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchResponse_CreateRange)(nil),
		(*SchResponse_DeleteRange)(nil),
		(*SchResponse_TransferRangeLeader)(nil),
		(*SchResponse_GetPeerInfo)(nil),
		(*SchResponse_IsAlive)(nil),
		(*SchResponse_NodeInfo)(nil),
		(*SchResponse_ChangeRaftMember)(nil),
	}
}

type SchResponse_Header struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchResponse_Header) Reset()         { *m = SchResponse_Header{} }
func (m *SchResponse_Header) String() string { return proto.CompactTextString(m) }
func (*SchResponse_Header) ProtoMessage()    {}
func (*SchResponse_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{1, 0}
}
func (m *SchResponse_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchResponse_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchResponse_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchResponse_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchResponse_Header.Merge(m, src)
}
func (m *SchResponse_Header) XXX_Size() int {
	return m.Size()
}
func (m *SchResponse_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_SchResponse_Header.DiscardUnknown(m)
}

var xxx_messageInfo_SchResponse_Header proto.InternalMessageInfo

func (m *SchResponse_Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *SchResponse_Header) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// CreateRange
type CreateRangeRequest struct {
	Range                *basepb.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Leader               uint64        `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateRangeRequest) Reset()         { *m = CreateRangeRequest{} }
func (m *CreateRangeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRangeRequest) ProtoMessage()    {}
func (*CreateRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{2}
}
func (m *CreateRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRangeRequest.Merge(m, src)
}
func (m *CreateRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRangeRequest proto.InternalMessageInfo

func (m *CreateRangeRequest) GetRange() *basepb.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CreateRangeRequest) GetLeader() uint64 {
	if m != nil {
		return m.Leader
	}
	return 0
}

type CreateRangeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRangeResponse) Reset()         { *m = CreateRangeResponse{} }
func (m *CreateRangeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRangeResponse) ProtoMessage()    {}
func (*CreateRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{3}
}
func (m *CreateRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRangeResponse.Merge(m, src)
}
func (m *CreateRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRangeResponse proto.InternalMessageInfo

// DeleteRange
type DeleteRangeRequest struct {
	RangeId              uint64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	PeerId               uint64   `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRangeRequest) Reset()         { *m = DeleteRangeRequest{} }
func (m *DeleteRangeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRangeRequest) ProtoMessage()    {}
func (*DeleteRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{4}
}
func (m *DeleteRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRangeRequest.Merge(m, src)
}
func (m *DeleteRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRangeRequest proto.InternalMessageInfo

func (m *DeleteRangeRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *DeleteRangeRequest) GetPeerId() uint64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

type DeleteRangeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRangeResponse) Reset()         { *m = DeleteRangeResponse{} }
func (m *DeleteRangeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRangeResponse) ProtoMessage()    {}
func (*DeleteRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{5}
}
func (m *DeleteRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRangeResponse.Merge(m, src)
}
func (m *DeleteRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRangeResponse proto.InternalMessageInfo

// TransferRangeLeader
type TransferRangeLeaderRequest struct {
	RangeId              uint64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferRangeLeaderRequest) Reset()         { *m = TransferRangeLeaderRequest{} }
func (m *TransferRangeLeaderRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRangeLeaderRequest) ProtoMessage()    {}
func (*TransferRangeLeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{6}
}
func (m *TransferRangeLeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRangeLeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRangeLeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRangeLeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRangeLeaderRequest.Merge(m, src)
}
func (m *TransferRangeLeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferRangeLeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRangeLeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRangeLeaderRequest proto.InternalMessageInfo

func (m *TransferRangeLeaderRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type TransferRangeLeaderResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferRangeLeaderResponse) Reset()         { *m = TransferRangeLeaderResponse{} }
func (m *TransferRangeLeaderResponse) String() string { return proto.CompactTextString(m) }
func (*TransferRangeLeaderResponse) ProtoMessage()    {}
func (*TransferRangeLeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{7}
}
func (m *TransferRangeLeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRangeLeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRangeLeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRangeLeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRangeLeaderResponse.Merge(m, src)
}
func (m *TransferRangeLeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferRangeLeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRangeLeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRangeLeaderResponse proto.InternalMessageInfo

// GetPeerInfo
type GetPeerInfoRequest struct {
	RangeId              uint64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPeerInfoRequest) Reset()         { *m = GetPeerInfoRequest{} }
func (m *GetPeerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetPeerInfoRequest) ProtoMessage()    {}
func (*GetPeerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{8}
}
func (m *GetPeerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPeerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPeerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPeerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPeerInfoRequest.Merge(m, src)
}
func (m *GetPeerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPeerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPeerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPeerInfoRequest proto.InternalMessageInfo

func (m *GetPeerInfoRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type GetPeerInfoResponse struct {
	Replica              *basepb.Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
	Index                uint64          `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Term                 uint64          `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Commit               uint64          `protobuf:"varint,4,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetPeerInfoResponse) Reset()         { *m = GetPeerInfoResponse{} }
func (m *GetPeerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetPeerInfoResponse) ProtoMessage()    {}
func (*GetPeerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{9}
}
func (m *GetPeerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPeerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPeerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPeerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPeerInfoResponse.Merge(m, src)
}
func (m *GetPeerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPeerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPeerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPeerInfoResponse proto.InternalMessageInfo

func (m *GetPeerInfoResponse) GetReplica() *basepb.Replica {
	if m != nil {
		return m.Replica
	}
	return nil
}

func (m *GetPeerInfoResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetPeerInfoResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *GetPeerInfoResponse) GetCommit() uint64 {
	if m != nil {
		return m.Commit
	}
	return 0
}

// IsAlive
type IsAliveRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsAliveRequest) Reset()         { *m = IsAliveRequest{} }
func (m *IsAliveRequest) String() string { return proto.CompactTextString(m) }
func (*IsAliveRequest) ProtoMessage()    {}
func (*IsAliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{10}
}
func (m *IsAliveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsAliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsAliveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsAliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAliveRequest.Merge(m, src)
}
func (m *IsAliveRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsAliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsAliveRequest proto.InternalMessageInfo

type IsAliveResponse struct {
	Alive                bool     `protobuf:"varint,1,opt,name=alive,proto3" json:"alive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsAliveResponse) Reset()         { *m = IsAliveResponse{} }
func (m *IsAliveResponse) String() string { return proto.CompactTextString(m) }
func (*IsAliveResponse) ProtoMessage()    {}
func (*IsAliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{11}
}
func (m *IsAliveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsAliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsAliveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsAliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAliveResponse.Merge(m, src)
}
func (m *IsAliveResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsAliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsAliveResponse proto.InternalMessageInfo

func (m *IsAliveResponse) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

// NodeInfo
type NodeInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfoRequest) Reset()         { *m = NodeInfoRequest{} }
func (m *NodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*NodeInfoRequest) ProtoMessage()    {}
func (*NodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{12}
}
func (m *NodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoRequest.Merge(m, src)
}
func (m *NodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoRequest proto.InternalMessageInfo

type RangeStats struct {
	WriteBytesPerSec     uint64   `protobuf:"varint,1,opt,name=write_bytes_per_sec,json=writeBytesPerSec,proto3" json:"write_bytes_per_sec,omitempty"`
	WriteKeysPerSec      uint64   `protobuf:"varint,2,opt,name=write_keys_per_sec,json=writeKeysPerSec,proto3" json:"write_keys_per_sec,omitempty"`
	ReadBytessPerSec     uint64   `protobuf:"varint,3,opt,name=read_bytess_per_sec,json=readBytessPerSec,proto3" json:"read_bytess_per_sec,omitempty"`
	ReadKeysPerSec       uint64   `protobuf:"varint,4,opt,name=read_keys_per_sec,json=readKeysPerSec,proto3" json:"read_keys_per_sec,omitempty"`
	ApproximateSize      uint64   `protobuf:"varint,5,opt,name=approximate_size,json=approximateSize,proto3" json:"approximate_size,omitempty"`
	KvCount              uint64   `protobuf:"varint,6,opt,name=kv_count,json=kvCount,proto3" json:"kv_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeStats) Reset()         { *m = RangeStats{} }
func (m *RangeStats) String() string { return proto.CompactTextString(m) }
func (*RangeStats) ProtoMessage()    {}
func (*RangeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{13}
}
func (m *RangeStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeStats.Merge(m, src)
}
func (m *RangeStats) XXX_Size() int {
	return m.Size()
}
func (m *RangeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeStats.DiscardUnknown(m)
}

var xxx_messageInfo_RangeStats proto.InternalMessageInfo

func (m *RangeStats) GetWriteBytesPerSec() uint64 {
	if m != nil {
		return m.WriteBytesPerSec
	}
	return 0
}

func (m *RangeStats) GetWriteKeysPerSec() uint64 {
	if m != nil {
		return m.WriteKeysPerSec
	}
	return 0
}

func (m *RangeStats) GetReadBytessPerSec() uint64 {
	if m != nil {
		return m.ReadBytessPerSec
	}
	return 0
}

func (m *RangeStats) GetReadKeysPerSec() uint64 {
	if m != nil {
		return m.ReadKeysPerSec
	}
	return 0
}

func (m *RangeStats) GetApproximateSize() uint64 {
	if m != nil {
		return m.ApproximateSize
	}
	return 0
}

func (m *RangeStats) GetKvCount() uint64 {
	if m != nil {
		return m.KvCount
	}
	return 0
}

type RangeInfo struct {
	Range *basepb.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// range metric stats
	Stats *RangeStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	// leader term
	Term uint64 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	// replica status
	PeersStatus          []*basepb.PeerStatus `protobuf:"bytes,4,rep,name=peers_status,json=peersStatus,proto3" json:"peers_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RangeInfo) Reset()         { *m = RangeInfo{} }
func (m *RangeInfo) String() string { return proto.CompactTextString(m) }
func (*RangeInfo) ProtoMessage()    {}
func (*RangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{14}
}
func (m *RangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeInfo.Merge(m, src)
}
func (m *RangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *RangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RangeInfo proto.InternalMessageInfo

func (m *RangeInfo) GetRange() *basepb.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *RangeInfo) GetStats() *RangeStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *RangeInfo) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RangeInfo) GetPeersStatus() []*basepb.PeerStatus {
	if m != nil {
		return m.PeersStatus
	}
	return nil
}

type NodeStats struct {
	RangeCount           uint32   `protobuf:"varint,1,opt,name=range_count,json=rangeCount,proto3" json:"range_count,omitempty"`
	RangeSplitCount      uint32   `protobuf:"varint,2,opt,name=range_split_count,json=rangeSplitCount,proto3" json:"range_split_count,omitempty"`
	SnapSendingCount     uint32   `protobuf:"varint,3,opt,name=snap_sending_count,json=snapSendingCount,proto3" json:"snap_sending_count,omitempty"`
	SnapApplyingCount    uint32   `protobuf:"varint,4,opt,name=snap_applying_count,json=snapApplyingCount,proto3" json:"snap_applying_count,omitempty"`
	RangeLeaderCount     uint32   `protobuf:"varint,6,opt,name=range_leader_count,json=rangeLeaderCount,proto3" json:"range_leader_count,omitempty"`
	Capacity             uint64   `protobuf:"varint,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedSize             uint64   `protobuf:"varint,8,opt,name=used_size,json=usedSize,proto3" json:"used_size,omitempty"`
	WriteBytesPerSec     uint64   `protobuf:"varint,10,opt,name=write_bytes_per_sec,json=writeBytesPerSec,proto3" json:"write_bytes_per_sec,omitempty"`
	WriteKeysPerSec      uint64   `protobuf:"varint,11,opt,name=write_keys_per_sec,json=writeKeysPerSec,proto3" json:"write_keys_per_sec,omitempty"`
	ReadBytessPerSec     uint64   `protobuf:"varint,12,opt,name=read_bytess_per_sec,json=readBytessPerSec,proto3" json:"read_bytess_per_sec,omitempty"`
	ReadKeysPerSec       uint64   `protobuf:"varint,13,opt,name=read_keys_per_sec,json=readKeysPerSec,proto3" json:"read_keys_per_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStats) Reset()         { *m = NodeStats{} }
func (m *NodeStats) String() string { return proto.CompactTextString(m) }
func (*NodeStats) ProtoMessage()    {}
func (*NodeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{15}
}
func (m *NodeStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStats.Merge(m, src)
}
func (m *NodeStats) XXX_Size() int {
	return m.Size()
}
func (m *NodeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStats proto.InternalMessageInfo

func (m *NodeStats) GetRangeCount() uint32 {
	if m != nil {
		return m.RangeCount
	}
	return 0
}

func (m *NodeStats) GetRangeSplitCount() uint32 {
	if m != nil {
		return m.RangeSplitCount
	}
	return 0
}

func (m *NodeStats) GetSnapSendingCount() uint32 {
	if m != nil {
		return m.SnapSendingCount
	}
	return 0
}

func (m *NodeStats) GetSnapApplyingCount() uint32 {
	if m != nil {
		return m.SnapApplyingCount
	}
	return 0
}

func (m *NodeStats) GetRangeLeaderCount() uint32 {
	if m != nil {
		return m.RangeLeaderCount
	}
	return 0
}

func (m *NodeStats) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *NodeStats) GetUsedSize() uint64 {
	if m != nil {
		return m.UsedSize
	}
	return 0
}

func (m *NodeStats) GetWriteBytesPerSec() uint64 {
	if m != nil {
		return m.WriteBytesPerSec
	}
	return 0
}

func (m *NodeStats) GetWriteKeysPerSec() uint64 {
	if m != nil {
		return m.WriteKeysPerSec
	}
	return 0
}

func (m *NodeStats) GetReadBytessPerSec() uint64 {
	if m != nil {
		return m.ReadBytessPerSec
	}
	return 0
}

func (m *NodeStats) GetReadKeysPerSec() uint64 {
	if m != nil {
		return m.ReadKeysPerSec
	}
	return 0
}

type NodeInfoResponse struct {
	//node info
	NodeId uint64     `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Stats  *NodeStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	// Isolated replica list, not received leader heartbeat for more than an hour
	IsolatedReplicas []uint64 `protobuf:"varint,3,rep,packed,name=isolated_replicas,json=isolatedReplicas,proto3" json:"isolated_replicas,omitempty"`
	//range info
	RangeInfos           []*RangeInfo `protobuf:"bytes,4,rep,name=range_infos,json=rangeInfos,proto3" json:"range_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NodeInfoResponse) Reset()         { *m = NodeInfoResponse{} }
func (m *NodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NodeInfoResponse) ProtoMessage()    {}
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{16}
}
func (m *NodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoResponse.Merge(m, src)
}
func (m *NodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoResponse proto.InternalMessageInfo

func (m *NodeInfoResponse) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeInfoResponse) GetStats() *NodeStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *NodeInfoResponse) GetIsolatedReplicas() []uint64 {
	if m != nil {
		return m.IsolatedReplicas
	}
	return nil
}

func (m *NodeInfoResponse) GetRangeInfos() []*RangeInfo {
	if m != nil {
		return m.RangeInfos
	}
	return nil
}

type ChangeRaftMemberRequest struct {
	RangeId              uint64                             `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	RangeEpoch           *basepb.RangeEpoch                 `protobuf:"bytes,2,opt,name=range_epoch,json=rangeEpoch,proto3" json:"range_epoch,omitempty"`
	ChangeType           ChangeRaftMemberRequest_ChangeType `protobuf:"varint,3,opt,name=change_type,json=changeType,proto3,enum=dspb.ChangeRaftMemberRequest_ChangeType" json:"change_type,omitempty"`
	TargetPeer           *basepb.Peer                       `protobuf:"bytes,4,opt,name=target_peer,json=targetPeer,proto3" json:"target_peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ChangeRaftMemberRequest) Reset()         { *m = ChangeRaftMemberRequest{} }
func (m *ChangeRaftMemberRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeRaftMemberRequest) ProtoMessage()    {}
func (*ChangeRaftMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{17}
}
func (m *ChangeRaftMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeRaftMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeRaftMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeRaftMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRaftMemberRequest.Merge(m, src)
}
func (m *ChangeRaftMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangeRaftMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRaftMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRaftMemberRequest proto.InternalMessageInfo

func (m *ChangeRaftMemberRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *ChangeRaftMemberRequest) GetRangeEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.RangeEpoch
	}
	return nil
}

func (m *ChangeRaftMemberRequest) GetChangeType() ChangeRaftMemberRequest_ChangeType {
	if m != nil {
		return m.ChangeType
	}
	return ChangeRaftMemberRequest_CT_INVALID
}

func (m *ChangeRaftMemberRequest) GetTargetPeer() *basepb.Peer {
	if m != nil {
		return m.TargetPeer
	}
	return nil
}

type ChangeRaftMemberResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeRaftMemberResponse) Reset()         { *m = ChangeRaftMemberResponse{} }
func (m *ChangeRaftMemberResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeRaftMemberResponse) ProtoMessage()    {}
func (*ChangeRaftMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c20e567d17a2e8, []int{18}
}
func (m *ChangeRaftMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeRaftMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeRaftMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeRaftMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeRaftMemberResponse.Merge(m, src)
}
func (m *ChangeRaftMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChangeRaftMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeRaftMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeRaftMemberResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dspb.ChangeRaftMemberRequest_ChangeType", ChangeRaftMemberRequest_ChangeType_name, ChangeRaftMemberRequest_ChangeType_value)
	proto.RegisterType((*SchRequest)(nil), "dspb.SchRequest")
	proto.RegisterType((*SchRequest_Header)(nil), "dspb.SchRequest.Header")
	proto.RegisterType((*SchResponse)(nil), "dspb.SchResponse")
	proto.RegisterType((*SchResponse_Header)(nil), "dspb.SchResponse.Header")
	proto.RegisterType((*CreateRangeRequest)(nil), "dspb.CreateRangeRequest")
	proto.RegisterType((*CreateRangeResponse)(nil), "dspb.CreateRangeResponse")
	proto.RegisterType((*DeleteRangeRequest)(nil), "dspb.DeleteRangeRequest")
	proto.RegisterType((*DeleteRangeResponse)(nil), "dspb.DeleteRangeResponse")
	proto.RegisterType((*TransferRangeLeaderRequest)(nil), "dspb.TransferRangeLeaderRequest")
	proto.RegisterType((*TransferRangeLeaderResponse)(nil), "dspb.TransferRangeLeaderResponse")
	proto.RegisterType((*GetPeerInfoRequest)(nil), "dspb.GetPeerInfoRequest")
	proto.RegisterType((*GetPeerInfoResponse)(nil), "dspb.GetPeerInfoResponse")
	proto.RegisterType((*IsAliveRequest)(nil), "dspb.IsAliveRequest")
	proto.RegisterType((*IsAliveResponse)(nil), "dspb.IsAliveResponse")
	proto.RegisterType((*NodeInfoRequest)(nil), "dspb.NodeInfoRequest")
	proto.RegisterType((*RangeStats)(nil), "dspb.RangeStats")
	proto.RegisterType((*RangeInfo)(nil), "dspb.RangeInfo")
	proto.RegisterType((*NodeStats)(nil), "dspb.NodeStats")
	proto.RegisterType((*NodeInfoResponse)(nil), "dspb.NodeInfoResponse")
	proto.RegisterType((*ChangeRaftMemberRequest)(nil), "dspb.ChangeRaftMemberRequest")
	proto.RegisterType((*ChangeRaftMemberResponse)(nil), "dspb.ChangeRaftMemberResponse")
}

func init() { proto.RegisterFile("dspb/schedule.proto", fileDescriptor_c6c20e567d17a2e8) }

var fileDescriptor_c6c20e567d17a2e8 = []byte{
	// 1260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0xaf, 0x63, 0xc5, 0x71, 0x9e, 0x93, 0x58, 0x59, 0x37, 0xad, 0x93, 0x4e, 0x43, 0x2a, 0x06,
	0xda, 0x52, 0xe2, 0x94, 0x94, 0xd2, 0x13, 0x65, 0xf2, 0x6f, 0xa8, 0xa1, 0x2d, 0x45, 0xce, 0x94,
	0xa3, 0x46, 0x96, 0x36, 0xb6, 0xa6, 0xb6, 0xa4, 0xee, 0xca, 0xa5, 0xee, 0x91, 0x13, 0x1f, 0x81,
	0x03, 0x37, 0x3e, 0x01, 0x67, 0xbe, 0x00, 0x47, 0x66, 0xf8, 0x02, 0x4c, 0xb9, 0xf0, 0x31, 0x98,
	0x7d, 0x6f, 0x2d, 0x29, 0xb6, 0xe2, 0x69, 0x4f, 0xde, 0x7d, 0xbf, 0xdf, 0x7b, 0xfb, 0x76, 0xdf,
	0x6f, 0xdf, 0xca, 0xd0, 0xf0, 0x65, 0xdc, 0xdd, 0x93, 0x5e, 0x9f, 0xfb, 0xa3, 0x01, 0x6f, 0xc5,
	0x22, 0x4a, 0x22, 0x66, 0x28, 0xe3, 0xd6, 0x6e, 0x2f, 0x48, 0xfa, 0xa3, 0x6e, 0xcb, 0x8b, 0x86,
	0x7b, 0xbd, 0xa8, 0x17, 0xed, 0x21, 0xd8, 0x1d, 0x9d, 0xe1, 0x0c, 0x27, 0x38, 0x22, 0xa7, 0xad,
	0x2f, 0x72, 0x74, 0xaf, 0x3f, 0xea, 0xba, 0x91, 0xdf, 0xcd, 0x06, 0x44, 0xef, 0xba, 0x92, 0xc7,
	0x5d, 0xfd, 0xa3, 0xfd, 0x4c, 0xcc, 0x80, 0x0b, 0x11, 0x09, 0xb2, 0x58, 0x7f, 0x18, 0x00, 0x1d,
	0xaf, 0x6f, 0xf3, 0x97, 0x23, 0x2e, 0x13, 0xb6, 0x07, 0x95, 0x3e, 0x77, 0x7d, 0x2e, 0x9a, 0xa5,
	0x9d, 0xd2, 0xad, 0xda, 0xfe, 0xd5, 0x96, 0xf2, 0x68, 0x65, 0x8c, 0xd6, 0x23, 0x84, 0x6d, 0x4d,
	0x63, 0x5f, 0xc2, 0x8a, 0x27, 0xb8, 0x9b, 0x70, 0x47, 0xb8, 0x61, 0x8f, 0x37, 0x17, 0xd0, 0xad,
	0x49, 0x6e, 0x47, 0x88, 0xd8, 0x0a, 0xd0, 0xee, 0x8f, 0x2e, 0xd9, 0x35, 0x2f, 0xb3, 0x2a, 0x77,
	0x9f, 0x0f, 0x78, 0xea, 0x5e, 0xce, 0xbb, 0x1f, 0x23, 0x32, 0xed, 0xee, 0x67, 0x56, 0xf6, 0x1c,
	0x36, 0x12, 0xe1, 0x86, 0xf2, 0x8c, 0x0b, 0x0a, 0xe0, 0x0c, 0x28, 0x7b, 0x03, 0xe3, 0xec, 0x50,
	0x9c, 0x53, 0x4d, 0x41, 0x9f, 0xc7, 0x94, 0x7f, 0x1a, 0xaf, 0x91, 0xcc, 0xa2, 0xec, 0x21, 0xac,
	0xf6, 0x78, 0xe2, 0xc4, 0x9c, 0x0b, 0x27, 0x08, 0xcf, 0xa2, 0xe6, 0x62, 0x3e, 0xaf, 0xaf, 0x79,
	0xf2, 0x8c, 0x73, 0xd1, 0x0e, 0xcf, 0xa2, 0x5c, 0x5e, 0xbd, 0xcc, 0xca, 0x3e, 0x83, 0x6a, 0x20,
	0x1d, 0x77, 0x10, 0xbc, 0xe2, 0xcd, 0x0a, 0xba, 0x5e, 0x26, 0xd7, 0xb6, 0x3c, 0x50, 0xc6, 0xcc,
	0x6d, 0x29, 0x20, 0x0b, 0xfb, 0x1c, 0x96, 0xc3, 0xc8, 0xe7, 0xb4, 0xdc, 0x12, 0xfa, 0x6c, 0x90,
	0xcf, 0xd3, 0xc8, 0xe7, 0xe7, 0xd7, 0xaa, 0x86, 0xda, 0xc4, 0x9e, 0x00, 0xf3, 0xfa, 0xb8, 0x71,
	0xe1, 0x9e, 0x25, 0xce, 0x90, 0x0f, 0xbb, 0x5c, 0x34, 0xab, 0xe8, 0x7e, 0x5d, 0x17, 0x01, 0x71,
	0xdb, 0x3d, 0x4b, 0x9e, 0x20, 0x9a, 0x85, 0x31, 0xbd, 0x29, 0x68, 0xeb, 0x26, 0x54, 0xa8, 0xbe,
	0xec, 0x3a, 0x80, 0x37, 0x18, 0xc9, 0x44, 0x1d, 0x80, 0x8f, 0x62, 0x30, 0xec, 0x65, 0x6d, 0x69,
	0xfb, 0x87, 0x8b, 0x50, 0x16, 0xfc, 0xa5, 0xf5, 0x9f, 0x01, 0x35, 0xd4, 0x86, 0x8c, 0xa3, 0x50,
	0x72, 0x76, 0x77, 0x4a, 0x3e, 0xcd, 0x9c, 0x7c, 0x88, 0x32, 0xad, 0x9f, 0x87, 0x85, 0xfa, 0xd9,
	0x2c, 0xd0, 0x0f, 0xf9, 0x4f, 0x0b, 0xe8, 0x61, 0xa1, 0x80, 0x36, 0x0b, 0x04, 0x94, 0xf9, 0xe7,
	0x15, 0xf4, 0xc3, 0x7c, 0x05, 0xdd, 0x98, 0xa3, 0xa0, 0x34, 0x60, 0xa1, 0x84, 0xbe, 0x2a, 0x96,
	0xd0, 0x66, 0x81, 0x84, 0xb2, 0xcc, 0xf2, 0x1a, 0xda, 0x9f, 0xd1, 0xd0, 0xc6, 0x94, 0x86, 0x52,
	0xbf, 0x54, 0x44, 0xf7, 0x67, 0x45, 0x74, 0x65, 0x5a, 0x44, 0xa9, 0x57, 0xa6, 0xa2, 0xa7, 0x73,
	0x54, 0xb4, 0x7d, 0x91, 0x8a, 0xd2, 0x38, 0xb3, 0x32, 0xfa, 0xe6, 0x1d, 0x65, 0xc4, 0x6e, 0xc0,
	0x22, 0x36, 0x23, 0x5d, 0xf6, 0x1a, 0xad, 0x75, 0xa2, 0x4c, 0x36, 0x21, 0x87, 0x15, 0x30, 0x04,
	0x97, 0xb1, 0xf5, 0x3d, 0xb0, 0xd9, 0x76, 0xc2, 0x3e, 0x84, 0x45, 0xaa, 0x3b, 0xe9, 0x6d, 0xb5,
	0xa5, 0xdb, 0x1d, 0x91, 0x08, 0x63, 0x57, 0xa0, 0xa2, 0x8b, 0xba, 0x80, 0x09, 0xe8, 0x99, 0xb5,
	0x01, 0x8d, 0x02, 0x85, 0x59, 0x8f, 0x80, 0xcd, 0x76, 0x1e, 0xb6, 0x09, 0x55, 0xd2, 0x47, 0xba,
	0x8f, 0x25, 0x9c, 0xb7, 0x7d, 0x76, 0x15, 0x96, 0xa8, 0xcc, 0xfe, 0x64, 0x01, 0x35, 0x6d, 0xfb,
	0x6a, 0x81, 0x02, 0x09, 0x5a, 0x0f, 0x60, 0xeb, 0xe2, 0x96, 0x34, 0x67, 0x21, 0xeb, 0x3a, 0x5c,
	0x9b, 0xa3, 0x44, 0x6b, 0x0f, 0xd8, 0x6c, 0x6b, 0x9a, 0x17, 0xef, 0xa7, 0x12, 0x34, 0x0a, 0x94,
	0xc8, 0x6e, 0xc3, 0x92, 0xe0, 0xf1, 0x20, 0xf0, 0x5c, 0x7d, 0xae, 0xf5, 0xf4, 0x5c, 0xc9, 0x6c,
	0x4f, 0x70, 0x76, 0x19, 0x16, 0x83, 0xd0, 0xe7, 0xaf, 0xf5, 0xce, 0x69, 0xc2, 0x18, 0x18, 0x09,
	0x17, 0x43, 0xbc, 0x8d, 0x86, 0x8d, 0x63, 0x55, 0x05, 0x2f, 0x1a, 0x0e, 0x83, 0x04, 0xaf, 0x96,
	0x61, 0xeb, 0x99, 0x65, 0xc2, 0xda, 0xf9, 0xae, 0x68, 0xdd, 0x84, 0xfa, 0x94, 0xc6, 0xd5, 0x32,
	0x74, 0x13, 0x54, 0x3e, 0x55, 0x9b, 0x26, 0xd6, 0x3a, 0xd4, 0xa7, 0x9a, 0xa3, 0xf5, 0xf3, 0x02,
	0x00, 0x9e, 0x4d, 0x27, 0x71, 0x13, 0xc9, 0x76, 0xa1, 0xf1, 0xa3, 0x08, 0x12, 0xee, 0x74, 0xc7,
	0x09, 0x97, 0x4e, 0xcc, 0x85, 0x23, 0xb9, 0xa7, 0xcf, 0xc1, 0x44, 0xe8, 0x50, 0x21, 0xcf, 0xb8,
	0xe8, 0x70, 0x8f, 0xdd, 0x01, 0x46, 0xf4, 0x17, 0x7c, 0x9c, 0xb1, 0x69, 0x6b, 0x75, 0x44, 0xbe,
	0xe5, 0xe3, 0x09, 0x79, 0x17, 0x1a, 0x82, 0xbb, 0x3e, 0x85, 0xce, 0xd8, 0xb4, 0x67, 0x53, 0x41,
	0x18, 0x7a, 0x42, 0xbf, 0x0d, 0xeb, 0x48, 0x3f, 0x17, 0x9a, 0x8e, 0x62, 0x4d, 0x01, 0xb9, 0xc8,
	0xb7, 0xc1, 0x74, 0xe3, 0x58, 0x44, 0xaf, 0x83, 0xa1, 0xea, 0x8c, 0x32, 0x78, 0xc3, 0xb1, 0x7d,
	0x18, 0x76, 0x3d, 0x67, 0xef, 0x04, 0x6f, 0xb8, 0xaa, 0xee, 0x8b, 0x57, 0x8e, 0x17, 0x8d, 0xc2,
	0x04, 0xbb, 0x84, 0x61, 0x2f, 0xbd, 0x78, 0x75, 0xa4, 0xa6, 0xd6, 0x6f, 0x25, 0x58, 0xc6, 0xa3,
	0xc0, 0x3b, 0xfe, 0x4e, 0x37, 0xe5, 0x63, 0x58, 0x94, 0xea, 0xdc, 0xf4, 0x7d, 0x34, 0xe9, 0x3e,
	0x66, 0xe7, 0x69, 0x13, 0x5c, 0x58, 0xdf, 0xfb, 0xb0, 0xa2, 0x64, 0x2f, 0x1d, 0x45, 0x19, 0xc9,
	0xa6, 0xb1, 0x53, 0xbe, 0x55, 0xdb, 0x67, 0x93, 0x75, 0x94, 0xc8, 0x3a, 0x88, 0xd8, 0x35, 0xe4,
	0xd1, 0xc4, 0xfa, 0xbb, 0x0c, 0xcb, 0xaa, 0x88, 0x54, 0xaf, 0x0f, 0xa0, 0x46, 0x62, 0xa5, 0x1d,
	0xa9, 0x5c, 0x57, 0x6d, 0x40, 0x13, 0x6e, 0x8a, 0x7d, 0x02, 0xeb, 0x44, 0x90, 0xf1, 0x20, 0x48,
	0x34, 0x6d, 0x01, 0x69, 0x75, 0x04, 0x3a, 0xca, 0x4e, 0xdc, 0x4f, 0x81, 0xc9, 0xd0, 0x8d, 0x1d,
	0xc9, 0x43, 0x3f, 0x08, 0x7b, 0x9a, 0x5c, 0x46, 0xb2, 0xa9, 0x90, 0x0e, 0x01, 0xc4, 0x6e, 0x41,
	0x03, 0xd9, 0x6e, 0x1c, 0x0f, 0xc6, 0x19, 0xdd, 0x40, 0xfa, 0xba, 0x82, 0x0e, 0x34, 0x92, 0x46,
	0xcf, 0x3f, 0x18, 0xb9, 0x1a, 0xac, 0xda, 0xa6, 0xc8, 0xae, 0x27, 0xb1, 0xb7, 0xa0, 0xea, 0xb9,
	0xb1, 0xeb, 0x05, 0xc9, 0x18, 0x1b, 0xb3, 0x61, 0xa7, 0x73, 0x76, 0x0d, 0x96, 0x47, 0x92, 0xfb,
	0x54, 0xe7, 0x2a, 0x81, 0xca, 0x80, 0x05, 0xbe, 0x40, 0xc1, 0xf0, 0x5e, 0x0a, 0xae, 0xbd, 0x97,
	0x82, 0x57, 0xde, 0x47, 0xc1, 0xab, 0x45, 0x0a, 0xb6, 0x7e, 0x2f, 0x81, 0x39, 0xfd, 0xe4, 0xa8,
	0x3e, 0x49, 0xaf, 0xd3, 0xa4, 0x11, 0x55, 0xf0, 0x05, 0xf2, 0xd9, 0x47, 0xe7, 0x65, 0x57, 0xcf,
	0x9e, 0xac, 0x73, 0xaa, 0xbb, 0x03, 0xeb, 0x81, 0x8c, 0x06, 0x6e, 0xc2, 0x7d, 0x47, 0xf7, 0x1f,
	0xd9, 0x2c, 0xef, 0x94, 0x55, 0xb2, 0x13, 0x40, 0x37, 0x28, 0xc9, 0xee, 0x4e, 0x94, 0xa4, 0xde,
	0xc2, 0x89, 0x1a, 0xeb, 0x39, 0x41, 0x63, 0x6a, 0x24, 0x2d, 0x35, 0x94, 0xd6, 0xaf, 0x0b, 0x70,
	0xf5, 0x82, 0x8f, 0xa5, 0x79, 0xdd, 0xff, 0xde, 0x64, 0x21, 0x1e, 0x47, 0x5e, 0x5f, 0x6f, 0x81,
	0x9d, 0xbb, 0x5e, 0x27, 0x0a, 0xd1, 0x6b, 0xe1, 0x98, 0xb5, 0xa1, 0xa6, 0x5f, 0xdc, 0x64, 0x1c,
	0xd3, 0x57, 0xcb, 0xda, 0xfe, 0xad, 0xb9, 0x1f, 0x6c, 0xda, 0x7e, 0x3a, 0x8e, 0xb9, 0x0d, 0x5e,
	0x3a, 0x66, 0xbb, 0x50, 0x4b, 0x5c, 0x31, 0xf9, 0xd6, 0xd0, 0xdf, 0x2d, 0x2b, 0xf9, 0x6b, 0x67,
	0x03, 0x11, 0xd4, 0xd8, 0x7a, 0x00, 0x90, 0x05, 0x62, 0x6b, 0x00, 0x47, 0xa7, 0x4e, 0xfb, 0xe9,
	0xf3, 0x83, 0xc7, 0xed, 0x63, 0xf3, 0x12, 0x03, 0xa8, 0x1c, 0x9d, 0x3a, 0x07, 0xc7, 0xc7, 0x66,
	0x89, 0xad, 0xc2, 0xf2, 0xd1, 0xa9, 0x63, 0x9f, 0x3c, 0xf9, 0xee, 0xf9, 0x89, 0xb9, 0x60, 0x6d,
	0x41, 0xf3, 0xa2, 0x8f, 0x80, 0x43, 0xf3, 0xcf, 0xb7, 0xdb, 0xa5, 0xbf, 0xde, 0x6e, 0x97, 0xfe,
	0x79, 0xbb, 0x5d, 0xfa, 0xe5, 0xdf, 0xed, 0x4b, 0xdd, 0x0a, 0xfe, 0xbd, 0xb8, 0xf7, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x36, 0x94, 0xf2, 0xa2, 0xf4, 0x0c, 0x00, 0x00,
}

func (m *SchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchRequest_CreateRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_CreateRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateRange != nil {
		{
			size, err := m.CreateRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_DeleteRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_DeleteRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteRange != nil {
		{
			size, err := m.DeleteRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_TransferRangeLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_TransferRangeLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TransferRangeLeader != nil {
		{
			size, err := m.TransferRangeLeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_GetPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_GetPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetPeerInfo != nil {
		{
			size, err := m.GetPeerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_IsAlive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_IsAlive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IsAlive != nil {
		{
			size, err := m.IsAlive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_ChangeRaftMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_ChangeRaftMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangeRaftMember != nil {
		{
			size, err := m.ChangeRaftMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SchRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchRequest_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClusterId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resp != nil {
		{
			size := m.Resp.Size()
			i -= size
			if _, err := m.Resp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchResponse_CreateRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_CreateRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateRange != nil {
		{
			size, err := m.CreateRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_DeleteRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_DeleteRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteRange != nil {
		{
			size, err := m.DeleteRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_TransferRangeLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_TransferRangeLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TransferRangeLeader != nil {
		{
			size, err := m.TransferRangeLeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_GetPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_GetPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetPeerInfo != nil {
		{
			size, err := m.GetPeerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_IsAlive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_IsAlive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IsAlive != nil {
		{
			size, err := m.IsAlive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_ChangeRaftMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_ChangeRaftMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangeRaftMember != nil {
		{
			size, err := m.ChangeRaftMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SchResponse_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchResponse_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchResponse_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Leader != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Leader))
		i--
		dAtA[i] = 0x10
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x10
	}
	if m.RangeId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *TransferRangeLeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRangeLeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRangeLeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RangeId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferRangeLeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRangeLeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRangeLeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetPeerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPeerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPeerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RangeId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPeerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPeerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPeerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Commit != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Commit))
		i--
		dAtA[i] = 0x20
	}
	if m.Term != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Replica != nil {
		{
			size, err := m.Replica.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsAliveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsAliveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsAliveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *IsAliveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsAliveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsAliveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Alive {
		i--
		if m.Alive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RangeStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KvCount != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.KvCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ApproximateSize != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ApproximateSize))
		i--
		dAtA[i] = 0x28
	}
	if m.ReadKeysPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ReadKeysPerSec))
		i--
		dAtA[i] = 0x20
	}
	if m.ReadBytessPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ReadBytessPerSec))
		i--
		dAtA[i] = 0x18
	}
	if m.WriteKeysPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.WriteKeysPerSec))
		i--
		dAtA[i] = 0x10
	}
	if m.WriteBytesPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.WriteBytesPerSec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeersStatus) > 0 {
		for iNdEx := len(m.PeersStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeersStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchedule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Term != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x18
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadKeysPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ReadKeysPerSec))
		i--
		dAtA[i] = 0x68
	}
	if m.ReadBytessPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ReadBytessPerSec))
		i--
		dAtA[i] = 0x60
	}
	if m.WriteKeysPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.WriteKeysPerSec))
		i--
		dAtA[i] = 0x58
	}
	if m.WriteBytesPerSec != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.WriteBytesPerSec))
		i--
		dAtA[i] = 0x50
	}
	if m.UsedSize != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.UsedSize))
		i--
		dAtA[i] = 0x40
	}
	if m.Capacity != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x38
	}
	if m.RangeLeaderCount != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeLeaderCount))
		i--
		dAtA[i] = 0x30
	}
	if m.SnapApplyingCount != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.SnapApplyingCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapSendingCount != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.SnapSendingCount))
		i--
		dAtA[i] = 0x18
	}
	if m.RangeSplitCount != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeSplitCount))
		i--
		dAtA[i] = 0x10
	}
	if m.RangeCount != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RangeInfos) > 0 {
		for iNdEx := len(m.RangeInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RangeInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchedule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.IsolatedReplicas) > 0 {
		dAtA23 := make([]byte, len(m.IsolatedReplicas)*10)
		var j22 int
		for _, num := range m.IsolatedReplicas {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintSchedule(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x1a
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NodeId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangeRaftMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeRaftMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeRaftMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetPeer != nil {
		{
			size, err := m.TargetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ChangeType != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x18
	}
	if m.RangeEpoch != nil {
		{
			size, err := m.RangeEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchedule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RangeId != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangeRaftMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeRaftMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeRaftMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchedule(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchedule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchRequest_CreateRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateRange != nil {
		l = m.CreateRange.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_DeleteRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteRange != nil {
		l = m.DeleteRange.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_TransferRangeLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransferRangeLeader != nil {
		l = m.TransferRangeLeader.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_GetPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetPeerInfo != nil {
		l = m.GetPeerInfo.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_IsAlive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAlive != nil {
		l = m.IsAlive.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_ChangeRaftMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeRaftMember != nil {
		l = m.ChangeRaftMember.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovSchedule(uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchResponse_CreateRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateRange != nil {
		l = m.CreateRange.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_DeleteRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteRange != nil {
		l = m.DeleteRange.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_TransferRangeLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransferRangeLeader != nil {
		l = m.TransferRangeLeader.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_GetPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetPeerInfo != nil {
		l = m.GetPeerInfo.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_IsAlive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAlive != nil {
		l = m.IsAlive.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_ChangeRaftMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeRaftMember != nil {
		l = m.ChangeRaftMember.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *SchResponse_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovSchedule(uint64(m.ClusterId))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Leader != 0 {
		n += 1 + sovSchedule(uint64(m.Leader))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovSchedule(uint64(m.RangeId))
	}
	if m.PeerId != 0 {
		n += 1 + sovSchedule(uint64(m.PeerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferRangeLeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovSchedule(uint64(m.RangeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferRangeLeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPeerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovSchedule(uint64(m.RangeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPeerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replica != nil {
		l = m.Replica.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSchedule(uint64(m.Index))
	}
	if m.Term != 0 {
		n += 1 + sovSchedule(uint64(m.Term))
	}
	if m.Commit != 0 {
		n += 1 + sovSchedule(uint64(m.Commit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsAliveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsAliveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WriteBytesPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.WriteBytesPerSec))
	}
	if m.WriteKeysPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.WriteKeysPerSec))
	}
	if m.ReadBytessPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.ReadBytessPerSec))
	}
	if m.ReadKeysPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.ReadKeysPerSec))
	}
	if m.ApproximateSize != 0 {
		n += 1 + sovSchedule(uint64(m.ApproximateSize))
	}
	if m.KvCount != 0 {
		n += 1 + sovSchedule(uint64(m.KvCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovSchedule(uint64(m.Term))
	}
	if len(m.PeersStatus) > 0 {
		for _, e := range m.PeersStatus {
			l = e.Size()
			n += 1 + l + sovSchedule(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeCount != 0 {
		n += 1 + sovSchedule(uint64(m.RangeCount))
	}
	if m.RangeSplitCount != 0 {
		n += 1 + sovSchedule(uint64(m.RangeSplitCount))
	}
	if m.SnapSendingCount != 0 {
		n += 1 + sovSchedule(uint64(m.SnapSendingCount))
	}
	if m.SnapApplyingCount != 0 {
		n += 1 + sovSchedule(uint64(m.SnapApplyingCount))
	}
	if m.RangeLeaderCount != 0 {
		n += 1 + sovSchedule(uint64(m.RangeLeaderCount))
	}
	if m.Capacity != 0 {
		n += 1 + sovSchedule(uint64(m.Capacity))
	}
	if m.UsedSize != 0 {
		n += 1 + sovSchedule(uint64(m.UsedSize))
	}
	if m.WriteBytesPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.WriteBytesPerSec))
	}
	if m.WriteKeysPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.WriteKeysPerSec))
	}
	if m.ReadBytessPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.ReadBytessPerSec))
	}
	if m.ReadKeysPerSec != 0 {
		n += 1 + sovSchedule(uint64(m.ReadKeysPerSec))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovSchedule(uint64(m.NodeId))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if len(m.IsolatedReplicas) > 0 {
		l = 0
		for _, e := range m.IsolatedReplicas {
			l += sovSchedule(uint64(e))
		}
		n += 1 + sovSchedule(uint64(l)) + l
	}
	if len(m.RangeInfos) > 0 {
		for _, e := range m.RangeInfos {
			l = e.Size()
			n += 1 + l + sovSchedule(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeRaftMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovSchedule(uint64(m.RangeId))
	}
	if m.RangeEpoch != nil {
		l = m.RangeEpoch.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.ChangeType != 0 {
		n += 1 + sovSchedule(uint64(m.ChangeType))
	}
	if m.TargetPeer != nil {
		l = m.TargetPeer.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeRaftMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSchedule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchedule(x uint64) (n int) {
	return sovSchedule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &SchRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateRangeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_CreateRange{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRangeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_DeleteRange{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferRangeLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferRangeLeaderRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_TransferRangeLeader{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetPeerInfoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_GetPeerInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IsAliveRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_IsAlive{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInfoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_NodeInfo{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeRaftMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeRaftMemberRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &SchRequest_ChangeRaftMember{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &SchResponse_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateRangeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_CreateRange{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRangeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_DeleteRange{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferRangeLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferRangeLeaderResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_TransferRangeLeader{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetPeerInfoResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_GetPeerInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IsAliveResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_IsAlive{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInfoResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_NodeInfo{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeRaftMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeRaftMemberResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &SchResponse_ChangeRaftMember{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchResponse_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &basepb.Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferRangeLeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRangeLeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRangeLeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferRangeLeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRangeLeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRangeLeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPeerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPeerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPeerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPeerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPeerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPeerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replica == nil {
				m.Replica = &basepb.Replica{}
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsAliveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsAliveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsAliveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsAliveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsAliveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsAliveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Alive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteBytesPerSec", wireType)
			}
			m.WriteBytesPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteBytesPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteKeysPerSec", wireType)
			}
			m.WriteKeysPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteKeysPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadBytessPerSec", wireType)
			}
			m.ReadBytessPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadBytessPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadKeysPerSec", wireType)
			}
			m.ReadKeysPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadKeysPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproximateSize", wireType)
			}
			m.ApproximateSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApproximateSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvCount", wireType)
			}
			m.KvCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KvCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &basepb.Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &RangeStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeersStatus = append(m.PeersStatus, &basepb.PeerStatus{})
			if err := m.PeersStatus[len(m.PeersStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeCount", wireType)
			}
			m.RangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeSplitCount", wireType)
			}
			m.RangeSplitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeSplitCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapSendingCount", wireType)
			}
			m.SnapSendingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapSendingCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapApplyingCount", wireType)
			}
			m.SnapApplyingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapApplyingCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeLeaderCount", wireType)
			}
			m.RangeLeaderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeLeaderCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedSize", wireType)
			}
			m.UsedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteBytesPerSec", wireType)
			}
			m.WriteBytesPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteBytesPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteKeysPerSec", wireType)
			}
			m.WriteKeysPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteKeysPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadBytessPerSec", wireType)
			}
			m.ReadBytessPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadBytessPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadKeysPerSec", wireType)
			}
			m.ReadKeysPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadKeysPerSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &NodeStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchedule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IsolatedReplicas = append(m.IsolatedReplicas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchedule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchedule
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchedule
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IsolatedReplicas) == 0 {
					m.IsolatedReplicas = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchedule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IsolatedReplicas = append(m.IsolatedReplicas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedReplicas", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeInfos = append(m.RangeInfos, &RangeInfo{})
			if err := m.RangeInfos[len(m.RangeInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeRaftMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeRaftMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeRaftMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeEpoch == nil {
				m.RangeEpoch = &basepb.RangeEpoch{}
			}
			if err := m.RangeEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= ChangeRaftMemberRequest_ChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetPeer == nil {
				m.TargetPeer = &basepb.Peer{}
			}
			if err := m.TargetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeRaftMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeRaftMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeRaftMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchedule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchedule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchedule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchedule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchedule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchedule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchedule = fmt.Errorf("proto: unexpected end of group")
)
