// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/api.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RangeRequest data request to a range
type RangeRequest struct {
	Header *RangeRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*RangeRequest_Prepare
	//	*RangeRequest_Decide
	//	*RangeRequest_ClearUp
	//	*RangeRequest_GetLockInfo
	//	*RangeRequest_Select
	//	*RangeRequest_Scan
	//	*RangeRequest_SelectFlow
	//	*RangeRequest_KvGet
	//	*RangeRequest_KvPut
	//	*RangeRequest_KvDelete
	Req                  isRangeRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RangeRequest) Reset()         { *m = RangeRequest{} }
func (m *RangeRequest) String() string { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()    {}
func (*RangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{0}
}
func (m *RangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeRequest.Merge(m, src)
}
func (m *RangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *RangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RangeRequest proto.InternalMessageInfo

type isRangeRequest_Req interface {
	isRangeRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RangeRequest_Prepare struct {
	Prepare *PrepareRequest `protobuf:"bytes,2,opt,name=prepare,proto3,oneof" json:"prepare,omitempty"`
}
type RangeRequest_Decide struct {
	Decide *DecideRequest `protobuf:"bytes,3,opt,name=decide,proto3,oneof" json:"decide,omitempty"`
}
type RangeRequest_ClearUp struct {
	ClearUp *ClearupRequest `protobuf:"bytes,4,opt,name=clear_up,json=clearUp,proto3,oneof" json:"clear_up,omitempty"`
}
type RangeRequest_GetLockInfo struct {
	GetLockInfo *GetLockInfoRequest `protobuf:"bytes,5,opt,name=get_lock_info,json=getLockInfo,proto3,oneof" json:"get_lock_info,omitempty"`
}
type RangeRequest_Select struct {
	Select *SelectRequest `protobuf:"bytes,6,opt,name=select,proto3,oneof" json:"select,omitempty"`
}
type RangeRequest_Scan struct {
	Scan *ScanRequest `protobuf:"bytes,7,opt,name=scan,proto3,oneof" json:"scan,omitempty"`
}
type RangeRequest_SelectFlow struct {
	SelectFlow *SelectFlowRequest `protobuf:"bytes,8,opt,name=select_flow,json=selectFlow,proto3,oneof" json:"select_flow,omitempty"`
}
type RangeRequest_KvGet struct {
	KvGet *KvGetRequest `protobuf:"bytes,20,opt,name=kv_get,json=kvGet,proto3,oneof" json:"kv_get,omitempty"`
}
type RangeRequest_KvPut struct {
	KvPut *KvPutRequest `protobuf:"bytes,21,opt,name=kv_put,json=kvPut,proto3,oneof" json:"kv_put,omitempty"`
}
type RangeRequest_KvDelete struct {
	KvDelete *KvDeleteRequest `protobuf:"bytes,22,opt,name=kv_delete,json=kvDelete,proto3,oneof" json:"kv_delete,omitempty"`
}

func (*RangeRequest_Prepare) isRangeRequest_Req()     {}
func (*RangeRequest_Decide) isRangeRequest_Req()      {}
func (*RangeRequest_ClearUp) isRangeRequest_Req()     {}
func (*RangeRequest_GetLockInfo) isRangeRequest_Req() {}
func (*RangeRequest_Select) isRangeRequest_Req()      {}
func (*RangeRequest_Scan) isRangeRequest_Req()        {}
func (*RangeRequest_SelectFlow) isRangeRequest_Req()  {}
func (*RangeRequest_KvGet) isRangeRequest_Req()       {}
func (*RangeRequest_KvPut) isRangeRequest_Req()       {}
func (*RangeRequest_KvDelete) isRangeRequest_Req()    {}

func (m *RangeRequest) GetReq() isRangeRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *RangeRequest) GetHeader() *RangeRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RangeRequest) GetPrepare() *PrepareRequest {
	if x, ok := m.GetReq().(*RangeRequest_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *RangeRequest) GetDecide() *DecideRequest {
	if x, ok := m.GetReq().(*RangeRequest_Decide); ok {
		return x.Decide
	}
	return nil
}

func (m *RangeRequest) GetClearUp() *ClearupRequest {
	if x, ok := m.GetReq().(*RangeRequest_ClearUp); ok {
		return x.ClearUp
	}
	return nil
}

func (m *RangeRequest) GetGetLockInfo() *GetLockInfoRequest {
	if x, ok := m.GetReq().(*RangeRequest_GetLockInfo); ok {
		return x.GetLockInfo
	}
	return nil
}

func (m *RangeRequest) GetSelect() *SelectRequest {
	if x, ok := m.GetReq().(*RangeRequest_Select); ok {
		return x.Select
	}
	return nil
}

func (m *RangeRequest) GetScan() *ScanRequest {
	if x, ok := m.GetReq().(*RangeRequest_Scan); ok {
		return x.Scan
	}
	return nil
}

func (m *RangeRequest) GetSelectFlow() *SelectFlowRequest {
	if x, ok := m.GetReq().(*RangeRequest_SelectFlow); ok {
		return x.SelectFlow
	}
	return nil
}

func (m *RangeRequest) GetKvGet() *KvGetRequest {
	if x, ok := m.GetReq().(*RangeRequest_KvGet); ok {
		return x.KvGet
	}
	return nil
}

func (m *RangeRequest) GetKvPut() *KvPutRequest {
	if x, ok := m.GetReq().(*RangeRequest_KvPut); ok {
		return x.KvPut
	}
	return nil
}

func (m *RangeRequest) GetKvDelete() *KvDeleteRequest {
	if x, ok := m.GetReq().(*RangeRequest_KvDelete); ok {
		return x.KvDelete
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RangeRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RangeRequest_Prepare)(nil),
		(*RangeRequest_Decide)(nil),
		(*RangeRequest_ClearUp)(nil),
		(*RangeRequest_GetLockInfo)(nil),
		(*RangeRequest_Select)(nil),
		(*RangeRequest_Scan)(nil),
		(*RangeRequest_SelectFlow)(nil),
		(*RangeRequest_KvGet)(nil),
		(*RangeRequest_KvPut)(nil),
		(*RangeRequest_KvDelete)(nil),
	}
}

type RangeRequest_Header struct {
	ClusterId            uint64             `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TraceId              uint64             `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	RangeId              uint64             `protobuf:"varint,3,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	RangeEpoch           *basepb.RangeEpoch `protobuf:"bytes,4,opt,name=range_epoch,json=rangeEpoch,proto3" json:"range_epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RangeRequest_Header) Reset()         { *m = RangeRequest_Header{} }
func (m *RangeRequest_Header) String() string { return proto.CompactTextString(m) }
func (*RangeRequest_Header) ProtoMessage()    {}
func (*RangeRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{0, 0}
}
func (m *RangeRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeRequest_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeRequest_Header.Merge(m, src)
}
func (m *RangeRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *RangeRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_RangeRequest_Header proto.InternalMessageInfo

func (m *RangeRequest_Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *RangeRequest_Header) GetTraceId() uint64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *RangeRequest_Header) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *RangeRequest_Header) GetRangeEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.RangeEpoch
	}
	return nil
}

type RangeResponse struct {
	Header *RangeResponse_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*RangeResponse_Prepare
	//	*RangeResponse_Decide
	//	*RangeResponse_ClearUp
	//	*RangeResponse_GetLockInfo
	//	*RangeResponse_Select
	//	*RangeResponse_Scan
	//	*RangeResponse_SelectFlow
	//	*RangeResponse_KvGet
	//	*RangeResponse_KvPut
	//	*RangeResponse_KvDelete
	Resp                 isRangeResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RangeResponse) Reset()         { *m = RangeResponse{} }
func (m *RangeResponse) String() string { return proto.CompactTextString(m) }
func (*RangeResponse) ProtoMessage()    {}
func (*RangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{1}
}
func (m *RangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeResponse.Merge(m, src)
}
func (m *RangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *RangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RangeResponse proto.InternalMessageInfo

type isRangeResponse_Resp interface {
	isRangeResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RangeResponse_Prepare struct {
	Prepare *PrepareResponse `protobuf:"bytes,2,opt,name=prepare,proto3,oneof" json:"prepare,omitempty"`
}
type RangeResponse_Decide struct {
	Decide *DecideResponse `protobuf:"bytes,3,opt,name=decide,proto3,oneof" json:"decide,omitempty"`
}
type RangeResponse_ClearUp struct {
	ClearUp *ClearupResponse `protobuf:"bytes,4,opt,name=clear_up,json=clearUp,proto3,oneof" json:"clear_up,omitempty"`
}
type RangeResponse_GetLockInfo struct {
	GetLockInfo *GetLockInfoResponse `protobuf:"bytes,5,opt,name=get_lock_info,json=getLockInfo,proto3,oneof" json:"get_lock_info,omitempty"`
}
type RangeResponse_Select struct {
	Select *SelectResponse `protobuf:"bytes,6,opt,name=select,proto3,oneof" json:"select,omitempty"`
}
type RangeResponse_Scan struct {
	Scan *ScanResponse `protobuf:"bytes,7,opt,name=scan,proto3,oneof" json:"scan,omitempty"`
}
type RangeResponse_SelectFlow struct {
	SelectFlow *SelectFlowResponse `protobuf:"bytes,8,opt,name=select_flow,json=selectFlow,proto3,oneof" json:"select_flow,omitempty"`
}
type RangeResponse_KvGet struct {
	KvGet *KvGetResponse `protobuf:"bytes,20,opt,name=kv_get,json=kvGet,proto3,oneof" json:"kv_get,omitempty"`
}
type RangeResponse_KvPut struct {
	KvPut *KvPutResponse `protobuf:"bytes,21,opt,name=kv_put,json=kvPut,proto3,oneof" json:"kv_put,omitempty"`
}
type RangeResponse_KvDelete struct {
	KvDelete *KvDeleteResponse `protobuf:"bytes,22,opt,name=kv_delete,json=kvDelete,proto3,oneof" json:"kv_delete,omitempty"`
}

func (*RangeResponse_Prepare) isRangeResponse_Resp()     {}
func (*RangeResponse_Decide) isRangeResponse_Resp()      {}
func (*RangeResponse_ClearUp) isRangeResponse_Resp()     {}
func (*RangeResponse_GetLockInfo) isRangeResponse_Resp() {}
func (*RangeResponse_Select) isRangeResponse_Resp()      {}
func (*RangeResponse_Scan) isRangeResponse_Resp()        {}
func (*RangeResponse_SelectFlow) isRangeResponse_Resp()  {}
func (*RangeResponse_KvGet) isRangeResponse_Resp()       {}
func (*RangeResponse_KvPut) isRangeResponse_Resp()       {}
func (*RangeResponse_KvDelete) isRangeResponse_Resp()    {}

func (m *RangeResponse) GetResp() isRangeResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *RangeResponse) GetHeader() *RangeResponse_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RangeResponse) GetPrepare() *PrepareResponse {
	if x, ok := m.GetResp().(*RangeResponse_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *RangeResponse) GetDecide() *DecideResponse {
	if x, ok := m.GetResp().(*RangeResponse_Decide); ok {
		return x.Decide
	}
	return nil
}

func (m *RangeResponse) GetClearUp() *ClearupResponse {
	if x, ok := m.GetResp().(*RangeResponse_ClearUp); ok {
		return x.ClearUp
	}
	return nil
}

func (m *RangeResponse) GetGetLockInfo() *GetLockInfoResponse {
	if x, ok := m.GetResp().(*RangeResponse_GetLockInfo); ok {
		return x.GetLockInfo
	}
	return nil
}

func (m *RangeResponse) GetSelect() *SelectResponse {
	if x, ok := m.GetResp().(*RangeResponse_Select); ok {
		return x.Select
	}
	return nil
}

func (m *RangeResponse) GetScan() *ScanResponse {
	if x, ok := m.GetResp().(*RangeResponse_Scan); ok {
		return x.Scan
	}
	return nil
}

func (m *RangeResponse) GetSelectFlow() *SelectFlowResponse {
	if x, ok := m.GetResp().(*RangeResponse_SelectFlow); ok {
		return x.SelectFlow
	}
	return nil
}

func (m *RangeResponse) GetKvGet() *KvGetResponse {
	if x, ok := m.GetResp().(*RangeResponse_KvGet); ok {
		return x.KvGet
	}
	return nil
}

func (m *RangeResponse) GetKvPut() *KvPutResponse {
	if x, ok := m.GetResp().(*RangeResponse_KvPut); ok {
		return x.KvPut
	}
	return nil
}

func (m *RangeResponse) GetKvDelete() *KvDeleteResponse {
	if x, ok := m.GetResp().(*RangeResponse_KvDelete); ok {
		return x.KvDelete
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RangeResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RangeResponse_Prepare)(nil),
		(*RangeResponse_Decide)(nil),
		(*RangeResponse_ClearUp)(nil),
		(*RangeResponse_GetLockInfo)(nil),
		(*RangeResponse_Select)(nil),
		(*RangeResponse_Scan)(nil),
		(*RangeResponse_SelectFlow)(nil),
		(*RangeResponse_KvGet)(nil),
		(*RangeResponse_KvPut)(nil),
		(*RangeResponse_KvDelete)(nil),
	}
}

type RangeResponse_Header struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TraceId              uint64   `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Error                *Error   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeResponse_Header) Reset()         { *m = RangeResponse_Header{} }
func (m *RangeResponse_Header) String() string { return proto.CompactTextString(m) }
func (*RangeResponse_Header) ProtoMessage()    {}
func (*RangeResponse_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{1, 0}
}
func (m *RangeResponse_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeResponse_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeResponse_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeResponse_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeResponse_Header.Merge(m, src)
}
func (m *RangeResponse_Header) XXX_Size() int {
	return m.Size()
}
func (m *RangeResponse_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeResponse_Header.DiscardUnknown(m)
}

var xxx_messageInfo_RangeResponse_Header proto.InternalMessageInfo

func (m *RangeResponse_Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *RangeResponse_Header) GetTraceId() uint64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *RangeResponse_Header) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*RangeRequest)(nil), "dspb.RangeRequest")
	proto.RegisterType((*RangeRequest_Header)(nil), "dspb.RangeRequest.Header")
	proto.RegisterType((*RangeResponse)(nil), "dspb.RangeResponse")
	proto.RegisterType((*RangeResponse_Header)(nil), "dspb.RangeResponse.Header")
}

func init() { proto.RegisterFile("dspb/api.proto", fileDescriptor_ff605de5c4859d61) }

var fileDescriptor_ff605de5c4859d61 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x4f, 0xd4, 0x40,
	0x18, 0xc6, 0x29, 0x6c, 0xcb, 0x32, 0x2b, 0x06, 0x87, 0x5d, 0x1c, 0x36, 0x71, 0xa3, 0x5c, 0x24,
	0x11, 0x8b, 0x80, 0x7a, 0xd0, 0x44, 0x13, 0x04, 0x81, 0xe8, 0x81, 0xd4, 0x78, 0x6e, 0xda, 0xe9,
	0xcb, 0xee, 0xa6, 0xb5, 0x33, 0x4c, 0xa7, 0x8b, 0x9f, 0xc3, 0x93, 0x1f, 0xc4, 0x0f, 0xe1, 0xd1,
	0x8b, 0x77, 0x83, 0x5f, 0xc4, 0x74, 0x66, 0xb6, 0xff, 0xe0, 0xe8, 0x69, 0xfb, 0x3e, 0xef, 0xef,
	0xe9, 0x4c, 0xb2, 0xbf, 0x14, 0xdd, 0x8d, 0x32, 0x1e, 0xee, 0x06, 0x7c, 0xea, 0x72, 0xc1, 0x24,
	0xc3, 0x9d, 0x62, 0x1e, 0xbe, 0x1c, 0x4f, 0xe5, 0x24, 0x0f, 0x5d, 0xca, 0xbe, 0xec, 0xd2, 0x49,
	0x1e, 0x06, 0x2c, 0x0a, 0xab, 0x07, 0x45, 0xee, 0x86, 0x41, 0x06, 0x3c, 0x34, 0x3f, 0xba, 0x3d,
	0x5c, 0x53, 0x6f, 0x03, 0x21, 0x98, 0x30, 0xc9, 0xaa, 0x4a, 0xe2, 0x99, 0x19, 0xf5, 0x71, 0xf2,
	0x6b, 0xaa, 0xe7, 0xad, 0xdf, 0x36, 0xba, 0xe3, 0x05, 0xe9, 0x18, 0x3c, 0xb8, 0xcc, 0x21, 0x93,
	0x78, 0x0f, 0x39, 0x13, 0x08, 0x22, 0x10, 0xc4, 0x7a, 0x68, 0x6d, 0xf7, 0xf6, 0x37, 0xdd, 0xa2,
	0xe1, 0xd6, 0x19, 0xf7, 0x54, 0x01, 0x9e, 0x01, 0xf1, 0x33, 0xb4, 0xcc, 0x05, 0xf0, 0x40, 0x00,
	0x59, 0x54, 0x9d, 0xbe, 0xee, 0x9c, 0xeb, 0xd0, 0xb4, 0x4e, 0x17, 0xbc, 0x39, 0x86, 0x9f, 0x22,
	0x27, 0x02, 0x3a, 0x8d, 0x80, 0x2c, 0xa9, 0xc2, 0xba, 0x2e, 0x1c, 0xa9, 0xac, 0xe2, 0x0d, 0x84,
	0xf7, 0x50, 0x97, 0x26, 0x10, 0x08, 0x3f, 0xe7, 0xa4, 0x53, 0x3f, 0xe1, 0x5d, 0x91, 0xe6, 0xbc,
	0x76, 0x82, 0xe2, 0x3e, 0x73, 0xfc, 0x06, 0xad, 0x8e, 0x41, 0xfa, 0x09, 0xa3, 0xb1, 0x3f, 0x4d,
	0x2f, 0x18, 0xb1, 0x55, 0x8f, 0xe8, 0xde, 0x09, 0xc8, 0x8f, 0x8c, 0xc6, 0x67, 0xe9, 0x05, 0xab,
	0xba, 0xbd, 0x71, 0x95, 0x16, 0x37, 0xcc, 0x20, 0x01, 0x2a, 0x89, 0x53, 0xbf, 0xe1, 0x27, 0x95,
	0xd5, 0x6e, 0xa8, 0x21, 0xfc, 0x18, 0x75, 0x32, 0x1a, 0xa4, 0x64, 0x59, 0xc1, 0xf7, 0x0c, 0x4c,
	0x83, 0xb4, 0x42, 0x15, 0x80, 0x5f, 0xa1, 0x9e, 0xae, 0xf8, 0x17, 0x09, 0xbb, 0x22, 0x5d, 0xc5,
	0xdf, 0xaf, 0xbf, 0xfc, 0x7d, 0xc2, 0xae, 0xaa, 0x16, 0xca, 0xca, 0x10, 0x3f, 0x41, 0x4e, 0x3c,
	0xf3, 0xc7, 0x20, 0x49, 0x5f, 0xd5, 0xb0, 0xae, 0x7d, 0x98, 0x9d, 0x40, 0xed, 0x4a, 0x76, 0x5c,
	0xcc, 0x06, 0xe6, 0xb9, 0x24, 0x83, 0x26, 0x7c, 0x9e, 0x37, 0xe1, 0xf3, 0x5c, 0xe2, 0xe7, 0x68,
	0x25, 0x9e, 0xf9, 0x11, 0x24, 0x20, 0x81, 0x6c, 0x28, 0x7e, 0x30, 0xe7, 0x8f, 0x54, 0x5a, 0x55,
	0xba, 0xb1, 0x89, 0x86, 0xdf, 0x2c, 0xe4, 0x68, 0x15, 0xf0, 0x03, 0x84, 0x68, 0x92, 0x67, 0x12,
	0x84, 0x3f, 0x8d, 0x94, 0x39, 0x1d, 0x6f, 0xc5, 0x24, 0x67, 0x11, 0xde, 0x44, 0x5d, 0x29, 0x02,
	0x0a, 0xc5, 0x72, 0x51, 0x2d, 0x97, 0xd5, 0xac, 0x57, 0xa2, 0x70, 0xab, 0x58, 0x2d, 0xe9, 0x95,
	0x9a, 0xcf, 0x22, 0x7c, 0x80, 0x7a, 0x7a, 0x05, 0x9c, 0xd1, 0x89, 0xf9, 0xe7, 0xb1, 0x6b, 0x84,
	0x57, 0x46, 0x1e, 0x17, 0x1b, 0x0f, 0x89, 0xf2, 0xf9, 0xd0, 0x46, 0x4b, 0x02, 0x2e, 0xb7, 0x7e,
	0xd8, 0x68, 0xd5, 0x38, 0x9b, 0x71, 0x96, 0x66, 0x80, 0xf7, 0x5b, 0x62, 0x0f, 0x1b, 0x62, 0x6b,
	0xa8, 0x6d, 0xf6, 0x5e, 0xdb, 0xec, 0x41, 0xcb, 0x6c, 0x5d, 0xab, 0xab, 0xed, 0xb6, 0xd4, 0xee,
	0x37, 0xd5, 0x2e, 0x0b, 0x73, 0xb7, 0xf7, 0x6f, 0xb8, 0x3d, 0x68, 0xb9, 0x5d, 0x9d, 0x31, 0x97,
	0xfb, 0xed, 0xed, 0x72, 0x6f, 0xde, 0x22, 0x77, 0x59, 0x6e, 0xd8, 0xed, 0xb6, 0xec, 0xee, 0x37,
	0xed, 0xae, 0x2e, 0x69, 0xf4, 0xde, 0x6e, 0xe8, 0x8d, 0xeb, 0x7a, 0x97, 0xac, 0xf6, 0xfb, 0xf5,
	0x6d, 0x7e, 0x93, 0x9b, 0x7e, 0x97, 0xb5, 0xba, 0xe0, 0x3b, 0x2d, 0xc1, 0xd7, 0x1b, 0x82, 0x97,
	0x15, 0x63, 0xf8, 0x4e, 0xcb, 0xf0, 0xf5, 0x86, 0xe1, 0x75, 0xba, 0x50, 0xfc, 0xc5, 0x4d, 0xc5,
	0x37, 0xda, 0x8a, 0x97, 0x9d, 0xca, 0x71, 0xf8, 0x0f, 0x8a, 0x3f, 0x42, 0xb6, 0xfa, 0x22, 0x1b,
	0x23, 0x7a, 0xfa, 0xd8, 0xe3, 0x22, 0xf2, 0xf4, 0xe6, 0xd0, 0x41, 0x1d, 0x01, 0x19, 0x3f, 0x5c,
	0xfb, 0x79, 0x3d, 0xb2, 0x7e, 0x5d, 0x8f, 0xac, 0x3f, 0xd7, 0x23, 0xeb, 0xfb, 0xdf, 0xd1, 0x42,
	0xe8, 0xa8, 0xef, 0xf4, 0xc1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0x2a, 0x12, 0xc0, 0x28,
	0x06, 0x00, 0x00,
}

func (m *RangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RangeRequest_Prepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_Prepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prepare != nil {
		{
			size, err := m.Prepare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_Decide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_Decide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Decide != nil {
		{
			size, err := m.Decide.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_ClearUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_ClearUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClearUp != nil {
		{
			size, err := m.ClearUp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_GetLockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_GetLockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetLockInfo != nil {
		{
			size, err := m.GetLockInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Select != nil {
		{
			size, err := m.Select.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_Scan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_Scan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Scan != nil {
		{
			size, err := m.Scan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_SelectFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_SelectFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SelectFlow != nil {
		{
			size, err := m.SelectFlow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_KvGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_KvGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvGet != nil {
		{
			size, err := m.KvGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_KvPut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_KvPut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvPut != nil {
		{
			size, err := m.KvPut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_KvDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_KvDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvDelete != nil {
		{
			size, err := m.KvDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RangeRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeRequest_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RangeEpoch != nil {
		{
			size, err := m.RangeEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RangeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x18
	}
	if m.TraceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TraceId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resp != nil {
		{
			size := m.Resp.Size()
			i -= size
			if _, err := m.Resp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RangeResponse_Prepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_Prepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prepare != nil {
		{
			size, err := m.Prepare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_Decide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_Decide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Decide != nil {
		{
			size, err := m.Decide.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_ClearUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_ClearUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClearUp != nil {
		{
			size, err := m.ClearUp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_GetLockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_GetLockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetLockInfo != nil {
		{
			size, err := m.GetLockInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Select != nil {
		{
			size, err := m.Select.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_Scan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_Scan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Scan != nil {
		{
			size, err := m.Scan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_SelectFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_SelectFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SelectFlow != nil {
		{
			size, err := m.SelectFlow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_KvGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_KvGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvGet != nil {
		{
			size, err := m.KvGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_KvPut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_KvPut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvPut != nil {
		{
			size, err := m.KvPut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_KvDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_KvDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvDelete != nil {
		{
			size, err := m.KvDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RangeResponse_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeResponse_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeResponse_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TraceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TraceId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeRequest_Prepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prepare != nil {
		l = m.Prepare.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Decide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decide != nil {
		l = m.Decide.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_ClearUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearUp != nil {
		l = m.ClearUp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_GetLockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetLockInfo != nil {
		l = m.GetLockInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Scan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scan != nil {
		l = m.Scan.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_SelectFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectFlow != nil {
		l = m.SelectFlow.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_KvGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvGet != nil {
		l = m.KvGet.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_KvPut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvPut != nil {
		l = m.KvPut.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_KvDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvDelete != nil {
		l = m.KvDelete.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovApi(uint64(m.ClusterId))
	}
	if m.TraceId != 0 {
		n += 1 + sovApi(uint64(m.TraceId))
	}
	if m.RangeId != 0 {
		n += 1 + sovApi(uint64(m.RangeId))
	}
	if m.RangeEpoch != nil {
		l = m.RangeEpoch.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeResponse_Prepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prepare != nil {
		l = m.Prepare.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Decide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decide != nil {
		l = m.Decide.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_ClearUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearUp != nil {
		l = m.ClearUp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_GetLockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetLockInfo != nil {
		l = m.GetLockInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Scan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scan != nil {
		l = m.Scan.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_SelectFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectFlow != nil {
		l = m.SelectFlow.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_KvGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvGet != nil {
		l = m.KvGet.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_KvPut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvPut != nil {
		l = m.KvPut.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_KvDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvDelete != nil {
		l = m.KvDelete.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovApi(uint64(m.ClusterId))
	}
	if m.TraceId != 0 {
		n += 1 + sovApi(uint64(m.TraceId))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RangeRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrepareRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Prepare{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecideRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Decide{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearUp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearupRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_ClearUp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetLockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetLockInfoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_GetLockInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Select{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScanRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Scan{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectFlowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_SelectFlow{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvGetRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_KvGet{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvPutRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_KvPut{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvDeleteRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_KvDelete{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeEpoch == nil {
				m.RangeEpoch = &basepb.RangeEpoch{}
			}
			if err := m.RangeEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RangeResponse_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrepareResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Prepare{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecideResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Decide{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearUp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearupResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_ClearUp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetLockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetLockInfoResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_GetLockInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Select{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScanResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Scan{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectFlowResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_SelectFlow{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvGetResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_KvGet{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvPutResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_KvPut{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvDeleteResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_KvDelete{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeResponse_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
