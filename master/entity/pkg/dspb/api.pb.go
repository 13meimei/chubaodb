// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/api.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RangeRequest data request to a range
type RangeRequest struct {
	Header *RangeRequest_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*RangeRequest_Prepare
	//	*RangeRequest_Decide
	//	*RangeRequest_ClearUp
	//	*RangeRequest_GetLockInfo
	//	*RangeRequest_Select
	//	*RangeRequest_Scan
	//	*RangeRequest_KvGet
	//	*RangeRequest_KvPut
	//	*RangeRequest_KvDelete
	Req                  isRangeRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RangeRequest) Reset()         { *m = RangeRequest{} }
func (m *RangeRequest) String() string { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()    {}
func (*RangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{0}
}
func (m *RangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeRequest.Merge(m, src)
}
func (m *RangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *RangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RangeRequest proto.InternalMessageInfo

type isRangeRequest_Req interface {
	isRangeRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RangeRequest_Prepare struct {
	Prepare *PrepareRequest `protobuf:"bytes,2,opt,name=prepare,proto3,oneof"`
}
type RangeRequest_Decide struct {
	Decide *DecideRequest `protobuf:"bytes,3,opt,name=decide,proto3,oneof"`
}
type RangeRequest_ClearUp struct {
	ClearUp *ClearupRequest `protobuf:"bytes,4,opt,name=clear_up,json=clearUp,proto3,oneof"`
}
type RangeRequest_GetLockInfo struct {
	GetLockInfo *GetLockInfoRequest `protobuf:"bytes,5,opt,name=get_lock_info,json=getLockInfo,proto3,oneof"`
}
type RangeRequest_Select struct {
	Select *SelectRequest `protobuf:"bytes,6,opt,name=select,proto3,oneof"`
}
type RangeRequest_Scan struct {
	Scan *ScanRequest `protobuf:"bytes,7,opt,name=scan,proto3,oneof"`
}
type RangeRequest_KvGet struct {
	KvGet *KvGetRequest `protobuf:"bytes,20,opt,name=kv_get,json=kvGet,proto3,oneof"`
}
type RangeRequest_KvPut struct {
	KvPut *KvPutRequest `protobuf:"bytes,21,opt,name=kv_put,json=kvPut,proto3,oneof"`
}
type RangeRequest_KvDelete struct {
	KvDelete *KvDeleteRequest `protobuf:"bytes,22,opt,name=kv_delete,json=kvDelete,proto3,oneof"`
}

func (*RangeRequest_Prepare) isRangeRequest_Req()     {}
func (*RangeRequest_Decide) isRangeRequest_Req()      {}
func (*RangeRequest_ClearUp) isRangeRequest_Req()     {}
func (*RangeRequest_GetLockInfo) isRangeRequest_Req() {}
func (*RangeRequest_Select) isRangeRequest_Req()      {}
func (*RangeRequest_Scan) isRangeRequest_Req()        {}
func (*RangeRequest_KvGet) isRangeRequest_Req()       {}
func (*RangeRequest_KvPut) isRangeRequest_Req()       {}
func (*RangeRequest_KvDelete) isRangeRequest_Req()    {}

func (m *RangeRequest) GetReq() isRangeRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *RangeRequest) GetHeader() *RangeRequest_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RangeRequest) GetPrepare() *PrepareRequest {
	if x, ok := m.GetReq().(*RangeRequest_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *RangeRequest) GetDecide() *DecideRequest {
	if x, ok := m.GetReq().(*RangeRequest_Decide); ok {
		return x.Decide
	}
	return nil
}

func (m *RangeRequest) GetClearUp() *ClearupRequest {
	if x, ok := m.GetReq().(*RangeRequest_ClearUp); ok {
		return x.ClearUp
	}
	return nil
}

func (m *RangeRequest) GetGetLockInfo() *GetLockInfoRequest {
	if x, ok := m.GetReq().(*RangeRequest_GetLockInfo); ok {
		return x.GetLockInfo
	}
	return nil
}

func (m *RangeRequest) GetSelect() *SelectRequest {
	if x, ok := m.GetReq().(*RangeRequest_Select); ok {
		return x.Select
	}
	return nil
}

func (m *RangeRequest) GetScan() *ScanRequest {
	if x, ok := m.GetReq().(*RangeRequest_Scan); ok {
		return x.Scan
	}
	return nil
}

func (m *RangeRequest) GetKvGet() *KvGetRequest {
	if x, ok := m.GetReq().(*RangeRequest_KvGet); ok {
		return x.KvGet
	}
	return nil
}

func (m *RangeRequest) GetKvPut() *KvPutRequest {
	if x, ok := m.GetReq().(*RangeRequest_KvPut); ok {
		return x.KvPut
	}
	return nil
}

func (m *RangeRequest) GetKvDelete() *KvDeleteRequest {
	if x, ok := m.GetReq().(*RangeRequest_KvDelete); ok {
		return x.KvDelete
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RangeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RangeRequest_OneofMarshaler, _RangeRequest_OneofUnmarshaler, _RangeRequest_OneofSizer, []interface{}{
		(*RangeRequest_Prepare)(nil),
		(*RangeRequest_Decide)(nil),
		(*RangeRequest_ClearUp)(nil),
		(*RangeRequest_GetLockInfo)(nil),
		(*RangeRequest_Select)(nil),
		(*RangeRequest_Scan)(nil),
		(*RangeRequest_KvGet)(nil),
		(*RangeRequest_KvPut)(nil),
		(*RangeRequest_KvDelete)(nil),
	}
}

func _RangeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RangeRequest)
	// req
	switch x := m.Req.(type) {
	case *RangeRequest_Prepare:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *RangeRequest_Decide:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decide); err != nil {
			return err
		}
	case *RangeRequest_ClearUp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClearUp); err != nil {
			return err
		}
	case *RangeRequest_GetLockInfo:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetLockInfo); err != nil {
			return err
		}
	case *RangeRequest_Select:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Select); err != nil {
			return err
		}
	case *RangeRequest_Scan:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Scan); err != nil {
			return err
		}
	case *RangeRequest_KvGet:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvGet); err != nil {
			return err
		}
	case *RangeRequest_KvPut:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvPut); err != nil {
			return err
		}
	case *RangeRequest_KvDelete:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvDelete); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RangeRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _RangeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RangeRequest)
	switch tag {
	case 2: // req.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrepareRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_Prepare{msg}
		return true, err
	case 3: // req.decide
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DecideRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_Decide{msg}
		return true, err
	case 4: // req.clear_up
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClearupRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_ClearUp{msg}
		return true, err
	case 5: // req.get_lock_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetLockInfoRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_GetLockInfo{msg}
		return true, err
	case 6: // req.select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_Select{msg}
		return true, err
	case 7: // req.scan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScanRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_Scan{msg}
		return true, err
	case 20: // req.kv_get
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KvGetRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_KvGet{msg}
		return true, err
	case 21: // req.kv_put
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KvPutRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_KvPut{msg}
		return true, err
	case 22: // req.kv_delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KvDeleteRequest)
		err := b.DecodeMessage(msg)
		m.Req = &RangeRequest_KvDelete{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RangeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RangeRequest)
	// req
	switch x := m.Req.(type) {
	case *RangeRequest_Prepare:
		s := proto.Size(x.Prepare)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_Decide:
		s := proto.Size(x.Decide)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_ClearUp:
		s := proto.Size(x.ClearUp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_GetLockInfo:
		s := proto.Size(x.GetLockInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_Select:
		s := proto.Size(x.Select)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_Scan:
		s := proto.Size(x.Scan)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_KvGet:
		s := proto.Size(x.KvGet)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_KvPut:
		s := proto.Size(x.KvPut)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeRequest_KvDelete:
		s := proto.Size(x.KvDelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RangeRequest_Header struct {
	ClusterId            uint64             `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TraceId              uint64             `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	RangeId              uint64             `protobuf:"varint,3,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	RangeEpoch           *basepb.RangeEpoch `protobuf:"bytes,4,opt,name=range_epoch,json=rangeEpoch,proto3" json:"range_epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RangeRequest_Header) Reset()         { *m = RangeRequest_Header{} }
func (m *RangeRequest_Header) String() string { return proto.CompactTextString(m) }
func (*RangeRequest_Header) ProtoMessage()    {}
func (*RangeRequest_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{0, 0}
}
func (m *RangeRequest_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeRequest_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeRequest_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeRequest_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeRequest_Header.Merge(m, src)
}
func (m *RangeRequest_Header) XXX_Size() int {
	return m.Size()
}
func (m *RangeRequest_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeRequest_Header.DiscardUnknown(m)
}

var xxx_messageInfo_RangeRequest_Header proto.InternalMessageInfo

func (m *RangeRequest_Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *RangeRequest_Header) GetTraceId() uint64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *RangeRequest_Header) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *RangeRequest_Header) GetRangeEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.RangeEpoch
	}
	return nil
}

type RangeResponse struct {
	Header *RangeResponse_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*RangeResponse_Prepare
	//	*RangeResponse_Decide
	//	*RangeResponse_ClearUp
	//	*RangeResponse_GetLockInfo
	//	*RangeResponse_Select
	//	*RangeResponse_Scan
	//	*RangeResponse_KvGet
	//	*RangeResponse_KvPut
	//	*RangeResponse_KvDelete
	Resp                 isRangeResponse_Resp `protobuf_oneof:"resp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RangeResponse) Reset()         { *m = RangeResponse{} }
func (m *RangeResponse) String() string { return proto.CompactTextString(m) }
func (*RangeResponse) ProtoMessage()    {}
func (*RangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{1}
}
func (m *RangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeResponse.Merge(m, src)
}
func (m *RangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *RangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RangeResponse proto.InternalMessageInfo

type isRangeResponse_Resp interface {
	isRangeResponse_Resp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RangeResponse_Prepare struct {
	Prepare *PrepareResponse `protobuf:"bytes,2,opt,name=prepare,proto3,oneof"`
}
type RangeResponse_Decide struct {
	Decide *DecideResponse `protobuf:"bytes,3,opt,name=decide,proto3,oneof"`
}
type RangeResponse_ClearUp struct {
	ClearUp *ClearupResponse `protobuf:"bytes,4,opt,name=clear_up,json=clearUp,proto3,oneof"`
}
type RangeResponse_GetLockInfo struct {
	GetLockInfo *GetLockInfoResponse `protobuf:"bytes,5,opt,name=get_lock_info,json=getLockInfo,proto3,oneof"`
}
type RangeResponse_Select struct {
	Select *SelectResponse `protobuf:"bytes,6,opt,name=select,proto3,oneof"`
}
type RangeResponse_Scan struct {
	Scan *ScanResponse `protobuf:"bytes,7,opt,name=scan,proto3,oneof"`
}
type RangeResponse_KvGet struct {
	KvGet *KvGetResponse `protobuf:"bytes,20,opt,name=kv_get,json=kvGet,proto3,oneof"`
}
type RangeResponse_KvPut struct {
	KvPut *KvPutResponse `protobuf:"bytes,21,opt,name=kv_put,json=kvPut,proto3,oneof"`
}
type RangeResponse_KvDelete struct {
	KvDelete *KvDeleteResponse `protobuf:"bytes,22,opt,name=kv_delete,json=kvDelete,proto3,oneof"`
}

func (*RangeResponse_Prepare) isRangeResponse_Resp()     {}
func (*RangeResponse_Decide) isRangeResponse_Resp()      {}
func (*RangeResponse_ClearUp) isRangeResponse_Resp()     {}
func (*RangeResponse_GetLockInfo) isRangeResponse_Resp() {}
func (*RangeResponse_Select) isRangeResponse_Resp()      {}
func (*RangeResponse_Scan) isRangeResponse_Resp()        {}
func (*RangeResponse_KvGet) isRangeResponse_Resp()       {}
func (*RangeResponse_KvPut) isRangeResponse_Resp()       {}
func (*RangeResponse_KvDelete) isRangeResponse_Resp()    {}

func (m *RangeResponse) GetResp() isRangeResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *RangeResponse) GetHeader() *RangeResponse_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RangeResponse) GetPrepare() *PrepareResponse {
	if x, ok := m.GetResp().(*RangeResponse_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *RangeResponse) GetDecide() *DecideResponse {
	if x, ok := m.GetResp().(*RangeResponse_Decide); ok {
		return x.Decide
	}
	return nil
}

func (m *RangeResponse) GetClearUp() *ClearupResponse {
	if x, ok := m.GetResp().(*RangeResponse_ClearUp); ok {
		return x.ClearUp
	}
	return nil
}

func (m *RangeResponse) GetGetLockInfo() *GetLockInfoResponse {
	if x, ok := m.GetResp().(*RangeResponse_GetLockInfo); ok {
		return x.GetLockInfo
	}
	return nil
}

func (m *RangeResponse) GetSelect() *SelectResponse {
	if x, ok := m.GetResp().(*RangeResponse_Select); ok {
		return x.Select
	}
	return nil
}

func (m *RangeResponse) GetScan() *ScanResponse {
	if x, ok := m.GetResp().(*RangeResponse_Scan); ok {
		return x.Scan
	}
	return nil
}

func (m *RangeResponse) GetKvGet() *KvGetResponse {
	if x, ok := m.GetResp().(*RangeResponse_KvGet); ok {
		return x.KvGet
	}
	return nil
}

func (m *RangeResponse) GetKvPut() *KvPutResponse {
	if x, ok := m.GetResp().(*RangeResponse_KvPut); ok {
		return x.KvPut
	}
	return nil
}

func (m *RangeResponse) GetKvDelete() *KvDeleteResponse {
	if x, ok := m.GetResp().(*RangeResponse_KvDelete); ok {
		return x.KvDelete
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RangeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RangeResponse_OneofMarshaler, _RangeResponse_OneofUnmarshaler, _RangeResponse_OneofSizer, []interface{}{
		(*RangeResponse_Prepare)(nil),
		(*RangeResponse_Decide)(nil),
		(*RangeResponse_ClearUp)(nil),
		(*RangeResponse_GetLockInfo)(nil),
		(*RangeResponse_Select)(nil),
		(*RangeResponse_Scan)(nil),
		(*RangeResponse_KvGet)(nil),
		(*RangeResponse_KvPut)(nil),
		(*RangeResponse_KvDelete)(nil),
	}
}

func _RangeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RangeResponse)
	// resp
	switch x := m.Resp.(type) {
	case *RangeResponse_Prepare:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *RangeResponse_Decide:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Decide); err != nil {
			return err
		}
	case *RangeResponse_ClearUp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClearUp); err != nil {
			return err
		}
	case *RangeResponse_GetLockInfo:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetLockInfo); err != nil {
			return err
		}
	case *RangeResponse_Select:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Select); err != nil {
			return err
		}
	case *RangeResponse_Scan:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Scan); err != nil {
			return err
		}
	case *RangeResponse_KvGet:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvGet); err != nil {
			return err
		}
	case *RangeResponse_KvPut:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvPut); err != nil {
			return err
		}
	case *RangeResponse_KvDelete:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvDelete); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RangeResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _RangeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RangeResponse)
	switch tag {
	case 2: // resp.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrepareResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_Prepare{msg}
		return true, err
	case 3: // resp.decide
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DecideResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_Decide{msg}
		return true, err
	case 4: // resp.clear_up
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClearupResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_ClearUp{msg}
		return true, err
	case 5: // resp.get_lock_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetLockInfoResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_GetLockInfo{msg}
		return true, err
	case 6: // resp.select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_Select{msg}
		return true, err
	case 7: // resp.scan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScanResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_Scan{msg}
		return true, err
	case 20: // resp.kv_get
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KvGetResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_KvGet{msg}
		return true, err
	case 21: // resp.kv_put
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KvPutResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_KvPut{msg}
		return true, err
	case 22: // resp.kv_delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KvDeleteResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &RangeResponse_KvDelete{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RangeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RangeResponse)
	// resp
	switch x := m.Resp.(type) {
	case *RangeResponse_Prepare:
		s := proto.Size(x.Prepare)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_Decide:
		s := proto.Size(x.Decide)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_ClearUp:
		s := proto.Size(x.ClearUp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_GetLockInfo:
		s := proto.Size(x.GetLockInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_Select:
		s := proto.Size(x.Select)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_Scan:
		s := proto.Size(x.Scan)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_KvGet:
		s := proto.Size(x.KvGet)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_KvPut:
		s := proto.Size(x.KvPut)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RangeResponse_KvDelete:
		s := proto.Size(x.KvDelete)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RangeResponse_Header struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TraceId              uint64   `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Error                *Error   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeResponse_Header) Reset()         { *m = RangeResponse_Header{} }
func (m *RangeResponse_Header) String() string { return proto.CompactTextString(m) }
func (*RangeResponse_Header) ProtoMessage()    {}
func (*RangeResponse_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff605de5c4859d61, []int{1, 0}
}
func (m *RangeResponse_Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeResponse_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangeResponse_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangeResponse_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeResponse_Header.Merge(m, src)
}
func (m *RangeResponse_Header) XXX_Size() int {
	return m.Size()
}
func (m *RangeResponse_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeResponse_Header.DiscardUnknown(m)
}

var xxx_messageInfo_RangeResponse_Header proto.InternalMessageInfo

func (m *RangeResponse_Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *RangeResponse_Header) GetTraceId() uint64 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *RangeResponse_Header) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*RangeRequest)(nil), "dspb.RangeRequest")
	proto.RegisterType((*RangeRequest_Header)(nil), "dspb.RangeRequest.Header")
	proto.RegisterType((*RangeResponse)(nil), "dspb.RangeResponse")
	proto.RegisterType((*RangeResponse_Header)(nil), "dspb.RangeResponse.Header")
}

func init() { proto.RegisterFile("dspb/api.proto", fileDescriptor_ff605de5c4859d61) }

var fileDescriptor_ff605de5c4859d61 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x4e, 0xd4, 0x4e,
	0x14, 0xc7, 0x29, 0x74, 0x0b, 0xcc, 0xfe, 0xf8, 0x05, 0x87, 0x5d, 0x52, 0x36, 0x71, 0xa3, 0xdc,
	0x48, 0x22, 0x14, 0x01, 0xf5, 0x52, 0x13, 0x84, 0x00, 0xd1, 0x0b, 0x52, 0xe3, 0x75, 0xd3, 0x4e,
	0x0f, 0xdd, 0x4d, 0xd7, 0xce, 0x30, 0x9d, 0x6e, 0x7c, 0x0e, 0xaf, 0xf4, 0x8d, 0xbc, 0xf4, 0x11,
	0x0c, 0x3e, 0x84, 0xb7, 0xa6, 0x67, 0x66, 0xfb, 0x0f, 0x2e, 0xbd, 0xda, 0x39, 0xe7, 0x7c, 0xbe,
	0x3b, 0x27, 0x99, 0x4f, 0x4a, 0xfe, 0x8f, 0x73, 0x11, 0x1d, 0x86, 0x62, 0xea, 0x09, 0xc9, 0x15,
	0xa7, 0x76, 0x59, 0x8f, 0x0e, 0x92, 0xa9, 0x9a, 0x14, 0x91, 0xc7, 0xf8, 0xe7, 0xc3, 0x84, 0x27,
	0xfc, 0x10, 0x87, 0x51, 0x71, 0x83, 0x15, 0x16, 0x78, 0xd2, 0xa1, 0xd1, 0xeb, 0x06, 0xce, 0x26,
	0x45, 0x14, 0xf2, 0x38, 0xaa, 0x0f, 0x1a, 0x8f, 0xc2, 0x1c, 0x44, 0x64, 0x7e, 0x4c, 0x6e, 0x13,
	0x2f, 0x07, 0x29, 0xb9, 0x34, 0x9d, 0x0d, 0xec, 0xa4, 0x73, 0x53, 0xea, 0xed, 0xd4, 0x97, 0x4c,
	0xd7, 0xbb, 0xdf, 0x7b, 0xe4, 0x3f, 0x3f, 0xcc, 0x12, 0xf0, 0xe1, 0xb6, 0x80, 0x5c, 0xd1, 0x23,
	0xe2, 0x4c, 0x20, 0x8c, 0x41, 0xba, 0xd6, 0x13, 0x6b, 0xaf, 0x7f, 0xbc, 0xe3, 0x95, 0x09, 0xaf,
	0xc9, 0x78, 0x97, 0x08, 0xf8, 0x06, 0xa4, 0x2f, 0xc8, 0xaa, 0x90, 0x20, 0x42, 0x09, 0xee, 0x32,
	0x66, 0x06, 0x3a, 0x73, 0xad, 0x9b, 0x26, 0x75, 0xb9, 0xe4, 0x2f, 0x30, 0x7a, 0x40, 0x9c, 0x18,
	0xd8, 0x34, 0x06, 0x77, 0x05, 0x03, 0x5b, 0x3a, 0x70, 0x86, 0xbd, 0x9a, 0x37, 0x10, 0x3d, 0x22,
	0x6b, 0x6c, 0x06, 0xa1, 0x0c, 0x0a, 0xe1, 0xda, 0xcd, 0x1b, 0xde, 0x95, 0xdd, 0x42, 0x34, 0x6e,
	0x40, 0xee, 0x93, 0xa0, 0x6f, 0xc8, 0x46, 0x02, 0x2a, 0x98, 0x71, 0x96, 0x06, 0xd3, 0xec, 0x86,
	0xbb, 0x3d, 0xcc, 0xb9, 0x3a, 0x77, 0x01, 0xea, 0x03, 0x67, 0xe9, 0x55, 0x76, 0xc3, 0xeb, 0x6c,
	0x3f, 0xa9, 0xbb, 0xe5, 0x86, 0x39, 0xcc, 0x80, 0x29, 0xd7, 0x69, 0x6e, 0xf8, 0x11, 0x7b, 0x8d,
	0x0d, 0x35, 0x44, 0x9f, 0x11, 0x3b, 0x67, 0x61, 0xe6, 0xae, 0x22, 0xfc, 0xc8, 0xc0, 0x2c, 0xcc,
	0x6a, 0x14, 0x01, 0xfa, 0x9c, 0x38, 0xe9, 0x3c, 0x48, 0x40, 0xb9, 0x03, 0x44, 0xa9, 0x46, 0xdf,
	0xcf, 0x2f, 0xa0, 0xf1, 0xb7, 0xbd, 0xb4, 0xac, 0x0d, 0x2c, 0x0a, 0xe5, 0x0e, 0xdb, 0xf0, 0x75,
	0xd1, 0x86, 0xaf, 0x0b, 0x45, 0x5f, 0x92, 0xf5, 0x74, 0x1e, 0xc4, 0x30, 0x03, 0x05, 0xee, 0x36,
	0xf2, 0xc3, 0x05, 0x7f, 0x86, 0xdd, 0x3a, 0xb2, 0x96, 0x9a, 0xd6, 0xe8, 0xab, 0x45, 0x1c, 0xfd,
	0x9c, 0xf4, 0x31, 0x21, 0x6c, 0x56, 0xe4, 0x0a, 0x64, 0x30, 0x8d, 0xf1, 0xf5, 0x6d, 0x7f, 0xdd,
	0x74, 0xae, 0x62, 0xba, 0x43, 0xd6, 0x94, 0x0c, 0x19, 0x94, 0xc3, 0x65, 0x1c, 0xae, 0x62, 0xad,
	0x47, 0xb2, 0xf4, 0xa3, 0x1c, 0xad, 0xe8, 0x11, 0xd6, 0x57, 0x31, 0x3d, 0x21, 0x7d, 0x3d, 0x02,
	0xc1, 0xd9, 0xc4, 0xbc, 0x1e, 0xf5, 0x8c, 0xb4, 0x68, 0xd5, 0x79, 0x39, 0xf1, 0x89, 0xac, 0xce,
	0xa7, 0x3d, 0xb2, 0x22, 0xe1, 0x76, 0xf7, 0x8f, 0x4d, 0x36, 0x8c, 0x77, 0xb9, 0xe0, 0x59, 0x0e,
	0xf4, 0xb8, 0x23, 0xe7, 0xa8, 0x25, 0xa7, 0x86, 0xba, 0x76, 0x1e, 0x75, 0xed, 0x1c, 0x76, 0xec,
	0xd4, 0xb1, 0xa6, 0x9e, 0x5e, 0x47, 0xcf, 0x41, 0x5b, 0xcf, 0x2a, 0xb0, 0xf0, 0xf3, 0xf8, 0x9e,
	0x9f, 0xc3, 0x8e, 0x9f, 0xf5, 0x1d, 0x0b, 0x41, 0xdf, 0x3e, 0x2c, 0xe8, 0xce, 0x03, 0x82, 0x56,
	0xe1, 0x96, 0xa1, 0x5e, 0xc7, 0xd0, 0x41, 0xdb, 0xd0, 0x7a, 0x49, 0xa3, 0xe8, 0x5e, 0x4b, 0x51,
	0xda, 0x54, 0xb4, 0x62, 0xb5, 0xa3, 0xfb, 0x1d, 0x47, 0xb7, 0x5a, 0x8e, 0x56, 0xb0, 0x91, 0x74,
	0xbf, 0x23, 0xe9, 0x56, 0x4b, 0xd2, 0x26, 0x5d, 0x5a, 0xfa, 0xea, 0xbe, 0xa5, 0xdb, 0x5d, 0x4b,
	0xab, 0x4c, 0xad, 0x29, 0xfc, 0x03, 0x4b, 0x9f, 0x92, 0x1e, 0x7e, 0x18, 0xcd, 0xa3, 0xf6, 0xf5,
	0xb5, 0xe7, 0x65, 0xcb, 0xd7, 0x93, 0x53, 0x87, 0xd8, 0x12, 0x72, 0x71, 0xba, 0xf9, 0xe3, 0x6e,
	0x6c, 0xfd, 0xbc, 0x1b, 0x5b, 0xbf, 0xee, 0xc6, 0xd6, 0xb7, 0xdf, 0xe3, 0xa5, 0xc8, 0xc1, 0xcf,
	0xe5, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x8a, 0x0c, 0x7d, 0xde, 0x05, 0x00, 0x00,
}

func (m *RangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Req != nil {
		nn2, err := m.Req.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RangeRequest_Prepare) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prepare != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Prepare.Size()))
		n3, err := m.Prepare.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *RangeRequest_Decide) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Decide != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Decide.Size()))
		n4, err := m.Decide.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *RangeRequest_ClearUp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClearUp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ClearUp.Size()))
		n5, err := m.ClearUp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *RangeRequest_GetLockInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetLockInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GetLockInfo.Size()))
		n6, err := m.GetLockInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *RangeRequest_Select) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Select != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Select.Size()))
		n7, err := m.Select.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *RangeRequest_Scan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Scan != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Scan.Size()))
		n8, err := m.Scan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *RangeRequest_KvGet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KvGet != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.KvGet.Size()))
		n9, err := m.KvGet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *RangeRequest_KvPut) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KvPut != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.KvPut.Size()))
		n10, err := m.KvPut.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *RangeRequest_KvDelete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KvDelete != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.KvDelete.Size()))
		n11, err := m.KvDelete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *RangeRequest_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeRequest_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ClusterId))
	}
	if m.TraceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TraceId))
	}
	if m.RangeId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RangeId))
	}
	if m.RangeEpoch != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RangeEpoch.Size()))
		n12, err := m.RangeEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Header.Size()))
		n13, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Resp != nil {
		nn14, err := m.Resp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RangeResponse_Prepare) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prepare != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Prepare.Size()))
		n15, err := m.Prepare.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *RangeResponse_Decide) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Decide != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Decide.Size()))
		n16, err := m.Decide.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *RangeResponse_ClearUp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClearUp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ClearUp.Size()))
		n17, err := m.ClearUp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *RangeResponse_GetLockInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetLockInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GetLockInfo.Size()))
		n18, err := m.GetLockInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *RangeResponse_Select) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Select != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Select.Size()))
		n19, err := m.Select.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *RangeResponse_Scan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Scan != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Scan.Size()))
		n20, err := m.Scan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *RangeResponse_KvGet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KvGet != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.KvGet.Size()))
		n21, err := m.KvGet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *RangeResponse_KvPut) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KvPut != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.KvPut.Size()))
		n22, err := m.KvPut.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *RangeResponse_KvDelete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KvDelete != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.KvDelete.Size()))
		n23, err := m.KvDelete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *RangeResponse_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeResponse_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ClusterId))
	}
	if m.TraceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TraceId))
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Error.Size()))
		n24, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeRequest_Prepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prepare != nil {
		l = m.Prepare.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Decide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decide != nil {
		l = m.Decide.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_ClearUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearUp != nil {
		l = m.ClearUp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_GetLockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetLockInfo != nil {
		l = m.GetLockInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Scan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scan != nil {
		l = m.Scan.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_KvGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvGet != nil {
		l = m.KvGet.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_KvPut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvPut != nil {
		l = m.KvPut.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_KvDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvDelete != nil {
		l = m.KvDelete.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeRequest_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovApi(uint64(m.ClusterId))
	}
	if m.TraceId != 0 {
		n += 1 + sovApi(uint64(m.TraceId))
	}
	if m.RangeId != 0 {
		n += 1 + sovApi(uint64(m.RangeId))
	}
	if m.RangeEpoch != nil {
		l = m.RangeEpoch.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Resp != nil {
		n += m.Resp.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RangeResponse_Prepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prepare != nil {
		l = m.Prepare.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Decide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decide != nil {
		l = m.Decide.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_ClearUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearUp != nil {
		l = m.ClearUp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_GetLockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetLockInfo != nil {
		l = m.GetLockInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Scan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scan != nil {
		l = m.Scan.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_KvGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvGet != nil {
		l = m.KvGet.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_KvPut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvPut != nil {
		l = m.KvPut.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_KvDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvDelete != nil {
		l = m.KvDelete.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RangeResponse_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovApi(uint64(m.ClusterId))
	}
	if m.TraceId != 0 {
		n += 1 + sovApi(uint64(m.TraceId))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RangeRequest_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrepareRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Prepare{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecideRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Decide{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearUp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearupRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_ClearUp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetLockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetLockInfoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_GetLockInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Select{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScanRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_Scan{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvGetRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_KvGet{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvPutRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_KvPut{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvDeleteRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &RangeRequest_KvDelete{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeRequest_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeEpoch == nil {
				m.RangeEpoch = &basepb.RangeEpoch{}
			}
			if err := m.RangeEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RangeResponse_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrepareResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Prepare{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecideResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Decide{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearUp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearupResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_ClearUp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetLockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetLockInfoResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_GetLockInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Select{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScanResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_Scan{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvGetResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_KvGet{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvPutResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_KvPut{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvDeleteResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resp = &RangeResponse_KvDelete{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeResponse_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
