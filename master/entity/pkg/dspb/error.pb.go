// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/error.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Error struct {
	// Types that are valid to be assigned to Err:
	//	*Error_ClusterMismatch
	//	*Error_NotLeader_
	//	*Error_RaftFail_
	//	*Error_RangeNotFound_
	//	*Error_OutOfBound_
	//	*Error_StaleEpoch_
	//	*Error_NoLeftSpace_
	//	*Error_ServerError_
	Err                  isError_Err `protobuf_oneof:"err"`
	Detail               string      `protobuf:"bytes,100,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

type isError_Err interface {
	isError_Err()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Error_ClusterMismatch struct {
	ClusterMismatch *Error_ClusterMismatched `protobuf:"bytes,1,opt,name=cluster_mismatch,json=clusterMismatch,proto3,oneof" json:"cluster_mismatch,omitempty"`
}
type Error_NotLeader_ struct {
	NotLeader *Error_NotLeader `protobuf:"bytes,2,opt,name=not_leader,json=notLeader,proto3,oneof" json:"not_leader,omitempty"`
}
type Error_RaftFail_ struct {
	RaftFail *Error_RaftFail `protobuf:"bytes,3,opt,name=raft_fail,json=raftFail,proto3,oneof" json:"raft_fail,omitempty"`
}
type Error_RangeNotFound_ struct {
	RangeNotFound *Error_RangeNotFound `protobuf:"bytes,4,opt,name=range_not_found,json=rangeNotFound,proto3,oneof" json:"range_not_found,omitempty"`
}
type Error_OutOfBound_ struct {
	OutOfBound *Error_OutOfBound `protobuf:"bytes,5,opt,name=out_of_bound,json=outOfBound,proto3,oneof" json:"out_of_bound,omitempty"`
}
type Error_StaleEpoch_ struct {
	StaleEpoch *Error_StaleEpoch `protobuf:"bytes,6,opt,name=stale_epoch,json=staleEpoch,proto3,oneof" json:"stale_epoch,omitempty"`
}
type Error_NoLeftSpace_ struct {
	NoLeftSpace *Error_NoLeftSpace `protobuf:"bytes,7,opt,name=no_left_space,json=noLeftSpace,proto3,oneof" json:"no_left_space,omitempty"`
}
type Error_ServerError_ struct {
	ServerError *Error_ServerError `protobuf:"bytes,8,opt,name=server_error,json=serverError,proto3,oneof" json:"server_error,omitempty"`
}

func (*Error_ClusterMismatch) isError_Err() {}
func (*Error_NotLeader_) isError_Err()      {}
func (*Error_RaftFail_) isError_Err()       {}
func (*Error_RangeNotFound_) isError_Err()  {}
func (*Error_OutOfBound_) isError_Err()     {}
func (*Error_StaleEpoch_) isError_Err()     {}
func (*Error_NoLeftSpace_) isError_Err()    {}
func (*Error_ServerError_) isError_Err()    {}

func (m *Error) GetErr() isError_Err {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *Error) GetClusterMismatch() *Error_ClusterMismatched {
	if x, ok := m.GetErr().(*Error_ClusterMismatch); ok {
		return x.ClusterMismatch
	}
	return nil
}

func (m *Error) GetNotLeader() *Error_NotLeader {
	if x, ok := m.GetErr().(*Error_NotLeader_); ok {
		return x.NotLeader
	}
	return nil
}

func (m *Error) GetRaftFail() *Error_RaftFail {
	if x, ok := m.GetErr().(*Error_RaftFail_); ok {
		return x.RaftFail
	}
	return nil
}

func (m *Error) GetRangeNotFound() *Error_RangeNotFound {
	if x, ok := m.GetErr().(*Error_RangeNotFound_); ok {
		return x.RangeNotFound
	}
	return nil
}

func (m *Error) GetOutOfBound() *Error_OutOfBound {
	if x, ok := m.GetErr().(*Error_OutOfBound_); ok {
		return x.OutOfBound
	}
	return nil
}

func (m *Error) GetStaleEpoch() *Error_StaleEpoch {
	if x, ok := m.GetErr().(*Error_StaleEpoch_); ok {
		return x.StaleEpoch
	}
	return nil
}

func (m *Error) GetNoLeftSpace() *Error_NoLeftSpace {
	if x, ok := m.GetErr().(*Error_NoLeftSpace_); ok {
		return x.NoLeftSpace
	}
	return nil
}

func (m *Error) GetServerError() *Error_ServerError {
	if x, ok := m.GetErr().(*Error_ServerError_); ok {
		return x.ServerError
	}
	return nil
}

func (m *Error) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Error) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Error_ClusterMismatch)(nil),
		(*Error_NotLeader_)(nil),
		(*Error_RaftFail_)(nil),
		(*Error_RangeNotFound_)(nil),
		(*Error_OutOfBound_)(nil),
		(*Error_StaleEpoch_)(nil),
		(*Error_NoLeftSpace_)(nil),
		(*Error_ServerError_)(nil),
	}
}

// cluster_id(in request header) is mismatched
type Error_ClusterMismatched struct {
	RequestCluster       uint64   `protobuf:"varint,1,opt,name=request_cluster,json=requestCluster,proto3" json:"request_cluster,omitempty"`
	ActualCluster        uint64   `protobuf:"varint,2,opt,name=actual_cluster,json=actualCluster,proto3" json:"actual_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_ClusterMismatched) Reset()         { *m = Error_ClusterMismatched{} }
func (m *Error_ClusterMismatched) String() string { return proto.CompactTextString(m) }
func (*Error_ClusterMismatched) ProtoMessage()    {}
func (*Error_ClusterMismatched) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 0}
}
func (m *Error_ClusterMismatched) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_ClusterMismatched) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_ClusterMismatched.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_ClusterMismatched) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_ClusterMismatched.Merge(m, src)
}
func (m *Error_ClusterMismatched) XXX_Size() int {
	return m.Size()
}
func (m *Error_ClusterMismatched) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_ClusterMismatched.DiscardUnknown(m)
}

var xxx_messageInfo_Error_ClusterMismatched proto.InternalMessageInfo

func (m *Error_ClusterMismatched) GetRequestCluster() uint64 {
	if m != nil {
		return m.RequestCluster
	}
	return 0
}

func (m *Error_ClusterMismatched) GetActualCluster() uint64 {
	if m != nil {
		return m.ActualCluster
	}
	return 0
}

type Error_NotLeader struct {
	RangeId              uint64             `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Leader               *basepb.Peer       `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Term                 uint64             `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Epoch                *basepb.RangeEpoch `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Error_NotLeader) Reset()         { *m = Error_NotLeader{} }
func (m *Error_NotLeader) String() string { return proto.CompactTextString(m) }
func (*Error_NotLeader) ProtoMessage()    {}
func (*Error_NotLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 1}
}
func (m *Error_NotLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_NotLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_NotLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_NotLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_NotLeader.Merge(m, src)
}
func (m *Error_NotLeader) XXX_Size() int {
	return m.Size()
}
func (m *Error_NotLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_NotLeader.DiscardUnknown(m)
}

var xxx_messageInfo_Error_NotLeader proto.InternalMessageInfo

func (m *Error_NotLeader) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *Error_NotLeader) GetLeader() *basepb.Peer {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *Error_NotLeader) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Error_NotLeader) GetEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

type Error_RaftFail struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_RaftFail) Reset()         { *m = Error_RaftFail{} }
func (m *Error_RaftFail) String() string { return proto.CompactTextString(m) }
func (*Error_RaftFail) ProtoMessage()    {}
func (*Error_RaftFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 2}
}
func (m *Error_RaftFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_RaftFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_RaftFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_RaftFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_RaftFail.Merge(m, src)
}
func (m *Error_RaftFail) XXX_Size() int {
	return m.Size()
}
func (m *Error_RaftFail) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_RaftFail.DiscardUnknown(m)
}

var xxx_messageInfo_Error_RaftFail proto.InternalMessageInfo

func (m *Error_RaftFail) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Error_RangeNotFound struct {
	RangeId              uint64   `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_RangeNotFound) Reset()         { *m = Error_RangeNotFound{} }
func (m *Error_RangeNotFound) String() string { return proto.CompactTextString(m) }
func (*Error_RangeNotFound) ProtoMessage()    {}
func (*Error_RangeNotFound) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 3}
}
func (m *Error_RangeNotFound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_RangeNotFound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_RangeNotFound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_RangeNotFound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_RangeNotFound.Merge(m, src)
}
func (m *Error_RangeNotFound) XXX_Size() int {
	return m.Size()
}
func (m *Error_RangeNotFound) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_RangeNotFound.DiscardUnknown(m)
}

var xxx_messageInfo_Error_RangeNotFound proto.InternalMessageInfo

func (m *Error_RangeNotFound) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type Error_OutOfBound struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	RangeId              uint64   `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	RangeStart           []byte   `protobuf:"bytes,3,opt,name=range_start,json=rangeStart,proto3" json:"range_start,omitempty"`
	RangeLimit           []byte   `protobuf:"bytes,4,opt,name=range_limit,json=rangeLimit,proto3" json:"range_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_OutOfBound) Reset()         { *m = Error_OutOfBound{} }
func (m *Error_OutOfBound) String() string { return proto.CompactTextString(m) }
func (*Error_OutOfBound) ProtoMessage()    {}
func (*Error_OutOfBound) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 4}
}
func (m *Error_OutOfBound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_OutOfBound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_OutOfBound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_OutOfBound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_OutOfBound.Merge(m, src)
}
func (m *Error_OutOfBound) XXX_Size() int {
	return m.Size()
}
func (m *Error_OutOfBound) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_OutOfBound.DiscardUnknown(m)
}

var xxx_messageInfo_Error_OutOfBound proto.InternalMessageInfo

func (m *Error_OutOfBound) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Error_OutOfBound) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *Error_OutOfBound) GetRangeStart() []byte {
	if m != nil {
		return m.RangeStart
	}
	return nil
}

func (m *Error_OutOfBound) GetRangeLimit() []byte {
	if m != nil {
		return m.RangeLimit
	}
	return nil
}

type Error_StaleEpoch struct {
	OldRange             *basepb.Range `protobuf:"bytes,1,opt,name=old_range,json=oldRange,proto3" json:"old_range,omitempty"`
	NewRange             *basepb.Range `protobuf:"bytes,2,opt,name=new_range,json=newRange,proto3" json:"new_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Error_StaleEpoch) Reset()         { *m = Error_StaleEpoch{} }
func (m *Error_StaleEpoch) String() string { return proto.CompactTextString(m) }
func (*Error_StaleEpoch) ProtoMessage()    {}
func (*Error_StaleEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 5}
}
func (m *Error_StaleEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_StaleEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_StaleEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_StaleEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_StaleEpoch.Merge(m, src)
}
func (m *Error_StaleEpoch) XXX_Size() int {
	return m.Size()
}
func (m *Error_StaleEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_StaleEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_Error_StaleEpoch proto.InternalMessageInfo

func (m *Error_StaleEpoch) GetOldRange() *basepb.Range {
	if m != nil {
		return m.OldRange
	}
	return nil
}

func (m *Error_StaleEpoch) GetNewRange() *basepb.Range {
	if m != nil {
		return m.NewRange
	}
	return nil
}

type Error_NoLeftSpace struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_NoLeftSpace) Reset()         { *m = Error_NoLeftSpace{} }
func (m *Error_NoLeftSpace) String() string { return proto.CompactTextString(m) }
func (*Error_NoLeftSpace) ProtoMessage()    {}
func (*Error_NoLeftSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 6}
}
func (m *Error_NoLeftSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_NoLeftSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_NoLeftSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_NoLeftSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_NoLeftSpace.Merge(m, src)
}
func (m *Error_NoLeftSpace) XXX_Size() int {
	return m.Size()
}
func (m *Error_NoLeftSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_NoLeftSpace.DiscardUnknown(m)
}

var xxx_messageInfo_Error_NoLeftSpace proto.InternalMessageInfo

// all other unspecified error
type Error_ServerError struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_ServerError) Reset()         { *m = Error_ServerError{} }
func (m *Error_ServerError) String() string { return proto.CompactTextString(m) }
func (*Error_ServerError) ProtoMessage()    {}
func (*Error_ServerError) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b746b9fa59be012, []int{0, 7}
}
func (m *Error_ServerError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_ServerError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_ServerError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_ServerError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_ServerError.Merge(m, src)
}
func (m *Error_ServerError) XXX_Size() int {
	return m.Size()
}
func (m *Error_ServerError) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_ServerError.DiscardUnknown(m)
}

var xxx_messageInfo_Error_ServerError proto.InternalMessageInfo

func (m *Error_ServerError) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Error)(nil), "dspb.Error")
	proto.RegisterType((*Error_ClusterMismatched)(nil), "dspb.Error.ClusterMismatched")
	proto.RegisterType((*Error_NotLeader)(nil), "dspb.Error.NotLeader")
	proto.RegisterType((*Error_RaftFail)(nil), "dspb.Error.RaftFail")
	proto.RegisterType((*Error_RangeNotFound)(nil), "dspb.Error.RangeNotFound")
	proto.RegisterType((*Error_OutOfBound)(nil), "dspb.Error.OutOfBound")
	proto.RegisterType((*Error_StaleEpoch)(nil), "dspb.Error.StaleEpoch")
	proto.RegisterType((*Error_NoLeftSpace)(nil), "dspb.Error.NoLeftSpace")
	proto.RegisterType((*Error_ServerError)(nil), "dspb.Error.ServerError")
}

func init() { proto.RegisterFile("dspb/error.proto", fileDescriptor_0b746b9fa59be012) }

var fileDescriptor_0b746b9fa59be012 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xe1, 0x6e, 0xd3, 0x3c,
	0x14, 0x6d, 0xba, 0xb6, 0x6b, 0x6f, 0xdb, 0xad, 0x9f, 0xf5, 0x31, 0xb2, 0x48, 0x74, 0xd3, 0x04,
	0x62, 0x9a, 0x44, 0x27, 0x31, 0x69, 0x12, 0x08, 0xfe, 0x6c, 0xda, 0x54, 0xd0, 0xd8, 0x90, 0xfb,
	0x00, 0x91, 0x93, 0x38, 0x6d, 0x44, 0x1a, 0x17, 0xdb, 0x61, 0x42, 0xbc, 0x01, 0x4f, 0xc0, 0x23,
	0xf1, 0x93, 0x47, 0x40, 0xe3, 0x37, 0xef, 0x80, 0x7c, 0xe3, 0xb6, 0x89, 0x86, 0xf8, 0xb5, 0x7b,
	0xee, 0x39, 0xe7, 0xc6, 0xbe, 0x3e, 0x2b, 0x0c, 0x22, 0xb5, 0x08, 0x8e, 0xb9, 0x94, 0x42, 0x8e,
	0x16, 0x52, 0x68, 0x41, 0x1a, 0xa6, 0xe3, 0x3d, 0x9b, 0x26, 0x7a, 0x96, 0x07, 0xa3, 0x50, 0xcc,
	0x8f, 0xa7, 0x62, 0x2a, 0x8e, 0x91, 0x0c, 0xf2, 0x18, 0x11, 0x02, 0xac, 0x0a, 0x93, 0x77, 0x5a,
	0x92, 0x87, 0xb3, 0x3c, 0x60, 0x22, 0x0a, 0xd6, 0x45, 0x21, 0x0f, 0x98, 0xe2, 0x8b, 0xc0, 0xfe,
	0x29, 0x7c, 0x07, 0xbf, 0xdb, 0xd0, 0xbc, 0x30, 0x1f, 0x27, 0x6f, 0x61, 0x10, 0xa6, 0xb9, 0xd2,
	0x5c, 0xfa, 0xf3, 0x44, 0xcd, 0x99, 0x0e, 0x67, 0xae, 0xb3, 0xef, 0x1c, 0x76, 0x9f, 0x3f, 0x1a,
	0x99, 0x13, 0x8d, 0x50, 0x36, 0x3a, 0x2f, 0x34, 0xef, 0xac, 0x84, 0x47, 0xe3, 0x1a, 0xdd, 0x0e,
	0xab, 0x4d, 0x72, 0x0a, 0x90, 0x09, 0xed, 0xa7, 0x9c, 0x45, 0x5c, 0xba, 0x75, 0x9c, 0xf2, 0xa0,
	0x3c, 0xe5, 0x5a, 0xe8, 0x2b, 0x24, 0xc7, 0x35, 0xda, 0xc9, 0x96, 0x80, 0x9c, 0x40, 0x47, 0xb2,
	0x58, 0xfb, 0x31, 0x4b, 0x52, 0x77, 0x03, 0x6d, 0xff, 0x97, 0x6d, 0x94, 0xc5, 0xfa, 0x92, 0x25,
	0xe9, 0xb8, 0x46, 0xdb, 0xd2, 0xd6, 0xe4, 0x1c, 0xb6, 0x25, 0xcb, 0xa6, 0xdc, 0x37, 0x9f, 0x8c,
	0x45, 0x9e, 0x45, 0x6e, 0x03, 0xad, 0xbb, 0x55, 0x6b, 0x36, 0xe5, 0xd7, 0x42, 0x5f, 0x1a, 0xc1,
	0xb8, 0x46, 0xfb, 0xb2, 0xdc, 0x20, 0x2f, 0xa1, 0x27, 0x72, 0xed, 0x8b, 0xd8, 0x0f, 0x70, 0x42,
	0x13, 0x27, 0xec, 0x94, 0x27, 0xdc, 0xe4, 0xfa, 0x26, 0x3e, 0xb3, 0x76, 0x10, 0x2b, 0x44, 0x5e,
	0x40, 0x57, 0x69, 0x96, 0x72, 0x9f, 0x2f, 0x44, 0x38, 0x73, 0x5b, 0xf7, 0xad, 0x13, 0x43, 0x5f,
	0x18, 0xd6, 0x58, 0xd5, 0x0a, 0x91, 0xd7, 0xd0, 0xcf, 0x84, 0x9f, 0xf2, 0x58, 0xfb, 0x6a, 0xc1,
	0x42, 0xee, 0x6e, 0xa2, 0xf9, 0x61, 0x75, 0x57, 0x57, 0x3c, 0xd6, 0x13, 0x43, 0x8f, 0x6b, 0xb4,
	0x9b, 0xad, 0x21, 0x79, 0x05, 0x3d, 0xc5, 0xe5, 0x27, 0x2e, 0x7d, 0x0c, 0x90, 0xdb, 0xbe, 0xef,
	0x9e, 0x20, 0x8f, 0xb5, 0x71, 0xab, 0x35, 0x24, 0x3b, 0xd0, 0x8a, 0xb8, 0x36, 0xab, 0x8e, 0xf6,
	0x9d, 0xc3, 0x0e, 0xb5, 0xc8, 0x0b, 0xe1, 0xbf, 0x7b, 0xaf, 0x4c, 0x9e, 0xc2, 0xb6, 0xe4, 0x1f,
	0x73, 0xae, 0xb4, 0x6f, 0x5f, 0x1b, 0xd3, 0xd1, 0xa0, 0x5b, 0xb6, 0x6d, 0x2d, 0xe4, 0x09, 0x6c,
	0xb1, 0x50, 0xe7, 0x2c, 0x5d, 0xe9, 0xea, 0xa8, 0xeb, 0x17, 0x5d, 0x2b, 0xf3, 0xbe, 0x3a, 0xd0,
	0x59, 0xa5, 0x80, 0xec, 0x42, 0xbb, 0x78, 0xc3, 0x24, 0xb2, 0x63, 0x37, 0x11, 0xbf, 0x89, 0xc8,
	0x63, 0x68, 0x55, 0x72, 0xd4, 0x1b, 0xd9, 0x00, 0xbf, 0xe7, 0x5c, 0x52, 0xcb, 0x11, 0x02, 0x0d,
	0xcd, 0xe5, 0x1c, 0x43, 0xd3, 0xa0, 0x58, 0x93, 0x43, 0x68, 0x16, 0x2f, 0x52, 0xc4, 0x81, 0x2c,
	0x8d, 0x18, 0x05, 0xdc, 0x3f, 0x2d, 0x04, 0xde, 0x01, 0xb4, 0x97, 0xd1, 0x32, 0x5b, 0x91, 0x9c,
	0x29, 0x91, 0xe1, 0x41, 0x3a, 0xd4, 0x22, 0xef, 0x08, 0xfa, 0x95, 0x0c, 0xfd, 0xe3, 0xcc, 0xde,
	0x17, 0x80, 0x75, 0x5a, 0xc8, 0x00, 0x36, 0x3e, 0xf0, 0xcf, 0xa8, 0xe9, 0x51, 0x53, 0x56, 0xac,
	0xf5, 0xea, 0x75, 0xf7, 0xa0, 0x5b, 0x50, 0x4a, 0x33, 0xa9, 0xf1, 0x3e, 0x3d, 0x0a, 0xd8, 0x9a,
	0x98, 0xce, 0x5a, 0x90, 0x26, 0xf3, 0x44, 0xe3, 0xdd, 0x96, 0x82, 0x2b, 0xd3, 0xf1, 0x22, 0x80,
	0x75, 0xde, 0xc8, 0x11, 0x74, 0x44, 0x1a, 0xf9, 0xc8, 0xdb, 0xff, 0xe7, 0x7e, 0x65, 0x11, 0xb4,
	0x2d, 0xd2, 0x08, 0x2b, 0xa3, 0xcd, 0xf8, 0xad, 0xd5, 0xd6, 0xff, 0xaa, 0xcd, 0xf8, 0x2d, 0x56,
	0x5e, 0x1f, 0xba, 0xa5, 0x60, 0x7a, 0x7b, 0xd0, 0x2d, 0x25, 0xcd, 0x5c, 0x79, 0xae, 0xa6, 0x76,
	0x83, 0xa6, 0x3c, 0x6b, 0xc2, 0x06, 0x97, 0xf2, 0x6c, 0xf0, 0xfd, 0x6e, 0xe8, 0xfc, 0xb8, 0x1b,
	0x3a, 0x3f, 0xef, 0x86, 0xce, 0xb7, 0x5f, 0xc3, 0x5a, 0xd0, 0xc2, 0x1f, 0xa2, 0x93, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xcc, 0xe4, 0x4a, 0xed, 0x09, 0x05, 0x00, 0x00,
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintError(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Err != nil {
		{
			size := m.Err.Size()
			i -= size
			if _, err := m.Err.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Error_ClusterMismatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_ClusterMismatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterMismatch != nil {
		{
			size, err := m.ClusterMismatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Error_NotLeader_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_NotLeader_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotLeader != nil {
		{
			size, err := m.NotLeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Error_RaftFail_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_RaftFail_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RaftFail != nil {
		{
			size, err := m.RaftFail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Error_RangeNotFound_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_RangeNotFound_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeNotFound != nil {
		{
			size, err := m.RangeNotFound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Error_OutOfBound_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_OutOfBound_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutOfBound != nil {
		{
			size, err := m.OutOfBound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Error_StaleEpoch_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_StaleEpoch_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaleEpoch != nil {
		{
			size, err := m.StaleEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Error_NoLeftSpace_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_NoLeftSpace_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoLeftSpace != nil {
		{
			size, err := m.NoLeftSpace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Error_ServerError_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_ServerError_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerError != nil {
		{
			size, err := m.ServerError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Error_ClusterMismatched) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_ClusterMismatched) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_ClusterMismatched) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActualCluster != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.ActualCluster))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestCluster != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.RequestCluster))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error_NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_NotLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_NotLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Term != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x18
	}
	if m.Leader != nil {
		{
			size, err := m.Leader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RangeId != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error_RaftFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_RaftFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_RaftFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintError(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error_RangeNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_RangeNotFound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_RangeNotFound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RangeId != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error_OutOfBound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_OutOfBound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_OutOfBound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RangeLimit) > 0 {
		i -= len(m.RangeLimit)
		copy(dAtA[i:], m.RangeLimit)
		i = encodeVarintError(dAtA, i, uint64(len(m.RangeLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RangeStart) > 0 {
		i -= len(m.RangeStart)
		copy(dAtA[i:], m.RangeStart)
		i = encodeVarintError(dAtA, i, uint64(len(m.RangeStart)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RangeId != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintError(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error_StaleEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_StaleEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_StaleEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewRange != nil {
		{
			size, err := m.NewRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OldRange != nil {
		{
			size, err := m.OldRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error_NoLeftSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_NoLeftSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_NoLeftSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Error_ServerError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_ServerError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_ServerError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintError(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	offset -= sovError(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		n += m.Err.Size()
	}
	l = len(m.Detail)
	if l > 0 {
		n += 2 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_ClusterMismatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterMismatch != nil {
		l = m.ClusterMismatch.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_NotLeader_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_RaftFail_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RaftFail != nil {
		l = m.RaftFail.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_RangeNotFound_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeNotFound != nil {
		l = m.RangeNotFound.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_OutOfBound_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutOfBound != nil {
		l = m.OutOfBound.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_StaleEpoch_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaleEpoch != nil {
		l = m.StaleEpoch.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_NoLeftSpace_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoLeftSpace != nil {
		l = m.NoLeftSpace.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_ServerError_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerError != nil {
		l = m.ServerError.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}
func (m *Error_ClusterMismatched) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCluster != 0 {
		n += 1 + sovError(uint64(m.RequestCluster))
	}
	if m.ActualCluster != 0 {
		n += 1 + sovError(uint64(m.ActualCluster))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_NotLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovError(uint64(m.RangeId))
	}
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovError(uint64(m.Term))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_RaftFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_RangeNotFound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovError(uint64(m.RangeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_OutOfBound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.RangeId != 0 {
		n += 1 + sovError(uint64(m.RangeId))
	}
	l = len(m.RangeStart)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.RangeLimit)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_StaleEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldRange != nil {
		l = m.OldRange.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if m.NewRange != nil {
		l = m.NewRange.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_NoLeftSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_ServerError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovError(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterMismatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_ClusterMismatched{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_ClusterMismatch{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_NotLeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_NotLeader_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_RaftFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_RaftFail_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_RangeNotFound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_RangeNotFound_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfBound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_OutOfBound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_OutOfBound_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_StaleEpoch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_StaleEpoch_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLeftSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_NoLeftSpace{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_NoLeftSpace_{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_ServerError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Err = &Error_ServerError_{v}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_ClusterMismatched) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterMismatched: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterMismatched: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCluster", wireType)
			}
			m.RequestCluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestCluster |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCluster", wireType)
			}
			m.ActualCluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualCluster |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &basepb.Peer{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &basepb.RangeEpoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_RaftFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_RangeNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_OutOfBound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutOfBound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutOfBound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeStart", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeStart = append(m.RangeStart[:0], dAtA[iNdEx:postIndex]...)
			if m.RangeStart == nil {
				m.RangeStart = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeLimit = append(m.RangeLimit[:0], dAtA[iNdEx:postIndex]...)
			if m.RangeLimit == nil {
				m.RangeLimit = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_StaleEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldRange == nil {
				m.OldRange = &basepb.Range{}
			}
			if err := m.OldRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewRange == nil {
				m.NewRange = &basepb.Range{}
			}
			if err := m.NewRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_NoLeftSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoLeftSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoLeftSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_ServerError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupError
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthError
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthError        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupError = fmt.Errorf("proto: unexpected end of group")
)
