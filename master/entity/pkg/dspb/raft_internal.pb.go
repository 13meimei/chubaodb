// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dspb/raft_internal.proto

package dspb

import (
	fmt "fmt"
	basepb "github.com/chubaodb/chubaodb/master/entity/pkg/basepb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CmdType int32

const (
	CmdType_Invalid_Cmd   CmdType = 0
	CmdType_TxnPrepare    CmdType = 1
	CmdType_TxnDecide     CmdType = 2
	CmdType_TxnClearup    CmdType = 3
	CmdType_TxnSelect     CmdType = 4
	CmdType_TxnScan       CmdType = 5
	CmdType_TxnSelectFlow CmdType = 6
	CmdType_KvGet         CmdType = 20
	CmdType_KvPut         CmdType = 21
	CmdType_KvDelete      CmdType = 22
	CmdType_AdminSplit    CmdType = 100
)

var CmdType_name = map[int32]string{
	0:   "Invalid_Cmd",
	1:   "TxnPrepare",
	2:   "TxnDecide",
	3:   "TxnClearup",
	4:   "TxnSelect",
	5:   "TxnScan",
	6:   "TxnSelectFlow",
	20:  "KvGet",
	21:  "KvPut",
	22:  "KvDelete",
	100: "AdminSplit",
}

var CmdType_value = map[string]int32{
	"Invalid_Cmd":   0,
	"TxnPrepare":    1,
	"TxnDecide":     2,
	"TxnClearup":    3,
	"TxnSelect":     4,
	"TxnScan":       5,
	"TxnSelectFlow": 6,
	"KvGet":         20,
	"KvPut":         21,
	"KvDelete":      22,
	"AdminSplit":    100,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{0}
}

type CFType int32

const (
	CFType_CF_DEFAULT CFType = 0
	CFType_CF_TXN     CFType = 1
)

var CFType_name = map[int32]string{
	0: "CF_DEFAULT",
	1: "CF_TXN",
}

var CFType_value = map[string]int32{
	"CF_DEFAULT": 0,
	"CF_TXN":     1,
}

func (x CFType) String() string {
	return proto.EnumName(CFType_name, int32(x))
}

func (CFType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{1}
}

type SplitCommand struct {
	Leader               uint64             `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
	SplitKey             []byte             `protobuf:"bytes,2,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
	Epoch                *basepb.RangeEpoch `protobuf:"bytes,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NewRange             *basepb.Range      `protobuf:"bytes,4,opt,name=new_range,json=newRange,proto3" json:"new_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SplitCommand) Reset()         { *m = SplitCommand{} }
func (m *SplitCommand) String() string { return proto.CompactTextString(m) }
func (*SplitCommand) ProtoMessage()    {}
func (*SplitCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{0}
}
func (m *SplitCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitCommand.Merge(m, src)
}
func (m *SplitCommand) XXX_Size() int {
	return m.Size()
}
func (m *SplitCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SplitCommand proto.InternalMessageInfo

func (m *SplitCommand) GetLeader() uint64 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *SplitCommand) GetSplitKey() []byte {
	if m != nil {
		return m.SplitKey
	}
	return nil
}

func (m *SplitCommand) GetEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *SplitCommand) GetNewRange() *basepb.Range {
	if m != nil {
		return m.NewRange
	}
	return nil
}

type CmdID struct {
	NodeId               uint64   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Seq                  uint64   `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdID) Reset()         { *m = CmdID{} }
func (m *CmdID) String() string { return proto.CompactTextString(m) }
func (*CmdID) ProtoMessage()    {}
func (*CmdID) Descriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{1}
}
func (m *CmdID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdID.Merge(m, src)
}
func (m *CmdID) XXX_Size() int {
	return m.Size()
}
func (m *CmdID) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdID.DiscardUnknown(m)
}

var xxx_messageInfo_CmdID proto.InternalMessageInfo

func (m *CmdID) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CmdID) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type Command struct {
	CmdId                *CmdID             `protobuf:"bytes,1,opt,name=cmd_id,json=cmdId,proto3" json:"cmd_id,omitempty"`
	CmdType              CmdType            `protobuf:"varint,2,opt,name=cmd_type,json=cmdType,proto3,enum=dspb.CmdType" json:"cmd_type,omitempty"`
	VerifyEpoch          *basepb.RangeEpoch `protobuf:"bytes,3,opt,name=verify_epoch,json=verifyEpoch,proto3" json:"verify_epoch,omitempty"`
	TxnPrepareReq        *PrepareRequest    `protobuf:"bytes,4,opt,name=txn_prepare_req,json=txnPrepareReq,proto3" json:"txn_prepare_req,omitempty"`
	TxnDecideReq         *DecideRequest     `protobuf:"bytes,5,opt,name=txn_decide_req,json=txnDecideReq,proto3" json:"txn_decide_req,omitempty"`
	TxnClearupReq        *ClearupRequest    `protobuf:"bytes,6,opt,name=txn_clearup_req,json=txnClearupReq,proto3" json:"txn_clearup_req,omitempty"`
	TxnSelectReq         *SelectRequest     `protobuf:"bytes,7,opt,name=txn_select_req,json=txnSelectReq,proto3" json:"txn_select_req,omitempty"`
	TxnScanReq           *ScanRequest       `protobuf:"bytes,8,opt,name=txn_scan_req,json=txnScanReq,proto3" json:"txn_scan_req,omitempty"`
	TxnSelectFlowReq     *SelectFlowRequest `protobuf:"bytes,9,opt,name=txn_select_flow_req,json=txnSelectFlowReq,proto3" json:"txn_select_flow_req,omitempty"`
	KvGetReq             *KvGetRequest      `protobuf:"bytes,20,opt,name=kv_get_req,json=kvGetReq,proto3" json:"kv_get_req,omitempty"`
	KvPutReq             *KvPutRequest      `protobuf:"bytes,21,opt,name=kv_put_req,json=kvPutReq,proto3" json:"kv_put_req,omitempty"`
	KvDeleteReq          *KvDeleteRequest   `protobuf:"bytes,22,opt,name=kv_delete_req,json=kvDeleteReq,proto3" json:"kv_delete_req,omitempty"`
	SplitCmd             *SplitCommand      `protobuf:"bytes,100,opt,name=split_cmd,json=splitCmd,proto3" json:"split_cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{2}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmdId() *CmdID {
	if m != nil {
		return m.CmdId
	}
	return nil
}

func (m *Command) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_Invalid_Cmd
}

func (m *Command) GetVerifyEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.VerifyEpoch
	}
	return nil
}

func (m *Command) GetTxnPrepareReq() *PrepareRequest {
	if m != nil {
		return m.TxnPrepareReq
	}
	return nil
}

func (m *Command) GetTxnDecideReq() *DecideRequest {
	if m != nil {
		return m.TxnDecideReq
	}
	return nil
}

func (m *Command) GetTxnClearupReq() *ClearupRequest {
	if m != nil {
		return m.TxnClearupReq
	}
	return nil
}

func (m *Command) GetTxnSelectReq() *SelectRequest {
	if m != nil {
		return m.TxnSelectReq
	}
	return nil
}

func (m *Command) GetTxnScanReq() *ScanRequest {
	if m != nil {
		return m.TxnScanReq
	}
	return nil
}

func (m *Command) GetTxnSelectFlowReq() *SelectFlowRequest {
	if m != nil {
		return m.TxnSelectFlowReq
	}
	return nil
}

func (m *Command) GetKvGetReq() *KvGetRequest {
	if m != nil {
		return m.KvGetReq
	}
	return nil
}

func (m *Command) GetKvPutReq() *KvPutRequest {
	if m != nil {
		return m.KvPutReq
	}
	return nil
}

func (m *Command) GetKvDeleteReq() *KvDeleteRequest {
	if m != nil {
		return m.KvDeleteReq
	}
	return nil
}

func (m *Command) GetSplitCmd() *SplitCommand {
	if m != nil {
		return m.SplitCmd
	}
	return nil
}

type PeerTask struct {
	VerifyEpoch          *basepb.RangeEpoch `protobuf:"bytes,1,opt,name=verify_epoch,json=verifyEpoch,proto3" json:"verify_epoch,omitempty"`
	Peer                 *basepb.Peer       `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PeerTask) Reset()         { *m = PeerTask{} }
func (m *PeerTask) String() string { return proto.CompactTextString(m) }
func (*PeerTask) ProtoMessage()    {}
func (*PeerTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{3}
}
func (m *PeerTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerTask.Merge(m, src)
}
func (m *PeerTask) XXX_Size() int {
	return m.Size()
}
func (m *PeerTask) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerTask.DiscardUnknown(m)
}

var xxx_messageInfo_PeerTask proto.InternalMessageInfo

func (m *PeerTask) GetVerifyEpoch() *basepb.RangeEpoch {
	if m != nil {
		return m.VerifyEpoch
	}
	return nil
}

func (m *PeerTask) GetPeer() *basepb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type SnapshotKVPair struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CfType               CFType   `protobuf:"varint,3,opt,name=cf_type,json=cfType,proto3,enum=dspb.CFType" json:"cf_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotKVPair) Reset()         { *m = SnapshotKVPair{} }
func (m *SnapshotKVPair) String() string { return proto.CompactTextString(m) }
func (*SnapshotKVPair) ProtoMessage()    {}
func (*SnapshotKVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{4}
}
func (m *SnapshotKVPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotKVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotKVPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotKVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotKVPair.Merge(m, src)
}
func (m *SnapshotKVPair) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotKVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotKVPair.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotKVPair proto.InternalMessageInfo

func (m *SnapshotKVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SnapshotKVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SnapshotKVPair) GetCfType() CFType {
	if m != nil {
		return m.CfType
	}
	return CFType_CF_DEFAULT
}

type SnapshotContext struct {
	Meta                 *basepb.Range `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SnapshotContext) Reset()         { *m = SnapshotContext{} }
func (m *SnapshotContext) String() string { return proto.CompactTextString(m) }
func (*SnapshotContext) ProtoMessage()    {}
func (*SnapshotContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_741caaaaf0a379b3, []int{5}
}
func (m *SnapshotContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotContext.Merge(m, src)
}
func (m *SnapshotContext) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotContext.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotContext proto.InternalMessageInfo

func (m *SnapshotContext) GetMeta() *basepb.Range {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterEnum("dspb.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("dspb.CFType", CFType_name, CFType_value)
	proto.RegisterType((*SplitCommand)(nil), "dspb.SplitCommand")
	proto.RegisterType((*CmdID)(nil), "dspb.CmdID")
	proto.RegisterType((*Command)(nil), "dspb.Command")
	proto.RegisterType((*PeerTask)(nil), "dspb.PeerTask")
	proto.RegisterType((*SnapshotKVPair)(nil), "dspb.SnapshotKVPair")
	proto.RegisterType((*SnapshotContext)(nil), "dspb.SnapshotContext")
}

func init() { proto.RegisterFile("dspb/raft_internal.proto", fileDescriptor_741caaaaf0a379b3) }

var fileDescriptor_741caaaaf0a379b3 = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xeb, 0x6d, 0x3e, 0x4f, 0x3e, 0xea, 0x9d, 0x6d, 0xbb, 0xd1, 0x22, 0x55, 0x25, 0x02,
	0x29, 0xaa, 0x44, 0x8a, 0xb2, 0x80, 0xb4, 0x12, 0x37, 0x4b, 0xba, 0x41, 0x55, 0x11, 0x8a, 0xdc,
	0x80, 0xb8, 0xb3, 0x26, 0x9e, 0x93, 0xd4, 0x8a, 0x3d, 0x76, 0x9d, 0x71, 0x9a, 0xbc, 0x09, 0xbc,
	0x03, 0x0f, 0xc2, 0x0d, 0x12, 0x8f, 0x80, 0xca, 0x8b, 0xa0, 0x39, 0x33, 0x4e, 0x5d, 0xb8, 0x80,
	0x2b, 0xcf, 0x39, 0xff, 0xf3, 0x9b, 0xff, 0x8c, 0xe6, 0x1c, 0x43, 0x4f, 0xac, 0xd3, 0xf9, 0x65,
	0xc6, 0x17, 0xca, 0x0f, 0xa5, 0xc2, 0x4c, 0xf2, 0x68, 0x98, 0x66, 0x89, 0x4a, 0x58, 0x45, 0x2b,
	0x6f, 0x3e, 0x5b, 0x86, 0xea, 0x2e, 0x9f, 0x0f, 0x83, 0x24, 0xbe, 0x5c, 0x26, 0xcb, 0xe4, 0x92,
	0xc4, 0x79, 0xbe, 0xa0, 0x88, 0x02, 0x5a, 0x19, 0xe8, 0xcd, 0x57, 0xa5, 0xf2, 0xe0, 0x2e, 0x9f,
	0xf3, 0x44, 0xcc, 0x9f, 0x16, 0xa6, 0x7c, 0xce, 0xd7, 0x98, 0xce, 0xed, 0xc7, 0x72, 0x1d, 0x3a,
	0xc6, 0x6a, 0x63, 0xc3, 0x2e, 0x85, 0x6a, 0x2b, 0x4d, 0xdc, 0xff, 0xc5, 0x81, 0xf6, 0x6d, 0x1a,
	0x85, 0x6a, 0x9c, 0xc4, 0x31, 0x97, 0x82, 0x9d, 0x42, 0x2d, 0x42, 0x2e, 0x30, 0xeb, 0x39, 0xe7,
	0xce, 0xa0, 0xe2, 0xd9, 0x88, 0x7d, 0x04, 0xcd, 0xb5, 0xae, 0xf3, 0x57, 0xb8, 0xeb, 0xbd, 0x38,
	0x77, 0x06, 0x6d, 0xaf, 0x41, 0x89, 0x1b, 0xdc, 0xb1, 0x01, 0x54, 0x31, 0x4d, 0x82, 0xbb, 0xde,
	0xe1, 0xb9, 0x33, 0x68, 0x8d, 0xd8, 0xd0, 0x1e, 0xc1, 0xe3, 0x72, 0x89, 0x1f, 0xb4, 0xe2, 0x99,
	0x02, 0x76, 0x01, 0x4d, 0x89, 0x0f, 0x7e, 0xa6, 0x85, 0x5e, 0x85, 0xaa, 0x3b, 0xcf, 0xaa, 0xbd,
	0x86, 0xc4, 0x07, 0x5a, 0xf5, 0x47, 0x50, 0x1d, 0xc7, 0xe2, 0xfa, 0x8a, 0xbd, 0x86, 0xba, 0x4c,
	0x04, 0xfa, 0xa1, 0x28, 0x0e, 0xa5, 0xc3, 0x6b, 0xc1, 0x5c, 0x38, 0x5c, 0xe3, 0x3d, 0x1d, 0xa7,
	0xe2, 0xe9, 0x65, 0xff, 0xf7, 0x2a, 0xd4, 0x8b, 0xab, 0xf4, 0xa1, 0x16, 0xc4, 0xa2, 0xa0, 0x5a,
	0xa3, 0xd6, 0x50, 0x5f, 0x7e, 0x48, 0x7b, 0x7a, 0xd5, 0x20, 0x16, 0xd7, 0x82, 0x0d, 0xa0, 0xa1,
	0x6b, 0xd4, 0x2e, 0x45, 0xda, 0xa6, 0x3b, 0xea, 0xec, 0xab, 0x66, 0xbb, 0x14, 0xbd, 0x7a, 0x60,
	0x16, 0xec, 0x4b, 0x68, 0x6f, 0x30, 0x0b, 0x17, 0x3b, 0xff, 0xbf, 0xae, 0xda, 0x32, 0x75, 0x14,
	0xb0, 0xaf, 0xe1, 0x48, 0x6d, 0xa5, 0x9f, 0x66, 0x98, 0xf2, 0x0c, 0xfd, 0x0c, 0xef, 0xed, 0xb5,
	0x8f, 0x8d, 0xcf, 0xd4, 0x08, 0x1e, 0xde, 0xe7, 0xb8, 0x56, 0x5e, 0x47, 0x6d, 0xe5, 0x53, 0x8a,
	0xbd, 0x83, 0xae, 0xa6, 0x05, 0x06, 0xa1, 0x30, 0x70, 0x95, 0xe0, 0x57, 0x06, 0xbe, 0xa2, 0x7c,
	0xc1, 0xb6, 0xd5, 0x56, 0xee, 0x33, 0x85, 0x71, 0x10, 0x21, 0xcf, 0xf2, 0x94, 0xd8, 0x5a, 0xd9,
	0x78, 0x6c, 0x84, 0xb2, 0xf1, 0x53, 0xaa, 0x30, 0x5e, 0x63, 0x84, 0x81, 0x22, 0xb8, 0x5e, 0x36,
	0xbe, 0xa5, 0x7c, 0xd9, 0x78, 0x9f, 0x61, 0x6f, 0xa1, 0x4d, 0x68, 0xc0, 0x25, 0x81, 0x0d, 0x02,
	0x5f, 0x5a, 0x30, 0xe0, 0xb2, 0xc0, 0x40, 0x63, 0x26, 0x66, 0x13, 0x78, 0x55, 0xf2, 0x5b, 0x44,
	0xc9, 0x03, 0xb1, 0x4d, 0x62, 0x5f, 0x97, 0x4d, 0x27, 0x51, 0xf2, 0x50, 0xec, 0xe0, 0xee, 0x8d,
	0x6d, 0x96, 0x7d, 0x0e, 0xb0, 0xda, 0xf8, 0x4b, 0x34, 0x67, 0x3e, 0xb6, 0x6f, 0x44, 0xf8, 0xcd,
	0xe6, 0x5b, 0xdc, 0x1f, 0xb9, 0xb1, 0xb2, 0x91, 0x25, 0xd2, 0xdc, 0x10, 0x27, 0xcf, 0x89, 0x69,
	0x5e, 0x26, 0x4c, 0xc4, 0xde, 0x41, 0x67, 0xb5, 0xf1, 0x05, 0x46, 0xa8, 0xcc, 0x9b, 0x9c, 0x12,
	0x74, 0x52, 0x40, 0x57, 0xa4, 0x14, 0x5c, 0x6b, 0xf5, 0x94, 0x60, 0x97, 0xc5, 0x14, 0x05, 0xb1,
	0xe8, 0x89, 0xb2, 0x57, 0x79, 0x08, 0xed, 0x64, 0x8d, 0x63, 0xd1, 0x0f, 0xa0, 0x31, 0x45, 0xcc,
	0x66, 0x7c, 0xbd, 0xfa, 0x57, 0x07, 0x3a, 0xff, 0xaf, 0x03, 0xcf, 0xa1, 0x92, 0x22, 0x66, 0xd4,
	0xde, 0xad, 0x51, 0xbb, 0x28, 0xd7, 0xdb, 0x7a, 0xa4, 0xf4, 0x7d, 0xe8, 0xde, 0x4a, 0x9e, 0xae,
	0xef, 0x12, 0x75, 0xf3, 0xe3, 0x94, 0x87, 0x99, 0x1e, 0x2c, 0x3d, 0xe7, 0x0e, 0xcd, 0xb9, 0x5e,
	0xb2, 0x63, 0xa8, 0x6e, 0x78, 0x94, 0xa3, 0x9d, 0x7d, 0x13, 0xb0, 0x4f, 0xa1, 0x1e, 0x2c, 0xcc,
	0xf4, 0x1c, 0xd2, 0xf4, 0xb4, 0x6d, 0x73, 0x4d, 0x68, 0x78, 0x6a, 0xc1, 0x42, 0x7f, 0xfb, 0x5f,
	0xc0, 0x51, 0x61, 0x30, 0x4e, 0xa4, 0xc2, 0xad, 0x62, 0x1f, 0x43, 0x25, 0x46, 0xc5, 0xed, 0x25,
	0xfe, 0xf1, 0x0f, 0x20, 0xe9, 0xe2, 0x57, 0x07, 0xea, 0x76, 0x0c, 0xd9, 0x11, 0xb4, 0xae, 0xe5,
	0x86, 0x47, 0xa1, 0xf0, 0xc7, 0xb1, 0x70, 0x0f, 0x58, 0x17, 0x60, 0xb6, 0x1f, 0x15, 0xd7, 0x61,
	0x1d, 0x68, 0xce, 0x8a, 0xf6, 0x77, 0x5f, 0x58, 0xd9, 0x36, 0xb4, 0x7b, 0x68, 0x65, 0xd3, 0x2b,
	0x6e, 0x85, 0xb5, 0xa0, 0x3e, 0x33, 0xcd, 0xe7, 0x56, 0xd9, 0x4b, 0xe8, 0xcc, 0xca, 0x7d, 0xe4,
	0xd6, 0x58, 0x13, 0xaa, 0xd4, 0x2e, 0xee, 0xb1, 0x59, 0x4e, 0x73, 0xe5, 0x9e, 0xb0, 0x36, 0x34,
	0x8a, 0xd7, 0x75, 0x4f, 0xb5, 0xc5, 0x7b, 0x11, 0x87, 0x92, 0x5e, 0xce, 0x15, 0x17, 0x9f, 0x40,
	0xcd, 0x5c, 0x5b, 0x2b, 0xe3, 0x89, 0x7f, 0xf5, 0x61, 0xf2, 0xfe, 0x87, 0xef, 0x66, 0xee, 0x01,
	0x03, 0xad, 0xf8, 0xb3, 0x9f, 0xbe, 0x77, 0x9d, 0x6f, 0xdc, 0xdf, 0x1e, 0xcf, 0x9c, 0x3f, 0x1e,
	0xcf, 0x9c, 0x3f, 0x1f, 0xcf, 0x9c, 0x9f, 0xff, 0x3a, 0x3b, 0x98, 0xd7, 0xe8, 0x4f, 0xfc, 0xf6,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0xc5, 0x62, 0x9d, 0x31, 0x06, 0x00, 0x00,
}

func (m *SplitCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewRange != nil {
		{
			size, err := m.NewRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SplitKey) > 0 {
		i -= len(m.SplitKey)
		copy(dAtA[i:], m.SplitKey)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.SplitKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Leader != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.Leader))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmdID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Seq != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeId != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SplitCmd != nil {
		{
			size, err := m.SplitCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.KvDeleteReq != nil {
		{
			size, err := m.KvDeleteReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.KvPutReq != nil {
		{
			size, err := m.KvPutReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.KvGetReq != nil {
		{
			size, err := m.KvGetReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TxnSelectFlowReq != nil {
		{
			size, err := m.TxnSelectFlowReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TxnScanReq != nil {
		{
			size, err := m.TxnScanReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TxnSelectReq != nil {
		{
			size, err := m.TxnSelectReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TxnClearupReq != nil {
		{
			size, err := m.TxnClearupReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TxnDecideReq != nil {
		{
			size, err := m.TxnDecideReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TxnPrepareReq != nil {
		{
			size, err := m.TxnPrepareReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.VerifyEpoch != nil {
		{
			size, err := m.VerifyEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CmdType != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdId != nil {
		{
			size, err := m.CmdId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VerifyEpoch != nil {
		{
			size, err := m.VerifyEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotKVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotKVPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotKVPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CfType != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.CfType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftInternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftInternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SplitCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leader != 0 {
		n += 1 + sovRaftInternal(uint64(m.Leader))
	}
	l = len(m.SplitKey)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.NewRange != nil {
		l = m.NewRange.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmdID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRaftInternal(uint64(m.NodeId))
	}
	if m.Seq != 0 {
		n += 1 + sovRaftInternal(uint64(m.Seq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdId != nil {
		l = m.CmdId.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.CmdType != 0 {
		n += 1 + sovRaftInternal(uint64(m.CmdType))
	}
	if m.VerifyEpoch != nil {
		l = m.VerifyEpoch.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.TxnPrepareReq != nil {
		l = m.TxnPrepareReq.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.TxnDecideReq != nil {
		l = m.TxnDecideReq.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.TxnClearupReq != nil {
		l = m.TxnClearupReq.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.TxnSelectReq != nil {
		l = m.TxnSelectReq.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.TxnScanReq != nil {
		l = m.TxnScanReq.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.TxnSelectFlowReq != nil {
		l = m.TxnSelectFlowReq.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.KvGetReq != nil {
		l = m.KvGetReq.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.KvPutReq != nil {
		l = m.KvPutReq.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.KvDeleteReq != nil {
		l = m.KvDeleteReq.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SplitCmd != nil {
		l = m.SplitCmd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifyEpoch != nil {
		l = m.VerifyEpoch.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotKVPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.CfType != 0 {
		n += 1 + sovRaftInternal(uint64(m.CfType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftInternal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftInternal(x uint64) (n int) {
	return sovRaftInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SplitCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKey = append(m.SplitKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitKey == nil {
				m.SplitKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &basepb.RangeEpoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewRange == nil {
				m.NewRange = &basepb.Range{}
			}
			if err := m.NewRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmdId == nil {
				m.CmdId = &CmdID{}
			}
			if err := m.CmdId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= CmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyEpoch == nil {
				m.VerifyEpoch = &basepb.RangeEpoch{}
			}
			if err := m.VerifyEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnPrepareReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxnPrepareReq == nil {
				m.TxnPrepareReq = &PrepareRequest{}
			}
			if err := m.TxnPrepareReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnDecideReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxnDecideReq == nil {
				m.TxnDecideReq = &DecideRequest{}
			}
			if err := m.TxnDecideReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnClearupReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxnClearupReq == nil {
				m.TxnClearupReq = &ClearupRequest{}
			}
			if err := m.TxnClearupReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnSelectReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxnSelectReq == nil {
				m.TxnSelectReq = &SelectRequest{}
			}
			if err := m.TxnSelectReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnScanReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxnScanReq == nil {
				m.TxnScanReq = &ScanRequest{}
			}
			if err := m.TxnScanReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnSelectFlowReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxnSelectFlowReq == nil {
				m.TxnSelectFlowReq = &SelectFlowRequest{}
			}
			if err := m.TxnSelectFlowReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvGetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvGetReq == nil {
				m.KvGetReq = &KvGetRequest{}
			}
			if err := m.KvGetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPutReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvPutReq == nil {
				m.KvPutReq = &KvPutRequest{}
			}
			if err := m.KvPutReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvDeleteReq == nil {
				m.KvDeleteReq = &KvDeleteRequest{}
			}
			if err := m.KvDeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplitCmd == nil {
				m.SplitCmd = &SplitCommand{}
			}
			if err := m.SplitCmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyEpoch == nil {
				m.VerifyEpoch = &basepb.RangeEpoch{}
			}
			if err := m.VerifyEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &basepb.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotKVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotKVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotKVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfType", wireType)
			}
			m.CfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CfType |= CFType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &basepb.Range{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftInternal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftInternal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftInternal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftInternal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftInternal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftInternal = fmt.Errorf("proto: unexpected end of group")
)
