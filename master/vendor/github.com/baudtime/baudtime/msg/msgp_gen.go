package msg

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *GeneralResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "status":
			{
				var zb0002 byte
				zb0002, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = StatusCode(zb0002)
			}
		case "message":
			z.Message, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GeneralResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "status"
	err = en.Append(0x82, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "message"
	err = en.Append(0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Message)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GeneralResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "status"
	o = append(o, 0x82, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendByte(o, byte(z.Status))
	// string "message"
	o = append(o, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Message)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GeneralResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "status":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = StatusCode(zb0002)
			}
		case "message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GeneralResponse) Msgsize() (s int) {
	s = 1 + 7 + msgp.ByteSize + 8 + msgp.StringPrefixSize + len(z.Message)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Label) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Name, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	z.Value, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Label) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Label) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendString(o, z.Name)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Label) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	z.Value, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Label) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Name) + msgp.StringPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LabelValuesResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "values":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Values")
				return
			}
			if cap(z.Values) >= int(zb0002) {
				z.Values = (z.Values)[:zb0002]
			} else {
				z.Values = make([]string, zb0002)
			}
			for za0001 := range z.Values {
				z.Values[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Values", za0001)
					return
				}
			}
		case "status":
			{
				var zb0003 byte
				zb0003, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = StatusCode(zb0003)
			}
		case "errorMsg":
			z.ErrorMsg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ErrorMsg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LabelValuesResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "values"
	err = en.Append(0x83, 0xa6, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Values)))
	if err != nil {
		err = msgp.WrapError(err, "Values")
		return
	}
	for za0001 := range z.Values {
		err = en.WriteString(z.Values[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Values", za0001)
			return
		}
	}
	// write "status"
	err = en.Append(0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "errorMsg"
	err = en.Append(0xa8, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.ErrorMsg)
	if err != nil {
		err = msgp.WrapError(err, "ErrorMsg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LabelValuesResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "values"
	o = append(o, 0x83, 0xa6, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Values)))
	for za0001 := range z.Values {
		o = msgp.AppendString(o, z.Values[za0001])
	}
	// string "status"
	o = append(o, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendByte(o, byte(z.Status))
	// string "errorMsg"
	o = append(o, 0xa8, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67)
	o = msgp.AppendString(o, z.ErrorMsg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LabelValuesResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "values":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Values")
				return
			}
			if cap(z.Values) >= int(zb0002) {
				z.Values = (z.Values)[:zb0002]
			} else {
				z.Values = make([]string, zb0002)
			}
			for za0001 := range z.Values {
				z.Values[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Values", za0001)
					return
				}
			}
		case "status":
			{
				var zb0003 byte
				zb0003, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = StatusCode(zb0003)
			}
		case "errorMsg":
			z.ErrorMsg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ErrorMsg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LabelValuesResponse) Msgsize() (s int) {
	s = 1 + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Values {
		s += msgp.StringPrefixSize + len(z.Values[za0001])
	}
	s += 7 + msgp.ByteSize + 9 + msgp.StringPrefixSize + len(z.ErrorMsg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Point) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.T, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	z.V, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "V")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Point) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.T)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	err = en.WriteFloat64(z.V)
	if err != nil {
		err = msgp.WrapError(err, "V")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Point) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt64(o, z.T)
	o = msgp.AppendFloat64(o, z.V)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Point) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.T, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	z.V, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "V")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Point) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Series) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Labels")
		return
	}
	if cap(z.Labels) >= int(zb0002) {
		z.Labels = (z.Labels)[:zb0002]
	} else {
		z.Labels = make([]Label, zb0002)
	}
	for za0001 := range z.Labels {
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001)
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		z.Labels[za0001].Name, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001, "Name")
			return
		}
		z.Labels[za0001].Value, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001, "Value")
			return
		}
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Points")
		return
	}
	if cap(z.Points) >= int(zb0004) {
		z.Points = (z.Points)[:zb0004]
	} else {
		z.Points = make([]Point, zb0004)
	}
	for za0002 := range z.Points {
		var zb0005 uint32
		zb0005, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002)
			return
		}
		if zb0005 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0005}
			return
		}
		z.Points[za0002].T, err = dc.ReadInt64()
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002, "T")
			return
		}
		z.Points[za0002].V, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002, "V")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Series) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Labels)))
	if err != nil {
		err = msgp.WrapError(err, "Labels")
		return
	}
	for za0001 := range z.Labels {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteString(z.Labels[za0001].Name)
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001, "Name")
			return
		}
		err = en.WriteString(z.Labels[za0001].Value)
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001, "Value")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.Points)))
	if err != nil {
		err = msgp.WrapError(err, "Points")
		return
	}
	for za0002 := range z.Points {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Points[za0002].T)
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002, "T")
			return
		}
		err = en.WriteFloat64(z.Points[za0002].V)
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002, "V")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Series) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Labels)))
	for za0001 := range z.Labels {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendString(o, z.Labels[za0001].Name)
		o = msgp.AppendString(o, z.Labels[za0001].Value)
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.Points)))
	for za0002 := range z.Points {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendInt64(o, z.Points[za0002].T)
		o = msgp.AppendFloat64(o, z.Points[za0002].V)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Series) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Labels")
		return
	}
	if cap(z.Labels) >= int(zb0002) {
		z.Labels = (z.Labels)[:zb0002]
	} else {
		z.Labels = make([]Label, zb0002)
	}
	for za0001 := range z.Labels {
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001)
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		z.Labels[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001, "Name")
			return
		}
		z.Labels[za0001].Value, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Labels", za0001, "Value")
			return
		}
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Points")
		return
	}
	if cap(z.Points) >= int(zb0004) {
		z.Points = (z.Points)[:zb0004]
	} else {
		z.Points = make([]Point, zb0004)
	}
	for za0002 := range z.Points {
		var zb0005 uint32
		zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002)
			return
		}
		if zb0005 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0005}
			return
		}
		z.Points[za0002].T, bts, err = msgp.ReadInt64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002, "T")
			return
		}
		z.Points[za0002].V, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Points", za0002, "V")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Series) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Labels {
		s += 1 + msgp.StringPrefixSize + len(z.Labels[za0001].Name) + msgp.StringPrefixSize + len(z.Labels[za0001].Value)
	}
	s += msgp.ArrayHeaderSize + (len(z.Points) * (5 + msgp.Int64Size + msgp.Float64Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StatusCode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StatusCode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StatusCode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StatusCode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StatusCode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StatusCode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StatusCode) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
