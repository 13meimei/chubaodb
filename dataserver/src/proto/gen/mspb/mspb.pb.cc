// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mspb/mspb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mspb/mspb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mspb {
class RangeHeartbeatRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeHeartbeatRequest>
     _instance;
} _RangeHeartbeatRequest_default_instance_;
class RangeHeartbeatResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeHeartbeatResponse>
     _instance;
} _RangeHeartbeatResponse_default_instance_;
class NodeHeartbeatRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeHeartbeatRequest>
     _instance;
} _NodeHeartbeatRequest_default_instance_;
class NodeHeartbeatResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeHeartbeatResponse>
     _instance;
} _NodeHeartbeatResponse_default_instance_;
class AskSplitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AskSplitRequest>
     _instance;
} _AskSplitRequest_default_instance_;
class AskSplitResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AskSplitResponse>
     _instance;
} _AskSplitResponse_default_instance_;
class RegisterNodeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegisterNodeRequest>
     _instance;
} _RegisterNodeRequest_default_instance_;
class RegisterNodeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegisterNodeResponse>
     _instance;
} _RegisterNodeResponse_default_instance_;
class GetRouteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetRouteRequest>
     _instance;
} _GetRouteRequest_default_instance_;
class GetRouteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetRouteResponse>
     _instance;
} _GetRouteResponse_default_instance_;
class GetNodesRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodesRequest>
     _instance;
} _GetNodesRequest_default_instance_;
class GetNodesResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodesResponse>
     _instance;
} _GetNodesResponse_default_instance_;
class GetNodeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeRequest>
     _instance;
} _GetNodeRequest_default_instance_;
class GetNodeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeResponse>
     _instance;
} _GetNodeResponse_default_instance_;
class DelDatabaseRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelDatabaseRequest>
     _instance;
} _DelDatabaseRequest_default_instance_;
class DelDatabaseResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelDatabaseResponse>
     _instance;
} _DelDatabaseResponse_default_instance_;
class GetDBRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDBRequest>
     _instance;
} _GetDBRequest_default_instance_;
class GetDBResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDBResponse>
     _instance;
} _GetDBResponse_default_instance_;
class GetDBsResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDBsResponse>
     _instance;
} _GetDBsResponse_default_instance_;
class DelTableRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelTableRequest>
     _instance;
} _DelTableRequest_default_instance_;
class DelTableResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DelTableResponse>
     _instance;
} _DelTableResponse_default_instance_;
class GetTableRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTableRequest>
     _instance;
} _GetTableRequest_default_instance_;
class GetTableResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTableResponse>
     _instance;
} _GetTableResponse_default_instance_;
class GetTablesRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTablesRequest>
     _instance;
} _GetTablesRequest_default_instance_;
class GetTablesResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTablesResponse>
     _instance;
} _GetTablesResponse_default_instance_;
class GetColumnsRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnsRequest>
     _instance;
} _GetColumnsRequest_default_instance_;
class GetColumnsResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnsResponse>
     _instance;
} _GetColumnsResponse_default_instance_;
class GetNodeInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInfoRequest>
     _instance;
} _GetNodeInfoRequest_default_instance_;
class GetNodeInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInfoResponse>
     _instance;
} _GetNodeInfoResponse_default_instance_;
class GetNodeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInfo>
     _instance;
} _GetNodeInfo_default_instance_;
class GetColumnRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnRequest>
     _instance;
} _GetColumnRequest_default_instance_;
class GetColumnResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnResponse>
     _instance;
} _GetColumnResponse_default_instance_;
class CreateDatabaseRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateDatabaseRequest>
     _instance;
} _CreateDatabaseRequest_default_instance_;
class CreateDatabaseResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateDatabaseResponse>
     _instance;
} _CreateDatabaseResponse_default_instance_;
class CreateTableRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateTableRequest>
     _instance;
} _CreateTableRequest_default_instance_;
class CreateTableResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateTableResponse>
     _instance;
} _CreateTableResponse_default_instance_;
class GetAutoIncIdRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAutoIncIdRequest>
     _instance;
} _GetAutoIncIdRequest_default_instance_;
class GetAutoIncIdResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAutoIncIdResponse>
     _instance;
} _GetAutoIncIdResponse_default_instance_;
class RequestHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
     _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
     _instance;
} _ResponseHeader_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;

namespace protobuf_mspb_2fmspb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[41];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, peers_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, epoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, node_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, node_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, split_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, force_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_peer_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, split_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeRequest, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeRequest, raft_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeRequest, admin_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeRequest, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNodeResponse, node_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, routes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodesRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodesResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodesResponse, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeResponse, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelDatabaseRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelDatabaseRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelDatabaseRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelDatabaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelDatabaseResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBResponse, db_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBsResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBsResponse, dbs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableRequest, table_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTableResponse, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, table_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesRequest, db_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTablesResponse, tables_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, table_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsResponse, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoResponse, nodeinfos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfo, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfo, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfo, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnRequest, col_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnRequest, col_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnResponse, column_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseResponse, database_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, range_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdResponse, ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RangeHeartbeatRequest)},
  { 9, -1, sizeof(RangeHeartbeatResponse)},
  { 17, -1, sizeof(NodeHeartbeatRequest)},
  { 24, -1, sizeof(NodeHeartbeatResponse)},
  { 31, -1, sizeof(AskSplitRequest)},
  { 40, -1, sizeof(AskSplitResponse)},
  { 50, -1, sizeof(RegisterNodeRequest)},
  { 60, -1, sizeof(RegisterNodeResponse)},
  { 67, -1, sizeof(GetRouteRequest)},
  { 77, -1, sizeof(GetRouteResponse)},
  { 84, -1, sizeof(GetNodesRequest)},
  { 90, -1, sizeof(GetNodesResponse)},
  { 97, -1, sizeof(GetNodeRequest)},
  { 104, -1, sizeof(GetNodeResponse)},
  { 111, -1, sizeof(DelDatabaseRequest)},
  { 119, -1, sizeof(DelDatabaseResponse)},
  { 125, -1, sizeof(GetDBRequest)},
  { 132, -1, sizeof(GetDBResponse)},
  { 139, -1, sizeof(GetDBsResponse)},
  { 146, -1, sizeof(DelTableRequest)},
  { 156, -1, sizeof(DelTableResponse)},
  { 163, -1, sizeof(GetTableRequest)},
  { 173, -1, sizeof(GetTableResponse)},
  { 180, -1, sizeof(GetTablesRequest)},
  { 188, -1, sizeof(GetTablesResponse)},
  { 195, -1, sizeof(GetColumnsRequest)},
  { 203, -1, sizeof(GetColumnsResponse)},
  { 210, -1, sizeof(GetNodeInfoRequest)},
  { 216, -1, sizeof(GetNodeInfoResponse)},
  { 223, -1, sizeof(GetNodeInfo)},
  { 231, -1, sizeof(GetColumnRequest)},
  { 241, -1, sizeof(GetColumnResponse)},
  { 248, -1, sizeof(CreateDatabaseRequest)},
  { 255, -1, sizeof(CreateDatabaseResponse)},
  { 262, -1, sizeof(CreateTableRequest)},
  { 272, -1, sizeof(CreateTableResponse)},
  { 279, -1, sizeof(GetAutoIncIdRequest)},
  { 288, -1, sizeof(GetAutoIncIdResponse)},
  { 295, -1, sizeof(RequestHeader)},
  { 301, -1, sizeof(ResponseHeader)},
  { 308, -1, sizeof(Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AskSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AskSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterNodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRouteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelDatabaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDBRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDBResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDBsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTablesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTablesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateDatabaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAutoIncIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAutoIncIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mspb/mspb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 41);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::basepb::protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2fschedule_2eproto::InitDefaults();
  _RangeHeartbeatRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeHeartbeatRequest_default_instance_);_RangeHeartbeatResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeHeartbeatResponse_default_instance_);_NodeHeartbeatRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeHeartbeatRequest_default_instance_);_NodeHeartbeatResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeHeartbeatResponse_default_instance_);_AskSplitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AskSplitRequest_default_instance_);_AskSplitResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AskSplitResponse_default_instance_);_RegisterNodeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegisterNodeRequest_default_instance_);_RegisterNodeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegisterNodeResponse_default_instance_);_GetRouteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetRouteRequest_default_instance_);_GetRouteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetRouteResponse_default_instance_);_GetNodesRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodesRequest_default_instance_);_GetNodesResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodesResponse_default_instance_);_GetNodeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeRequest_default_instance_);_GetNodeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeResponse_default_instance_);_DelDatabaseRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelDatabaseRequest_default_instance_);_DelDatabaseResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelDatabaseResponse_default_instance_);_GetDBRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDBRequest_default_instance_);_GetDBResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDBResponse_default_instance_);_GetDBsResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDBsResponse_default_instance_);_DelTableRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelTableRequest_default_instance_);_DelTableResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DelTableResponse_default_instance_);_GetTableRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTableRequest_default_instance_);_GetTableResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTableResponse_default_instance_);_GetTablesRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTablesRequest_default_instance_);_GetTablesResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTablesResponse_default_instance_);_GetColumnsRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnsRequest_default_instance_);_GetColumnsResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnsResponse_default_instance_);_GetNodeInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeInfoRequest_default_instance_);_GetNodeInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeInfoResponse_default_instance_);_GetNodeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeInfo_default_instance_);_GetColumnRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnRequest_default_instance_);_GetColumnResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnResponse_default_instance_);_CreateDatabaseRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateDatabaseRequest_default_instance_);_CreateDatabaseResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateDatabaseResponse_default_instance_);_CreateTableRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateTableRequest_default_instance_);_CreateTableResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateTableResponse_default_instance_);_GetAutoIncIdRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAutoIncIdRequest_default_instance_);_GetAutoIncIdResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAutoIncIdResponse_default_instance_);_RequestHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestHeader_default_instance_);_ResponseHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseHeader_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_RangeHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _RangeHeartbeatRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _RangeHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _RangeHeartbeatResponse_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _NodeHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _NodeHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _AskSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _AskSplitRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _AskSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _AskSplitResponse_default_instance_._instance.get_mutable()->range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _RegisterNodeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _RegisterNodeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetRouteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetRouteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodesRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetNodesResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetNodeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeResponse_default_instance_._instance.get_mutable()->node_ = const_cast< ::basepb::Node*>(
      ::basepb::Node::internal_default_instance());
  _DelDatabaseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _DelDatabaseResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetDBRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetDBResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetDBResponse_default_instance_._instance.get_mutable()->db_ = const_cast< ::basepb::DataBase*>(
      ::basepb::DataBase::internal_default_instance());
  _GetDBsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _DelTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _DelTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _DelTableResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::basepb::Table*>(
      ::basepb::Table::internal_default_instance());
  _GetTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetTableResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::basepb::Table*>(
      ::basepb::Table::internal_default_instance());
  _GetTablesRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetTablesResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetColumnsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetColumnsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeInfoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetNodeInfoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeInfo_default_instance_._instance.get_mutable()->node_ = const_cast< ::basepb::Node*>(
      ::basepb::Node::internal_default_instance());
  _GetNodeInfo_default_instance_._instance.get_mutable()->info_ = const_cast< ::dspb::NodeInfoResponse*>(
      ::dspb::NodeInfoResponse::internal_default_instance());
  _GetColumnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetColumnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetColumnResponse_default_instance_._instance.get_mutable()->column_ = const_cast< ::basepb::Column*>(
      ::basepb::Column::internal_default_instance());
  _CreateDatabaseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _CreateDatabaseResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _CreateDatabaseResponse_default_instance_._instance.get_mutable()->database_ = const_cast< ::basepb::DataBase*>(
      ::basepb::DataBase::internal_default_instance());
  _CreateTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _CreateTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _CreateTableResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::basepb::Table*>(
      ::basepb::Table::internal_default_instance());
  _GetAutoIncIdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetAutoIncIdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _ResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::mspb::Error*>(
      ::mspb::Error::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017mspb/mspb.proto\022\004mspb\032\023basepb/basepb.p"
      "roto\032\023dspb/schedule.proto\"\222\001\n\025RangeHeart"
      "beatRequest\022#\n\006header\030\001 \001(\0132\023.mspb.Reque"
      "stHeader\022\034\n\005range\030\002 \001(\0132\r.basepb.Range\022\014"
      "\n\004term\030\003 \001(\004\022(\n\014peers_status\030\004 \003(\0132\022.bas"
      "epb.PeerStatus\"s\n\026RangeHeartbeatResponse"
      "\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHeader\022\020"
      "\n\010range_id\030\002 \001(\004\022!\n\005epoch\030\003 \001(\0132\022.basepb"
      ".RangeEpoch\"L\n\024NodeHeartbeatRequest\022#\n\006h"
      "eader\030\001 \001(\0132\023.mspb.RequestHeader\022\017\n\007node"
      "_id\030\002 \001(\004\"N\n\025NodeHeartbeatResponse\022$\n\006he"
      "ader\030\001 \001(\0132\024.mspb.ResponseHeader\022\017\n\007node"
      "_id\030\002 \001(\004\"v\n\017AskSplitRequest\022#\n\006header\030\001"
      " \001(\0132\023.mspb.RequestHeader\022\034\n\005range\030\002 \001(\013"
      "2\r.basepb.Range\022\021\n\tsplit_key\030\003 \001(\014\022\r\n\005fo"
      "rce\030\004 \001(\010\"\225\001\n\020AskSplitResponse\022$\n\006header"
      "\030\001 \001(\0132\024.mspb.ResponseHeader\022\034\n\005range\030\002 "
      "\001(\0132\r.basepb.Range\022\024\n\014new_range_id\030\003 \001(\004"
      "\022\024\n\014new_peer_ids\030\004 \003(\004\022\021\n\tsplit_key\030\005 \001("
      "\014\"\207\001\n\023RegisterNodeRequest\022#\n\006header\030\001 \001("
      "\0132\023.mspb.RequestHeader\022\023\n\013server_port\030\002 "
      "\001(\r\022\021\n\traft_port\030\003 \001(\r\022\022\n\nadmin_port\030\004 \001"
      "(\r\022\017\n\007version\030\005 \001(\t\"M\n\024RegisterNodeRespo"
      "nse\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHeade"
      "r\022\017\n\007node_id\030\002 \001(\004\"q\n\017GetRouteRequest\022#\n"
      "\006header\030\001 \001(\0132\023.mspb.RequestHeader\022\r\n\005db"
      "_id\030\002 \001(\004\022\020\n\010table_id\030\003 \001(\004\022\013\n\003key\030\004 \001(\014"
      "\022\013\n\003max\030\005 \001(\r\"W\n\020GetRouteResponse\022$\n\006hea"
      "der\030\001 \001(\0132\024.mspb.ResponseHeader\022\035\n\006route"
      "s\030\002 \003(\0132\r.basepb.Range\"6\n\017GetNodesReques"
      "t\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHeader\"U"
      "\n\020GetNodesResponse\022$\n\006header\030\001 \001(\0132\024.msp"
      "b.ResponseHeader\022\033\n\005nodes\030\002 \003(\0132\014.basepb"
      ".Node\"A\n\016GetNodeRequest\022#\n\006header\030\001 \001(\0132"
      "\023.mspb.RequestHeader\022\n\n\002id\030\002 \001(\004\"S\n\017GetN"
      "odeResponse\022$\n\006header\030\001 \001(\0132\024.mspb.Respo"
      "nseHeader\022\032\n\004node\030\002 \001(\0132\014.basepb.Node\"S\n"
      "\022DelDatabaseRequest\022#\n\006header\030\001 \001(\0132\023.ms"
      "pb.RequestHeader\022\n\n\002id\030\002 \001(\004\022\014\n\004name\030\003 \001"
      "(\t\";\n\023DelDatabaseResponse\022$\n\006header\030\001 \001("
      "\0132\024.mspb.ResponseHeader\"A\n\014GetDBRequest\022"
      "#\n\006header\030\001 \001(\0132\023.mspb.RequestHeader\022\014\n\004"
      "name\030\002 \001(\t\"S\n\rGetDBResponse\022$\n\006header\030\001 "
      "\001(\0132\024.mspb.ResponseHeader\022\034\n\002db\030\002 \001(\0132\020."
      "basepb.DataBase\"U\n\016GetDBsResponse\022$\n\006hea"
      "der\030\001 \001(\0132\024.mspb.ResponseHeader\022\035\n\003dbs\030\002"
      " \003(\0132\020.basepb.DataBase\"|\n\017DelTableReques"
      "t\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHeader\022\r"
      "\n\005db_id\030\002 \001(\004\022\017\n\007db_name\030\003 \001(\t\022\020\n\010table_"
      "id\030\004 \001(\004\022\022\n\ntable_name\030\005 \001(\t\"V\n\020DelTable"
      "Response\022$\n\006header\030\001 \001(\0132\024.mspb.Response"
      "Header\022\034\n\005table\030\002 \001(\0132\r.basepb.Table\"|\n\017"
      "GetTableRequest\022#\n\006header\030\001 \001(\0132\023.mspb.R"
      "equestHeader\022\r\n\005db_id\030\002 \001(\004\022\017\n\007db_name\030\003"
      " \001(\t\022\020\n\010table_id\030\004 \001(\004\022\022\n\ntable_name\030\005 \001"
      "(\t\"V\n\020GetTableResponse\022$\n\006header\030\001 \001(\0132\024"
      ".mspb.ResponseHeader\022\034\n\005table\030\002 \001(\0132\r.ba"
      "sepb.Table\"W\n\020GetTablesRequest\022#\n\006header"
      "\030\001 \001(\0132\023.mspb.RequestHeader\022\r\n\005db_id\030\002 \001"
      "(\004\022\017\n\007db_name\030\003 \001(\t\"X\n\021GetTablesResponse"
      "\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHeader\022\035"
      "\n\006tables\030\002 \003(\0132\r.basepb.Table\"Y\n\021GetColu"
      "mnsRequest\022#\n\006header\030\001 \001(\0132\023.mspb.Reques"
      "tHeader\022\r\n\005db_id\030\002 \001(\004\022\020\n\010table_id\030\003 \001(\004"
      "\"[\n\022GetColumnsResponse\022$\n\006header\030\001 \001(\0132\024"
      ".mspb.ResponseHeader\022\037\n\007columns\030\002 \003(\0132\016."
      "basepb.Column\"9\n\022GetNodeInfoRequest\022#\n\006h"
      "eader\030\001 \001(\0132\023.mspb.RequestHeader\"a\n\023GetN"
      "odeInfoResponse\022$\n\006header\030\001 \001(\0132\024.mspb.R"
      "esponseHeader\022$\n\tnodeInfos\030\002 \003(\0132\021.mspb."
      "GetNodeInfo\"\\\n\013GetNodeInfo\022\013\n\003err\030\001 \001(\t\022"
      "\032\n\004node\030\002 \001(\0132\014.basepb.Node\022$\n\004info\030\003 \001("
      "\0132\026.dspb.NodeInfoResponse\"z\n\020GetColumnRe"
      "quest\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHead"
      "er\022\r\n\005db_id\030\002 \001(\004\022\020\n\010table_id\030\003 \001(\004\022\016\n\006c"
      "ol_id\030\004 \001(\004\022\020\n\010col_name\030\005 \001(\t\"Y\n\021GetColu"
      "mnResponse\022$\n\006header\030\001 \001(\0132\024.mspb.Respon"
      "seHeader\022\036\n\006column\030\002 \001(\0132\016.basepb.Column"
      "\"J\n\025CreateDatabaseRequest\022#\n\006header\030\001 \001("
      "\0132\023.mspb.RequestHeader\022\014\n\004name\030\002 \001(\t\"b\n\026"
      "CreateDatabaseResponse\022$\n\006header\030\001 \001(\0132\024"
      ".mspb.ResponseHeader\022\"\n\010database\030\002 \001(\0132\020"
      ".basepb.DataBase\"\206\001\n\022CreateTableRequest\022"
      "#\n\006header\030\001 \001(\0132\023.mspb.RequestHeader\022\017\n\007"
      "db_name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\022\022\n\npro"
      "perties\030\004 \001(\t\022\022\n\nrange_keys\030\005 \003(\t\"Y\n\023Cre"
      "ateTableResponse\022$\n\006header\030\001 \001(\0132\024.mspb."
      "ResponseHeader\022\034\n\005table\030\002 \001(\0132\r.basepb.T"
      "able\"i\n\023GetAutoIncIdRequest\022#\n\006header\030\001 "
      "\001(\0132\023.mspb.RequestHeader\022\r\n\005db_id\030\002 \001(\004\022"
      "\020\n\010table_id\030\003 \001(\004\022\014\n\004size\030\004 \001(\r\"I\n\024GetAu"
      "toIncIdResponse\022$\n\006header\030\001 \001(\0132\024.mspb.R"
      "esponseHeader\022\013\n\003ids\030\002 \003(\004\"#\n\rRequestHea"
      "der\022\022\n\ncluster_id\030\001 \001(\004\"@\n\016ResponseHeade"
      "r\022\022\n\ncluster_id\030\001 \001(\004\022\032\n\005error\030\002 \001(\0132\013.m"
      "spb.Error\"&\n\005Error\022\014\n\004code\030\001 \001(\r\022\017\n\007mess"
      "age\030\002 \001(\t*\301\006\n\tErrorType\022\006\n\002No\020\000\022\014\n\010UnDef"
      "ine\020\001\022\024\n\020ClusterIDNotSame\020\002\022\022\n\016NoSelecte"
      "dNode\020\003\022\021\n\rInternalError\020\004\022\t\n\005GenID\020\005\022\017\n"
      "\013DupDatabase\020\006\022\014\n\010DupTable\020\007\022\022\n\016NotRunin"
      "gTable\020\010\022\024\n\020NotExistDatabase\020\t\022\021\n\rNotExi"
      "stTable\020\n\022\020\n\014NotExistNode\020\013\022\021\n\rNotActive"
      "Node\020\014\022\021\n\rNotExistRange\020\r\022\017\n\013ExistsRange"
      "\020\016\022\020\n\014NotExistPeer\020\017\022\026\n\022NotEnoughResourc"
      "es\020\020\022\020\n\014InvalidParam\020\021\022\021\n\rInvalidColumn\020"
      "\022\022\020\n\014InvalidIndex\020\023\022\025\n\021ColumnNameTooLong"
      "\020\024\022\022\n\016ColumnNotExist\020\025\022\021\n\rDupColumnName\020"
      "\026\022\021\n\rPkMustNotNull\020\027\022\r\n\tMissingPk\020\030\022\034\n\030P"
      "kMustNotSetDefaultValue\020\031\022\025\n\021NodeRejectN"
      "ewPeer\020\032\022\017\n\013NodeBlocked\020\033\022\025\n\021NodeStateCo"
      "nfused\020\034\022\021\n\rNodeNotEnough\020\035\022\024\n\020Scheduler"
      "Existed\020\036\022\025\n\021SchedulerNotFound\020\037\022\021\n\rWork"
      "erExisted\020 \022\022\n\016WorkerNotFound\020!\022\023\n\017SqlRe"
      "servedWord\020\"\022\022\n\016SQLSyntaxError\020#\022\025\n\021Rang"
      "eMetaConflict\020$\022\014\n\010NotFound\020%\022\021\n\rNotAllo"
      "wSplit\020&\022\r\n\tNotCancel\020\'\022\022\n\016NotAllowDelet"
      "e\020(\022\022\n\016ClientIPNotSet\020)\022\024\n\020DatabaseNotEm"
      "pty\020*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mspb/mspb.proto", &protobuf_RegisterTypes);
  ::basepb::protobuf_basepb_2fbasepb_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2fschedule_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mspb_2fmspb_2eproto

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_enum_descriptors[0];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeHeartbeatRequest::kHeaderFieldNumber;
const int RangeHeartbeatRequest::kRangeFieldNumber;
const int RangeHeartbeatRequest::kTermFieldNumber;
const int RangeHeartbeatRequest::kPeersStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeHeartbeatRequest::RangeHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RangeHeartbeatRequest)
}
RangeHeartbeatRequest::RangeHeartbeatRequest(const RangeHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_status_(from.peers_status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::basepb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:mspb.RangeHeartbeatRequest)
}

void RangeHeartbeatRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&header_)) + sizeof(term_));
  _cached_size_ = 0;
}

RangeHeartbeatRequest::~RangeHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:mspb.RangeHeartbeatRequest)
  SharedDtor();
}

void RangeHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void RangeHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeHeartbeatRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeHeartbeatRequest& RangeHeartbeatRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeHeartbeatRequest* RangeHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  RangeHeartbeatRequest* n = new RangeHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RangeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_status_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RangeHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RangeHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.PeerStatus peers_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RangeHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RangeHeartbeatRequest)
  return false;
#undef DO_
}

void RangeHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RangeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // repeated .basepb.PeerStatus peers_status = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->peers_status(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RangeHeartbeatRequest)
}

::google::protobuf::uint8* RangeHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RangeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // repeated .basepb.PeerStatus peers_status = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->peers_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RangeHeartbeatRequest)
  return target;
}

size_t RangeHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RangeHeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.PeerStatus peers_status = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers_status(static_cast<int>(i)));
    }
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RangeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RangeHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RangeHeartbeatRequest)
    MergeFrom(*source);
  }
}

void RangeHeartbeatRequest::MergeFrom(const RangeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RangeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_status_.MergeFrom(from.peers_status_);
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::basepb::Range::MergeFrom(from.range());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RangeHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RangeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeHeartbeatRequest::CopyFrom(const RangeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RangeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeHeartbeatRequest::IsInitialized() const {
  return true;
}

void RangeHeartbeatRequest::Swap(RangeHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeHeartbeatRequest::InternalSwap(RangeHeartbeatRequest* other) {
  using std::swap;
  peers_status_.InternalSwap(&other->peers_status_);
  swap(header_, other->header_);
  swap(range_, other->range_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeHeartbeatRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeHeartbeatRequest

// .mspb.RequestHeader header = 1;
bool RangeHeartbeatRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeHeartbeatRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& RangeHeartbeatRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* RangeHeartbeatRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.header)
  return header_;
}
::mspb::RequestHeader* RangeHeartbeatRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeHeartbeatRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatRequest.header)
}

// .basepb.Range range = 2;
bool RangeHeartbeatRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void RangeHeartbeatRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::basepb::Range& RangeHeartbeatRequest::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* RangeHeartbeatRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.range)
  return range_;
}
::basepb::Range* RangeHeartbeatRequest::release_range() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatRequest.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void RangeHeartbeatRequest::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatRequest.range)
}

// uint64 term = 3;
void RangeHeartbeatRequest::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeHeartbeatRequest::term() const {
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.term)
  return term_;
}
void RangeHeartbeatRequest::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeHeartbeatRequest.term)
}

// repeated .basepb.PeerStatus peers_status = 4;
int RangeHeartbeatRequest::peers_status_size() const {
  return peers_status_.size();
}
void RangeHeartbeatRequest::clear_peers_status() {
  peers_status_.Clear();
}
const ::basepb::PeerStatus& RangeHeartbeatRequest::peers_status(int index) const {
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_.Get(index);
}
::basepb::PeerStatus* RangeHeartbeatRequest::mutable_peers_status(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_.Mutable(index);
}
::basepb::PeerStatus* RangeHeartbeatRequest::add_peers_status() {
  // @@protoc_insertion_point(field_add:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >*
RangeHeartbeatRequest::mutable_peers_status() {
  // @@protoc_insertion_point(field_mutable_list:mspb.RangeHeartbeatRequest.peers_status)
  return &peers_status_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >&
RangeHeartbeatRequest::peers_status() const {
  // @@protoc_insertion_point(field_list:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeHeartbeatResponse::kHeaderFieldNumber;
const int RangeHeartbeatResponse::kRangeIdFieldNumber;
const int RangeHeartbeatResponse::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeHeartbeatResponse::RangeHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RangeHeartbeatResponse)
}
RangeHeartbeatResponse::RangeHeartbeatResponse(const RangeHeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_epoch()) {
    epoch_ = new ::basepb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.RangeHeartbeatResponse)
}

void RangeHeartbeatResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

RangeHeartbeatResponse::~RangeHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:mspb.RangeHeartbeatResponse)
  SharedDtor();
}

void RangeHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete epoch_;
}

void RangeHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeHeartbeatResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeHeartbeatResponse& RangeHeartbeatResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeHeartbeatResponse* RangeHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  RangeHeartbeatResponse* n = new RangeHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RangeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RangeHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RangeHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RangeHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RangeHeartbeatResponse)
  return false;
#undef DO_
}

void RangeHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RangeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // .basepb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->epoch_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RangeHeartbeatResponse)
}

::google::protobuf::uint8* RangeHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RangeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // .basepb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->epoch_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RangeHeartbeatResponse)
  return target;
}

size_t RangeHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RangeHeartbeatResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RangeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeHeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RangeHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RangeHeartbeatResponse)
    MergeFrom(*source);
  }
}

void RangeHeartbeatResponse::MergeFrom(const RangeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RangeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_epoch()) {
    mutable_epoch()->::basepb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void RangeHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RangeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeHeartbeatResponse::CopyFrom(const RangeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RangeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeHeartbeatResponse::IsInitialized() const {
  return true;
}

void RangeHeartbeatResponse::Swap(RangeHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeHeartbeatResponse::InternalSwap(RangeHeartbeatResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(epoch_, other->epoch_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeHeartbeatResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeHeartbeatResponse

// .mspb.ResponseHeader header = 1;
bool RangeHeartbeatResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeHeartbeatResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& RangeHeartbeatResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* RangeHeartbeatResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatResponse.header)
  return header_;
}
::mspb::ResponseHeader* RangeHeartbeatResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeHeartbeatResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatResponse.header)
}

// uint64 range_id = 2;
void RangeHeartbeatResponse::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeHeartbeatResponse::range_id() const {
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.range_id)
  return range_id_;
}
void RangeHeartbeatResponse::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeHeartbeatResponse.range_id)
}

// .basepb.RangeEpoch epoch = 3;
bool RangeHeartbeatResponse::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void RangeHeartbeatResponse::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::basepb::RangeEpoch& RangeHeartbeatResponse::epoch() const {
  const ::basepb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* RangeHeartbeatResponse::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatResponse.epoch)
  return epoch_;
}
::basepb::RangeEpoch* RangeHeartbeatResponse::release_epoch() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatResponse.epoch)
  
  ::basepb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void RangeHeartbeatResponse::set_allocated_epoch(::basepb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatResponse.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeHeartbeatRequest::kHeaderFieldNumber;
const int NodeHeartbeatRequest::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeHeartbeatRequest::NodeHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeHeartbeatRequest)
}
NodeHeartbeatRequest::NodeHeartbeatRequest(const NodeHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.NodeHeartbeatRequest)
}

void NodeHeartbeatRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

NodeHeartbeatRequest::~NodeHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:mspb.NodeHeartbeatRequest)
  SharedDtor();
}

void NodeHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NodeHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeHeartbeatRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeHeartbeatRequest& NodeHeartbeatRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeHeartbeatRequest* NodeHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  NodeHeartbeatRequest* n = new NodeHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeHeartbeatRequest)
  return false;
#undef DO_
}

void NodeHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeHeartbeatRequest)
}

::google::protobuf::uint8* NodeHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeHeartbeatRequest)
  return target;
}

size_t NodeHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeHeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeHeartbeatRequest)
    MergeFrom(*source);
  }
}

void NodeHeartbeatRequest::MergeFrom(const NodeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeHeartbeatRequest::CopyFrom(const NodeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeHeartbeatRequest::IsInitialized() const {
  return true;
}

void NodeHeartbeatRequest::Swap(NodeHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeHeartbeatRequest::InternalSwap(NodeHeartbeatRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeHeartbeatRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeHeartbeatRequest

// .mspb.RequestHeader header = 1;
bool NodeHeartbeatRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NodeHeartbeatRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& NodeHeartbeatRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* NodeHeartbeatRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeHeartbeatRequest.header)
  return header_;
}
::mspb::RequestHeader* NodeHeartbeatRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.NodeHeartbeatRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NodeHeartbeatRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeHeartbeatRequest.header)
}

// uint64 node_id = 2;
void NodeHeartbeatRequest::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeHeartbeatRequest::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatRequest.node_id)
  return node_id_;
}
void NodeHeartbeatRequest::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeHeartbeatRequest.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeHeartbeatResponse::kHeaderFieldNumber;
const int NodeHeartbeatResponse::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeHeartbeatResponse::NodeHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeHeartbeatResponse)
}
NodeHeartbeatResponse::NodeHeartbeatResponse(const NodeHeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.NodeHeartbeatResponse)
}

void NodeHeartbeatResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

NodeHeartbeatResponse::~NodeHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:mspb.NodeHeartbeatResponse)
  SharedDtor();
}

void NodeHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NodeHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeHeartbeatResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeHeartbeatResponse& NodeHeartbeatResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeHeartbeatResponse* NodeHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  NodeHeartbeatResponse* n = new NodeHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeHeartbeatResponse)
  return false;
#undef DO_
}

void NodeHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeHeartbeatResponse)
}

::google::protobuf::uint8* NodeHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeHeartbeatResponse)
  return target;
}

size_t NodeHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeHeartbeatResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeHeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeHeartbeatResponse)
    MergeFrom(*source);
  }
}

void NodeHeartbeatResponse::MergeFrom(const NodeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeHeartbeatResponse::CopyFrom(const NodeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeHeartbeatResponse::IsInitialized() const {
  return true;
}

void NodeHeartbeatResponse::Swap(NodeHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeHeartbeatResponse::InternalSwap(NodeHeartbeatResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeHeartbeatResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeHeartbeatResponse

// .mspb.ResponseHeader header = 1;
bool NodeHeartbeatResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NodeHeartbeatResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& NodeHeartbeatResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* NodeHeartbeatResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeHeartbeatResponse.header)
  return header_;
}
::mspb::ResponseHeader* NodeHeartbeatResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.NodeHeartbeatResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NodeHeartbeatResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeHeartbeatResponse.header)
}

// uint64 node_id = 2;
void NodeHeartbeatResponse::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeHeartbeatResponse::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatResponse.node_id)
  return node_id_;
}
void NodeHeartbeatResponse::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeHeartbeatResponse.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitRequest::kHeaderFieldNumber;
const int AskSplitRequest::kRangeFieldNumber;
const int AskSplitRequest::kSplitKeyFieldNumber;
const int AskSplitRequest::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitRequest::AskSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.AskSplitRequest)
}
AskSplitRequest::AskSplitRequest(const AskSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::basepb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:mspb.AskSplitRequest)
}

void AskSplitRequest::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&header_)) + sizeof(force_));
  _cached_size_ = 0;
}

AskSplitRequest::~AskSplitRequest() {
  // @@protoc_insertion_point(destructor:mspb.AskSplitRequest)
  SharedDtor();
}

void AskSplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void AskSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskSplitRequest& AskSplitRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AskSplitRequest* AskSplitRequest::New(::google::protobuf::Arena* arena) const {
  AskSplitRequest* n = new AskSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  force_ = false;
  _internal_metadata_.Clear();
}

bool AskSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.AskSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.AskSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.AskSplitRequest)
  return false;
#undef DO_
}

void AskSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->split_key(), output);
  }

  // bool force = 4;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->force(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.AskSplitRequest)
}

::google::protobuf::uint8* AskSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->split_key(), target);
  }

  // bool force = 4;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->force(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.AskSplitRequest)
  return target;
}

size_t AskSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.AskSplitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // bool force = 4;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.AskSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.AskSplitRequest)
    MergeFrom(*source);
  }
}

void AskSplitRequest::MergeFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::basepb::Range::MergeFrom(from.range());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
}

void AskSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitRequest::CopyFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitRequest::IsInitialized() const {
  return true;
}

void AskSplitRequest::Swap(AskSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitRequest::InternalSwap(AskSplitRequest* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_);
  swap(header_, other->header_);
  swap(range_, other->range_);
  swap(force_, other->force_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskSplitRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskSplitRequest

// .mspb.RequestHeader header = 1;
bool AskSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& AskSplitRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* AskSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitRequest.header)
  return header_;
}
::mspb::RequestHeader* AskSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskSplitRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitRequest.header)
}

// .basepb.Range range = 2;
bool AskSplitRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void AskSplitRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::basepb::Range& AskSplitRequest::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* AskSplitRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitRequest.range)
  return range_;
}
::basepb::Range* AskSplitRequest::release_range() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitRequest.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void AskSplitRequest::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitRequest.range)
}

// bytes split_key = 3;
void AskSplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AskSplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.split_key)
  return split_key_.GetNoArena();
}
void AskSplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.AskSplitRequest.split_key)
}
#if LANG_CXX11
void AskSplitRequest::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.AskSplitRequest.split_key)
}
#endif
void AskSplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.AskSplitRequest.split_key)
}
void AskSplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.AskSplitRequest.split_key)
}
::std::string* AskSplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskSplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskSplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitRequest.split_key)
}

// bool force = 4;
void AskSplitRequest::clear_force() {
  force_ = false;
}
bool AskSplitRequest::force() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.force)
  return force_;
}
void AskSplitRequest::set_force(bool value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:mspb.AskSplitRequest.force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitResponse::kHeaderFieldNumber;
const int AskSplitResponse::kRangeFieldNumber;
const int AskSplitResponse::kNewRangeIdFieldNumber;
const int AskSplitResponse::kNewPeerIdsFieldNumber;
const int AskSplitResponse::kSplitKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitResponse::AskSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.AskSplitResponse)
}
AskSplitResponse::AskSplitResponse(const AskSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      new_peer_ids_(from.new_peer_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::basepb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  new_range_id_ = from.new_range_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.AskSplitResponse)
}

void AskSplitResponse::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_range_id_));
  _cached_size_ = 0;
}

AskSplitResponse::~AskSplitResponse() {
  // @@protoc_insertion_point(destructor:mspb.AskSplitResponse)
  SharedDtor();
}

void AskSplitResponse::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void AskSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskSplitResponse& AskSplitResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AskSplitResponse* AskSplitResponse::New(::google::protobuf::Arena* arena) const {
  AskSplitResponse* n = new AskSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  new_range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AskSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.AskSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_range_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.AskSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.AskSplitResponse)
  return false;
#undef DO_
}

void AskSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // uint64 new_range_id = 3;
  if (this->new_range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->new_range_id(), output);
  }

  // repeated uint64 new_peer_ids = 4;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _new_peer_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // bytes split_key = 5;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->split_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.AskSplitResponse)
}

::google::protobuf::uint8* AskSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // uint64 new_range_id = 3;
  if (this->new_range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->new_range_id(), target);
  }

  // repeated uint64 new_peer_ids = 4;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _new_peer_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  // bytes split_key = 5;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->split_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.AskSplitResponse)
  return target;
}

size_t AskSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.AskSplitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 new_peer_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_peer_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes split_key = 5;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // uint64 new_range_id = 3;
  if (this->new_range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.AskSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.AskSplitResponse)
    MergeFrom(*source);
  }
}

void AskSplitResponse::MergeFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::basepb::Range::MergeFrom(from.range());
  }
  if (from.new_range_id() != 0) {
    set_new_range_id(from.new_range_id());
  }
}

void AskSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitResponse::CopyFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitResponse::IsInitialized() const {
  return true;
}

void AskSplitResponse::Swap(AskSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitResponse::InternalSwap(AskSplitResponse* other) {
  using std::swap;
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  split_key_.Swap(&other->split_key_);
  swap(header_, other->header_);
  swap(range_, other->range_);
  swap(new_range_id_, other->new_range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskSplitResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskSplitResponse

// .mspb.ResponseHeader header = 1;
bool AskSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& AskSplitResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* AskSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitResponse.header)
  return header_;
}
::mspb::ResponseHeader* AskSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskSplitResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitResponse.header)
}

// .basepb.Range range = 2;
bool AskSplitResponse::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void AskSplitResponse::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::basepb::Range& AskSplitResponse::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* AskSplitResponse::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitResponse.range)
  return range_;
}
::basepb::Range* AskSplitResponse::release_range() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitResponse.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void AskSplitResponse::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitResponse.range)
}

// uint64 new_range_id = 3;
void AskSplitResponse::clear_new_range_id() {
  new_range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AskSplitResponse::new_range_id() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.new_range_id)
  return new_range_id_;
}
void AskSplitResponse::set_new_range_id(::google::protobuf::uint64 value) {
  
  new_range_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.AskSplitResponse.new_range_id)
}

// repeated uint64 new_peer_ids = 4;
int AskSplitResponse::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void AskSplitResponse::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
::google::protobuf::uint64 AskSplitResponse::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_.Get(index);
}
void AskSplitResponse::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mspb.AskSplitResponse.new_peer_ids)
}
void AskSplitResponse::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:mspb.AskSplitResponse.new_peer_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AskSplitResponse::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:mspb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AskSplitResponse::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:mspb.AskSplitResponse.new_peer_ids)
  return &new_peer_ids_;
}

// bytes split_key = 5;
void AskSplitResponse::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AskSplitResponse::split_key() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.split_key)
  return split_key_.GetNoArena();
}
void AskSplitResponse::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.AskSplitResponse.split_key)
}
#if LANG_CXX11
void AskSplitResponse::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.AskSplitResponse.split_key)
}
#endif
void AskSplitResponse::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.AskSplitResponse.split_key)
}
void AskSplitResponse::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.AskSplitResponse.split_key)
}
::std::string* AskSplitResponse::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitResponse.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskSplitResponse::release_split_key() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitResponse.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskSplitResponse::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitResponse.split_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterNodeRequest::kHeaderFieldNumber;
const int RegisterNodeRequest::kServerPortFieldNumber;
const int RegisterNodeRequest::kRaftPortFieldNumber;
const int RegisterNodeRequest::kAdminPortFieldNumber;
const int RegisterNodeRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterNodeRequest::RegisterNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RegisterNodeRequest)
}
RegisterNodeRequest::RegisterNodeRequest(const RegisterNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&server_port_, &from.server_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_port_) -
    reinterpret_cast<char*>(&server_port_)) + sizeof(admin_port_));
  // @@protoc_insertion_point(copy_constructor:mspb.RegisterNodeRequest)
}

void RegisterNodeRequest::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_port_) -
      reinterpret_cast<char*>(&header_)) + sizeof(admin_port_));
  _cached_size_ = 0;
}

RegisterNodeRequest::~RegisterNodeRequest() {
  // @@protoc_insertion_point(destructor:mspb.RegisterNodeRequest)
  SharedDtor();
}

void RegisterNodeRequest::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RegisterNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterNodeRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterNodeRequest& RegisterNodeRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterNodeRequest* RegisterNodeRequest::New(::google::protobuf::Arena* arena) const {
  RegisterNodeRequest* n = new RegisterNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RegisterNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&server_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_port_) -
      reinterpret_cast<char*>(&server_port_)) + sizeof(admin_port_));
  _internal_metadata_.Clear();
}

bool RegisterNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RegisterNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 raft_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raft_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 admin_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.RegisterNodeRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RegisterNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RegisterNodeRequest)
  return false;
#undef DO_
}

void RegisterNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RegisterNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint32 server_port = 2;
  if (this->server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // uint32 raft_port = 3;
  if (this->raft_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raft_port(), output);
  }

  // uint32 admin_port = 4;
  if (this->admin_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->admin_port(), output);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.RegisterNodeRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RegisterNodeRequest)
}

::google::protobuf::uint8* RegisterNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RegisterNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint32 server_port = 2;
  if (this->server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }

  // uint32 raft_port = 3;
  if (this->raft_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raft_port(), target);
  }

  // uint32 admin_port = 4;
  if (this->admin_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->admin_port(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.RegisterNodeRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RegisterNodeRequest)
  return target;
}

size_t RegisterNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RegisterNodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint32 server_port = 2;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_port());
  }

  // uint32 raft_port = 3;
  if (this->raft_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raft_port());
  }

  // uint32 admin_port = 4;
  if (this->admin_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->admin_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RegisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RegisterNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RegisterNodeRequest)
    MergeFrom(*source);
  }
}

void RegisterNodeRequest::MergeFrom(const RegisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RegisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
  if (from.raft_port() != 0) {
    set_raft_port(from.raft_port());
  }
  if (from.admin_port() != 0) {
    set_admin_port(from.admin_port());
  }
}

void RegisterNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RegisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterNodeRequest::CopyFrom(const RegisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RegisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeRequest::IsInitialized() const {
  return true;
}

void RegisterNodeRequest::Swap(RegisterNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterNodeRequest::InternalSwap(RegisterNodeRequest* other) {
  using std::swap;
  version_.Swap(&other->version_);
  swap(header_, other->header_);
  swap(server_port_, other->server_port_);
  swap(raft_port_, other->raft_port_);
  swap(admin_port_, other->admin_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterNodeRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterNodeRequest

// .mspb.RequestHeader header = 1;
bool RegisterNodeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RegisterNodeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& RegisterNodeRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* RegisterNodeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RegisterNodeRequest.header)
  return header_;
}
::mspb::RequestHeader* RegisterNodeRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.RegisterNodeRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RegisterNodeRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RegisterNodeRequest.header)
}

// uint32 server_port = 2;
void RegisterNodeRequest::clear_server_port() {
  server_port_ = 0u;
}
::google::protobuf::uint32 RegisterNodeRequest::server_port() const {
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeRequest.server_port)
  return server_port_;
}
void RegisterNodeRequest::set_server_port(::google::protobuf::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:mspb.RegisterNodeRequest.server_port)
}

// uint32 raft_port = 3;
void RegisterNodeRequest::clear_raft_port() {
  raft_port_ = 0u;
}
::google::protobuf::uint32 RegisterNodeRequest::raft_port() const {
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeRequest.raft_port)
  return raft_port_;
}
void RegisterNodeRequest::set_raft_port(::google::protobuf::uint32 value) {
  
  raft_port_ = value;
  // @@protoc_insertion_point(field_set:mspb.RegisterNodeRequest.raft_port)
}

// uint32 admin_port = 4;
void RegisterNodeRequest::clear_admin_port() {
  admin_port_ = 0u;
}
::google::protobuf::uint32 RegisterNodeRequest::admin_port() const {
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeRequest.admin_port)
  return admin_port_;
}
void RegisterNodeRequest::set_admin_port(::google::protobuf::uint32 value) {
  
  admin_port_ = value;
  // @@protoc_insertion_point(field_set:mspb.RegisterNodeRequest.admin_port)
}

// string version = 5;
void RegisterNodeRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegisterNodeRequest::version() const {
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeRequest.version)
  return version_.GetNoArena();
}
void RegisterNodeRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.RegisterNodeRequest.version)
}
#if LANG_CXX11
void RegisterNodeRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.RegisterNodeRequest.version)
}
#endif
void RegisterNodeRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.RegisterNodeRequest.version)
}
void RegisterNodeRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.RegisterNodeRequest.version)
}
::std::string* RegisterNodeRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:mspb.RegisterNodeRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterNodeRequest::release_version() {
  // @@protoc_insertion_point(field_release:mspb.RegisterNodeRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterNodeRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:mspb.RegisterNodeRequest.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterNodeResponse::kHeaderFieldNumber;
const int RegisterNodeResponse::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterNodeResponse::RegisterNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RegisterNodeResponse)
}
RegisterNodeResponse::RegisterNodeResponse(const RegisterNodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.RegisterNodeResponse)
}

void RegisterNodeResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

RegisterNodeResponse::~RegisterNodeResponse() {
  // @@protoc_insertion_point(destructor:mspb.RegisterNodeResponse)
  SharedDtor();
}

void RegisterNodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RegisterNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterNodeResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterNodeResponse& RegisterNodeResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterNodeResponse* RegisterNodeResponse::New(::google::protobuf::Arena* arena) const {
  RegisterNodeResponse* n = new RegisterNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RegisterNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RegisterNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RegisterNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RegisterNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RegisterNodeResponse)
  return false;
#undef DO_
}

void RegisterNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RegisterNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RegisterNodeResponse)
}

::google::protobuf::uint8* RegisterNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RegisterNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RegisterNodeResponse)
  return target;
}

size_t RegisterNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RegisterNodeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RegisterNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterNodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RegisterNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RegisterNodeResponse)
    MergeFrom(*source);
  }
}

void RegisterNodeResponse::MergeFrom(const RegisterNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RegisterNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void RegisterNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RegisterNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterNodeResponse::CopyFrom(const RegisterNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RegisterNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeResponse::IsInitialized() const {
  return true;
}

void RegisterNodeResponse::Swap(RegisterNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterNodeResponse::InternalSwap(RegisterNodeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterNodeResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterNodeResponse

// .mspb.ResponseHeader header = 1;
bool RegisterNodeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RegisterNodeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& RegisterNodeResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* RegisterNodeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RegisterNodeResponse.header)
  return header_;
}
::mspb::ResponseHeader* RegisterNodeResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.RegisterNodeResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RegisterNodeResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RegisterNodeResponse.header)
}

// uint64 node_id = 2;
void RegisterNodeResponse::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegisterNodeResponse::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.RegisterNodeResponse.node_id)
  return node_id_;
}
void RegisterNodeResponse::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.RegisterNodeResponse.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteRequest::kHeaderFieldNumber;
const int GetRouteRequest::kDbIdFieldNumber;
const int GetRouteRequest::kTableIdFieldNumber;
const int GetRouteRequest::kKeyFieldNumber;
const int GetRouteRequest::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteRequest::GetRouteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&header_)) + sizeof(max_));
  _cached_size_ = 0;
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetRouteRequest)
  SharedDtor();
}

void GetRouteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetRouteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRouteRequest& GetRouteRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRouteRequest* GetRouteRequest::New(::google::protobuf::Arena* arena) const {
  GetRouteRequest* n = new GetRouteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

bool GetRouteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetRouteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetRouteRequest)
  return false;
#undef DO_
}

void GetRouteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // bytes key = 4;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->key(), output);
  }

  // uint32 max = 5;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetRouteRequest)
}

::google::protobuf::uint8* GetRouteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // bytes key = 4;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // uint32 max = 5;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetRouteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint32 max = 5;
  if (this->max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRouteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetRouteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void GetRouteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::Swap(GetRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(max_, other->max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRouteRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRouteRequest

// .mspb.RequestHeader header = 1;
bool GetRouteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRouteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetRouteRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetRouteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteRequest.header)
  return header_;
}
::mspb::RequestHeader* GetRouteRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetRouteRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRouteRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetRouteRequest.header)
}

// uint64 db_id = 2;
void GetRouteRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetRouteRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.db_id)
  return db_id_;
}
void GetRouteRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.db_id)
}

// uint64 table_id = 3;
void GetRouteRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetRouteRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.table_id)
  return table_id_;
}
void GetRouteRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.table_id)
}

// bytes key = 4;
void GetRouteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRouteRequest::key() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.key)
  return key_.GetNoArena();
}
void GetRouteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.key)
}
#if LANG_CXX11
void GetRouteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetRouteRequest.key)
}
#endif
void GetRouteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetRouteRequest.key)
}
void GetRouteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetRouteRequest.key)
}
::std::string* GetRouteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRouteRequest::release_key() {
  // @@protoc_insertion_point(field_release:mspb.GetRouteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRouteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetRouteRequest.key)
}

// uint32 max = 5;
void GetRouteRequest::clear_max() {
  max_ = 0u;
}
::google::protobuf::uint32 GetRouteRequest::max() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.max)
  return max_;
}
void GetRouteRequest::set_max(::google::protobuf::uint32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteResponse::kHeaderFieldNumber;
const int GetRouteResponse::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteResponse::GetRouteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetRouteResponse)
}
GetRouteResponse::GetRouteResponse(const GetRouteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      routes_(from.routes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetRouteResponse)
}

void GetRouteResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetRouteResponse::~GetRouteResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetRouteResponse)
  SharedDtor();
}

void GetRouteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetRouteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRouteResponse& GetRouteResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRouteResponse* GetRouteResponse::New(::google::protobuf::Arena* arena) const {
  GetRouteResponse* n = new GetRouteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRouteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetRouteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Range routes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetRouteResponse)
  return false;
#undef DO_
}

void GetRouteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .basepb.Range routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetRouteResponse)
}

::google::protobuf::uint8* GetRouteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .basepb.Range routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->routes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetRouteResponse)
  return target;
}

size_t GetRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetRouteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.Range routes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRouteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetRouteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetRouteResponse)
    MergeFrom(*source);
  }
}

void GetRouteResponse::MergeFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetRouteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteResponse::CopyFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteResponse::IsInitialized() const {
  return true;
}

void GetRouteResponse::Swap(GetRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteResponse::InternalSwap(GetRouteResponse* other) {
  using std::swap;
  routes_.InternalSwap(&other->routes_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRouteResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRouteResponse

// .mspb.ResponseHeader header = 1;
bool GetRouteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRouteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetRouteResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetRouteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetRouteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetRouteResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetRouteResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRouteResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetRouteResponse.header)
}

// repeated .basepb.Range routes = 2;
int GetRouteResponse::routes_size() const {
  return routes_.size();
}
void GetRouteResponse::clear_routes() {
  routes_.Clear();
}
const ::basepb::Range& GetRouteResponse::routes(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteResponse.routes)
  return routes_.Get(index);
}
::basepb::Range* GetRouteResponse::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteResponse.routes)
  return routes_.Mutable(index);
}
::basepb::Range* GetRouteResponse::add_routes() {
  // @@protoc_insertion_point(field_add:mspb.GetRouteResponse.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Range >*
GetRouteResponse::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetRouteResponse.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Range >&
GetRouteResponse::routes() const {
  // @@protoc_insertion_point(field_list:mspb.GetRouteResponse.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodesRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodesRequest::GetNodesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodesRequest)
}
GetNodesRequest::GetNodesRequest(const GetNodesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodesRequest)
}

void GetNodesRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetNodesRequest::~GetNodesRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetNodesRequest)
  SharedDtor();
}

void GetNodesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodesRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodesRequest& GetNodesRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodesRequest* GetNodesRequest::New(::google::protobuf::Arena* arena) const {
  GetNodesRequest* n = new GetNodesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodesRequest)
  return false;
#undef DO_
}

void GetNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodesRequest)
}

::google::protobuf::uint8* GetNodesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodesRequest)
  return target;
}

size_t GetNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodesRequest)
    MergeFrom(*source);
  }
}

void GetNodesRequest::MergeFrom(const GetNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void GetNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodesRequest::CopyFrom(const GetNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodesRequest::IsInitialized() const {
  return true;
}

void GetNodesRequest::Swap(GetNodesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodesRequest::InternalSwap(GetNodesRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodesRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodesRequest

// .mspb.RequestHeader header = 1;
bool GetNodesRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodesRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetNodesRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodesRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetNodesRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodesRequest.header)
  return header_;
}
::mspb::RequestHeader* GetNodesRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodesRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodesRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodesRequest.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodesResponse::kHeaderFieldNumber;
const int GetNodesResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodesResponse::GetNodesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodesResponse)
}
GetNodesResponse::GetNodesResponse(const GetNodesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodesResponse)
}

void GetNodesResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetNodesResponse::~GetNodesResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetNodesResponse)
  SharedDtor();
}

void GetNodesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodesResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodesResponse& GetNodesResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodesResponse* GetNodesResponse::New(::google::protobuf::Arena* arena) const {
  GetNodesResponse* n = new GetNodesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Node nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodesResponse)
  return false;
#undef DO_
}

void GetNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .basepb.Node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodesResponse)
}

::google::protobuf::uint8* GetNodesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .basepb.Node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodesResponse)
  return target;
}

size_t GetNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.Node nodes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodesResponse)
    MergeFrom(*source);
  }
}

void GetNodesResponse::MergeFrom(const GetNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodesResponse::CopyFrom(const GetNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodesResponse::IsInitialized() const {
  return true;
}

void GetNodesResponse::Swap(GetNodesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodesResponse::InternalSwap(GetNodesResponse* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodesResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodesResponse

// .mspb.ResponseHeader header = 1;
bool GetNodesResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodesResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetNodesResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodesResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetNodesResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodesResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetNodesResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodesResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodesResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodesResponse.header)
}

// repeated .basepb.Node nodes = 2;
int GetNodesResponse::nodes_size() const {
  return nodes_.size();
}
void GetNodesResponse::clear_nodes() {
  nodes_.Clear();
}
const ::basepb::Node& GetNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetNodesResponse.nodes)
  return nodes_.Get(index);
}
::basepb::Node* GetNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetNodesResponse.nodes)
  return nodes_.Mutable(index);
}
::basepb::Node* GetNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:mspb.GetNodesResponse.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Node >*
GetNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetNodesResponse.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Node >&
GetNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:mspb.GetNodesResponse.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeRequest::kHeaderFieldNumber;
const int GetNodeRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeRequest::GetNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeRequest)
}
GetNodeRequest::GetNodeRequest(const GetNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeRequest)
}

void GetNodeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
  _cached_size_ = 0;
}

GetNodeRequest::~GetNodeRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeRequest)
  SharedDtor();
}

void GetNodeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeRequest& GetNodeRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeRequest* GetNodeRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeRequest* n = new GetNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeRequest)
  return false;
#undef DO_
}

void GetNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeRequest)
}

::google::protobuf::uint8* GetNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeRequest)
  return target;
}

size_t GetNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeRequest)
    MergeFrom(*source);
  }
}

void GetNodeRequest::MergeFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeRequest::CopyFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeRequest::IsInitialized() const {
  return true;
}

void GetNodeRequest::Swap(GetNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeRequest::InternalSwap(GetNodeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeRequest

// .mspb.RequestHeader header = 1;
bool GetNodeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetNodeRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetNodeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeRequest.header)
  return header_;
}
::mspb::RequestHeader* GetNodeRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeRequest.header)
}

// uint64 id = 2;
void GetNodeRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetNodeRequest::id() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeRequest.id)
  return id_;
}
void GetNodeRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeResponse::kHeaderFieldNumber;
const int GetNodeResponse::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeResponse::GetNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeResponse)
}
GetNodeResponse::GetNodeResponse(const GetNodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::basepb::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeResponse)
}

void GetNodeResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_));
  _cached_size_ = 0;
}

GetNodeResponse::~GetNodeResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeResponse)
  SharedDtor();
}

void GetNodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete node_;
}

void GetNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeResponse& GetNodeResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeResponse* GetNodeResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeResponse* n = new GetNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeResponse)
  return false;
#undef DO_
}

void GetNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeResponse)
}

::google::protobuf::uint8* GetNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeResponse)
  return target;
}

size_t GetNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeResponse)
    MergeFrom(*source);
  }
}

void GetNodeResponse::MergeFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_node()) {
    mutable_node()->::basepb::Node::MergeFrom(from.node());
  }
}

void GetNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeResponse::CopyFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeResponse::IsInitialized() const {
  return true;
}

void GetNodeResponse::Swap(GetNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeResponse::InternalSwap(GetNodeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeResponse

// .mspb.ResponseHeader header = 1;
bool GetNodeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetNodeResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetNodeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetNodeResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeResponse.header)
}

// .basepb.Node node = 2;
bool GetNodeResponse::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void GetNodeResponse::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::basepb::Node& GetNodeResponse::node() const {
  const ::basepb::Node* p = node_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeResponse.node)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Node*>(
      &::basepb::_Node_default_instance_);
}
::basepb::Node* GetNodeResponse::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::basepb::Node;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeResponse.node)
  return node_;
}
::basepb::Node* GetNodeResponse::release_node() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeResponse.node)
  
  ::basepb::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void GetNodeResponse::set_allocated_node(::basepb::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeResponse.node)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelDatabaseRequest::kHeaderFieldNumber;
const int DelDatabaseRequest::kIdFieldNumber;
const int DelDatabaseRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelDatabaseRequest::DelDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.DelDatabaseRequest)
}
DelDatabaseRequest::DelDatabaseRequest(const DelDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mspb.DelDatabaseRequest)
}

void DelDatabaseRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
  _cached_size_ = 0;
}

DelDatabaseRequest::~DelDatabaseRequest() {
  // @@protoc_insertion_point(destructor:mspb.DelDatabaseRequest)
  SharedDtor();
}

void DelDatabaseRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void DelDatabaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelDatabaseRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelDatabaseRequest& DelDatabaseRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelDatabaseRequest* DelDatabaseRequest::New(::google::protobuf::Arena* arena) const {
  DelDatabaseRequest* n = new DelDatabaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.DelDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DelDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.DelDatabaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.DelDatabaseRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.DelDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.DelDatabaseRequest)
  return false;
#undef DO_
}

void DelDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.DelDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.DelDatabaseRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.DelDatabaseRequest)
}

::google::protobuf::uint8* DelDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.DelDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.DelDatabaseRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.DelDatabaseRequest)
  return target;
}

size_t DelDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.DelDatabaseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.DelDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.DelDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.DelDatabaseRequest)
    MergeFrom(*source);
  }
}

void DelDatabaseRequest::MergeFrom(const DelDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.DelDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void DelDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.DelDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelDatabaseRequest::CopyFrom(const DelDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.DelDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelDatabaseRequest::IsInitialized() const {
  return true;
}

void DelDatabaseRequest::Swap(DelDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelDatabaseRequest::InternalSwap(DelDatabaseRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(header_, other->header_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelDatabaseRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelDatabaseRequest

// .mspb.RequestHeader header = 1;
bool DelDatabaseRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelDatabaseRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& DelDatabaseRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.DelDatabaseRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* DelDatabaseRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.DelDatabaseRequest.header)
  return header_;
}
::mspb::RequestHeader* DelDatabaseRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.DelDatabaseRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelDatabaseRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.DelDatabaseRequest.header)
}

// uint64 id = 2;
void DelDatabaseRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DelDatabaseRequest::id() const {
  // @@protoc_insertion_point(field_get:mspb.DelDatabaseRequest.id)
  return id_;
}
void DelDatabaseRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mspb.DelDatabaseRequest.id)
}

// string name = 3;
void DelDatabaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:mspb.DelDatabaseRequest.name)
  return name_.GetNoArena();
}
void DelDatabaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.DelDatabaseRequest.name)
}
#if LANG_CXX11
void DelDatabaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.DelDatabaseRequest.name)
}
#endif
void DelDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.DelDatabaseRequest.name)
}
void DelDatabaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.DelDatabaseRequest.name)
}
::std::string* DelDatabaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.DelDatabaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:mspb.DelDatabaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelDatabaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mspb.DelDatabaseRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelDatabaseResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelDatabaseResponse::DelDatabaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.DelDatabaseResponse)
}
DelDatabaseResponse::DelDatabaseResponse(const DelDatabaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.DelDatabaseResponse)
}

void DelDatabaseResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DelDatabaseResponse::~DelDatabaseResponse() {
  // @@protoc_insertion_point(destructor:mspb.DelDatabaseResponse)
  SharedDtor();
}

void DelDatabaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DelDatabaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelDatabaseResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelDatabaseResponse& DelDatabaseResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelDatabaseResponse* DelDatabaseResponse::New(::google::protobuf::Arena* arena) const {
  DelDatabaseResponse* n = new DelDatabaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelDatabaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.DelDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool DelDatabaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.DelDatabaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.DelDatabaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.DelDatabaseResponse)
  return false;
#undef DO_
}

void DelDatabaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.DelDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.DelDatabaseResponse)
}

::google::protobuf::uint8* DelDatabaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.DelDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.DelDatabaseResponse)
  return target;
}

size_t DelDatabaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.DelDatabaseResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelDatabaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.DelDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelDatabaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelDatabaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.DelDatabaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.DelDatabaseResponse)
    MergeFrom(*source);
  }
}

void DelDatabaseResponse::MergeFrom(const DelDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.DelDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void DelDatabaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.DelDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelDatabaseResponse::CopyFrom(const DelDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.DelDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelDatabaseResponse::IsInitialized() const {
  return true;
}

void DelDatabaseResponse::Swap(DelDatabaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelDatabaseResponse::InternalSwap(DelDatabaseResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelDatabaseResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelDatabaseResponse

// .mspb.ResponseHeader header = 1;
bool DelDatabaseResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelDatabaseResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& DelDatabaseResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.DelDatabaseResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* DelDatabaseResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.DelDatabaseResponse.header)
  return header_;
}
::mspb::ResponseHeader* DelDatabaseResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.DelDatabaseResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelDatabaseResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.DelDatabaseResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDBRequest::kHeaderFieldNumber;
const int GetDBRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDBRequest::GetDBRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetDBRequest)
}
GetDBRequest::GetDBRequest(const GetDBRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetDBRequest)
}

void GetDBRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetDBRequest::~GetDBRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetDBRequest)
  SharedDtor();
}

void GetDBRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDBRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDBRequest& GetDBRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDBRequest* GetDBRequest::New(::google::protobuf::Arena* arena) const {
  GetDBRequest* n = new GetDBRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetDBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetDBRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetDBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetDBRequest)
  return false;
#undef DO_
}

void GetDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetDBRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetDBRequest)
}

::google::protobuf::uint8* GetDBRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetDBRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetDBRequest)
  return target;
}

size_t GetDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetDBRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDBRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDBRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetDBRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetDBRequest)
    MergeFrom(*source);
  }
}

void GetDBRequest::MergeFrom(const GetDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void GetDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDBRequest::CopyFrom(const GetDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDBRequest::IsInitialized() const {
  return true;
}

void GetDBRequest::Swap(GetDBRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDBRequest::InternalSwap(GetDBRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDBRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDBRequest

// .mspb.RequestHeader header = 1;
bool GetDBRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetDBRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetDBRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetDBRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetDBRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBRequest.header)
  return header_;
}
::mspb::RequestHeader* GetDBRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetDBRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetDBRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBRequest.header)
}

// string name = 2;
void GetDBRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetDBRequest::name() const {
  // @@protoc_insertion_point(field_get:mspb.GetDBRequest.name)
  return name_.GetNoArena();
}
void GetDBRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetDBRequest.name)
}
#if LANG_CXX11
void GetDBRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetDBRequest.name)
}
#endif
void GetDBRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetDBRequest.name)
}
void GetDBRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetDBRequest.name)
}
::std::string* GetDBRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetDBRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDBRequest::release_name() {
  // @@protoc_insertion_point(field_release:mspb.GetDBRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDBRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDBResponse::kHeaderFieldNumber;
const int GetDBResponse::kDbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDBResponse::GetDBResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetDBResponse)
}
GetDBResponse::GetDBResponse(const GetDBResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_db()) {
    db_ = new ::basepb::DataBase(*from.db_);
  } else {
    db_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetDBResponse)
}

void GetDBResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_) -
      reinterpret_cast<char*>(&header_)) + sizeof(db_));
  _cached_size_ = 0;
}

GetDBResponse::~GetDBResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetDBResponse)
  SharedDtor();
}

void GetDBResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete db_;
}

void GetDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDBResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDBResponse& GetDBResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDBResponse* GetDBResponse::New(::google::protobuf::Arena* arena) const {
  GetDBResponse* n = new GetDBResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && db_ != NULL) {
    delete db_;
  }
  db_ = NULL;
  _internal_metadata_.Clear();
}

bool GetDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetDBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.DataBase db = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetDBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetDBResponse)
  return false;
#undef DO_
}

void GetDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.DataBase db = 2;
  if (this->has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->db_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetDBResponse)
}

::google::protobuf::uint8* GetDBResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.DataBase db = 2;
  if (this->has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->db_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetDBResponse)
  return target;
}

size_t GetDBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetDBResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.DataBase db = 2;
  if (this->has_db()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->db_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetDBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDBResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDBResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetDBResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetDBResponse)
    MergeFrom(*source);
  }
}

void GetDBResponse::MergeFrom(const GetDBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetDBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_db()) {
    mutable_db()->::basepb::DataBase::MergeFrom(from.db());
  }
}

void GetDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDBResponse::CopyFrom(const GetDBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDBResponse::IsInitialized() const {
  return true;
}

void GetDBResponse::Swap(GetDBResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDBResponse::InternalSwap(GetDBResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_, other->db_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDBResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDBResponse

// .mspb.ResponseHeader header = 1;
bool GetDBResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetDBResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetDBResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetDBResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetDBResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetDBResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetDBResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetDBResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBResponse.header)
}

// .basepb.DataBase db = 2;
bool GetDBResponse::has_db() const {
  return this != internal_default_instance() && db_ != NULL;
}
void GetDBResponse::clear_db() {
  if (GetArenaNoVirtual() == NULL && db_ != NULL) delete db_;
  db_ = NULL;
}
const ::basepb::DataBase& GetDBResponse::db() const {
  const ::basepb::DataBase* p = db_;
  // @@protoc_insertion_point(field_get:mspb.GetDBResponse.db)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::DataBase*>(
      &::basepb::_DataBase_default_instance_);
}
::basepb::DataBase* GetDBResponse::mutable_db() {
  
  if (db_ == NULL) {
    db_ = new ::basepb::DataBase;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBResponse.db)
  return db_;
}
::basepb::DataBase* GetDBResponse::release_db() {
  // @@protoc_insertion_point(field_release:mspb.GetDBResponse.db)
  
  ::basepb::DataBase* temp = db_;
  db_ = NULL;
  return temp;
}
void GetDBResponse::set_allocated_db(::basepb::DataBase* db) {
  delete db_;
  db_ = db;
  if (db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBResponse.db)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDBsResponse::kHeaderFieldNumber;
const int GetDBsResponse::kDbsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDBsResponse::GetDBsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetDBsResponse)
}
GetDBsResponse::GetDBsResponse(const GetDBsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dbs_(from.dbs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetDBsResponse)
}

void GetDBsResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetDBsResponse::~GetDBsResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetDBsResponse)
  SharedDtor();
}

void GetDBsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetDBsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDBsResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDBsResponse& GetDBsResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDBsResponse* GetDBsResponse::New(::google::protobuf::Arena* arena) const {
  GetDBsResponse* n = new GetDBsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDBsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetDBsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbs_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetDBsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetDBsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.DataBase dbs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetDBsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetDBsResponse)
  return false;
#undef DO_
}

void GetDBsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetDBsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .basepb.DataBase dbs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dbs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dbs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetDBsResponse)
}

::google::protobuf::uint8* GetDBsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetDBsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .basepb.DataBase dbs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dbs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dbs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetDBsResponse)
  return target;
}

size_t GetDBsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetDBsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.DataBase dbs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dbs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dbs(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDBsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetDBsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDBsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDBsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetDBsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetDBsResponse)
    MergeFrom(*source);
  }
}

void GetDBsResponse::MergeFrom(const GetDBsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetDBsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dbs_.MergeFrom(from.dbs_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetDBsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetDBsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDBsResponse::CopyFrom(const GetDBsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetDBsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDBsResponse::IsInitialized() const {
  return true;
}

void GetDBsResponse::Swap(GetDBsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDBsResponse::InternalSwap(GetDBsResponse* other) {
  using std::swap;
  dbs_.InternalSwap(&other->dbs_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDBsResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDBsResponse

// .mspb.ResponseHeader header = 1;
bool GetDBsResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetDBsResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetDBsResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetDBsResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetDBsResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBsResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetDBsResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetDBsResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetDBsResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBsResponse.header)
}

// repeated .basepb.DataBase dbs = 2;
int GetDBsResponse::dbs_size() const {
  return dbs_.size();
}
void GetDBsResponse::clear_dbs() {
  dbs_.Clear();
}
const ::basepb::DataBase& GetDBsResponse::dbs(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetDBsResponse.dbs)
  return dbs_.Get(index);
}
::basepb::DataBase* GetDBsResponse::mutable_dbs(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetDBsResponse.dbs)
  return dbs_.Mutable(index);
}
::basepb::DataBase* GetDBsResponse::add_dbs() {
  // @@protoc_insertion_point(field_add:mspb.GetDBsResponse.dbs)
  return dbs_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::DataBase >*
GetDBsResponse::mutable_dbs() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetDBsResponse.dbs)
  return &dbs_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::DataBase >&
GetDBsResponse::dbs() const {
  // @@protoc_insertion_point(field_list:mspb.GetDBsResponse.dbs)
  return dbs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelTableRequest::kHeaderFieldNumber;
const int DelTableRequest::kDbIdFieldNumber;
const int DelTableRequest::kDbNameFieldNumber;
const int DelTableRequest::kTableIdFieldNumber;
const int DelTableRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelTableRequest::DelTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.DelTableRequest)
}
DelTableRequest::DelTableRequest(const DelTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.DelTableRequest)
}

void DelTableRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

DelTableRequest::~DelTableRequest() {
  // @@protoc_insertion_point(destructor:mspb.DelTableRequest)
  SharedDtor();
}

void DelTableRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void DelTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTableRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelTableRequest& DelTableRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelTableRequest* DelTableRequest::New(::google::protobuf::Arena* arena) const {
  DelTableRequest* n = new DelTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.DelTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool DelTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.DelTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.DelTableRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.DelTableRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.DelTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.DelTableRequest)
  return false;
#undef DO_
}

void DelTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.DelTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.DelTableRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_name(), output);
  }

  // uint64 table_id = 4;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->table_id(), output);
  }

  // string table_name = 5;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.DelTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->table_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.DelTableRequest)
}

::google::protobuf::uint8* DelTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.DelTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.DelTableRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }

  // uint64 table_id = 4;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->table_id(), target);
  }

  // string table_name = 5;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.DelTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->table_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.DelTableRequest)
  return target;
}

size_t DelTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.DelTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 5;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 4;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.DelTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.DelTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.DelTableRequest)
    MergeFrom(*source);
  }
}

void DelTableRequest::MergeFrom(const DelTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.DelTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void DelTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.DelTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTableRequest::CopyFrom(const DelTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.DelTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTableRequest::IsInitialized() const {
  return true;
}

void DelTableRequest::Swap(DelTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelTableRequest::InternalSwap(DelTableRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelTableRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelTableRequest

// .mspb.RequestHeader header = 1;
bool DelTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& DelTableRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.DelTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* DelTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.DelTableRequest.header)
  return header_;
}
::mspb::RequestHeader* DelTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.DelTableRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelTableRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.DelTableRequest.header)
}

// uint64 db_id = 2;
void DelTableRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DelTableRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.DelTableRequest.db_id)
  return db_id_;
}
void DelTableRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.DelTableRequest.db_id)
}

// string db_name = 3;
void DelTableRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelTableRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.DelTableRequest.db_name)
  return db_name_.GetNoArena();
}
void DelTableRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.DelTableRequest.db_name)
}
#if LANG_CXX11
void DelTableRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.DelTableRequest.db_name)
}
#endif
void DelTableRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.DelTableRequest.db_name)
}
void DelTableRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.DelTableRequest.db_name)
}
::std::string* DelTableRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.DelTableRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelTableRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.DelTableRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelTableRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.DelTableRequest.db_name)
}

// uint64 table_id = 4;
void DelTableRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DelTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.DelTableRequest.table_id)
  return table_id_;
}
void DelTableRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.DelTableRequest.table_id)
}

// string table_name = 5;
void DelTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mspb.DelTableRequest.table_name)
  return table_name_.GetNoArena();
}
void DelTableRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.DelTableRequest.table_name)
}
#if LANG_CXX11
void DelTableRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.DelTableRequest.table_name)
}
#endif
void DelTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.DelTableRequest.table_name)
}
void DelTableRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.DelTableRequest.table_name)
}
::std::string* DelTableRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.DelTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mspb.DelTableRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.DelTableRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelTableResponse::kHeaderFieldNumber;
const int DelTableResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelTableResponse::DelTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.DelTableResponse)
}
DelTableResponse::DelTableResponse(const DelTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::basepb::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.DelTableResponse)
}

void DelTableResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_));
  _cached_size_ = 0;
}

DelTableResponse::~DelTableResponse() {
  // @@protoc_insertion_point(destructor:mspb.DelTableResponse)
  SharedDtor();
}

void DelTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete table_;
}

void DelTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTableResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelTableResponse& DelTableResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelTableResponse* DelTableResponse::New(::google::protobuf::Arena* arena) const {
  DelTableResponse* n = new DelTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.DelTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool DelTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.DelTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Table table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.DelTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.DelTableResponse)
  return false;
#undef DO_
}

void DelTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.DelTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.DelTableResponse)
}

::google::protobuf::uint8* DelTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.DelTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.DelTableResponse)
  return target;
}

size_t DelTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.DelTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.DelTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.DelTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.DelTableResponse)
    MergeFrom(*source);
  }
}

void DelTableResponse::MergeFrom(const DelTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.DelTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_table()) {
    mutable_table()->::basepb::Table::MergeFrom(from.table());
  }
}

void DelTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.DelTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTableResponse::CopyFrom(const DelTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.DelTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTableResponse::IsInitialized() const {
  return true;
}

void DelTableResponse::Swap(DelTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelTableResponse::InternalSwap(DelTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelTableResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelTableResponse

// .mspb.ResponseHeader header = 1;
bool DelTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& DelTableResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.DelTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* DelTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.DelTableResponse.header)
  return header_;
}
::mspb::ResponseHeader* DelTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.DelTableResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelTableResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.DelTableResponse.header)
}

// .basepb.Table table = 2;
bool DelTableResponse::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
void DelTableResponse::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
}
const ::basepb::Table& DelTableResponse::table() const {
  const ::basepb::Table* p = table_;
  // @@protoc_insertion_point(field_get:mspb.DelTableResponse.table)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Table*>(
      &::basepb::_Table_default_instance_);
}
::basepb::Table* DelTableResponse::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::basepb::Table;
  }
  // @@protoc_insertion_point(field_mutable:mspb.DelTableResponse.table)
  return table_;
}
::basepb::Table* DelTableResponse::release_table() {
  // @@protoc_insertion_point(field_release:mspb.DelTableResponse.table)
  
  ::basepb::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void DelTableResponse::set_allocated_table(::basepb::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.DelTableResponse.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableRequest::kHeaderFieldNumber;
const int GetTableRequest::kDbIdFieldNumber;
const int GetTableRequest::kDbNameFieldNumber;
const int GetTableRequest::kTableIdFieldNumber;
const int GetTableRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableRequest::GetTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTableRequest)
}
GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetTableRequest)
}

void GetTableRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetTableRequest)
  SharedDtor();
}

void GetTableRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTableRequest& GetTableRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTableRequest* GetTableRequest::New(::google::protobuf::Arena* arena) const {
  GetTableRequest* n = new GetTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool GetTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetTableRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetTableRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTableRequest)
  return false;
#undef DO_
}

void GetTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_name(), output);
  }

  // uint64 table_id = 4;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->table_id(), output);
  }

  // string table_name = 5;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->table_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTableRequest)
}

::google::protobuf::uint8* GetTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }

  // uint64 table_id = 4;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->table_id(), target);
  }

  // string table_name = 5;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->table_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTableRequest)
  return target;
}

size_t GetTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 5;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 4;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTableRequest)
    MergeFrom(*source);
  }
}

void GetTableRequest::MergeFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void GetTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {
  return true;
}

void GetTableRequest::Swap(GetTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableRequest::InternalSwap(GetTableRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableRequest

// .mspb.RequestHeader header = 1;
bool GetTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetTableRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableRequest.header)
  return header_;
}
::mspb::RequestHeader* GetTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTableRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTableRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableRequest.header)
}

// uint64 db_id = 2;
void GetTableRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetTableRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.db_id)
  return db_id_;
}
void GetTableRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetTableRequest.db_id)
}

// string db_name = 3;
void GetTableRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTableRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.db_name)
  return db_name_.GetNoArena();
}
void GetTableRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetTableRequest.db_name)
}
#if LANG_CXX11
void GetTableRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetTableRequest.db_name)
}
#endif
void GetTableRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetTableRequest.db_name)
}
void GetTableRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetTableRequest.db_name)
}
::std::string* GetTableRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetTableRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTableRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.GetTableRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTableRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableRequest.db_name)
}

// uint64 table_id = 4;
void GetTableRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.table_id)
  return table_id_;
}
void GetTableRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetTableRequest.table_id)
}

// string table_name = 5;
void GetTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.table_name)
  return table_name_.GetNoArena();
}
void GetTableRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetTableRequest.table_name)
}
#if LANG_CXX11
void GetTableRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetTableRequest.table_name)
}
#endif
void GetTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetTableRequest.table_name)
}
void GetTableRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetTableRequest.table_name)
}
::std::string* GetTableRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mspb.GetTableRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableResponse::kHeaderFieldNumber;
const int GetTableResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableResponse::GetTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTableResponse)
}
GetTableResponse::GetTableResponse(const GetTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::basepb::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetTableResponse)
}

void GetTableResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_));
  _cached_size_ = 0;
}

GetTableResponse::~GetTableResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetTableResponse)
  SharedDtor();
}

void GetTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete table_;
}

void GetTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTableResponse& GetTableResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTableResponse* GetTableResponse::New(::google::protobuf::Arena* arena) const {
  GetTableResponse* n = new GetTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Table table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTableResponse)
  return false;
#undef DO_
}

void GetTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTableResponse)
}

::google::protobuf::uint8* GetTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTableResponse)
  return target;
}

size_t GetTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTableResponse)
    MergeFrom(*source);
  }
}

void GetTableResponse::MergeFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_table()) {
    mutable_table()->::basepb::Table::MergeFrom(from.table());
  }
}

void GetTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableResponse::CopyFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableResponse::IsInitialized() const {
  return true;
}

void GetTableResponse::Swap(GetTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableResponse::InternalSwap(GetTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableResponse

// .mspb.ResponseHeader header = 1;
bool GetTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetTableResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTableResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTableResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableResponse.header)
}

// .basepb.Table table = 2;
bool GetTableResponse::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
void GetTableResponse::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
}
const ::basepb::Table& GetTableResponse::table() const {
  const ::basepb::Table* p = table_;
  // @@protoc_insertion_point(field_get:mspb.GetTableResponse.table)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Table*>(
      &::basepb::_Table_default_instance_);
}
::basepb::Table* GetTableResponse::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::basepb::Table;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableResponse.table)
  return table_;
}
::basepb::Table* GetTableResponse::release_table() {
  // @@protoc_insertion_point(field_release:mspb.GetTableResponse.table)
  
  ::basepb::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void GetTableResponse::set_allocated_table(::basepb::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableResponse.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTablesRequest::kHeaderFieldNumber;
const int GetTablesRequest::kDbIdFieldNumber;
const int GetTablesRequest::kDbNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTablesRequest::GetTablesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTablesRequest)
}
GetTablesRequest::GetTablesRequest(const GetTablesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  db_id_ = from.db_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.GetTablesRequest)
}

void GetTablesRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(db_id_));
  _cached_size_ = 0;
}

GetTablesRequest::~GetTablesRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetTablesRequest)
  SharedDtor();
}

void GetTablesRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetTablesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTablesRequest& GetTablesRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTablesRequest* GetTablesRequest::New(::google::protobuf::Arena* arena) const {
  GetTablesRequest* n = new GetTablesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  db_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetTablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTablesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetTablesRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTablesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTablesRequest)
  return false;
#undef DO_
}

void GetTablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTablesRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTablesRequest)
}

::google::protobuf::uint8* GetTablesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTablesRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTablesRequest)
  return target;
}

size_t GetTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTablesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTablesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTablesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTablesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTablesRequest)
    MergeFrom(*source);
  }
}

void GetTablesRequest::MergeFrom(const GetTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
}

void GetTablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesRequest::CopyFrom(const GetTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesRequest::IsInitialized() const {
  return true;
}

void GetTablesRequest::Swap(GetTablesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTablesRequest::InternalSwap(GetTablesRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTablesRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTablesRequest

// .mspb.RequestHeader header = 1;
bool GetTablesRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTablesRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetTablesRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTablesRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetTablesRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTablesRequest.header)
  return header_;
}
::mspb::RequestHeader* GetTablesRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTablesRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTablesRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTablesRequest.header)
}

// uint64 db_id = 2;
void GetTablesRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetTablesRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetTablesRequest.db_id)
  return db_id_;
}
void GetTablesRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetTablesRequest.db_id)
}

// string db_name = 3;
void GetTablesRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTablesRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetTablesRequest.db_name)
  return db_name_.GetNoArena();
}
void GetTablesRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetTablesRequest.db_name)
}
#if LANG_CXX11
void GetTablesRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetTablesRequest.db_name)
}
#endif
void GetTablesRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetTablesRequest.db_name)
}
void GetTablesRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetTablesRequest.db_name)
}
::std::string* GetTablesRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetTablesRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTablesRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.GetTablesRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTablesRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTablesRequest.db_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTablesResponse::kHeaderFieldNumber;
const int GetTablesResponse::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTablesResponse::GetTablesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTablesResponse)
}
GetTablesResponse::GetTablesResponse(const GetTablesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tables_(from.tables_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetTablesResponse)
}

void GetTablesResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetTablesResponse::~GetTablesResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetTablesResponse)
  SharedDtor();
}

void GetTablesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetTablesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTablesResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTablesResponse& GetTablesResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTablesResponse* GetTablesResponse::New(::google::protobuf::Arena* arena) const {
  GetTablesResponse* n = new GetTablesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTablesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTablesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTablesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Table tables = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTablesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTablesResponse)
  return false;
#undef DO_
}

void GetTablesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .basepb.Table tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tables(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTablesResponse)
}

::google::protobuf::uint8* GetTablesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .basepb.Table tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tables(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTablesResponse)
  return target;
}

size_t GetTablesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTablesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.Table tables = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTablesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTablesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTablesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTablesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTablesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTablesResponse)
    MergeFrom(*source);
  }
}

void GetTablesResponse::MergeFrom(const GetTablesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTablesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetTablesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesResponse::CopyFrom(const GetTablesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesResponse::IsInitialized() const {
  return true;
}

void GetTablesResponse::Swap(GetTablesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTablesResponse::InternalSwap(GetTablesResponse* other) {
  using std::swap;
  tables_.InternalSwap(&other->tables_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTablesResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTablesResponse

// .mspb.ResponseHeader header = 1;
bool GetTablesResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTablesResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetTablesResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTablesResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetTablesResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTablesResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetTablesResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTablesResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTablesResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTablesResponse.header)
}

// repeated .basepb.Table tables = 2;
int GetTablesResponse::tables_size() const {
  return tables_.size();
}
void GetTablesResponse::clear_tables() {
  tables_.Clear();
}
const ::basepb::Table& GetTablesResponse::tables(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetTablesResponse.tables)
  return tables_.Get(index);
}
::basepb::Table* GetTablesResponse::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetTablesResponse.tables)
  return tables_.Mutable(index);
}
::basepb::Table* GetTablesResponse::add_tables() {
  // @@protoc_insertion_point(field_add:mspb.GetTablesResponse.tables)
  return tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Table >*
GetTablesResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetTablesResponse.tables)
  return &tables_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Table >&
GetTablesResponse::tables() const {
  // @@protoc_insertion_point(field_list:mspb.GetTablesResponse.tables)
  return tables_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnsRequest::kHeaderFieldNumber;
const int GetColumnsRequest::kDbIdFieldNumber;
const int GetColumnsRequest::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnsRequest::GetColumnsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnsRequest)
}
GetColumnsRequest::GetColumnsRequest(const GetColumnsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnsRequest)
}

void GetColumnsRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

GetColumnsRequest::~GetColumnsRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnsRequest)
  SharedDtor();
}

void GetColumnsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetColumnsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnsRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnsRequest& GetColumnsRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnsRequest* GetColumnsRequest::New(::google::protobuf::Arena* arena) const {
  GetColumnsRequest* n = new GetColumnsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool GetColumnsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnsRequest)
  return false;
#undef DO_
}

void GetColumnsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnsRequest)
}

::google::protobuf::uint8* GetColumnsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnsRequest)
  return target;
}

size_t GetColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnsRequest)
    MergeFrom(*source);
  }
}

void GetColumnsRequest::MergeFrom(const GetColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void GetColumnsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnsRequest::CopyFrom(const GetColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnsRequest::IsInitialized() const {
  return true;
}

void GetColumnsRequest::Swap(GetColumnsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnsRequest::InternalSwap(GetColumnsRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnsRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnsRequest

// .mspb.RequestHeader header = 1;
bool GetColumnsRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnsRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetColumnsRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnsRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetColumnsRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnsRequest.header)
  return header_;
}
::mspb::RequestHeader* GetColumnsRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnsRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnsRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnsRequest.header)
}

// uint64 db_id = 2;
void GetColumnsRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnsRequest.db_id)
  return db_id_;
}
void GetColumnsRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnsRequest.db_id)
}

// uint64 table_id = 3;
void GetColumnsRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnsRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnsRequest.table_id)
  return table_id_;
}
void GetColumnsRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnsRequest.table_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnsResponse::kHeaderFieldNumber;
const int GetColumnsResponse::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnsResponse::GetColumnsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnsResponse)
}
GetColumnsResponse::GetColumnsResponse(const GetColumnsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnsResponse)
}

void GetColumnsResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetColumnsResponse::~GetColumnsResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnsResponse)
  SharedDtor();
}

void GetColumnsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetColumnsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnsResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnsResponse& GetColumnsResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnsResponse* GetColumnsResponse::New(::google::protobuf::Arena* arena) const {
  GetColumnsResponse* n = new GetColumnsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetColumnsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Column columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnsResponse)
  return false;
#undef DO_
}

void GetColumnsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .basepb.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnsResponse)
}

::google::protobuf::uint8* GetColumnsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .basepb.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnsResponse)
  return target;
}

size_t GetColumnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.Column columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnsResponse)
    MergeFrom(*source);
  }
}

void GetColumnsResponse::MergeFrom(const GetColumnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetColumnsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnsResponse::CopyFrom(const GetColumnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnsResponse::IsInitialized() const {
  return true;
}

void GetColumnsResponse::Swap(GetColumnsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnsResponse::InternalSwap(GetColumnsResponse* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnsResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnsResponse

// .mspb.ResponseHeader header = 1;
bool GetColumnsResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnsResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetColumnsResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnsResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetColumnsResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnsResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetColumnsResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnsResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnsResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnsResponse.header)
}

// repeated .basepb.Column columns = 2;
int GetColumnsResponse::columns_size() const {
  return columns_.size();
}
void GetColumnsResponse::clear_columns() {
  columns_.Clear();
}
const ::basepb::Column& GetColumnsResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnsResponse.columns)
  return columns_.Get(index);
}
::basepb::Column* GetColumnsResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnsResponse.columns)
  return columns_.Mutable(index);
}
::basepb::Column* GetColumnsResponse::add_columns() {
  // @@protoc_insertion_point(field_add:mspb.GetColumnsResponse.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Column >*
GetColumnsResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetColumnsResponse.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
GetColumnsResponse::columns() const {
  // @@protoc_insertion_point(field_list:mspb.GetColumnsResponse.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeInfoRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfoRequest::GetNodeInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeInfoRequest)
}
GetNodeInfoRequest::GetNodeInfoRequest(const GetNodeInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeInfoRequest)
}

void GetNodeInfoRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetNodeInfoRequest::~GetNodeInfoRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeInfoRequest)
  SharedDtor();
}

void GetNodeInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfoRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeInfoRequest& GetNodeInfoRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeInfoRequest* GetNodeInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeInfoRequest* n = new GetNodeInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeInfoRequest)
  return false;
#undef DO_
}

void GetNodeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeInfoRequest)
}

::google::protobuf::uint8* GetNodeInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeInfoRequest)
  return target;
}

size_t GetNodeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeInfoRequest)
    MergeFrom(*source);
  }
}

void GetNodeInfoRequest::MergeFrom(const GetNodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void GetNodeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoRequest::CopyFrom(const GetNodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoRequest::IsInitialized() const {
  return true;
}

void GetNodeInfoRequest::Swap(GetNodeInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfoRequest::InternalSwap(GetNodeInfoRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfoRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInfoRequest

// .mspb.RequestHeader header = 1;
bool GetNodeInfoRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeInfoRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetNodeInfoRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeInfoRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetNodeInfoRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeInfoRequest.header)
  return header_;
}
::mspb::RequestHeader* GetNodeInfoRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeInfoRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeInfoRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeInfoRequest.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeInfoResponse::kHeaderFieldNumber;
const int GetNodeInfoResponse::kNodeInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfoResponse::GetNodeInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeInfoResponse)
}
GetNodeInfoResponse::GetNodeInfoResponse(const GetNodeInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodeinfos_(from.nodeinfos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeInfoResponse)
}

void GetNodeInfoResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetNodeInfoResponse::~GetNodeInfoResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeInfoResponse)
  SharedDtor();
}

void GetNodeInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfoResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeInfoResponse& GetNodeInfoResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeInfoResponse* GetNodeInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeInfoResponse* n = new GetNodeInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeinfos_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mspb.GetNodeInfo nodeInfos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodeinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeInfoResponse)
  return false;
#undef DO_
}

void GetNodeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .mspb.GetNodeInfo nodeInfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeinfos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodeinfos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeInfoResponse)
}

::google::protobuf::uint8* GetNodeInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .mspb.GetNodeInfo nodeInfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeinfos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodeinfos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeInfoResponse)
  return target;
}

size_t GetNodeInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mspb.GetNodeInfo nodeInfos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->nodeinfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodeinfos(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeInfoResponse)
    MergeFrom(*source);
  }
}

void GetNodeInfoResponse::MergeFrom(const GetNodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodeinfos_.MergeFrom(from.nodeinfos_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetNodeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoResponse::CopyFrom(const GetNodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoResponse::IsInitialized() const {
  return true;
}

void GetNodeInfoResponse::Swap(GetNodeInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfoResponse::InternalSwap(GetNodeInfoResponse* other) {
  using std::swap;
  nodeinfos_.InternalSwap(&other->nodeinfos_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfoResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInfoResponse

// .mspb.ResponseHeader header = 1;
bool GetNodeInfoResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetNodeInfoResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeInfoResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetNodeInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeInfoResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetNodeInfoResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeInfoResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeInfoResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeInfoResponse.header)
}

// repeated .mspb.GetNodeInfo nodeInfos = 2;
int GetNodeInfoResponse::nodeinfos_size() const {
  return nodeinfos_.size();
}
void GetNodeInfoResponse::clear_nodeinfos() {
  nodeinfos_.Clear();
}
const ::mspb::GetNodeInfo& GetNodeInfoResponse::nodeinfos(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeInfoResponse.nodeInfos)
  return nodeinfos_.Get(index);
}
::mspb::GetNodeInfo* GetNodeInfoResponse::mutable_nodeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeInfoResponse.nodeInfos)
  return nodeinfos_.Mutable(index);
}
::mspb::GetNodeInfo* GetNodeInfoResponse::add_nodeinfos() {
  // @@protoc_insertion_point(field_add:mspb.GetNodeInfoResponse.nodeInfos)
  return nodeinfos_.Add();
}
::google::protobuf::RepeatedPtrField< ::mspb::GetNodeInfo >*
GetNodeInfoResponse::mutable_nodeinfos() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetNodeInfoResponse.nodeInfos)
  return &nodeinfos_;
}
const ::google::protobuf::RepeatedPtrField< ::mspb::GetNodeInfo >&
GetNodeInfoResponse::nodeinfos() const {
  // @@protoc_insertion_point(field_list:mspb.GetNodeInfoResponse.nodeInfos)
  return nodeinfos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeInfo::kErrFieldNumber;
const int GetNodeInfo::kNodeFieldNumber;
const int GetNodeInfo::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfo::GetNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeInfo)
}
GetNodeInfo::GetNodeInfo(const GetNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err().size() > 0) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  if (from.has_node()) {
    node_ = new ::basepb::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::dspb::NodeInfoResponse(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeInfo)
}

void GetNodeInfo::SharedCtor() {
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&node_)) + sizeof(info_));
  _cached_size_ = 0;
}

GetNodeInfo::~GetNodeInfo() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeInfo)
  SharedDtor();
}

void GetNodeInfo::SharedDtor() {
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete info_;
}

void GetNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfo::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeInfo& GetNodeInfo::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeInfo* GetNodeInfo::New(::google::protobuf::Arena* arena) const {
  GetNodeInfo* n = new GetNodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), static_cast<int>(this->err().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetNodeInfo.err"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.NodeInfoResponse info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeInfo)
  return false;
#undef DO_
}

void GetNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string err = 1;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetNodeInfo.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->err(), output);
  }

  // .basepb.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // .dspb.NodeInfoResponse info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeInfo)
}

::google::protobuf::uint8* GetNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string err = 1;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetNodeInfo.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->err(), target);
  }

  // .basepb.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, deterministic, target);
  }

  // .dspb.NodeInfoResponse info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeInfo)
  return target;
}

size_t GetNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string err = 1;
  if (this->err().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  // .basepb.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // .dspb.NodeInfoResponse info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeInfo)
    MergeFrom(*source);
  }
}

void GetNodeInfo::MergeFrom(const GetNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  if (from.has_node()) {
    mutable_node()->::basepb::Node::MergeFrom(from.node());
  }
  if (from.has_info()) {
    mutable_info()->::dspb::NodeInfoResponse::MergeFrom(from.info());
  }
}

void GetNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfo::CopyFrom(const GetNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfo::IsInitialized() const {
  return true;
}

void GetNodeInfo::Swap(GetNodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfo::InternalSwap(GetNodeInfo* other) {
  using std::swap;
  err_.Swap(&other->err_);
  swap(node_, other->node_);
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfo::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInfo

// string err = 1;
void GetNodeInfo::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetNodeInfo::err() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeInfo.err)
  return err_.GetNoArena();
}
void GetNodeInfo::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetNodeInfo.err)
}
#if LANG_CXX11
void GetNodeInfo::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetNodeInfo.err)
}
#endif
void GetNodeInfo::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetNodeInfo.err)
}
void GetNodeInfo::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetNodeInfo.err)
}
::std::string* GetNodeInfo::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeInfo.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetNodeInfo::release_err() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeInfo.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetNodeInfo::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeInfo.err)
}

// .basepb.Node node = 2;
bool GetNodeInfo::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void GetNodeInfo::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::basepb::Node& GetNodeInfo::node() const {
  const ::basepb::Node* p = node_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeInfo.node)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Node*>(
      &::basepb::_Node_default_instance_);
}
::basepb::Node* GetNodeInfo::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::basepb::Node;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeInfo.node)
  return node_;
}
::basepb::Node* GetNodeInfo::release_node() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeInfo.node)
  
  ::basepb::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void GetNodeInfo::set_allocated_node(::basepb::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeInfo.node)
}

// .dspb.NodeInfoResponse info = 3;
bool GetNodeInfo::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void GetNodeInfo::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dspb::NodeInfoResponse& GetNodeInfo::info() const {
  const ::dspb::NodeInfoResponse* p = info_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeInfo.info)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NodeInfoResponse*>(
      &::dspb::_NodeInfoResponse_default_instance_);
}
::dspb::NodeInfoResponse* GetNodeInfo::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dspb::NodeInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeInfo.info)
  return info_;
}
::dspb::NodeInfoResponse* GetNodeInfo::release_info() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeInfo.info)
  
  ::dspb::NodeInfoResponse* temp = info_;
  info_ = NULL;
  return temp;
}
void GetNodeInfo::set_allocated_info(::dspb::NodeInfoResponse* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeInfo.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnRequest::kHeaderFieldNumber;
const int GetColumnRequest::kDbIdFieldNumber;
const int GetColumnRequest::kTableIdFieldNumber;
const int GetColumnRequest::kColIdFieldNumber;
const int GetColumnRequest::kColNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnRequest::GetColumnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnRequest)
}
GetColumnRequest::GetColumnRequest(const GetColumnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.col_name().size() > 0) {
    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(col_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnRequest)
}

void GetColumnRequest::SharedCtor() {
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(col_id_));
  _cached_size_ = 0;
}

GetColumnRequest::~GetColumnRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnRequest)
  SharedDtor();
}

void GetColumnRequest::SharedDtor() {
  col_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetColumnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnRequest& GetColumnRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnRequest* GetColumnRequest::New(::google::protobuf::Arena* arena) const {
  GetColumnRequest* n = new GetColumnRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(col_id_));
  _internal_metadata_.Clear();
}

bool GetColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 col_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &col_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string col_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_name().data(), static_cast<int>(this->col_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetColumnRequest.col_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnRequest)
  return false;
#undef DO_
}

void GetColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // uint64 col_id = 4;
  if (this->col_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->col_id(), output);
  }

  // string col_name = 5;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), static_cast<int>(this->col_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetColumnRequest.col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->col_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnRequest)
}

::google::protobuf::uint8* GetColumnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // uint64 col_id = 4;
  if (this->col_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->col_id(), target);
  }

  // string col_name = 5;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), static_cast<int>(this->col_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetColumnRequest.col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->col_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnRequest)
  return target;
}

size_t GetColumnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string col_name = 5;
  if (this->col_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint64 col_id = 4;
  if (this->col_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->col_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnRequest)
    MergeFrom(*source);
  }
}

void GetColumnRequest::MergeFrom(const GetColumnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.col_name().size() > 0) {

    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.col_id() != 0) {
    set_col_id(from.col_id());
  }
}

void GetColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnRequest::CopyFrom(const GetColumnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnRequest::IsInitialized() const {
  return true;
}

void GetColumnRequest::Swap(GetColumnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnRequest::InternalSwap(GetColumnRequest* other) {
  using std::swap;
  col_name_.Swap(&other->col_name_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(col_id_, other->col_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnRequest

// .mspb.RequestHeader header = 1;
bool GetColumnRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetColumnRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetColumnRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnRequest.header)
  return header_;
}
::mspb::RequestHeader* GetColumnRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnRequest.header)
}

// uint64 db_id = 2;
void GetColumnRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnRequest.db_id)
  return db_id_;
}
void GetColumnRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnRequest.db_id)
}

// uint64 table_id = 3;
void GetColumnRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnRequest.table_id)
  return table_id_;
}
void GetColumnRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnRequest.table_id)
}

// uint64 col_id = 4;
void GetColumnRequest::clear_col_id() {
  col_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnRequest::col_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnRequest.col_id)
  return col_id_;
}
void GetColumnRequest::set_col_id(::google::protobuf::uint64 value) {
  
  col_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnRequest.col_id)
}

// string col_name = 5;
void GetColumnRequest::clear_col_name() {
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetColumnRequest::col_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnRequest.col_name)
  return col_name_.GetNoArena();
}
void GetColumnRequest::set_col_name(const ::std::string& value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetColumnRequest.col_name)
}
#if LANG_CXX11
void GetColumnRequest::set_col_name(::std::string&& value) {
  
  col_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetColumnRequest.col_name)
}
#endif
void GetColumnRequest::set_col_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetColumnRequest.col_name)
}
void GetColumnRequest::set_col_name(const char* value, size_t size) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetColumnRequest.col_name)
}
::std::string* GetColumnRequest::mutable_col_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnRequest.col_name)
  return col_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetColumnRequest::release_col_name() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnRequest.col_name)
  
  return col_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetColumnRequest::set_allocated_col_name(::std::string* col_name) {
  if (col_name != NULL) {
    
  } else {
    
  }
  col_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnRequest.col_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnResponse::kHeaderFieldNumber;
const int GetColumnResponse::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnResponse::GetColumnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnResponse)
}
GetColumnResponse::GetColumnResponse(const GetColumnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_column()) {
    column_ = new ::basepb::Column(*from.column_);
  } else {
    column_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnResponse)
}

void GetColumnResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_) -
      reinterpret_cast<char*>(&header_)) + sizeof(column_));
  _cached_size_ = 0;
}

GetColumnResponse::~GetColumnResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnResponse)
  SharedDtor();
}

void GetColumnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete column_;
}

void GetColumnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnResponse& GetColumnResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnResponse* GetColumnResponse::New(::google::protobuf::Arena* arena) const {
  GetColumnResponse* n = new GetColumnResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && column_ != NULL) {
    delete column_;
  }
  column_ = NULL;
  _internal_metadata_.Clear();
}

bool GetColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Column column = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnResponse)
  return false;
#undef DO_
}

void GetColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Column column = 2;
  if (this->has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->column_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnResponse)
}

::google::protobuf::uint8* GetColumnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Column column = 2;
  if (this->has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->column_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnResponse)
  return target;
}

size_t GetColumnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Column column = 2;
  if (this->has_column()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnResponse)
    MergeFrom(*source);
  }
}

void GetColumnResponse::MergeFrom(const GetColumnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_column()) {
    mutable_column()->::basepb::Column::MergeFrom(from.column());
  }
}

void GetColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnResponse::CopyFrom(const GetColumnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnResponse::IsInitialized() const {
  return true;
}

void GetColumnResponse::Swap(GetColumnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnResponse::InternalSwap(GetColumnResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(column_, other->column_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnResponse

// .mspb.ResponseHeader header = 1;
bool GetColumnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetColumnResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetColumnResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetColumnResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnResponse.header)
}

// .basepb.Column column = 2;
bool GetColumnResponse::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
void GetColumnResponse::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
const ::basepb::Column& GetColumnResponse::column() const {
  const ::basepb::Column* p = column_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnResponse.column)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Column*>(
      &::basepb::_Column_default_instance_);
}
::basepb::Column* GetColumnResponse::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::basepb::Column;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnResponse.column)
  return column_;
}
::basepb::Column* GetColumnResponse::release_column() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnResponse.column)
  
  ::basepb::Column* temp = column_;
  column_ = NULL;
  return temp;
}
void GetColumnResponse::set_allocated_column(::basepb::Column* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnResponse.column)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatabaseRequest::kHeaderFieldNumber;
const int CreateDatabaseRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatabaseRequest::CreateDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateDatabaseRequest)
}
CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateDatabaseRequest)
}

void CreateDatabaseRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

CreateDatabaseRequest::~CreateDatabaseRequest() {
  // @@protoc_insertion_point(destructor:mspb.CreateDatabaseRequest)
  SharedDtor();
}

void CreateDatabaseRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CreateDatabaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateDatabaseRequest& CreateDatabaseRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDatabaseRequest* CreateDatabaseRequest::New(::google::protobuf::Arena* arena) const {
  CreateDatabaseRequest* n = new CreateDatabaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateDatabaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateDatabaseRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateDatabaseRequest)
  return false;
#undef DO_
}

void CreateDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateDatabaseRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateDatabaseRequest)
}

::google::protobuf::uint8* CreateDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateDatabaseRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateDatabaseRequest)
  return target;
}

size_t CreateDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateDatabaseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateDatabaseRequest)
    MergeFrom(*source);
  }
}

void CreateDatabaseRequest::MergeFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void CreateDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseRequest::CopyFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseRequest::IsInitialized() const {
  return true;
}

void CreateDatabaseRequest::Swap(CreateDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatabaseRequest::InternalSwap(CreateDatabaseRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatabaseRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatabaseRequest

// .mspb.RequestHeader header = 1;
bool CreateDatabaseRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateDatabaseRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& CreateDatabaseRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* CreateDatabaseRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseRequest.header)
  return header_;
}
::mspb::RequestHeader* CreateDatabaseRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateDatabaseRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseRequest.header)
}

// string name = 2;
void CreateDatabaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseRequest.name)
  return name_.GetNoArena();
}
void CreateDatabaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateDatabaseRequest.name)
}
#if LANG_CXX11
void CreateDatabaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateDatabaseRequest.name)
}
#endif
void CreateDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateDatabaseRequest.name)
}
void CreateDatabaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateDatabaseRequest.name)
}
::std::string* CreateDatabaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDatabaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatabaseResponse::kHeaderFieldNumber;
const int CreateDatabaseResponse::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatabaseResponse::CreateDatabaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateDatabaseResponse)
}
CreateDatabaseResponse::CreateDatabaseResponse(const CreateDatabaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_database()) {
    database_ = new ::basepb::DataBase(*from.database_);
  } else {
    database_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateDatabaseResponse)
}

void CreateDatabaseResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&database_) -
      reinterpret_cast<char*>(&header_)) + sizeof(database_));
  _cached_size_ = 0;
}

CreateDatabaseResponse::~CreateDatabaseResponse() {
  // @@protoc_insertion_point(destructor:mspb.CreateDatabaseResponse)
  SharedDtor();
}

void CreateDatabaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete database_;
}

void CreateDatabaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateDatabaseResponse& CreateDatabaseResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDatabaseResponse* CreateDatabaseResponse::New(::google::protobuf::Arena* arena) const {
  CreateDatabaseResponse* n = new CreateDatabaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDatabaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && database_ != NULL) {
    delete database_;
  }
  database_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateDatabaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateDatabaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.DataBase database = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateDatabaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateDatabaseResponse)
  return false;
#undef DO_
}

void CreateDatabaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.DataBase database = 2;
  if (this->has_database()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->database_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateDatabaseResponse)
}

::google::protobuf::uint8* CreateDatabaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.DataBase database = 2;
  if (this->has_database()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->database_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateDatabaseResponse)
  return target;
}

size_t CreateDatabaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateDatabaseResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.DataBase database = 2;
  if (this->has_database()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->database_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatabaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateDatabaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateDatabaseResponse)
    MergeFrom(*source);
  }
}

void CreateDatabaseResponse::MergeFrom(const CreateDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_database()) {
    mutable_database()->::basepb::DataBase::MergeFrom(from.database());
  }
}

void CreateDatabaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseResponse::CopyFrom(const CreateDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseResponse::IsInitialized() const {
  return true;
}

void CreateDatabaseResponse::Swap(CreateDatabaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatabaseResponse::InternalSwap(CreateDatabaseResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(database_, other->database_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatabaseResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatabaseResponse

// .mspb.ResponseHeader header = 1;
bool CreateDatabaseResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateDatabaseResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& CreateDatabaseResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* CreateDatabaseResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseResponse.header)
  return header_;
}
::mspb::ResponseHeader* CreateDatabaseResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateDatabaseResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseResponse.header)
}

// .basepb.DataBase database = 2;
bool CreateDatabaseResponse::has_database() const {
  return this != internal_default_instance() && database_ != NULL;
}
void CreateDatabaseResponse::clear_database() {
  if (GetArenaNoVirtual() == NULL && database_ != NULL) delete database_;
  database_ = NULL;
}
const ::basepb::DataBase& CreateDatabaseResponse::database() const {
  const ::basepb::DataBase* p = database_;
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseResponse.database)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::DataBase*>(
      &::basepb::_DataBase_default_instance_);
}
::basepb::DataBase* CreateDatabaseResponse::mutable_database() {
  
  if (database_ == NULL) {
    database_ = new ::basepb::DataBase;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseResponse.database)
  return database_;
}
::basepb::DataBase* CreateDatabaseResponse::release_database() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseResponse.database)
  
  ::basepb::DataBase* temp = database_;
  database_ = NULL;
  return temp;
}
void CreateDatabaseResponse::set_allocated_database(::basepb::DataBase* database) {
  delete database_;
  database_ = database;
  if (database) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseResponse.database)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableRequest::kHeaderFieldNumber;
const int CreateTableRequest::kDbNameFieldNumber;
const int CreateTableRequest::kTableNameFieldNumber;
const int CreateTableRequest::kPropertiesFieldNumber;
const int CreateTableRequest::kRangeKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableRequest::CreateTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateTableRequest)
}
CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      range_keys_(from.range_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.properties().size() > 0) {
    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateTableRequest)
}

void CreateTableRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

CreateTableRequest::~CreateTableRequest() {
  // @@protoc_insertion_point(destructor:mspb.CreateTableRequest)
  SharedDtor();
}

void CreateTableRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CreateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTableRequest& CreateTableRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTableRequest* CreateTableRequest::New(::google::protobuf::Arena* arena) const {
  CreateTableRequest* n = new CreateTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_keys_.Clear();
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_properties()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->properties().data(), static_cast<int>(this->properties().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.properties"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string range_keys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_range_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->range_keys(this->range_keys_size() - 1).data(),
            static_cast<int>(this->range_keys(this->range_keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.range_keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateTableRequest)
  return false;
#undef DO_
}

void CreateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // string properties = 4;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.properties");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->properties(), output);
  }

  // repeated string range_keys = 5;
  for (int i = 0, n = this->range_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->range_keys(i).data(), static_cast<int>(this->range_keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.range_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->range_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateTableRequest)
}

::google::protobuf::uint8* CreateTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // string properties = 4;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.properties");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->properties(), target);
  }

  // repeated string range_keys = 5;
  for (int i = 0, n = this->range_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->range_keys(i).data(), static_cast<int>(this->range_keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.range_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->range_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateTableRequest)
  return target;
}

size_t CreateTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string range_keys = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->range_keys_size());
  for (int i = 0, n = this->range_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->range_keys(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // string properties = 4;
  if (this->properties().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->properties());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateTableRequest)
    MergeFrom(*source);
  }
}

void CreateTableRequest::MergeFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_keys_.MergeFrom(from.range_keys_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.properties().size() > 0) {

    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void CreateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  return true;
}

void CreateTableRequest::Swap(CreateTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableRequest::InternalSwap(CreateTableRequest* other) {
  using std::swap;
  range_keys_.InternalSwap(&other->range_keys_);
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  properties_.Swap(&other->properties_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableRequest

// .mspb.RequestHeader header = 1;
bool CreateTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& CreateTableRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* CreateTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.header)
  return header_;
}
::mspb::RequestHeader* CreateTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateTableRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.header)
}

// string db_name = 2;
void CreateTableRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.db_name)
  return db_name_.GetNoArena();
}
void CreateTableRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.db_name)
}
#if LANG_CXX11
void CreateTableRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateTableRequest.db_name)
}
#endif
void CreateTableRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.db_name)
}
void CreateTableRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.db_name)
}
::std::string* CreateTableRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.db_name)
}

// string table_name = 3;
void CreateTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.table_name)
  return table_name_.GetNoArena();
}
void CreateTableRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.table_name)
}
#if LANG_CXX11
void CreateTableRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateTableRequest.table_name)
}
#endif
void CreateTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.table_name)
}
void CreateTableRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.table_name)
}
::std::string* CreateTableRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.table_name)
}

// string properties = 4;
void CreateTableRequest::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::properties() const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.properties)
  return properties_.GetNoArena();
}
void CreateTableRequest::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.properties)
}
#if LANG_CXX11
void CreateTableRequest::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateTableRequest.properties)
}
#endif
void CreateTableRequest::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.properties)
}
void CreateTableRequest::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.properties)
}
::std::string* CreateTableRequest::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_properties() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.properties)
}

// repeated string range_keys = 5;
int CreateTableRequest::range_keys_size() const {
  return range_keys_.size();
}
void CreateTableRequest::clear_range_keys() {
  range_keys_.Clear();
}
const ::std::string& CreateTableRequest::range_keys(int index) const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.range_keys)
  return range_keys_.Get(index);
}
::std::string* CreateTableRequest::mutable_range_keys(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.range_keys)
  return range_keys_.Mutable(index);
}
void CreateTableRequest::set_range_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.range_keys)
  range_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CreateTableRequest::set_range_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.range_keys)
  range_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void CreateTableRequest::set_range_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  range_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.range_keys)
}
void CreateTableRequest::set_range_keys(int index, const char* value, size_t size) {
  range_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.range_keys)
}
::std::string* CreateTableRequest::add_range_keys() {
  // @@protoc_insertion_point(field_add_mutable:mspb.CreateTableRequest.range_keys)
  return range_keys_.Add();
}
void CreateTableRequest::add_range_keys(const ::std::string& value) {
  range_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mspb.CreateTableRequest.range_keys)
}
#if LANG_CXX11
void CreateTableRequest::add_range_keys(::std::string&& value) {
  range_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mspb.CreateTableRequest.range_keys)
}
#endif
void CreateTableRequest::add_range_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  range_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mspb.CreateTableRequest.range_keys)
}
void CreateTableRequest::add_range_keys(const char* value, size_t size) {
  range_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mspb.CreateTableRequest.range_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateTableRequest::range_keys() const {
  // @@protoc_insertion_point(field_list:mspb.CreateTableRequest.range_keys)
  return range_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CreateTableRequest::mutable_range_keys() {
  // @@protoc_insertion_point(field_mutable_list:mspb.CreateTableRequest.range_keys)
  return &range_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableResponse::kHeaderFieldNumber;
const int CreateTableResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableResponse::CreateTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateTableResponse)
}
CreateTableResponse::CreateTableResponse(const CreateTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::basepb::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateTableResponse)
}

void CreateTableResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_));
  _cached_size_ = 0;
}

CreateTableResponse::~CreateTableResponse() {
  // @@protoc_insertion_point(destructor:mspb.CreateTableResponse)
  SharedDtor();
}

void CreateTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete table_;
}

void CreateTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTableResponse& CreateTableResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTableResponse* CreateTableResponse::New(::google::protobuf::Arena* arena) const {
  CreateTableResponse* n = new CreateTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Table table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateTableResponse)
  return false;
#undef DO_
}

void CreateTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateTableResponse)
}

::google::protobuf::uint8* CreateTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateTableResponse)
  return target;
}

size_t CreateTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .basepb.Table table = 2;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateTableResponse)
    MergeFrom(*source);
  }
}

void CreateTableResponse::MergeFrom(const CreateTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_table()) {
    mutable_table()->::basepb::Table::MergeFrom(from.table());
  }
}

void CreateTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableResponse::CopyFrom(const CreateTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableResponse::IsInitialized() const {
  return true;
}

void CreateTableResponse::Swap(CreateTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableResponse::InternalSwap(CreateTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableResponse

// .mspb.ResponseHeader header = 1;
bool CreateTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& CreateTableResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* CreateTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableResponse.header)
  return header_;
}
::mspb::ResponseHeader* CreateTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateTableResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableResponse.header)
}

// .basepb.Table table = 2;
bool CreateTableResponse::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
void CreateTableResponse::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
}
const ::basepb::Table& CreateTableResponse::table() const {
  const ::basepb::Table* p = table_;
  // @@protoc_insertion_point(field_get:mspb.CreateTableResponse.table)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Table*>(
      &::basepb::_Table_default_instance_);
}
::basepb::Table* CreateTableResponse::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::basepb::Table;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableResponse.table)
  return table_;
}
::basepb::Table* CreateTableResponse::release_table() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableResponse.table)
  
  ::basepb::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void CreateTableResponse::set_allocated_table(::basepb::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableResponse.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutoIncIdRequest::kHeaderFieldNumber;
const int GetAutoIncIdRequest::kDbIdFieldNumber;
const int GetAutoIncIdRequest::kTableIdFieldNumber;
const int GetAutoIncIdRequest::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutoIncIdRequest::GetAutoIncIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetAutoIncIdRequest)
}
GetAutoIncIdRequest::GetAutoIncIdRequest(const GetAutoIncIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetAutoIncIdRequest)
}

void GetAutoIncIdRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(size_));
  _cached_size_ = 0;
}

GetAutoIncIdRequest::~GetAutoIncIdRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetAutoIncIdRequest)
  SharedDtor();
}

void GetAutoIncIdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAutoIncIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoIncIdRequest::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAutoIncIdRequest& GetAutoIncIdRequest::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAutoIncIdRequest* GetAutoIncIdRequest::New(::google::protobuf::Arena* arena) const {
  GetAutoIncIdRequest* n = new GetAutoIncIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAutoIncIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetAutoIncIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool GetAutoIncIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetAutoIncIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetAutoIncIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetAutoIncIdRequest)
  return false;
#undef DO_
}

void GetAutoIncIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetAutoIncIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetAutoIncIdRequest)
}

::google::protobuf::uint8* GetAutoIncIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetAutoIncIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetAutoIncIdRequest)
  return target;
}

size_t GetAutoIncIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetAutoIncIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoIncIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetAutoIncIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutoIncIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAutoIncIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetAutoIncIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetAutoIncIdRequest)
    MergeFrom(*source);
  }
}

void GetAutoIncIdRequest::MergeFrom(const GetAutoIncIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetAutoIncIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void GetAutoIncIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetAutoIncIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoIncIdRequest::CopyFrom(const GetAutoIncIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetAutoIncIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoIncIdRequest::IsInitialized() const {
  return true;
}

void GetAutoIncIdRequest::Swap(GetAutoIncIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutoIncIdRequest::InternalSwap(GetAutoIncIdRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAutoIncIdRequest::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAutoIncIdRequest

// .mspb.RequestHeader header = 1;
bool GetAutoIncIdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetAutoIncIdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetAutoIncIdRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetAutoIncIdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetAutoIncIdRequest.header)
  return header_;
}
::mspb::RequestHeader* GetAutoIncIdRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetAutoIncIdRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetAutoIncIdRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetAutoIncIdRequest.header)
}

// uint64 db_id = 2;
void GetAutoIncIdRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetAutoIncIdRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.db_id)
  return db_id_;
}
void GetAutoIncIdRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdRequest.db_id)
}

// uint64 table_id = 3;
void GetAutoIncIdRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetAutoIncIdRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.table_id)
  return table_id_;
}
void GetAutoIncIdRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdRequest.table_id)
}

// uint32 size = 4;
void GetAutoIncIdRequest::clear_size() {
  size_ = 0u;
}
::google::protobuf::uint32 GetAutoIncIdRequest::size() const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.size)
  return size_;
}
void GetAutoIncIdRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdRequest.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutoIncIdResponse::kHeaderFieldNumber;
const int GetAutoIncIdResponse::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutoIncIdResponse::GetAutoIncIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetAutoIncIdResponse)
}
GetAutoIncIdResponse::GetAutoIncIdResponse(const GetAutoIncIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetAutoIncIdResponse)
}

void GetAutoIncIdResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetAutoIncIdResponse::~GetAutoIncIdResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetAutoIncIdResponse)
  SharedDtor();
}

void GetAutoIncIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAutoIncIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoIncIdResponse::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAutoIncIdResponse& GetAutoIncIdResponse::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAutoIncIdResponse* GetAutoIncIdResponse::New(::google::protobuf::Arena* arena) const {
  GetAutoIncIdResponse* n = new GetAutoIncIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAutoIncIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetAutoIncIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetAutoIncIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetAutoIncIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetAutoIncIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetAutoIncIdResponse)
  return false;
#undef DO_
}

void GetAutoIncIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetAutoIncIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ids_cached_byte_size_));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetAutoIncIdResponse)
}

::google::protobuf::uint8* GetAutoIncIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetAutoIncIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetAutoIncIdResponse)
  return target;
}

size_t GetAutoIncIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetAutoIncIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoIncIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetAutoIncIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutoIncIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAutoIncIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetAutoIncIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetAutoIncIdResponse)
    MergeFrom(*source);
  }
}

void GetAutoIncIdResponse::MergeFrom(const GetAutoIncIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetAutoIncIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetAutoIncIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetAutoIncIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoIncIdResponse::CopyFrom(const GetAutoIncIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetAutoIncIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoIncIdResponse::IsInitialized() const {
  return true;
}

void GetAutoIncIdResponse::Swap(GetAutoIncIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutoIncIdResponse::InternalSwap(GetAutoIncIdResponse* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAutoIncIdResponse::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAutoIncIdResponse

// .mspb.ResponseHeader header = 1;
bool GetAutoIncIdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetAutoIncIdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetAutoIncIdResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetAutoIncIdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetAutoIncIdResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetAutoIncIdResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetAutoIncIdResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetAutoIncIdResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetAutoIncIdResponse.header)
}

// repeated uint64 ids = 2;
int GetAutoIncIdResponse::ids_size() const {
  return ids_.size();
}
void GetAutoIncIdResponse::clear_ids() {
  ids_.Clear();
}
::google::protobuf::uint64 GetAutoIncIdResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdResponse.ids)
  return ids_.Get(index);
}
void GetAutoIncIdResponse::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdResponse.ids)
}
void GetAutoIncIdResponse::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:mspb.GetAutoIncIdResponse.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GetAutoIncIdResponse::ids() const {
  // @@protoc_insertion_point(field_list:mspb.GetAutoIncIdResponse.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GetAutoIncIdResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetAutoIncIdResponse.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:mspb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHeader& RequestHeader::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RequestHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// uint64 cluster_id = 1;
void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:mspb.RequestHeader.cluster_id)
  return cluster_id_;
}
void RequestHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.RequestHeader.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::mspb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(cluster_id_));
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:mspb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .mspb.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .mspb.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.ResponseHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::mspb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// uint64 cluster_id = 1;
void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:mspb.ResponseHeader.cluster_id)
  return cluster_id_;
}
void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.ResponseHeader.cluster_id)
}

// .mspb.Error error = 2;
bool ResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::mspb::Error& ResponseHeader::error() const {
  const ::mspb::Error* p = error_;
  // @@protoc_insertion_point(field_get:mspb.ResponseHeader.error)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::Error*>(
      &::mspb::_Error_default_instance_);
}
::mspb::Error* ResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::mspb::Error;
  }
  // @@protoc_insertion_point(field_mutable:mspb.ResponseHeader.error)
  return error_;
}
::mspb::Error* ResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:mspb.ResponseHeader.error)
  
  ::mspb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_error(::mspb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.ResponseHeader.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2fmspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:mspb.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:mspb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_mspb_2fmspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_mspb_2fmspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2fmspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// uint32 code = 1;
void Error::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 Error::code() const {
  // @@protoc_insertion_point(field_get:mspb.Error.code)
  return code_;
}
void Error::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:mspb.Error.code)
}

// string message = 2;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:mspb.Error.message)
  return message_.GetNoArena();
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.Error.message)
}
#if LANG_CXX11
void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.Error.message)
}
#endif
void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:mspb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:mspb.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:mspb.Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mspb

// @@protoc_insertion_point(global_scope)
