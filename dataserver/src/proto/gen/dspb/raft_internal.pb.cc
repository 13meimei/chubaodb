// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/raft_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/raft_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class SplitCommandDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SplitCommand>
     _instance;
} _SplitCommand_default_instance_;
class CmdIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CmdID>
     _instance;
} _CmdID_default_instance_;
class CommandDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Command>
     _instance;
} _Command_default_instance_;
class PeerTaskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PeerTask>
     _instance;
} _PeerTask_default_instance_;
class SnapshotKVPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SnapshotKVPair>
     _instance;
} _SnapshotKVPair_default_instance_;
class SnapshotContextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SnapshotContext>
     _instance;
} _SnapshotContext_default_instance_;

namespace protobuf_dspb_2fraft_5finternal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitCommand, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitCommand, split_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitCommand, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitCommand, new_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdID, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdID, seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmd_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, verify_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, txn_prepare_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, txn_decide_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, txn_clearup_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_get_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_put_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_delete_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, split_cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTask, verify_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTask, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, cf_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotContext, meta_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SplitCommand)},
  { 9, -1, sizeof(CmdID)},
  { 16, -1, sizeof(Command)},
  { 31, -1, sizeof(PeerTask)},
  { 38, -1, sizeof(SnapshotKVPair)},
  { 46, -1, sizeof(SnapshotContext)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SplitCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CmdID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotKVPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotContext_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/raft_internal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::basepb::protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2fkv_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2ftxn_2eproto::InitDefaults();
  _SplitCommand_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SplitCommand_default_instance_);_CmdID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CmdID_default_instance_);_Command_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Command_default_instance_);_PeerTask_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PeerTask_default_instance_);_SnapshotKVPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SnapshotKVPair_default_instance_);_SnapshotContext_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SnapshotContext_default_instance_);_SplitCommand_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _SplitCommand_default_instance_._instance.get_mutable()->new_range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->cmd_id_ = const_cast< ::dspb::CmdID*>(
      ::dspb::CmdID::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->verify_epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->txn_prepare_req_ = const_cast< ::dspb::PrepareRequest*>(
      ::dspb::PrepareRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->txn_decide_req_ = const_cast< ::dspb::DecideRequest*>(
      ::dspb::DecideRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->txn_clearup_req_ = const_cast< ::dspb::ClearupRequest*>(
      ::dspb::ClearupRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_get_req_ = const_cast< ::dspb::KvGetRequest*>(
      ::dspb::KvGetRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_put_req_ = const_cast< ::dspb::KvPutRequest*>(
      ::dspb::KvPutRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_delete_req_ = const_cast< ::dspb::KvDeleteRequest*>(
      ::dspb::KvDeleteRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->split_cmd_ = const_cast< ::dspb::SplitCommand*>(
      ::dspb::SplitCommand::internal_default_instance());
  _PeerTask_default_instance_._instance.get_mutable()->verify_epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _PeerTask_default_instance_._instance.get_mutable()->peer_ = const_cast< ::basepb::Peer*>(
      ::basepb::Peer::internal_default_instance());
  _SnapshotContext_default_instance_._instance.get_mutable()->meta_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030dspb/raft_internal.proto\022\004dspb\032\023basepb"
      "/basepb.proto\032\rdspb/kv.proto\032\016dspb/txn.p"
      "roto\"v\n\014SplitCommand\022\016\n\006leader\030\001 \001(\004\022\021\n\t"
      "split_key\030\002 \001(\014\022!\n\005epoch\030\003 \001(\0132\022.basepb."
      "RangeEpoch\022 \n\tnew_range\030\004 \001(\0132\r.basepb.R"
      "ange\"%\n\005CmdID\022\017\n\007node_id\030\001 \001(\004\022\013\n\003seq\030\002 "
      "\001(\004\"\241\003\n\007Command\022\033\n\006cmd_id\030\001 \001(\0132\013.dspb.C"
      "mdID\022\037\n\010cmd_type\030\002 \001(\0162\r.dspb.CmdType\022(\n"
      "\014verify_epoch\030\003 \001(\0132\022.basepb.RangeEpoch\022"
      "-\n\017txn_prepare_req\030\004 \001(\0132\024.dspb.PrepareR"
      "equest\022+\n\016txn_decide_req\030\005 \001(\0132\023.dspb.De"
      "cideRequest\022-\n\017txn_clearup_req\030\006 \001(\0132\024.d"
      "spb.ClearupRequest\022&\n\nkv_get_req\030\024 \001(\0132\022"
      ".dspb.KvGetRequest\022&\n\nkv_put_req\030\025 \001(\0132\022"
      ".dspb.KvPutRequest\022,\n\rkv_delete_req\030\026 \001("
      "\0132\025.dspb.KvDeleteRequest\022%\n\tsplit_cmd\030d "
      "\001(\0132\022.dspb.SplitCommand\"P\n\010PeerTask\022(\n\014v"
      "erify_epoch\030\001 \001(\0132\022.basepb.RangeEpoch\022\032\n"
      "\004peer\030\002 \001(\0132\014.basepb.Peer\"K\n\016SnapshotKVP"
      "air\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\035\n\007cf_ty"
      "pe\030\003 \001(\0162\014.dspb.CFType\".\n\017SnapshotContex"
      "t\022\033\n\004meta\030\001 \001(\0132\r.basepb.Range*}\n\007CmdTyp"
      "e\022\017\n\013Invalid_Cmd\020\000\022\016\n\nTxnPrepare\020\001\022\r\n\tTx"
      "nDecide\020\002\022\016\n\nTxnClearup\020\003\022\t\n\005KvGet\020\024\022\t\n\005"
      "KvPut\020\025\022\014\n\010KvDelete\020\026\022\016\n\nAdminSplit\020d*$\n"
      "\006CFType\022\016\n\nCF_DEFAULT\020\000\022\n\n\006CF_TXN\020\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1043);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/raft_internal.proto", &protobuf_RegisterTypes);
  ::basepb::protobuf_basepb_2fbasepb_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2fkv_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2ftxn_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2fraft_5finternal_2eproto

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_enum_descriptors[0];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 20:
    case 21:
    case 22:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CFType_descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_enum_descriptors[1];
}
bool CFType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitCommand::kLeaderFieldNumber;
const int SplitCommand::kSplitKeyFieldNumber;
const int SplitCommand::kEpochFieldNumber;
const int SplitCommand::kNewRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitCommand::SplitCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SplitCommand)
}
SplitCommand::SplitCommand(const SplitCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_epoch()) {
    epoch_ = new ::basepb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  if (from.has_new_range()) {
    new_range_ = new ::basepb::Range(*from.new_range_);
  } else {
    new_range_ = NULL;
  }
  leader_ = from.leader_;
  // @@protoc_insertion_point(copy_constructor:dspb.SplitCommand)
}

void SplitCommand::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(leader_));
  _cached_size_ = 0;
}

SplitCommand::~SplitCommand() {
  // @@protoc_insertion_point(destructor:dspb.SplitCommand)
  SharedDtor();
}

void SplitCommand::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete epoch_;
  if (this != internal_default_instance()) delete new_range_;
}

void SplitCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitCommand::descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitCommand& SplitCommand::default_instance() {
  protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SplitCommand* SplitCommand::New(::google::protobuf::Arena* arena) const {
  SplitCommand* n = new SplitCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SplitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) {
    delete new_range_;
  }
  new_range_ = NULL;
  leader_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SplitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SplitCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Range new_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SplitCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SplitCommand)
  return false;
#undef DO_
}

void SplitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SplitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->leader(), output);
  }

  // bytes split_key = 2;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->split_key(), output);
  }

  // .basepb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->epoch_, output);
  }

  // .basepb.Range new_range = 4;
  if (this->has_new_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->new_range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SplitCommand)
}

::google::protobuf::uint8* SplitCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SplitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->leader(), target);
  }

  // bytes split_key = 2;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->split_key(), target);
  }

  // .basepb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->epoch_, deterministic, target);
  }

  // .basepb.Range new_range = 4;
  if (this->has_new_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->new_range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SplitCommand)
  return target;
}

size_t SplitCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SplitCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes split_key = 2;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .basepb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // .basepb.Range new_range = 4;
  if (this->has_new_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_range_);
  }

  // uint64 leader = 1;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SplitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SplitCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SplitCommand)
    MergeFrom(*source);
  }
}

void SplitCommand::MergeFrom(const SplitCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SplitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_epoch()) {
    mutable_epoch()->::basepb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.has_new_range()) {
    mutable_new_range()->::basepb::Range::MergeFrom(from.new_range());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
}

void SplitCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SplitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitCommand::CopyFrom(const SplitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SplitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitCommand::IsInitialized() const {
  return true;
}

void SplitCommand::Swap(SplitCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitCommand::InternalSwap(SplitCommand* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_);
  swap(epoch_, other->epoch_);
  swap(new_range_, other->new_range_);
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitCommand::GetMetadata() const {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitCommand

// uint64 leader = 1;
void SplitCommand::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SplitCommand::leader() const {
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.leader)
  return leader_;
}
void SplitCommand::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:dspb.SplitCommand.leader)
}

// bytes split_key = 2;
void SplitCommand::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SplitCommand::split_key() const {
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.split_key)
  return split_key_.GetNoArena();
}
void SplitCommand::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SplitCommand.split_key)
}
#if LANG_CXX11
void SplitCommand::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SplitCommand.split_key)
}
#endif
void SplitCommand::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SplitCommand.split_key)
}
void SplitCommand::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SplitCommand.split_key)
}
::std::string* SplitCommand::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SplitCommand.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SplitCommand::release_split_key() {
  // @@protoc_insertion_point(field_release:dspb.SplitCommand.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitCommand::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SplitCommand.split_key)
}

// .basepb.RangeEpoch epoch = 3;
bool SplitCommand::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void SplitCommand::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::basepb::RangeEpoch& SplitCommand::epoch() const {
  const ::basepb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* SplitCommand::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SplitCommand.epoch)
  return epoch_;
}
::basepb::RangeEpoch* SplitCommand::release_epoch() {
  // @@protoc_insertion_point(field_release:dspb.SplitCommand.epoch)
  
  ::basepb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void SplitCommand::set_allocated_epoch(::basepb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SplitCommand.epoch)
}

// .basepb.Range new_range = 4;
bool SplitCommand::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
void SplitCommand::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
const ::basepb::Range& SplitCommand::new_range() const {
  const ::basepb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* SplitCommand::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SplitCommand.new_range)
  return new_range_;
}
::basepb::Range* SplitCommand::release_new_range() {
  // @@protoc_insertion_point(field_release:dspb.SplitCommand.new_range)
  
  ::basepb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
void SplitCommand::set_allocated_new_range(::basepb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SplitCommand.new_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdID::kNodeIdFieldNumber;
const int CmdID::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdID::CmdID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.CmdID)
}
CmdID::CmdID(const CmdID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:dspb.CmdID)
}

void CmdID::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(seq_));
  _cached_size_ = 0;
}

CmdID::~CmdID() {
  // @@protoc_insertion_point(destructor:dspb.CmdID)
  SharedDtor();
}

void CmdID::SharedDtor() {
}

void CmdID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdID::descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdID& CmdID::default_instance() {
  protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

CmdID* CmdID::New(::google::protobuf::Arena* arena) const {
  CmdID* n = new CmdID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdID::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.CmdID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

bool CmdID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.CmdID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.CmdID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.CmdID)
  return false;
#undef DO_
}

void CmdID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.CmdID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.CmdID)
}

::google::protobuf::uint8* CmdID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.CmdID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.CmdID)
  return target;
}

size_t CmdID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.CmdID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.CmdID)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.CmdID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.CmdID)
    MergeFrom(*source);
  }
}

void CmdID::MergeFrom(const CmdID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.CmdID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void CmdID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.CmdID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdID::CopyFrom(const CmdID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.CmdID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdID::IsInitialized() const {
  return true;
}

void CmdID::Swap(CmdID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdID::InternalSwap(CmdID* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(seq_, other->seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdID::GetMetadata() const {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdID

// uint64 node_id = 1;
void CmdID::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CmdID::node_id() const {
  // @@protoc_insertion_point(field_get:dspb.CmdID.node_id)
  return node_id_;
}
void CmdID::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.CmdID.node_id)
}

// uint64 seq = 2;
void CmdID::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CmdID::seq() const {
  // @@protoc_insertion_point(field_get:dspb.CmdID.seq)
  return seq_;
}
void CmdID::set_seq(::google::protobuf::uint64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:dspb.CmdID.seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCmdIdFieldNumber;
const int Command::kCmdTypeFieldNumber;
const int Command::kVerifyEpochFieldNumber;
const int Command::kTxnPrepareReqFieldNumber;
const int Command::kTxnDecideReqFieldNumber;
const int Command::kTxnClearupReqFieldNumber;
const int Command::kKvGetReqFieldNumber;
const int Command::kKvPutReqFieldNumber;
const int Command::kKvDeleteReqFieldNumber;
const int Command::kSplitCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd_id()) {
    cmd_id_ = new ::dspb::CmdID(*from.cmd_id_);
  } else {
    cmd_id_ = NULL;
  }
  if (from.has_verify_epoch()) {
    verify_epoch_ = new ::basepb::RangeEpoch(*from.verify_epoch_);
  } else {
    verify_epoch_ = NULL;
  }
  if (from.has_txn_prepare_req()) {
    txn_prepare_req_ = new ::dspb::PrepareRequest(*from.txn_prepare_req_);
  } else {
    txn_prepare_req_ = NULL;
  }
  if (from.has_txn_decide_req()) {
    txn_decide_req_ = new ::dspb::DecideRequest(*from.txn_decide_req_);
  } else {
    txn_decide_req_ = NULL;
  }
  if (from.has_txn_clearup_req()) {
    txn_clearup_req_ = new ::dspb::ClearupRequest(*from.txn_clearup_req_);
  } else {
    txn_clearup_req_ = NULL;
  }
  if (from.has_kv_get_req()) {
    kv_get_req_ = new ::dspb::KvGetRequest(*from.kv_get_req_);
  } else {
    kv_get_req_ = NULL;
  }
  if (from.has_kv_put_req()) {
    kv_put_req_ = new ::dspb::KvPutRequest(*from.kv_put_req_);
  } else {
    kv_put_req_ = NULL;
  }
  if (from.has_kv_delete_req()) {
    kv_delete_req_ = new ::dspb::KvDeleteRequest(*from.kv_delete_req_);
  } else {
    kv_delete_req_ = NULL;
  }
  if (from.has_split_cmd()) {
    split_cmd_ = new ::dspb::SplitCommand(*from.split_cmd_);
  } else {
    split_cmd_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:dspb.Command)
}

void Command::SharedCtor() {
  ::memset(&cmd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&cmd_id_)) + sizeof(cmd_type_));
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:dspb.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != internal_default_instance()) delete cmd_id_;
  if (this != internal_default_instance()) delete verify_epoch_;
  if (this != internal_default_instance()) delete txn_prepare_req_;
  if (this != internal_default_instance()) delete txn_decide_req_;
  if (this != internal_default_instance()) delete txn_clearup_req_;
  if (this != internal_default_instance()) delete kv_get_req_;
  if (this != internal_default_instance()) delete kv_put_req_;
  if (this != internal_default_instance()) delete kv_delete_req_;
  if (this != internal_default_instance()) delete split_cmd_;
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cmd_id_ != NULL) {
    delete cmd_id_;
  }
  cmd_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) {
    delete verify_epoch_;
  }
  verify_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_prepare_req_ != NULL) {
    delete txn_prepare_req_;
  }
  txn_prepare_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_decide_req_ != NULL) {
    delete txn_decide_req_;
  }
  txn_decide_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_clearup_req_ != NULL) {
    delete txn_clearup_req_;
  }
  txn_clearup_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_get_req_ != NULL) {
    delete kv_get_req_;
  }
  kv_get_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_put_req_ != NULL) {
    delete kv_put_req_;
  }
  kv_put_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_delete_req_ != NULL) {
    delete kv_delete_req_;
  }
  kv_delete_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_cmd_ != NULL) {
    delete split_cmd_;
  }
  split_cmd_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.CmdID cmd_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.CmdType cmd_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::dspb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch verify_epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.PrepareRequest txn_prepare_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_prepare_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.DecideRequest txn_decide_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_decide_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ClearupRequest txn_clearup_req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_clearup_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvGetRequest kv_get_req = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_get_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvPutRequest kv_put_req = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_put_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvDeleteRequest kv_delete_req = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_delete_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SplitCommand split_cmd = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.CmdID cmd_id = 1;
  if (this->has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cmd_id_, output);
  }

  // .dspb.CmdType cmd_type = 2;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd_type(), output);
  }

  // .basepb.RangeEpoch verify_epoch = 3;
  if (this->has_verify_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->verify_epoch_, output);
  }

  // .dspb.PrepareRequest txn_prepare_req = 4;
  if (this->has_txn_prepare_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->txn_prepare_req_, output);
  }

  // .dspb.DecideRequest txn_decide_req = 5;
  if (this->has_txn_decide_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->txn_decide_req_, output);
  }

  // .dspb.ClearupRequest txn_clearup_req = 6;
  if (this->has_txn_clearup_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->txn_clearup_req_, output);
  }

  // .dspb.KvGetRequest kv_get_req = 20;
  if (this->has_kv_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->kv_get_req_, output);
  }

  // .dspb.KvPutRequest kv_put_req = 21;
  if (this->has_kv_put_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->kv_put_req_, output);
  }

  // .dspb.KvDeleteRequest kv_delete_req = 22;
  if (this->has_kv_delete_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->kv_delete_req_, output);
  }

  // .dspb.SplitCommand split_cmd = 100;
  if (this->has_split_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->split_cmd_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.CmdID cmd_id = 1;
  if (this->has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cmd_id_, deterministic, target);
  }

  // .dspb.CmdType cmd_type = 2;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd_type(), target);
  }

  // .basepb.RangeEpoch verify_epoch = 3;
  if (this->has_verify_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->verify_epoch_, deterministic, target);
  }

  // .dspb.PrepareRequest txn_prepare_req = 4;
  if (this->has_txn_prepare_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->txn_prepare_req_, deterministic, target);
  }

  // .dspb.DecideRequest txn_decide_req = 5;
  if (this->has_txn_decide_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->txn_decide_req_, deterministic, target);
  }

  // .dspb.ClearupRequest txn_clearup_req = 6;
  if (this->has_txn_clearup_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->txn_clearup_req_, deterministic, target);
  }

  // .dspb.KvGetRequest kv_get_req = 20;
  if (this->has_kv_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->kv_get_req_, deterministic, target);
  }

  // .dspb.KvPutRequest kv_put_req = 21;
  if (this->has_kv_put_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->kv_put_req_, deterministic, target);
  }

  // .dspb.KvDeleteRequest kv_delete_req = 22;
  if (this->has_kv_delete_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->kv_delete_req_, deterministic, target);
  }

  // .dspb.SplitCommand split_cmd = 100;
  if (this->has_split_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->split_cmd_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.CmdID cmd_id = 1;
  if (this->has_cmd_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_id_);
  }

  // .basepb.RangeEpoch verify_epoch = 3;
  if (this->has_verify_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_epoch_);
  }

  // .dspb.PrepareRequest txn_prepare_req = 4;
  if (this->has_txn_prepare_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_prepare_req_);
  }

  // .dspb.DecideRequest txn_decide_req = 5;
  if (this->has_txn_decide_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_decide_req_);
  }

  // .dspb.ClearupRequest txn_clearup_req = 6;
  if (this->has_txn_clearup_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_clearup_req_);
  }

  // .dspb.KvGetRequest kv_get_req = 20;
  if (this->has_kv_get_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_get_req_);
  }

  // .dspb.KvPutRequest kv_put_req = 21;
  if (this->has_kv_put_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_put_req_);
  }

  // .dspb.KvDeleteRequest kv_delete_req = 22;
  if (this->has_kv_delete_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_delete_req_);
  }

  // .dspb.SplitCommand split_cmd = 100;
  if (this->has_split_cmd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_cmd_);
  }

  // .dspb.CmdType cmd_type = 2;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd_id()) {
    mutable_cmd_id()->::dspb::CmdID::MergeFrom(from.cmd_id());
  }
  if (from.has_verify_epoch()) {
    mutable_verify_epoch()->::basepb::RangeEpoch::MergeFrom(from.verify_epoch());
  }
  if (from.has_txn_prepare_req()) {
    mutable_txn_prepare_req()->::dspb::PrepareRequest::MergeFrom(from.txn_prepare_req());
  }
  if (from.has_txn_decide_req()) {
    mutable_txn_decide_req()->::dspb::DecideRequest::MergeFrom(from.txn_decide_req());
  }
  if (from.has_txn_clearup_req()) {
    mutable_txn_clearup_req()->::dspb::ClearupRequest::MergeFrom(from.txn_clearup_req());
  }
  if (from.has_kv_get_req()) {
    mutable_kv_get_req()->::dspb::KvGetRequest::MergeFrom(from.kv_get_req());
  }
  if (from.has_kv_put_req()) {
    mutable_kv_put_req()->::dspb::KvPutRequest::MergeFrom(from.kv_put_req());
  }
  if (from.has_kv_delete_req()) {
    mutable_kv_delete_req()->::dspb::KvDeleteRequest::MergeFrom(from.kv_delete_req());
  }
  if (from.has_split_cmd()) {
    mutable_split_cmd()->::dspb::SplitCommand::MergeFrom(from.split_cmd());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(cmd_id_, other->cmd_id_);
  swap(verify_epoch_, other->verify_epoch_);
  swap(txn_prepare_req_, other->txn_prepare_req_);
  swap(txn_decide_req_, other->txn_decide_req_);
  swap(txn_clearup_req_, other->txn_clearup_req_);
  swap(kv_get_req_, other->kv_get_req_);
  swap(kv_put_req_, other->kv_put_req_);
  swap(kv_delete_req_, other->kv_delete_req_);
  swap(split_cmd_, other->split_cmd_);
  swap(cmd_type_, other->cmd_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// .dspb.CmdID cmd_id = 1;
bool Command::has_cmd_id() const {
  return this != internal_default_instance() && cmd_id_ != NULL;
}
void Command::clear_cmd_id() {
  if (GetArenaNoVirtual() == NULL && cmd_id_ != NULL) delete cmd_id_;
  cmd_id_ = NULL;
}
const ::dspb::CmdID& Command::cmd_id() const {
  const ::dspb::CmdID* p = cmd_id_;
  // @@protoc_insertion_point(field_get:dspb.Command.cmd_id)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::CmdID*>(
      &::dspb::_CmdID_default_instance_);
}
::dspb::CmdID* Command::mutable_cmd_id() {
  
  if (cmd_id_ == NULL) {
    cmd_id_ = new ::dspb::CmdID;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.cmd_id)
  return cmd_id_;
}
::dspb::CmdID* Command::release_cmd_id() {
  // @@protoc_insertion_point(field_release:dspb.Command.cmd_id)
  
  ::dspb::CmdID* temp = cmd_id_;
  cmd_id_ = NULL;
  return temp;
}
void Command::set_allocated_cmd_id(::dspb::CmdID* cmd_id) {
  delete cmd_id_;
  cmd_id_ = cmd_id;
  if (cmd_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.cmd_id)
}

// .dspb.CmdType cmd_type = 2;
void Command::clear_cmd_type() {
  cmd_type_ = 0;
}
::dspb::CmdType Command::cmd_type() const {
  // @@protoc_insertion_point(field_get:dspb.Command.cmd_type)
  return static_cast< ::dspb::CmdType >(cmd_type_);
}
void Command::set_cmd_type(::dspb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.Command.cmd_type)
}

// .basepb.RangeEpoch verify_epoch = 3;
bool Command::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
void Command::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
const ::basepb::RangeEpoch& Command::verify_epoch() const {
  const ::basepb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:dspb.Command.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* Command::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.verify_epoch)
  return verify_epoch_;
}
::basepb::RangeEpoch* Command::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:dspb.Command.verify_epoch)
  
  ::basepb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
void Command::set_allocated_verify_epoch(::basepb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.verify_epoch)
}

// .dspb.PrepareRequest txn_prepare_req = 4;
bool Command::has_txn_prepare_req() const {
  return this != internal_default_instance() && txn_prepare_req_ != NULL;
}
void Command::clear_txn_prepare_req() {
  if (GetArenaNoVirtual() == NULL && txn_prepare_req_ != NULL) delete txn_prepare_req_;
  txn_prepare_req_ = NULL;
}
const ::dspb::PrepareRequest& Command::txn_prepare_req() const {
  const ::dspb::PrepareRequest* p = txn_prepare_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_prepare_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::PrepareRequest*>(
      &::dspb::_PrepareRequest_default_instance_);
}
::dspb::PrepareRequest* Command::mutable_txn_prepare_req() {
  
  if (txn_prepare_req_ == NULL) {
    txn_prepare_req_ = new ::dspb::PrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_prepare_req)
  return txn_prepare_req_;
}
::dspb::PrepareRequest* Command::release_txn_prepare_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_prepare_req)
  
  ::dspb::PrepareRequest* temp = txn_prepare_req_;
  txn_prepare_req_ = NULL;
  return temp;
}
void Command::set_allocated_txn_prepare_req(::dspb::PrepareRequest* txn_prepare_req) {
  delete txn_prepare_req_;
  txn_prepare_req_ = txn_prepare_req;
  if (txn_prepare_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_prepare_req)
}

// .dspb.DecideRequest txn_decide_req = 5;
bool Command::has_txn_decide_req() const {
  return this != internal_default_instance() && txn_decide_req_ != NULL;
}
void Command::clear_txn_decide_req() {
  if (GetArenaNoVirtual() == NULL && txn_decide_req_ != NULL) delete txn_decide_req_;
  txn_decide_req_ = NULL;
}
const ::dspb::DecideRequest& Command::txn_decide_req() const {
  const ::dspb::DecideRequest* p = txn_decide_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_decide_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::DecideRequest*>(
      &::dspb::_DecideRequest_default_instance_);
}
::dspb::DecideRequest* Command::mutable_txn_decide_req() {
  
  if (txn_decide_req_ == NULL) {
    txn_decide_req_ = new ::dspb::DecideRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_decide_req)
  return txn_decide_req_;
}
::dspb::DecideRequest* Command::release_txn_decide_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_decide_req)
  
  ::dspb::DecideRequest* temp = txn_decide_req_;
  txn_decide_req_ = NULL;
  return temp;
}
void Command::set_allocated_txn_decide_req(::dspb::DecideRequest* txn_decide_req) {
  delete txn_decide_req_;
  txn_decide_req_ = txn_decide_req;
  if (txn_decide_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_decide_req)
}

// .dspb.ClearupRequest txn_clearup_req = 6;
bool Command::has_txn_clearup_req() const {
  return this != internal_default_instance() && txn_clearup_req_ != NULL;
}
void Command::clear_txn_clearup_req() {
  if (GetArenaNoVirtual() == NULL && txn_clearup_req_ != NULL) delete txn_clearup_req_;
  txn_clearup_req_ = NULL;
}
const ::dspb::ClearupRequest& Command::txn_clearup_req() const {
  const ::dspb::ClearupRequest* p = txn_clearup_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_clearup_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ClearupRequest*>(
      &::dspb::_ClearupRequest_default_instance_);
}
::dspb::ClearupRequest* Command::mutable_txn_clearup_req() {
  
  if (txn_clearup_req_ == NULL) {
    txn_clearup_req_ = new ::dspb::ClearupRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_clearup_req)
  return txn_clearup_req_;
}
::dspb::ClearupRequest* Command::release_txn_clearup_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_clearup_req)
  
  ::dspb::ClearupRequest* temp = txn_clearup_req_;
  txn_clearup_req_ = NULL;
  return temp;
}
void Command::set_allocated_txn_clearup_req(::dspb::ClearupRequest* txn_clearup_req) {
  delete txn_clearup_req_;
  txn_clearup_req_ = txn_clearup_req;
  if (txn_clearup_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_clearup_req)
}

// .dspb.KvGetRequest kv_get_req = 20;
bool Command::has_kv_get_req() const {
  return this != internal_default_instance() && kv_get_req_ != NULL;
}
void Command::clear_kv_get_req() {
  if (GetArenaNoVirtual() == NULL && kv_get_req_ != NULL) delete kv_get_req_;
  kv_get_req_ = NULL;
}
const ::dspb::KvGetRequest& Command::kv_get_req() const {
  const ::dspb::KvGetRequest* p = kv_get_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.kv_get_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KvGetRequest*>(
      &::dspb::_KvGetRequest_default_instance_);
}
::dspb::KvGetRequest* Command::mutable_kv_get_req() {
  
  if (kv_get_req_ == NULL) {
    kv_get_req_ = new ::dspb::KvGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.kv_get_req)
  return kv_get_req_;
}
::dspb::KvGetRequest* Command::release_kv_get_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.kv_get_req)
  
  ::dspb::KvGetRequest* temp = kv_get_req_;
  kv_get_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_get_req(::dspb::KvGetRequest* kv_get_req) {
  delete kv_get_req_;
  kv_get_req_ = kv_get_req;
  if (kv_get_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.kv_get_req)
}

// .dspb.KvPutRequest kv_put_req = 21;
bool Command::has_kv_put_req() const {
  return this != internal_default_instance() && kv_put_req_ != NULL;
}
void Command::clear_kv_put_req() {
  if (GetArenaNoVirtual() == NULL && kv_put_req_ != NULL) delete kv_put_req_;
  kv_put_req_ = NULL;
}
const ::dspb::KvPutRequest& Command::kv_put_req() const {
  const ::dspb::KvPutRequest* p = kv_put_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.kv_put_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KvPutRequest*>(
      &::dspb::_KvPutRequest_default_instance_);
}
::dspb::KvPutRequest* Command::mutable_kv_put_req() {
  
  if (kv_put_req_ == NULL) {
    kv_put_req_ = new ::dspb::KvPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.kv_put_req)
  return kv_put_req_;
}
::dspb::KvPutRequest* Command::release_kv_put_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.kv_put_req)
  
  ::dspb::KvPutRequest* temp = kv_put_req_;
  kv_put_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_put_req(::dspb::KvPutRequest* kv_put_req) {
  delete kv_put_req_;
  kv_put_req_ = kv_put_req;
  if (kv_put_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.kv_put_req)
}

// .dspb.KvDeleteRequest kv_delete_req = 22;
bool Command::has_kv_delete_req() const {
  return this != internal_default_instance() && kv_delete_req_ != NULL;
}
void Command::clear_kv_delete_req() {
  if (GetArenaNoVirtual() == NULL && kv_delete_req_ != NULL) delete kv_delete_req_;
  kv_delete_req_ = NULL;
}
const ::dspb::KvDeleteRequest& Command::kv_delete_req() const {
  const ::dspb::KvDeleteRequest* p = kv_delete_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.kv_delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KvDeleteRequest*>(
      &::dspb::_KvDeleteRequest_default_instance_);
}
::dspb::KvDeleteRequest* Command::mutable_kv_delete_req() {
  
  if (kv_delete_req_ == NULL) {
    kv_delete_req_ = new ::dspb::KvDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.kv_delete_req)
  return kv_delete_req_;
}
::dspb::KvDeleteRequest* Command::release_kv_delete_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.kv_delete_req)
  
  ::dspb::KvDeleteRequest* temp = kv_delete_req_;
  kv_delete_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_delete_req(::dspb::KvDeleteRequest* kv_delete_req) {
  delete kv_delete_req_;
  kv_delete_req_ = kv_delete_req;
  if (kv_delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.kv_delete_req)
}

// .dspb.SplitCommand split_cmd = 100;
bool Command::has_split_cmd() const {
  return this != internal_default_instance() && split_cmd_ != NULL;
}
void Command::clear_split_cmd() {
  if (GetArenaNoVirtual() == NULL && split_cmd_ != NULL) delete split_cmd_;
  split_cmd_ = NULL;
}
const ::dspb::SplitCommand& Command::split_cmd() const {
  const ::dspb::SplitCommand* p = split_cmd_;
  // @@protoc_insertion_point(field_get:dspb.Command.split_cmd)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SplitCommand*>(
      &::dspb::_SplitCommand_default_instance_);
}
::dspb::SplitCommand* Command::mutable_split_cmd() {
  
  if (split_cmd_ == NULL) {
    split_cmd_ = new ::dspb::SplitCommand;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.split_cmd)
  return split_cmd_;
}
::dspb::SplitCommand* Command::release_split_cmd() {
  // @@protoc_insertion_point(field_release:dspb.Command.split_cmd)
  
  ::dspb::SplitCommand* temp = split_cmd_;
  split_cmd_ = NULL;
  return temp;
}
void Command::set_allocated_split_cmd(::dspb::SplitCommand* split_cmd) {
  delete split_cmd_;
  split_cmd_ = split_cmd;
  if (split_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.split_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerTask::kVerifyEpochFieldNumber;
const int PeerTask::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerTask::PeerTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.PeerTask)
}
PeerTask::PeerTask(const PeerTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_verify_epoch()) {
    verify_epoch_ = new ::basepb::RangeEpoch(*from.verify_epoch_);
  } else {
    verify_epoch_ = NULL;
  }
  if (from.has_peer()) {
    peer_ = new ::basepb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.PeerTask)
}

void PeerTask::SharedCtor() {
  ::memset(&verify_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_) -
      reinterpret_cast<char*>(&verify_epoch_)) + sizeof(peer_));
  _cached_size_ = 0;
}

PeerTask::~PeerTask() {
  // @@protoc_insertion_point(destructor:dspb.PeerTask)
  SharedDtor();
}

void PeerTask::SharedDtor() {
  if (this != internal_default_instance()) delete verify_epoch_;
  if (this != internal_default_instance()) delete peer_;
}

void PeerTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerTask::descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerTask& PeerTask::default_instance() {
  protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerTask* PeerTask::New(::google::protobuf::Arena* arena) const {
  PeerTask* n = new PeerTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.PeerTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) {
    delete verify_epoch_;
  }
  verify_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool PeerTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.PeerTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.RangeEpoch verify_epoch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.PeerTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.PeerTask)
  return false;
#undef DO_
}

void PeerTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.PeerTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.RangeEpoch verify_epoch = 1;
  if (this->has_verify_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->verify_epoch_, output);
  }

  // .basepb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.PeerTask)
}

::google::protobuf::uint8* PeerTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.PeerTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.RangeEpoch verify_epoch = 1;
  if (this->has_verify_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->verify_epoch_, deterministic, target);
  }

  // .basepb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.PeerTask)
  return target;
}

size_t PeerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.PeerTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.RangeEpoch verify_epoch = 1;
  if (this->has_verify_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_epoch_);
  }

  // .basepb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.PeerTask)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.PeerTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.PeerTask)
    MergeFrom(*source);
  }
}

void PeerTask::MergeFrom(const PeerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.PeerTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_verify_epoch()) {
    mutable_verify_epoch()->::basepb::RangeEpoch::MergeFrom(from.verify_epoch());
  }
  if (from.has_peer()) {
    mutable_peer()->::basepb::Peer::MergeFrom(from.peer());
  }
}

void PeerTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.PeerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerTask::CopyFrom(const PeerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.PeerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerTask::IsInitialized() const {
  return true;
}

void PeerTask::Swap(PeerTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerTask::InternalSwap(PeerTask* other) {
  using std::swap;
  swap(verify_epoch_, other->verify_epoch_);
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerTask::GetMetadata() const {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerTask

// .basepb.RangeEpoch verify_epoch = 1;
bool PeerTask::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
void PeerTask::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
const ::basepb::RangeEpoch& PeerTask::verify_epoch() const {
  const ::basepb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:dspb.PeerTask.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* PeerTask::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.PeerTask.verify_epoch)
  return verify_epoch_;
}
::basepb::RangeEpoch* PeerTask::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:dspb.PeerTask.verify_epoch)
  
  ::basepb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
void PeerTask::set_allocated_verify_epoch(::basepb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.PeerTask.verify_epoch)
}

// .basepb.Peer peer = 2;
bool PeerTask::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void PeerTask::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::basepb::Peer& PeerTask::peer() const {
  const ::basepb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:dspb.PeerTask.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
::basepb::Peer* PeerTask::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.PeerTask.peer)
  return peer_;
}
::basepb::Peer* PeerTask::release_peer() {
  // @@protoc_insertion_point(field_release:dspb.PeerTask.peer)
  
  ::basepb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void PeerTask::set_allocated_peer(::basepb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.PeerTask.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotKVPair::kKeyFieldNumber;
const int SnapshotKVPair::kValueFieldNumber;
const int SnapshotKVPair::kCfTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotKVPair::SnapshotKVPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SnapshotKVPair)
}
SnapshotKVPair::SnapshotKVPair(const SnapshotKVPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  cf_type_ = from.cf_type_;
  // @@protoc_insertion_point(copy_constructor:dspb.SnapshotKVPair)
}

void SnapshotKVPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_type_ = 0;
  _cached_size_ = 0;
}

SnapshotKVPair::~SnapshotKVPair() {
  // @@protoc_insertion_point(destructor:dspb.SnapshotKVPair)
  SharedDtor();
}

void SnapshotKVPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotKVPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotKVPair::descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotKVPair& SnapshotKVPair::default_instance() {
  protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotKVPair* SnapshotKVPair::New(::google::protobuf::Arena* arena) const {
  SnapshotKVPair* n = new SnapshotKVPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotKVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SnapshotKVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_type_ = 0;
  _internal_metadata_.Clear();
}

bool SnapshotKVPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SnapshotKVPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.CFType cf_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cf_type(static_cast< ::dspb::CFType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SnapshotKVPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SnapshotKVPair)
  return false;
#undef DO_
}

void SnapshotKVPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SnapshotKVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // .dspb.CFType cf_type = 3;
  if (this->cf_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cf_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SnapshotKVPair)
}

::google::protobuf::uint8* SnapshotKVPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SnapshotKVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // .dspb.CFType cf_type = 3;
  if (this->cf_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cf_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SnapshotKVPair)
  return target;
}

size_t SnapshotKVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SnapshotKVPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .dspb.CFType cf_type = 3;
  if (this->cf_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cf_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotKVPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SnapshotKVPair)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotKVPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotKVPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SnapshotKVPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SnapshotKVPair)
    MergeFrom(*source);
  }
}

void SnapshotKVPair::MergeFrom(const SnapshotKVPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SnapshotKVPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.cf_type() != 0) {
    set_cf_type(from.cf_type());
  }
}

void SnapshotKVPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SnapshotKVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotKVPair::CopyFrom(const SnapshotKVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SnapshotKVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotKVPair::IsInitialized() const {
  return true;
}

void SnapshotKVPair::Swap(SnapshotKVPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotKVPair::InternalSwap(SnapshotKVPair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(cf_type_, other->cf_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotKVPair::GetMetadata() const {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotKVPair

// bytes key = 1;
void SnapshotKVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotKVPair::key() const {
  // @@protoc_insertion_point(field_get:dspb.SnapshotKVPair.key)
  return key_.GetNoArena();
}
void SnapshotKVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SnapshotKVPair.key)
}
#if LANG_CXX11
void SnapshotKVPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SnapshotKVPair.key)
}
#endif
void SnapshotKVPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SnapshotKVPair.key)
}
void SnapshotKVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SnapshotKVPair.key)
}
::std::string* SnapshotKVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SnapshotKVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotKVPair::release_key() {
  // @@protoc_insertion_point(field_release:dspb.SnapshotKVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotKVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SnapshotKVPair.key)
}

// bytes value = 2;
void SnapshotKVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotKVPair::value() const {
  // @@protoc_insertion_point(field_get:dspb.SnapshotKVPair.value)
  return value_.GetNoArena();
}
void SnapshotKVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SnapshotKVPair.value)
}
#if LANG_CXX11
void SnapshotKVPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SnapshotKVPair.value)
}
#endif
void SnapshotKVPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SnapshotKVPair.value)
}
void SnapshotKVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SnapshotKVPair.value)
}
::std::string* SnapshotKVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SnapshotKVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotKVPair::release_value() {
  // @@protoc_insertion_point(field_release:dspb.SnapshotKVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotKVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.SnapshotKVPair.value)
}

// .dspb.CFType cf_type = 3;
void SnapshotKVPair::clear_cf_type() {
  cf_type_ = 0;
}
::dspb::CFType SnapshotKVPair::cf_type() const {
  // @@protoc_insertion_point(field_get:dspb.SnapshotKVPair.cf_type)
  return static_cast< ::dspb::CFType >(cf_type_);
}
void SnapshotKVPair::set_cf_type(::dspb::CFType value) {
  
  cf_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.SnapshotKVPair.cf_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotContext::kMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotContext::SnapshotContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SnapshotContext)
}
SnapshotContext::SnapshotContext(const SnapshotContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::basepb::Range(*from.meta_);
  } else {
    meta_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.SnapshotContext)
}

void SnapshotContext::SharedCtor() {
  meta_ = NULL;
  _cached_size_ = 0;
}

SnapshotContext::~SnapshotContext() {
  // @@protoc_insertion_point(destructor:dspb.SnapshotContext)
  SharedDtor();
}

void SnapshotContext::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void SnapshotContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotContext::descriptor() {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotContext& SnapshotContext::default_instance() {
  protobuf_dspb_2fraft_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotContext* SnapshotContext::New(::google::protobuf::Arena* arena) const {
  SnapshotContext* n = new SnapshotContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotContext::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SnapshotContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  _internal_metadata_.Clear();
}

bool SnapshotContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SnapshotContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.Range meta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SnapshotContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SnapshotContext)
  return false;
#undef DO_
}

void SnapshotContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SnapshotContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range meta = 1;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SnapshotContext)
}

::google::protobuf::uint8* SnapshotContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SnapshotContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range meta = 1;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->meta_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SnapshotContext)
  return target;
}

size_t SnapshotContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SnapshotContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.Range meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SnapshotContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SnapshotContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SnapshotContext)
    MergeFrom(*source);
  }
}

void SnapshotContext::MergeFrom(const SnapshotContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SnapshotContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::basepb::Range::MergeFrom(from.meta());
  }
}

void SnapshotContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SnapshotContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotContext::CopyFrom(const SnapshotContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SnapshotContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotContext::IsInitialized() const {
  return true;
}

void SnapshotContext::Swap(SnapshotContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotContext::InternalSwap(SnapshotContext* other) {
  using std::swap;
  swap(meta_, other->meta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotContext::GetMetadata() const {
  protobuf_dspb_2fraft_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fraft_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotContext

// .basepb.Range meta = 1;
bool SnapshotContext::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void SnapshotContext::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::basepb::Range& SnapshotContext::meta() const {
  const ::basepb::Range* p = meta_;
  // @@protoc_insertion_point(field_get:dspb.SnapshotContext.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* SnapshotContext::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SnapshotContext.meta)
  return meta_;
}
::basepb::Range* SnapshotContext::release_meta() {
  // @@protoc_insertion_point(field_release:dspb.SnapshotContext.meta)
  
  ::basepb::Range* temp = meta_;
  meta_ = NULL;
  return temp;
}
void SnapshotContext::set_allocated_meta(::basepb::Range* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SnapshotContext.meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
