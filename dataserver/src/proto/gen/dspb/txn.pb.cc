// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/txn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/txn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class TxnIntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnIntent>
     _instance;
} _TxnIntent_default_instance_;
class TxnValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnValue>
     _instance;
} _TxnValue_default_instance_;
class LockInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockInfo>
     _instance;
} _LockInfo_default_instance_;
class LockErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockError>
     _instance;
} _LockError_default_instance_;
class UnexpectedVerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnexpectedVer>
     _instance;
} _UnexpectedVer_default_instance_;
class StatusConflictDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StatusConflict>
     _instance;
} _StatusConflict_default_instance_;
class ServerErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerError>
     _instance;
} _ServerError_default_instance_;
class NotFoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NotFound>
     _instance;
} _NotFound_default_instance_;
class NotUniqueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NotUnique>
     _instance;
} _NotUnique_default_instance_;
class TxnConflictDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnConflict>
     _instance;
} _TxnConflict_default_instance_;
class TxnErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnError>
     _instance;
} _TxnError_default_instance_;
class PrepareRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PrepareRequest>
     _instance;
} _PrepareRequest_default_instance_;
class PrepareResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PrepareResponse>
     _instance;
} _PrepareResponse_default_instance_;
class DecideRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DecideRequest>
     _instance;
} _DecideRequest_default_instance_;
class DecideResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DecideResponse>
     _instance;
} _DecideResponse_default_instance_;
class ClearupRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearupRequest>
     _instance;
} _ClearupRequest_default_instance_;
class ClearupResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearupResponse>
     _instance;
} _ClearupResponse_default_instance_;
class GetLockInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetLockInfoRequest>
     _instance;
} _GetLockInfoRequest_default_instance_;
class GetLockInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetLockInfoResponse>
     _instance;
} _GetLockInfoResponse_default_instance_;
class SelectFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectField>
     _instance;
} _SelectField_default_instance_;
class ScopeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Scope>
     _instance;
} _Scope_default_instance_;
class SelectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectRequest>
     _instance;
} _SelectRequest_default_instance_;
class RowValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RowValue>
     _instance;
} _RowValue_default_instance_;
class RowIntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RowIntent>
     _instance;
} _RowIntent_default_instance_;
class RowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Row>
     _instance;
} _Row_default_instance_;
class SelectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectResponse>
     _instance;
} _SelectResponse_default_instance_;
class SelectFlowRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectFlowRequest>
     _instance;
} _SelectFlowRequest_default_instance_;
class SelectFlowResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectFlowResponse>
     _instance;
} _SelectFlowResponse_default_instance_;
class ValueIntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ValueIntent>
     _instance;
} _ValueIntent_default_instance_;
class KeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
     _instance;
} _KeyValue_default_instance_;
class ScanRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScanRequest>
     _instance;
} _ScanRequest_default_instance_;
class ScanResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScanResponse>
     _instance;
} _ScanResponse_default_instance_;

namespace protobuf_dspb_2ftxn_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[32];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, typ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, check_unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, expected_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, is_primary_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, intent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, expired_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, txn_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, secondary_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, is_primary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, secondary_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockError, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockError, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, expected_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, actual_ver_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusConflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusConflict, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerError, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerError, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFound, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotUnique, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnConflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnConflict, expected_txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnConflict, actual_txn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, err_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, server_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, lock_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, unexpected_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, status_conflict_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, not_found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, not_unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, txn_conflict_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, intents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, lock_ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, secondary_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, strict_check_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, errors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, recover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, is_primary_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideResponse, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideResponse, secondary_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupRequest, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupRequest, primary_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupResponse, err_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoRequest, txn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoResponse, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoResponse, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, typ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, aggre_func_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, column_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scope, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scope, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, field_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, where_expr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, intent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowRequest, processors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowRequest, output_offsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowRequest, gather_trace_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowResponse, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowResponse, last_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectFlowResponse, traces_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueIntent, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueIntent, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueIntent, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueIntent, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueIntent, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, intent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, start_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, end_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, max_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, kvs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(TxnIntent)},
  { 11, -1, sizeof(TxnValue)},
  { 23, -1, sizeof(LockInfo)},
  { 34, -1, sizeof(LockError)},
  { 41, -1, sizeof(UnexpectedVer)},
  { 49, -1, sizeof(StatusConflict)},
  { 55, -1, sizeof(ServerError)},
  { 62, -1, sizeof(NotFound)},
  { 68, -1, sizeof(NotUnique)},
  { 74, -1, sizeof(TxnConflict)},
  { 81, -1, sizeof(TxnError)},
  { 94, -1, sizeof(PrepareRequest)},
  { 106, -1, sizeof(PrepareResponse)},
  { 112, -1, sizeof(DecideRequest)},
  { 122, -1, sizeof(DecideResponse)},
  { 129, -1, sizeof(ClearupRequest)},
  { 136, -1, sizeof(ClearupResponse)},
  { 142, -1, sizeof(GetLockInfoRequest)},
  { 149, -1, sizeof(GetLockInfoResponse)},
  { 156, -1, sizeof(SelectField)},
  { 164, -1, sizeof(Scope)},
  { 171, -1, sizeof(SelectRequest)},
  { 181, -1, sizeof(RowValue)},
  { 188, -1, sizeof(RowIntent)},
  { 198, -1, sizeof(Row)},
  { 206, -1, sizeof(SelectResponse)},
  { 214, -1, sizeof(SelectFlowRequest)},
  { 222, -1, sizeof(SelectFlowResponse)},
  { 231, -1, sizeof(ValueIntent)},
  { 241, -1, sizeof(KeyValue)},
  { 249, -1, sizeof(ScanRequest)},
  { 257, -1, sizeof(ScanResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnexpectedVer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusConflict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotFound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotUnique_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnConflict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrepareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecideRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecideResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLockInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLockInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RowValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RowIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectFlowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectFlowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValueIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/txn.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 32);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::dspb::protobuf_dspb_2fexpr_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  _TxnIntent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnIntent_default_instance_);_TxnValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnValue_default_instance_);_LockInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockInfo_default_instance_);_LockError_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockError_default_instance_);_UnexpectedVer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnexpectedVer_default_instance_);_StatusConflict_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StatusConflict_default_instance_);_ServerError_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerError_default_instance_);_NotFound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NotFound_default_instance_);_NotUnique_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NotUnique_default_instance_);_TxnConflict_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnConflict_default_instance_);_TxnError_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnError_default_instance_);_PrepareRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PrepareRequest_default_instance_);_PrepareResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PrepareResponse_default_instance_);_DecideRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DecideRequest_default_instance_);_DecideResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DecideResponse_default_instance_);_ClearupRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearupRequest_default_instance_);_ClearupResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearupResponse_default_instance_);_GetLockInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetLockInfoRequest_default_instance_);_GetLockInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetLockInfoResponse_default_instance_);_SelectField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectField_default_instance_);_Scope_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Scope_default_instance_);_SelectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectRequest_default_instance_);_RowValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RowValue_default_instance_);_RowIntent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RowIntent_default_instance_);_Row_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Row_default_instance_);_SelectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectResponse_default_instance_);_SelectFlowRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectFlowRequest_default_instance_);_SelectFlowResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectFlowResponse_default_instance_);_ValueIntent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ValueIntent_default_instance_);_KeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyValue_default_instance_);_ScanRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScanRequest_default_instance_);_ScanResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScanResponse_default_instance_);_TxnValue_default_instance_._instance.get_mutable()->intent_ = const_cast< ::dspb::TxnIntent*>(
      ::dspb::TxnIntent::internal_default_instance());
  _LockError_default_instance_._instance.get_mutable()->info_ = const_cast< ::dspb::LockInfo*>(
      ::dspb::LockInfo::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->server_err_ = const_cast< ::dspb::ServerError*>(
      ::dspb::ServerError::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->lock_err_ = const_cast< ::dspb::LockError*>(
      ::dspb::LockError::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->unexpected_ver_ = const_cast< ::dspb::UnexpectedVer*>(
      ::dspb::UnexpectedVer::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->status_conflict_ = const_cast< ::dspb::StatusConflict*>(
      ::dspb::StatusConflict::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->not_found_ = const_cast< ::dspb::NotFound*>(
      ::dspb::NotFound::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->not_unique_ = const_cast< ::dspb::NotUnique*>(
      ::dspb::NotUnique::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->txn_conflict_ = const_cast< ::dspb::TxnConflict*>(
      ::dspb::TxnConflict::internal_default_instance());
  _DecideResponse_default_instance_._instance.get_mutable()->err_ = const_cast< ::dspb::TxnError*>(
      ::dspb::TxnError::internal_default_instance());
  _ClearupResponse_default_instance_._instance.get_mutable()->err_ = const_cast< ::dspb::TxnError*>(
      ::dspb::TxnError::internal_default_instance());
  _GetLockInfoResponse_default_instance_._instance.get_mutable()->err_ = const_cast< ::dspb::TxnError*>(
      ::dspb::TxnError::internal_default_instance());
  _GetLockInfoResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::dspb::LockInfo*>(
      ::dspb::LockInfo::internal_default_instance());
  _SelectField_default_instance_._instance.get_mutable()->column_ = const_cast< ::dspb::ColumnInfo*>(
      ::dspb::ColumnInfo::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->scope_ = const_cast< ::dspb::Scope*>(
      ::dspb::Scope::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->where_expr_ = const_cast< ::dspb::Expr*>(
      ::dspb::Expr::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::dspb::Limit*>(
      ::dspb::Limit::internal_default_instance());
  _RowIntent_default_instance_._instance.get_mutable()->value_ = const_cast< ::dspb::RowValue*>(
      ::dspb::RowValue::internal_default_instance());
  _Row_default_instance_._instance.get_mutable()->value_ = const_cast< ::dspb::RowValue*>(
      ::dspb::RowValue::internal_default_instance());
  _Row_default_instance_._instance.get_mutable()->intent_ = const_cast< ::dspb::RowIntent*>(
      ::dspb::RowIntent::internal_default_instance());
  _KeyValue_default_instance_._instance.get_mutable()->intent_ = const_cast< ::dspb::ValueIntent*>(
      ::dspb::ValueIntent::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016dspb/txn.proto\022\004dspb\032\017dspb/expr.proto\032"
      "\026dspb/processorpb.proto\"\202\001\n\tTxnIntent\022\031\n"
      "\003typ\030\001 \001(\0162\014.dspb.OpType\022\013\n\003key\030\002 \001(\014\022\r\n"
      "\005value\030\003 \001(\014\022\024\n\014check_unique\030\004 \001(\010\022\024\n\014ex"
      "pected_ver\030\005 \001(\004\022\022\n\nis_primary\030\006 \001(\010\"\262\001\n"
      "\010TxnValue\022\016\n\006txn_id\030\001 \001(\t\022\037\n\006intent\030\002 \001("
      "\0132\017.dspb.TxnIntent\022\023\n\013primary_key\030\003 \001(\014\022"
      "\022\n\nexpired_at\030\004 \001(\004\022\017\n\007version\030\005 \001(\004\022#\n\n"
      "txn_status\030\n \001(\0162\017.dspb.TxnStatus\022\026\n\016sec"
      "ondary_keys\030\013 \003(\014\"\215\001\n\010LockInfo\022\016\n\006txn_id"
      "\030\001 \001(\t\022\017\n\007timeout\030\002 \001(\010\022\022\n\nis_primary\030\n "
      "\001(\010\022\023\n\013primary_key\030\013 \001(\014\022\037\n\006status\030\014 \001(\016"
      "2\017.dspb.TxnStatus\022\026\n\016secondary_keys\030\r \003("
      "\014\"6\n\tLockError\022\013\n\003key\030\001 \001(\014\022\034\n\004info\030\002 \001("
      "\0132\016.dspb.LockInfo\"F\n\rUnexpectedVer\022\013\n\003ke"
      "y\030\001 \001(\014\022\024\n\014expected_ver\030\002 \001(\004\022\022\n\nactual_"
      "ver\030\003 \001(\004\"1\n\016StatusConflict\022\037\n\006status\030\001 "
      "\001(\0162\017.dspb.TxnStatus\"(\n\013ServerError\022\014\n\004c"
      "ode\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\027\n\010NotFound\022\013\n\003ke"
      "y\030\001 \001(\014\"\030\n\tNotUnique\022\013\n\003key\030\001 \001(\014\"=\n\013Txn"
      "Conflict\022\027\n\017expected_txn_id\030\001 \001(\t\022\025\n\ract"
      "ual_txn_id\030\002 \001(\t\"\334\003\n\010TxnError\022(\n\010err_typ"
      "e\030\001 \001(\0162\026.dspb.TxnError.ErrType\022%\n\nserve"
      "r_err\030\002 \001(\0132\021.dspb.ServerError\022!\n\010lock_e"
      "rr\030\003 \001(\0132\017.dspb.LockError\022+\n\016unexpected_"
      "ver\030\004 \001(\0132\023.dspb.UnexpectedVer\022-\n\017status"
      "_conflict\030\005 \001(\0132\024.dspb.StatusConflict\022!\n"
      "\tnot_found\030\006 \001(\0132\016.dspb.NotFound\022#\n\nnot_"
      "unique\030\007 \001(\0132\017.dspb.NotUnique\022\'\n\014txn_con"
      "flict\030\010 \001(\0132\021.dspb.TxnConflict\"\216\001\n\007ErrTy"
      "pe\022\013\n\007UNKNOWN\020\000\022\020\n\014SERVER_ERROR\020\001\022\n\n\006LOC"
      "KED\020\002\022\022\n\016UNEXPECTED_VER\020\003\022\023\n\017STATUS_CONF"
      "LICT\020\004\022\r\n\tNOT_FOUND\020\005\022\016\n\nNOT_UNIQUE\020\006\022\020\n"
      "\014TXN_CONFLICT\020\007\"\246\001\n\016PrepareRequest\022\016\n\006tx"
      "n_id\030\001 \001(\t\022\r\n\005local\030\002 \001(\010\022 \n\007intents\030\003 \003"
      "(\0132\017.dspb.TxnIntent\022\023\n\013primary_key\030\004 \001(\014"
      "\022\020\n\010lock_ttl\030\005 \001(\004\022\026\n\016secondary_keys\030\006 \003"
      "(\014\022\024\n\014strict_check\030\020 \001(\010\"1\n\017PrepareRespo"
      "nse\022\036\n\006errors\030\001 \003(\0132\016.dspb.TxnError\"s\n\rD"
      "ecideRequest\022\016\n\006txn_id\030\001 \001(\t\022\037\n\006status\030\002"
      " \001(\0162\017.dspb.TxnStatus\022\014\n\004keys\030\003 \003(\014\022\017\n\007r"
      "ecover\030\004 \001(\010\022\022\n\nis_primary\030\005 \001(\010\"E\n\016Deci"
      "deResponse\022\033\n\003err\030\001 \001(\0132\016.dspb.TxnError\022"
      "\026\n\016secondary_keys\030\002 \003(\014\"5\n\016ClearupReques"
      "t\022\016\n\006txn_id\030\001 \001(\t\022\023\n\013primary_key\030\002 \001(\014\"."
      "\n\017ClearupResponse\022\033\n\003err\030\001 \001(\0132\016.dspb.Tx"
      "nError\"1\n\022GetLockInfoRequest\022\013\n\003key\030\001 \001("
      "\014\022\016\n\006txn_id\030\002 \001(\t\"P\n\023GetLockInfoResponse"
      "\022\033\n\003err\030\001 \001(\0132\016.dspb.TxnError\022\034\n\004info\030\002 "
      "\001(\0132\016.dspb.LockInfo\"\217\001\n\013SelectField\022#\n\003t"
      "yp\030\001 \001(\0162\026.dspb.SelectField.Type\022\022\n\naggr"
      "e_func\030\002 \001(\t\022 \n\006column\030\003 \001(\0132\020.dspb.Colu"
      "mnInfo\"%\n\004Type\022\n\n\006Column\020\000\022\021\n\rAggreFunct"
      "ion\020\001\"%\n\005Scope\022\r\n\005start\030\001 \001(\014\022\r\n\005limit\030\002"
      " \001(\014\"\233\001\n\rSelectRequest\022\013\n\003key\030\001 \001(\014\022\032\n\005s"
      "cope\030\002 \001(\0132\013.dspb.Scope\022%\n\nfield_list\030\003 "
      "\003(\0132\021.dspb.SelectField\022\036\n\nwhere_expr\030\004 \001"
      "(\0132\n.dspb.Expr\022\032\n\005limit\030\005 \001(\0132\013.dspb.Lim"
      "it\"+\n\010RowValue\022\016\n\006fields\030\001 \001(\014\022\017\n\007versio"
      "n\030\002 \001(\004\"\177\n\tRowIntent\022\035\n\007op_type\030\001 \001(\0162\014."
      "dspb.OpType\022\016\n\006txn_id\030\002 \001(\t\022\023\n\013primary_k"
      "ey\030\003 \001(\014\022\017\n\007timeout\030\004 \001(\010\022\035\n\005value\030\n \001(\013"
      "2\016.dspb.RowValue\"R\n\003Row\022\013\n\003key\030\001 \001(\014\022\035\n\005"
      "value\030\002 \001(\0132\016.dspb.RowValue\022\037\n\006intent\030\003 "
      "\001(\0132\017.dspb.RowIntent\"G\n\016SelectResponse\022\014"
      "\n\004code\030\001 \001(\005\022\027\n\004rows\030\002 \003(\0132\t.dspb.Row\022\016\n"
      "\006offset\030\003 \001(\004\"f\n\021SelectFlowRequest\022#\n\npr"
      "ocessors\030\001 \003(\0132\017.dspb.Processor\022\026\n\016outpu"
      "t_offsets\030\002 \003(\r\022\024\n\014gather_trace\030\003 \001(\010\"s\n"
      "\022SelectFlowResponse\022\014\n\004code\030\001 \001(\005\022\027\n\004row"
      "s\030\002 \003(\0132\t.dspb.Row\022\020\n\010last_key\030\003 \001(\014\022$\n\006"
      "traces\030\004 \003(\0132\024.dspb.ProcessorTrace\"q\n\013Va"
      "lueIntent\022\035\n\007op_type\030\001 \001(\0162\014.dspb.OpType"
      "\022\016\n\006txn_id\030\002 \001(\t\022\023\n\013primary_key\030\003 \001(\014\022\017\n"
      "\007timeout\030\004 \001(\010\022\r\n\005value\030\n \001(\014\"I\n\010KeyValu"
      "e\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022!\n\006intent\030"
      "\n \001(\0132\021.dspb.ValueIntent\"D\n\013ScanRequest\022"
      "\021\n\tstart_key\030\001 \001(\014\022\017\n\007end_key\030\002 \001(\014\022\021\n\tm"
      "ax_count\030\003 \001(\003\"9\n\014ScanResponse\022\014\n\004code\030\001"
      " \001(\005\022\033\n\003kvs\030\002 \003(\0132\016.dspb.KeyValue* \n\006OpT"
      "ype\022\n\n\006INSERT\020\000\022\n\n\006DELETE\020\001*5\n\tTxnStatus"
      "\022\014\n\010TXN_INIT\020\000\022\r\n\tCOMMITTED\020\001\022\013\n\007ABORTED"
      "\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/txn.proto", &protobuf_RegisterTypes);
  ::dspb::protobuf_dspb_2fexpr_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2fprocessorpb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2ftxn_2eproto

const ::google::protobuf::EnumDescriptor* TxnError_ErrType_descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_enum_descriptors[0];
}
bool TxnError_ErrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TxnError_ErrType TxnError::UNKNOWN;
const TxnError_ErrType TxnError::SERVER_ERROR;
const TxnError_ErrType TxnError::LOCKED;
const TxnError_ErrType TxnError::UNEXPECTED_VER;
const TxnError_ErrType TxnError::STATUS_CONFLICT;
const TxnError_ErrType TxnError::NOT_FOUND;
const TxnError_ErrType TxnError::NOT_UNIQUE;
const TxnError_ErrType TxnError::TXN_CONFLICT;
const TxnError_ErrType TxnError::ErrType_MIN;
const TxnError_ErrType TxnError::ErrType_MAX;
const int TxnError::ErrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SelectField_Type_descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_enum_descriptors[1];
}
bool SelectField_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SelectField_Type SelectField::Column;
const SelectField_Type SelectField::AggreFunction;
const SelectField_Type SelectField::Type_MIN;
const SelectField_Type SelectField::Type_MAX;
const int SelectField::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OpType_descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_enum_descriptors[2];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TxnStatus_descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_enum_descriptors[3];
}
bool TxnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnIntent::kTypFieldNumber;
const int TxnIntent::kKeyFieldNumber;
const int TxnIntent::kValueFieldNumber;
const int TxnIntent::kCheckUniqueFieldNumber;
const int TxnIntent::kExpectedVerFieldNumber;
const int TxnIntent::kIsPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnIntent::TxnIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TxnIntent)
}
TxnIntent::TxnIntent(const TxnIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&typ_, &from.typ_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_ver_) -
    reinterpret_cast<char*>(&typ_)) + sizeof(expected_ver_));
  // @@protoc_insertion_point(copy_constructor:dspb.TxnIntent)
}

void TxnIntent::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&typ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_ver_) -
      reinterpret_cast<char*>(&typ_)) + sizeof(expected_ver_));
  _cached_size_ = 0;
}

TxnIntent::~TxnIntent() {
  // @@protoc_insertion_point(destructor:dspb.TxnIntent)
  SharedDtor();
}

void TxnIntent::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxnIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnIntent::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnIntent& TxnIntent::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnIntent* TxnIntent::New(::google::protobuf::Arena* arena) const {
  TxnIntent* n = new TxnIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TxnIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&typ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_ver_) -
      reinterpret_cast<char*>(&typ_)) + sizeof(expected_ver_));
  _internal_metadata_.Clear();
}

bool TxnIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TxnIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.OpType typ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typ(static_cast< ::dspb::OpType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool check_unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expected_ver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_primary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TxnIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TxnIntent)
  return false;
#undef DO_
}

void TxnIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TxnIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.OpType typ = 1;
  if (this->typ() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typ(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // bool check_unique = 4;
  if (this->check_unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->check_unique(), output);
  }

  // uint64 expected_ver = 5;
  if (this->expected_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->expected_ver(), output);
  }

  // bool is_primary = 6;
  if (this->is_primary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_primary(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TxnIntent)
}

::google::protobuf::uint8* TxnIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TxnIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.OpType typ = 1;
  if (this->typ() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typ(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // bool check_unique = 4;
  if (this->check_unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->check_unique(), target);
  }

  // uint64 expected_ver = 5;
  if (this->expected_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->expected_ver(), target);
  }

  // bool is_primary = 6;
  if (this->is_primary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_primary(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TxnIntent)
  return target;
}

size_t TxnIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TxnIntent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .dspb.OpType typ = 1;
  if (this->typ() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typ());
  }

  // bool check_unique = 4;
  if (this->check_unique() != 0) {
    total_size += 1 + 1;
  }

  // bool is_primary = 6;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  // uint64 expected_ver = 5;
  if (this->expected_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expected_ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TxnIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnIntent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TxnIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TxnIntent)
    MergeFrom(*source);
  }
}

void TxnIntent::MergeFrom(const TxnIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TxnIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.typ() != 0) {
    set_typ(from.typ());
  }
  if (from.check_unique() != 0) {
    set_check_unique(from.check_unique());
  }
  if (from.is_primary() != 0) {
    set_is_primary(from.is_primary());
  }
  if (from.expected_ver() != 0) {
    set_expected_ver(from.expected_ver());
  }
}

void TxnIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TxnIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnIntent::CopyFrom(const TxnIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TxnIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnIntent::IsInitialized() const {
  return true;
}

void TxnIntent::Swap(TxnIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnIntent::InternalSwap(TxnIntent* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(typ_, other->typ_);
  swap(check_unique_, other->check_unique_);
  swap(is_primary_, other->is_primary_);
  swap(expected_ver_, other->expected_ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnIntent::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnIntent

// .dspb.OpType typ = 1;
void TxnIntent::clear_typ() {
  typ_ = 0;
}
::dspb::OpType TxnIntent::typ() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.typ)
  return static_cast< ::dspb::OpType >(typ_);
}
void TxnIntent::set_typ(::dspb::OpType value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.typ)
}

// bytes key = 2;
void TxnIntent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnIntent::key() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.key)
  return key_.GetNoArena();
}
void TxnIntent::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.key)
}
#if LANG_CXX11
void TxnIntent::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnIntent.key)
}
#endif
void TxnIntent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnIntent.key)
}
void TxnIntent::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnIntent.key)
}
::std::string* TxnIntent::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnIntent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnIntent::release_key() {
  // @@protoc_insertion_point(field_release:dspb.TxnIntent.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnIntent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnIntent.key)
}

// bytes value = 3;
void TxnIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnIntent::value() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.value)
  return value_.GetNoArena();
}
void TxnIntent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.value)
}
#if LANG_CXX11
void TxnIntent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnIntent.value)
}
#endif
void TxnIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnIntent.value)
}
void TxnIntent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnIntent.value)
}
::std::string* TxnIntent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnIntent::release_value() {
  // @@protoc_insertion_point(field_release:dspb.TxnIntent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnIntent.value)
}

// bool check_unique = 4;
void TxnIntent::clear_check_unique() {
  check_unique_ = false;
}
bool TxnIntent::check_unique() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.check_unique)
  return check_unique_;
}
void TxnIntent::set_check_unique(bool value) {
  
  check_unique_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.check_unique)
}

// uint64 expected_ver = 5;
void TxnIntent::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnIntent::expected_ver() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.expected_ver)
  return expected_ver_;
}
void TxnIntent::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.expected_ver)
}

// bool is_primary = 6;
void TxnIntent::clear_is_primary() {
  is_primary_ = false;
}
bool TxnIntent::is_primary() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.is_primary)
  return is_primary_;
}
void TxnIntent::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.is_primary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnValue::kTxnIdFieldNumber;
const int TxnValue::kIntentFieldNumber;
const int TxnValue::kPrimaryKeyFieldNumber;
const int TxnValue::kExpiredAtFieldNumber;
const int TxnValue::kVersionFieldNumber;
const int TxnValue::kTxnStatusFieldNumber;
const int TxnValue::kSecondaryKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnValue::TxnValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TxnValue)
}
TxnValue::TxnValue(const TxnValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_intent()) {
    intent_ = new ::dspb::TxnIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  ::memcpy(&expired_at_, &from.expired_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&txn_status_) -
    reinterpret_cast<char*>(&expired_at_)) + sizeof(txn_status_));
  // @@protoc_insertion_point(copy_constructor:dspb.TxnValue)
}

void TxnValue::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_status_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(txn_status_));
  _cached_size_ = 0;
}

TxnValue::~TxnValue() {
  // @@protoc_insertion_point(destructor:dspb.TxnValue)
  SharedDtor();
}

void TxnValue::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
}

void TxnValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnValue::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnValue& TxnValue::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnValue* TxnValue::New(::google::protobuf::Arena* arena) const {
  TxnValue* n = new TxnValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnValue::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TxnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) {
    delete intent_;
  }
  intent_ = NULL;
  ::memset(&expired_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_status_) -
      reinterpret_cast<char*>(&expired_at_)) + sizeof(txn_status_));
  _internal_metadata_.Clear();
}

bool TxnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TxnValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.TxnValue.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TxnIntent intent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expired_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expired_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TxnStatus txn_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_txn_status(static_cast< ::dspb::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TxnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TxnValue)
  return false;
#undef DO_
}

void TxnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TxnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.TxnValue.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // .dspb.TxnIntent intent = 2;
  if (this->has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->intent_, output);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_key(), output);
  }

  // uint64 expired_at = 4;
  if (this->expired_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expired_at(), output);
  }

  // uint64 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->version(), output);
  }

  // .dspb.TxnStatus txn_status = 10;
  if (this->txn_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->txn_status(), output);
  }

  // repeated bytes secondary_keys = 11;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->secondary_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TxnValue)
}

::google::protobuf::uint8* TxnValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TxnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.TxnValue.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // .dspb.TxnIntent intent = 2;
  if (this->has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->intent_, deterministic, target);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_key(), target);
  }

  // uint64 expired_at = 4;
  if (this->expired_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expired_at(), target);
  }

  // uint64 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->version(), target);
  }

  // .dspb.TxnStatus txn_status = 10;
  if (this->txn_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->txn_status(), target);
  }

  // repeated bytes secondary_keys = 11;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->secondary_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TxnValue)
  return target;
}

size_t TxnValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TxnValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes secondary_keys = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // .dspb.TxnIntent intent = 2;
  if (this->has_intent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->intent_);
  }

  // uint64 expired_at = 4;
  if (this->expired_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expired_at());
  }

  // uint64 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // .dspb.TxnStatus txn_status = 10;
  if (this->txn_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->txn_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TxnValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TxnValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TxnValue)
    MergeFrom(*source);
  }
}

void TxnValue::MergeFrom(const TxnValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TxnValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_intent()) {
    mutable_intent()->::dspb::TxnIntent::MergeFrom(from.intent());
  }
  if (from.expired_at() != 0) {
    set_expired_at(from.expired_at());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.txn_status() != 0) {
    set_txn_status(from.txn_status());
  }
}

void TxnValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TxnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnValue::CopyFrom(const TxnValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TxnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnValue::IsInitialized() const {
  return true;
}

void TxnValue::Swap(TxnValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnValue::InternalSwap(TxnValue* other) {
  using std::swap;
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(intent_, other->intent_);
  swap(expired_at_, other->expired_at_);
  swap(version_, other->version_);
  swap(txn_status_, other->txn_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnValue::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnValue

// string txn_id = 1;
void TxnValue::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnValue::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.txn_id)
  return txn_id_.GetNoArena();
}
void TxnValue::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnValue.txn_id)
}
#if LANG_CXX11
void TxnValue::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnValue.txn_id)
}
#endif
void TxnValue::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnValue.txn_id)
}
void TxnValue::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnValue.txn_id)
}
::std::string* TxnValue::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnValue::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.TxnValue.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnValue::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnValue.txn_id)
}

// .dspb.TxnIntent intent = 2;
bool TxnValue::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
void TxnValue::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
const ::dspb::TxnIntent& TxnValue::intent() const {
  const ::dspb::TxnIntent* p = intent_;
  // @@protoc_insertion_point(field_get:dspb.TxnValue.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnIntent*>(
      &::dspb::_TxnIntent_default_instance_);
}
::dspb::TxnIntent* TxnValue::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::dspb::TxnIntent;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.intent)
  return intent_;
}
::dspb::TxnIntent* TxnValue::release_intent() {
  // @@protoc_insertion_point(field_release:dspb.TxnValue.intent)
  
  ::dspb::TxnIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void TxnValue::set_allocated_intent(::dspb::TxnIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnValue.intent)
}

// bytes primary_key = 3;
void TxnValue::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnValue::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.primary_key)
  return primary_key_.GetNoArena();
}
void TxnValue::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnValue.primary_key)
}
#if LANG_CXX11
void TxnValue::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnValue.primary_key)
}
#endif
void TxnValue::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnValue.primary_key)
}
void TxnValue::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnValue.primary_key)
}
::std::string* TxnValue::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnValue::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.TxnValue.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnValue::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnValue.primary_key)
}

// uint64 expired_at = 4;
void TxnValue::clear_expired_at() {
  expired_at_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnValue::expired_at() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.expired_at)
  return expired_at_;
}
void TxnValue::set_expired_at(::google::protobuf::uint64 value) {
  
  expired_at_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnValue.expired_at)
}

// uint64 version = 5;
void TxnValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnValue::version() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.version)
  return version_;
}
void TxnValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnValue.version)
}

// .dspb.TxnStatus txn_status = 10;
void TxnValue::clear_txn_status() {
  txn_status_ = 0;
}
::dspb::TxnStatus TxnValue::txn_status() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.txn_status)
  return static_cast< ::dspb::TxnStatus >(txn_status_);
}
void TxnValue::set_txn_status(::dspb::TxnStatus value) {
  
  txn_status_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnValue.txn_status)
}

// repeated bytes secondary_keys = 11;
int TxnValue::secondary_keys_size() const {
  return secondary_keys_.size();
}
void TxnValue::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& TxnValue::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* TxnValue::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void TxnValue::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TxnValue::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void TxnValue::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.TxnValue.secondary_keys)
}
void TxnValue::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnValue.secondary_keys)
}
::std::string* TxnValue::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.TxnValue.secondary_keys)
  return secondary_keys_.Add();
}
void TxnValue::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.TxnValue.secondary_keys)
}
#if LANG_CXX11
void TxnValue::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.TxnValue.secondary_keys)
}
#endif
void TxnValue::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.TxnValue.secondary_keys)
}
void TxnValue::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.TxnValue.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnValue::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.TxnValue.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TxnValue::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.TxnValue.secondary_keys)
  return &secondary_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInfo::kTxnIdFieldNumber;
const int LockInfo::kTimeoutFieldNumber;
const int LockInfo::kIsPrimaryFieldNumber;
const int LockInfo::kPrimaryKeyFieldNumber;
const int LockInfo::kStatusFieldNumber;
const int LockInfo::kSecondaryKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInfo::LockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.LockInfo)
}
LockInfo::LockInfo(const LockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:dspb.LockInfo)
}

void LockInfo::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  _cached_size_ = 0;
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:dspb.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockInfo::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockInfo& LockInfo::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockInfo* LockInfo::New(::google::protobuf::Arena* arena) const {
  LockInfo* n = new LockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool LockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.LockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.LockInfo.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_primary = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TxnStatus status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::dspb::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.LockInfo)
  return false;
#undef DO_
}

void LockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.LockInfo.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bool timeout = 2;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->timeout(), output);
  }

  // bool is_primary = 10;
  if (this->is_primary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_primary(), output);
  }

  // bytes primary_key = 11;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->primary_key(), output);
  }

  // .dspb.TxnStatus status = 12;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->status(), output);
  }

  // repeated bytes secondary_keys = 13;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->secondary_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.LockInfo)
}

::google::protobuf::uint8* LockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.LockInfo.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bool timeout = 2;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->timeout(), target);
  }

  // bool is_primary = 10;
  if (this->is_primary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_primary(), target);
  }

  // bytes primary_key = 11;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->primary_key(), target);
  }

  // .dspb.TxnStatus status = 12;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->status(), target);
  }

  // repeated bytes secondary_keys = 13;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(13, this->secondary_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.LockInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes secondary_keys = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 11;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // bool timeout = 2;
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  // bool is_primary = 10;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  // .dspb.TxnStatus status = 12;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.LockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.LockInfo)
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.is_primary() != 0) {
    set_is_primary(from.is_primary());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void LockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {
  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInfo::InternalSwap(LockInfo* other) {
  using std::swap;
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(timeout_, other->timeout_);
  swap(is_primary_, other->is_primary_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockInfo::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockInfo

// string txn_id = 1;
void LockInfo::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.txn_id)
  return txn_id_.GetNoArena();
}
void LockInfo::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.LockInfo.txn_id)
}
#if LANG_CXX11
void LockInfo::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.LockInfo.txn_id)
}
#endif
void LockInfo::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.LockInfo.txn_id)
}
void LockInfo::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.LockInfo.txn_id)
}
::std::string* LockInfo::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.LockInfo.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.LockInfo.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.LockInfo.txn_id)
}

// bool timeout = 2;
void LockInfo::clear_timeout() {
  timeout_ = false;
}
bool LockInfo::timeout() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.timeout)
  return timeout_;
}
void LockInfo::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:dspb.LockInfo.timeout)
}

// bool is_primary = 10;
void LockInfo::clear_is_primary() {
  is_primary_ = false;
}
bool LockInfo::is_primary() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.is_primary)
  return is_primary_;
}
void LockInfo::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:dspb.LockInfo.is_primary)
}

// bytes primary_key = 11;
void LockInfo::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.primary_key)
  return primary_key_.GetNoArena();
}
void LockInfo::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.LockInfo.primary_key)
}
#if LANG_CXX11
void LockInfo::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.LockInfo.primary_key)
}
#endif
void LockInfo::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.LockInfo.primary_key)
}
void LockInfo::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.LockInfo.primary_key)
}
::std::string* LockInfo::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.LockInfo.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.LockInfo.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.LockInfo.primary_key)
}

// .dspb.TxnStatus status = 12;
void LockInfo::clear_status() {
  status_ = 0;
}
::dspb::TxnStatus LockInfo::status() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.status)
  return static_cast< ::dspb::TxnStatus >(status_);
}
void LockInfo::set_status(::dspb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dspb.LockInfo.status)
}

// repeated bytes secondary_keys = 13;
int LockInfo::secondary_keys_size() const {
  return secondary_keys_.size();
}
void LockInfo::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& LockInfo::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* LockInfo::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.LockInfo.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void LockInfo::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LockInfo::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void LockInfo::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.LockInfo.secondary_keys)
}
void LockInfo::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.LockInfo.secondary_keys)
}
::std::string* LockInfo::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.LockInfo.secondary_keys)
  return secondary_keys_.Add();
}
void LockInfo::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.LockInfo.secondary_keys)
}
#if LANG_CXX11
void LockInfo::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.LockInfo.secondary_keys)
}
#endif
void LockInfo::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.LockInfo.secondary_keys)
}
void LockInfo::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.LockInfo.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockInfo::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.LockInfo.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LockInfo::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.LockInfo.secondary_keys)
  return &secondary_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockError::kKeyFieldNumber;
const int LockError::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockError::LockError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.LockError)
}
LockError::LockError(const LockError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    info_ = new ::dspb::LockInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.LockError)
}

void LockError::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  _cached_size_ = 0;
}

LockError::~LockError() {
  // @@protoc_insertion_point(destructor:dspb.LockError)
  SharedDtor();
}

void LockError::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void LockError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockError::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockError& LockError::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockError* LockError::New(::google::protobuf::Arena* arena) const {
  LockError* n = new LockError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockError::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.LockError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool LockError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.LockError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.LockInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.LockError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.LockError)
  return false;
#undef DO_
}

void LockError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.LockError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .dspb.LockInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.LockError)
}

::google::protobuf::uint8* LockError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.LockError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .dspb.LockInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.LockError)
  return target;
}

size_t LockError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.LockError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .dspb.LockInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.LockError)
  GOOGLE_DCHECK_NE(&from, this);
  const LockError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.LockError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.LockError)
    MergeFrom(*source);
  }
}

void LockError::MergeFrom(const LockError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.LockError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    mutable_info()->::dspb::LockInfo::MergeFrom(from.info());
  }
}

void LockError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.LockError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockError::CopyFrom(const LockError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.LockError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockError::IsInitialized() const {
  return true;
}

void LockError::Swap(LockError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockError::InternalSwap(LockError* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockError::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockError

// bytes key = 1;
void LockError::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockError::key() const {
  // @@protoc_insertion_point(field_get:dspb.LockError.key)
  return key_.GetNoArena();
}
void LockError::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.LockError.key)
}
#if LANG_CXX11
void LockError::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.LockError.key)
}
#endif
void LockError::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.LockError.key)
}
void LockError::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.LockError.key)
}
::std::string* LockError::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.LockError.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockError::release_key() {
  // @@protoc_insertion_point(field_release:dspb.LockError.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockError::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.LockError.key)
}

// .dspb.LockInfo info = 2;
bool LockError::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void LockError::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dspb::LockInfo& LockError::info() const {
  const ::dspb::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:dspb.LockError.info)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::LockInfo*>(
      &::dspb::_LockInfo_default_instance_);
}
::dspb::LockInfo* LockError::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dspb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:dspb.LockError.info)
  return info_;
}
::dspb::LockInfo* LockError::release_info() {
  // @@protoc_insertion_point(field_release:dspb.LockError.info)
  
  ::dspb::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void LockError::set_allocated_info(::dspb::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.LockError.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnexpectedVer::kKeyFieldNumber;
const int UnexpectedVer::kExpectedVerFieldNumber;
const int UnexpectedVer::kActualVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnexpectedVer::UnexpectedVer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.UnexpectedVer)
}
UnexpectedVer::UnexpectedVer(const UnexpectedVer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&expected_ver_, &from.expected_ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_ver_) -
    reinterpret_cast<char*>(&expected_ver_)) + sizeof(actual_ver_));
  // @@protoc_insertion_point(copy_constructor:dspb.UnexpectedVer)
}

void UnexpectedVer::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_ver_) -
      reinterpret_cast<char*>(&expected_ver_)) + sizeof(actual_ver_));
  _cached_size_ = 0;
}

UnexpectedVer::~UnexpectedVer() {
  // @@protoc_insertion_point(destructor:dspb.UnexpectedVer)
  SharedDtor();
}

void UnexpectedVer::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnexpectedVer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnexpectedVer::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnexpectedVer& UnexpectedVer::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnexpectedVer* UnexpectedVer::New(::google::protobuf::Arena* arena) const {
  UnexpectedVer* n = new UnexpectedVer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnexpectedVer::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.UnexpectedVer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_ver_) -
      reinterpret_cast<char*>(&expected_ver_)) + sizeof(actual_ver_));
  _internal_metadata_.Clear();
}

bool UnexpectedVer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.UnexpectedVer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expected_ver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 actual_ver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actual_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.UnexpectedVer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.UnexpectedVer)
  return false;
#undef DO_
}

void UnexpectedVer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.UnexpectedVer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // uint64 expected_ver = 2;
  if (this->expected_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->expected_ver(), output);
  }

  // uint64 actual_ver = 3;
  if (this->actual_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->actual_ver(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.UnexpectedVer)
}

::google::protobuf::uint8* UnexpectedVer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.UnexpectedVer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // uint64 expected_ver = 2;
  if (this->expected_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->expected_ver(), target);
  }

  // uint64 actual_ver = 3;
  if (this->actual_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->actual_ver(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.UnexpectedVer)
  return target;
}

size_t UnexpectedVer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.UnexpectedVer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // uint64 expected_ver = 2;
  if (this->expected_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expected_ver());
  }

  // uint64 actual_ver = 3;
  if (this->actual_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actual_ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnexpectedVer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.UnexpectedVer)
  GOOGLE_DCHECK_NE(&from, this);
  const UnexpectedVer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnexpectedVer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.UnexpectedVer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.UnexpectedVer)
    MergeFrom(*source);
  }
}

void UnexpectedVer::MergeFrom(const UnexpectedVer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.UnexpectedVer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.expected_ver() != 0) {
    set_expected_ver(from.expected_ver());
  }
  if (from.actual_ver() != 0) {
    set_actual_ver(from.actual_ver());
  }
}

void UnexpectedVer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.UnexpectedVer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnexpectedVer::CopyFrom(const UnexpectedVer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.UnexpectedVer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnexpectedVer::IsInitialized() const {
  return true;
}

void UnexpectedVer::Swap(UnexpectedVer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnexpectedVer::InternalSwap(UnexpectedVer* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(expected_ver_, other->expected_ver_);
  swap(actual_ver_, other->actual_ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnexpectedVer::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnexpectedVer

// bytes key = 1;
void UnexpectedVer::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnexpectedVer::key() const {
  // @@protoc_insertion_point(field_get:dspb.UnexpectedVer.key)
  return key_.GetNoArena();
}
void UnexpectedVer::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.UnexpectedVer.key)
}
#if LANG_CXX11
void UnexpectedVer::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.UnexpectedVer.key)
}
#endif
void UnexpectedVer::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.UnexpectedVer.key)
}
void UnexpectedVer::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.UnexpectedVer.key)
}
::std::string* UnexpectedVer::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.UnexpectedVer.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnexpectedVer::release_key() {
  // @@protoc_insertion_point(field_release:dspb.UnexpectedVer.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnexpectedVer::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.UnexpectedVer.key)
}

// uint64 expected_ver = 2;
void UnexpectedVer::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UnexpectedVer::expected_ver() const {
  // @@protoc_insertion_point(field_get:dspb.UnexpectedVer.expected_ver)
  return expected_ver_;
}
void UnexpectedVer::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:dspb.UnexpectedVer.expected_ver)
}

// uint64 actual_ver = 3;
void UnexpectedVer::clear_actual_ver() {
  actual_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UnexpectedVer::actual_ver() const {
  // @@protoc_insertion_point(field_get:dspb.UnexpectedVer.actual_ver)
  return actual_ver_;
}
void UnexpectedVer::set_actual_ver(::google::protobuf::uint64 value) {
  
  actual_ver_ = value;
  // @@protoc_insertion_point(field_set:dspb.UnexpectedVer.actual_ver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusConflict::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusConflict::StatusConflict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.StatusConflict)
}
StatusConflict::StatusConflict(const StatusConflict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:dspb.StatusConflict)
}

void StatusConflict::SharedCtor() {
  status_ = 0;
  _cached_size_ = 0;
}

StatusConflict::~StatusConflict() {
  // @@protoc_insertion_point(destructor:dspb.StatusConflict)
  SharedDtor();
}

void StatusConflict::SharedDtor() {
}

void StatusConflict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusConflict::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusConflict& StatusConflict::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusConflict* StatusConflict::New(::google::protobuf::Arena* arena) const {
  StatusConflict* n = new StatusConflict;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.StatusConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool StatusConflict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.StatusConflict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.TxnStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::dspb::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.StatusConflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.StatusConflict)
  return false;
#undef DO_
}

void StatusConflict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.StatusConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.StatusConflict)
}

::google::protobuf::uint8* StatusConflict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.StatusConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.StatusConflict)
  return target;
}

size_t StatusConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.StatusConflict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.TxnStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusConflict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.StatusConflict)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusConflict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusConflict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.StatusConflict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.StatusConflict)
    MergeFrom(*source);
  }
}

void StatusConflict::MergeFrom(const StatusConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.StatusConflict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void StatusConflict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.StatusConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusConflict::CopyFrom(const StatusConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.StatusConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusConflict::IsInitialized() const {
  return true;
}

void StatusConflict::Swap(StatusConflict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusConflict::InternalSwap(StatusConflict* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusConflict::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusConflict

// .dspb.TxnStatus status = 1;
void StatusConflict::clear_status() {
  status_ = 0;
}
::dspb::TxnStatus StatusConflict::status() const {
  // @@protoc_insertion_point(field_get:dspb.StatusConflict.status)
  return static_cast< ::dspb::TxnStatus >(status_);
}
void StatusConflict::set_status(::dspb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dspb.StatusConflict.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerError::kCodeFieldNumber;
const int ServerError::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerError::ServerError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ServerError)
}
ServerError::ServerError(const ServerError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:dspb.ServerError)
}

void ServerError::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

ServerError::~ServerError() {
  // @@protoc_insertion_point(destructor:dspb.ServerError)
  SharedDtor();
}

void ServerError::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerError::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerError& ServerError::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerError* ServerError::New(::google::protobuf::Arena* arena) const {
  ServerError* n = new ServerError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerError::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ServerError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool ServerError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ServerError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ServerError.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ServerError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ServerError)
  return false;
#undef DO_
}

void ServerError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ServerError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ServerError.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ServerError)
}

::google::protobuf::uint8* ServerError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ServerError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ServerError.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ServerError)
  return target;
}

size_t ServerError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ServerError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ServerError)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ServerError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ServerError)
    MergeFrom(*source);
  }
}

void ServerError::MergeFrom(const ServerError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ServerError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ServerError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ServerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerError::CopyFrom(const ServerError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ServerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerError::IsInitialized() const {
  return true;
}

void ServerError::Swap(ServerError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerError::InternalSwap(ServerError* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerError::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerError

// int32 code = 1;
void ServerError::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 ServerError::code() const {
  // @@protoc_insertion_point(field_get:dspb.ServerError.code)
  return code_;
}
void ServerError::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.ServerError.code)
}

// string msg = 2;
void ServerError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerError::msg() const {
  // @@protoc_insertion_point(field_get:dspb.ServerError.msg)
  return msg_.GetNoArena();
}
void ServerError::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ServerError.msg)
}
#if LANG_CXX11
void ServerError::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ServerError.msg)
}
#endif
void ServerError::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ServerError.msg)
}
void ServerError::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ServerError.msg)
}
::std::string* ServerError::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ServerError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerError::release_msg() {
  // @@protoc_insertion_point(field_release:dspb.ServerError.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:dspb.ServerError.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotFound::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotFound::NotFound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.NotFound)
}
NotFound::NotFound(const NotFound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.NotFound)
}

void NotFound::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotFound::~NotFound() {
  // @@protoc_insertion_point(destructor:dspb.NotFound)
  SharedDtor();
}

void NotFound::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotFound::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotFound& NotFound::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotFound* NotFound::New(::google::protobuf::Arena* arena) const {
  NotFound* n = new NotFound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.NotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.NotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.NotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.NotFound)
  return false;
#undef DO_
}

void NotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.NotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.NotFound)
}

::google::protobuf::uint8* NotFound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.NotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.NotFound)
  return target;
}

size_t NotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.NotFound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotFound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.NotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const NotFound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotFound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.NotFound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.NotFound)
    MergeFrom(*source);
  }
}

void NotFound::MergeFrom(const NotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.NotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void NotFound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.NotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotFound::CopyFrom(const NotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.NotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotFound::IsInitialized() const {
  return true;
}

void NotFound::Swap(NotFound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotFound::InternalSwap(NotFound* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotFound::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotFound

// bytes key = 1;
void NotFound::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotFound::key() const {
  // @@protoc_insertion_point(field_get:dspb.NotFound.key)
  return key_.GetNoArena();
}
void NotFound::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.NotFound.key)
}
#if LANG_CXX11
void NotFound::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.NotFound.key)
}
#endif
void NotFound::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.NotFound.key)
}
void NotFound::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.NotFound.key)
}
::std::string* NotFound::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.NotFound.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotFound::release_key() {
  // @@protoc_insertion_point(field_release:dspb.NotFound.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotFound::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.NotFound.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotUnique::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotUnique::NotUnique()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.NotUnique)
}
NotUnique::NotUnique(const NotUnique& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.NotUnique)
}

void NotUnique::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotUnique::~NotUnique() {
  // @@protoc_insertion_point(destructor:dspb.NotUnique)
  SharedDtor();
}

void NotUnique::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotUnique::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotUnique::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotUnique& NotUnique::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotUnique* NotUnique::New(::google::protobuf::Arena* arena) const {
  NotUnique* n = new NotUnique;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.NotUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NotUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.NotUnique)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.NotUnique)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.NotUnique)
  return false;
#undef DO_
}

void NotUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.NotUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.NotUnique)
}

::google::protobuf::uint8* NotUnique::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.NotUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.NotUnique)
  return target;
}

size_t NotUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.NotUnique)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotUnique::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.NotUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const NotUnique* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotUnique>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.NotUnique)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.NotUnique)
    MergeFrom(*source);
  }
}

void NotUnique::MergeFrom(const NotUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.NotUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void NotUnique::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.NotUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotUnique::CopyFrom(const NotUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.NotUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotUnique::IsInitialized() const {
  return true;
}

void NotUnique::Swap(NotUnique* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotUnique::InternalSwap(NotUnique* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotUnique::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotUnique

// bytes key = 1;
void NotUnique::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotUnique::key() const {
  // @@protoc_insertion_point(field_get:dspb.NotUnique.key)
  return key_.GetNoArena();
}
void NotUnique::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.NotUnique.key)
}
#if LANG_CXX11
void NotUnique::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.NotUnique.key)
}
#endif
void NotUnique::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.NotUnique.key)
}
void NotUnique::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.NotUnique.key)
}
::std::string* NotUnique::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.NotUnique.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotUnique::release_key() {
  // @@protoc_insertion_point(field_release:dspb.NotUnique.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotUnique::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.NotUnique.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnConflict::kExpectedTxnIdFieldNumber;
const int TxnConflict::kActualTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnConflict::TxnConflict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TxnConflict)
}
TxnConflict::TxnConflict(const TxnConflict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expected_txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expected_txn_id().size() > 0) {
    expected_txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expected_txn_id_);
  }
  actual_txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.actual_txn_id().size() > 0) {
    actual_txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actual_txn_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.TxnConflict)
}

void TxnConflict::SharedCtor() {
  expected_txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TxnConflict::~TxnConflict() {
  // @@protoc_insertion_point(destructor:dspb.TxnConflict)
  SharedDtor();
}

void TxnConflict::SharedDtor() {
  expected_txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxnConflict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnConflict::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnConflict& TxnConflict::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnConflict* TxnConflict::New(::google::protobuf::Arena* arena) const {
  TxnConflict* n = new TxnConflict;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TxnConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expected_txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TxnConflict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TxnConflict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string expected_txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expected_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expected_txn_id().data(), static_cast<int>(this->expected_txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.TxnConflict.expected_txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string actual_txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actual_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actual_txn_id().data(), static_cast<int>(this->actual_txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.TxnConflict.actual_txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TxnConflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TxnConflict)
  return false;
#undef DO_
}

void TxnConflict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TxnConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string expected_txn_id = 1;
  if (this->expected_txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expected_txn_id().data(), static_cast<int>(this->expected_txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.TxnConflict.expected_txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->expected_txn_id(), output);
  }

  // string actual_txn_id = 2;
  if (this->actual_txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actual_txn_id().data(), static_cast<int>(this->actual_txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.TxnConflict.actual_txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->actual_txn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TxnConflict)
}

::google::protobuf::uint8* TxnConflict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TxnConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string expected_txn_id = 1;
  if (this->expected_txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expected_txn_id().data(), static_cast<int>(this->expected_txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.TxnConflict.expected_txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->expected_txn_id(), target);
  }

  // string actual_txn_id = 2;
  if (this->actual_txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actual_txn_id().data(), static_cast<int>(this->actual_txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.TxnConflict.actual_txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->actual_txn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TxnConflict)
  return target;
}

size_t TxnConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TxnConflict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string expected_txn_id = 1;
  if (this->expected_txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expected_txn_id());
  }

  // string actual_txn_id = 2;
  if (this->actual_txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actual_txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnConflict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TxnConflict)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnConflict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnConflict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TxnConflict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TxnConflict)
    MergeFrom(*source);
  }
}

void TxnConflict::MergeFrom(const TxnConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TxnConflict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.expected_txn_id().size() > 0) {

    expected_txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expected_txn_id_);
  }
  if (from.actual_txn_id().size() > 0) {

    actual_txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actual_txn_id_);
  }
}

void TxnConflict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TxnConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnConflict::CopyFrom(const TxnConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TxnConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnConflict::IsInitialized() const {
  return true;
}

void TxnConflict::Swap(TxnConflict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnConflict::InternalSwap(TxnConflict* other) {
  using std::swap;
  expected_txn_id_.Swap(&other->expected_txn_id_);
  actual_txn_id_.Swap(&other->actual_txn_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnConflict::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnConflict

// string expected_txn_id = 1;
void TxnConflict::clear_expected_txn_id() {
  expected_txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnConflict::expected_txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.TxnConflict.expected_txn_id)
  return expected_txn_id_.GetNoArena();
}
void TxnConflict::set_expected_txn_id(const ::std::string& value) {
  
  expected_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnConflict.expected_txn_id)
}
#if LANG_CXX11
void TxnConflict::set_expected_txn_id(::std::string&& value) {
  
  expected_txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnConflict.expected_txn_id)
}
#endif
void TxnConflict::set_expected_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expected_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnConflict.expected_txn_id)
}
void TxnConflict::set_expected_txn_id(const char* value, size_t size) {
  
  expected_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnConflict.expected_txn_id)
}
::std::string* TxnConflict::mutable_expected_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnConflict.expected_txn_id)
  return expected_txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnConflict::release_expected_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.TxnConflict.expected_txn_id)
  
  return expected_txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnConflict::set_allocated_expected_txn_id(::std::string* expected_txn_id) {
  if (expected_txn_id != NULL) {
    
  } else {
    
  }
  expected_txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expected_txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnConflict.expected_txn_id)
}

// string actual_txn_id = 2;
void TxnConflict::clear_actual_txn_id() {
  actual_txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnConflict::actual_txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.TxnConflict.actual_txn_id)
  return actual_txn_id_.GetNoArena();
}
void TxnConflict::set_actual_txn_id(const ::std::string& value) {
  
  actual_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnConflict.actual_txn_id)
}
#if LANG_CXX11
void TxnConflict::set_actual_txn_id(::std::string&& value) {
  
  actual_txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnConflict.actual_txn_id)
}
#endif
void TxnConflict::set_actual_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actual_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnConflict.actual_txn_id)
}
void TxnConflict::set_actual_txn_id(const char* value, size_t size) {
  
  actual_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnConflict.actual_txn_id)
}
::std::string* TxnConflict::mutable_actual_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnConflict.actual_txn_id)
  return actual_txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnConflict::release_actual_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.TxnConflict.actual_txn_id)
  
  return actual_txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnConflict::set_allocated_actual_txn_id(::std::string* actual_txn_id) {
  if (actual_txn_id != NULL) {
    
  } else {
    
  }
  actual_txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actual_txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnConflict.actual_txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnError::kErrTypeFieldNumber;
const int TxnError::kServerErrFieldNumber;
const int TxnError::kLockErrFieldNumber;
const int TxnError::kUnexpectedVerFieldNumber;
const int TxnError::kStatusConflictFieldNumber;
const int TxnError::kNotFoundFieldNumber;
const int TxnError::kNotUniqueFieldNumber;
const int TxnError::kTxnConflictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnError::TxnError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TxnError)
}
TxnError::TxnError(const TxnError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_err()) {
    server_err_ = new ::dspb::ServerError(*from.server_err_);
  } else {
    server_err_ = NULL;
  }
  if (from.has_lock_err()) {
    lock_err_ = new ::dspb::LockError(*from.lock_err_);
  } else {
    lock_err_ = NULL;
  }
  if (from.has_unexpected_ver()) {
    unexpected_ver_ = new ::dspb::UnexpectedVer(*from.unexpected_ver_);
  } else {
    unexpected_ver_ = NULL;
  }
  if (from.has_status_conflict()) {
    status_conflict_ = new ::dspb::StatusConflict(*from.status_conflict_);
  } else {
    status_conflict_ = NULL;
  }
  if (from.has_not_found()) {
    not_found_ = new ::dspb::NotFound(*from.not_found_);
  } else {
    not_found_ = NULL;
  }
  if (from.has_not_unique()) {
    not_unique_ = new ::dspb::NotUnique(*from.not_unique_);
  } else {
    not_unique_ = NULL;
  }
  if (from.has_txn_conflict()) {
    txn_conflict_ = new ::dspb::TxnConflict(*from.txn_conflict_);
  } else {
    txn_conflict_ = NULL;
  }
  err_type_ = from.err_type_;
  // @@protoc_insertion_point(copy_constructor:dspb.TxnError)
}

void TxnError::SharedCtor() {
  ::memset(&server_err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_type_) -
      reinterpret_cast<char*>(&server_err_)) + sizeof(err_type_));
  _cached_size_ = 0;
}

TxnError::~TxnError() {
  // @@protoc_insertion_point(destructor:dspb.TxnError)
  SharedDtor();
}

void TxnError::SharedDtor() {
  if (this != internal_default_instance()) delete server_err_;
  if (this != internal_default_instance()) delete lock_err_;
  if (this != internal_default_instance()) delete unexpected_ver_;
  if (this != internal_default_instance()) delete status_conflict_;
  if (this != internal_default_instance()) delete not_found_;
  if (this != internal_default_instance()) delete not_unique_;
  if (this != internal_default_instance()) delete txn_conflict_;
}

void TxnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnError::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnError& TxnError::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnError* TxnError::New(::google::protobuf::Arena* arena) const {
  TxnError* n = new TxnError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnError::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && server_err_ != NULL) {
    delete server_err_;
  }
  server_err_ = NULL;
  if (GetArenaNoVirtual() == NULL && lock_err_ != NULL) {
    delete lock_err_;
  }
  lock_err_ = NULL;
  if (GetArenaNoVirtual() == NULL && unexpected_ver_ != NULL) {
    delete unexpected_ver_;
  }
  unexpected_ver_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_conflict_ != NULL) {
    delete status_conflict_;
  }
  status_conflict_ = NULL;
  if (GetArenaNoVirtual() == NULL && not_found_ != NULL) {
    delete not_found_;
  }
  not_found_ = NULL;
  if (GetArenaNoVirtual() == NULL && not_unique_ != NULL) {
    delete not_unique_;
  }
  not_unique_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_conflict_ != NULL) {
    delete txn_conflict_;
  }
  txn_conflict_ = NULL;
  err_type_ = 0;
  _internal_metadata_.Clear();
}

bool TxnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TxnError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.TxnError.ErrType err_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_err_type(static_cast< ::dspb::TxnError_ErrType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ServerError server_err = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.LockError lock_err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.UnexpectedVer unexpected_ver = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unexpected_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.StatusConflict status_conflict = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_conflict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.NotFound not_found = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.NotUnique not_unique = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_unique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TxnConflict txn_conflict = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_conflict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TxnError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TxnError)
  return false;
#undef DO_
}

void TxnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError.ErrType err_type = 1;
  if (this->err_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err_type(), output);
  }

  // .dspb.ServerError server_err = 2;
  if (this->has_server_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->server_err_, output);
  }

  // .dspb.LockError lock_err = 3;
  if (this->has_lock_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lock_err_, output);
  }

  // .dspb.UnexpectedVer unexpected_ver = 4;
  if (this->has_unexpected_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->unexpected_ver_, output);
  }

  // .dspb.StatusConflict status_conflict = 5;
  if (this->has_status_conflict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->status_conflict_, output);
  }

  // .dspb.NotFound not_found = 6;
  if (this->has_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->not_found_, output);
  }

  // .dspb.NotUnique not_unique = 7;
  if (this->has_not_unique()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->not_unique_, output);
  }

  // .dspb.TxnConflict txn_conflict = 8;
  if (this->has_txn_conflict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->txn_conflict_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TxnError)
}

::google::protobuf::uint8* TxnError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError.ErrType err_type = 1;
  if (this->err_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err_type(), target);
  }

  // .dspb.ServerError server_err = 2;
  if (this->has_server_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->server_err_, deterministic, target);
  }

  // .dspb.LockError lock_err = 3;
  if (this->has_lock_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lock_err_, deterministic, target);
  }

  // .dspb.UnexpectedVer unexpected_ver = 4;
  if (this->has_unexpected_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->unexpected_ver_, deterministic, target);
  }

  // .dspb.StatusConflict status_conflict = 5;
  if (this->has_status_conflict()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->status_conflict_, deterministic, target);
  }

  // .dspb.NotFound not_found = 6;
  if (this->has_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->not_found_, deterministic, target);
  }

  // .dspb.NotUnique not_unique = 7;
  if (this->has_not_unique()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->not_unique_, deterministic, target);
  }

  // .dspb.TxnConflict txn_conflict = 8;
  if (this->has_txn_conflict()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->txn_conflict_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TxnError)
  return target;
}

size_t TxnError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TxnError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.ServerError server_err = 2;
  if (this->has_server_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_err_);
  }

  // .dspb.LockError lock_err = 3;
  if (this->has_lock_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_err_);
  }

  // .dspb.UnexpectedVer unexpected_ver = 4;
  if (this->has_unexpected_ver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unexpected_ver_);
  }

  // .dspb.StatusConflict status_conflict = 5;
  if (this->has_status_conflict()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_conflict_);
  }

  // .dspb.NotFound not_found = 6;
  if (this->has_not_found()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->not_found_);
  }

  // .dspb.NotUnique not_unique = 7;
  if (this->has_not_unique()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->not_unique_);
  }

  // .dspb.TxnConflict txn_conflict = 8;
  if (this->has_txn_conflict()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_conflict_);
  }

  // .dspb.TxnError.ErrType err_type = 1;
  if (this->err_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TxnError)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TxnError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TxnError)
    MergeFrom(*source);
  }
}

void TxnError::MergeFrom(const TxnError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TxnError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_err()) {
    mutable_server_err()->::dspb::ServerError::MergeFrom(from.server_err());
  }
  if (from.has_lock_err()) {
    mutable_lock_err()->::dspb::LockError::MergeFrom(from.lock_err());
  }
  if (from.has_unexpected_ver()) {
    mutable_unexpected_ver()->::dspb::UnexpectedVer::MergeFrom(from.unexpected_ver());
  }
  if (from.has_status_conflict()) {
    mutable_status_conflict()->::dspb::StatusConflict::MergeFrom(from.status_conflict());
  }
  if (from.has_not_found()) {
    mutable_not_found()->::dspb::NotFound::MergeFrom(from.not_found());
  }
  if (from.has_not_unique()) {
    mutable_not_unique()->::dspb::NotUnique::MergeFrom(from.not_unique());
  }
  if (from.has_txn_conflict()) {
    mutable_txn_conflict()->::dspb::TxnConflict::MergeFrom(from.txn_conflict());
  }
  if (from.err_type() != 0) {
    set_err_type(from.err_type());
  }
}

void TxnError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TxnError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnError::CopyFrom(const TxnError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TxnError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnError::IsInitialized() const {
  return true;
}

void TxnError::Swap(TxnError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnError::InternalSwap(TxnError* other) {
  using std::swap;
  swap(server_err_, other->server_err_);
  swap(lock_err_, other->lock_err_);
  swap(unexpected_ver_, other->unexpected_ver_);
  swap(status_conflict_, other->status_conflict_);
  swap(not_found_, other->not_found_);
  swap(not_unique_, other->not_unique_);
  swap(txn_conflict_, other->txn_conflict_);
  swap(err_type_, other->err_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnError::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnError

// .dspb.TxnError.ErrType err_type = 1;
void TxnError::clear_err_type() {
  err_type_ = 0;
}
::dspb::TxnError_ErrType TxnError::err_type() const {
  // @@protoc_insertion_point(field_get:dspb.TxnError.err_type)
  return static_cast< ::dspb::TxnError_ErrType >(err_type_);
}
void TxnError::set_err_type(::dspb::TxnError_ErrType value) {
  
  err_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnError.err_type)
}

// .dspb.ServerError server_err = 2;
bool TxnError::has_server_err() const {
  return this != internal_default_instance() && server_err_ != NULL;
}
void TxnError::clear_server_err() {
  if (GetArenaNoVirtual() == NULL && server_err_ != NULL) delete server_err_;
  server_err_ = NULL;
}
const ::dspb::ServerError& TxnError::server_err() const {
  const ::dspb::ServerError* p = server_err_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.server_err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ServerError*>(
      &::dspb::_ServerError_default_instance_);
}
::dspb::ServerError* TxnError::mutable_server_err() {
  
  if (server_err_ == NULL) {
    server_err_ = new ::dspb::ServerError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.server_err)
  return server_err_;
}
::dspb::ServerError* TxnError::release_server_err() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.server_err)
  
  ::dspb::ServerError* temp = server_err_;
  server_err_ = NULL;
  return temp;
}
void TxnError::set_allocated_server_err(::dspb::ServerError* server_err) {
  delete server_err_;
  server_err_ = server_err;
  if (server_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.server_err)
}

// .dspb.LockError lock_err = 3;
bool TxnError::has_lock_err() const {
  return this != internal_default_instance() && lock_err_ != NULL;
}
void TxnError::clear_lock_err() {
  if (GetArenaNoVirtual() == NULL && lock_err_ != NULL) delete lock_err_;
  lock_err_ = NULL;
}
const ::dspb::LockError& TxnError::lock_err() const {
  const ::dspb::LockError* p = lock_err_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.lock_err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::LockError*>(
      &::dspb::_LockError_default_instance_);
}
::dspb::LockError* TxnError::mutable_lock_err() {
  
  if (lock_err_ == NULL) {
    lock_err_ = new ::dspb::LockError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.lock_err)
  return lock_err_;
}
::dspb::LockError* TxnError::release_lock_err() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.lock_err)
  
  ::dspb::LockError* temp = lock_err_;
  lock_err_ = NULL;
  return temp;
}
void TxnError::set_allocated_lock_err(::dspb::LockError* lock_err) {
  delete lock_err_;
  lock_err_ = lock_err;
  if (lock_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.lock_err)
}

// .dspb.UnexpectedVer unexpected_ver = 4;
bool TxnError::has_unexpected_ver() const {
  return this != internal_default_instance() && unexpected_ver_ != NULL;
}
void TxnError::clear_unexpected_ver() {
  if (GetArenaNoVirtual() == NULL && unexpected_ver_ != NULL) delete unexpected_ver_;
  unexpected_ver_ = NULL;
}
const ::dspb::UnexpectedVer& TxnError::unexpected_ver() const {
  const ::dspb::UnexpectedVer* p = unexpected_ver_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.unexpected_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::UnexpectedVer*>(
      &::dspb::_UnexpectedVer_default_instance_);
}
::dspb::UnexpectedVer* TxnError::mutable_unexpected_ver() {
  
  if (unexpected_ver_ == NULL) {
    unexpected_ver_ = new ::dspb::UnexpectedVer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.unexpected_ver)
  return unexpected_ver_;
}
::dspb::UnexpectedVer* TxnError::release_unexpected_ver() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.unexpected_ver)
  
  ::dspb::UnexpectedVer* temp = unexpected_ver_;
  unexpected_ver_ = NULL;
  return temp;
}
void TxnError::set_allocated_unexpected_ver(::dspb::UnexpectedVer* unexpected_ver) {
  delete unexpected_ver_;
  unexpected_ver_ = unexpected_ver;
  if (unexpected_ver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.unexpected_ver)
}

// .dspb.StatusConflict status_conflict = 5;
bool TxnError::has_status_conflict() const {
  return this != internal_default_instance() && status_conflict_ != NULL;
}
void TxnError::clear_status_conflict() {
  if (GetArenaNoVirtual() == NULL && status_conflict_ != NULL) delete status_conflict_;
  status_conflict_ = NULL;
}
const ::dspb::StatusConflict& TxnError::status_conflict() const {
  const ::dspb::StatusConflict* p = status_conflict_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.status_conflict)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::StatusConflict*>(
      &::dspb::_StatusConflict_default_instance_);
}
::dspb::StatusConflict* TxnError::mutable_status_conflict() {
  
  if (status_conflict_ == NULL) {
    status_conflict_ = new ::dspb::StatusConflict;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.status_conflict)
  return status_conflict_;
}
::dspb::StatusConflict* TxnError::release_status_conflict() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.status_conflict)
  
  ::dspb::StatusConflict* temp = status_conflict_;
  status_conflict_ = NULL;
  return temp;
}
void TxnError::set_allocated_status_conflict(::dspb::StatusConflict* status_conflict) {
  delete status_conflict_;
  status_conflict_ = status_conflict;
  if (status_conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.status_conflict)
}

// .dspb.NotFound not_found = 6;
bool TxnError::has_not_found() const {
  return this != internal_default_instance() && not_found_ != NULL;
}
void TxnError::clear_not_found() {
  if (GetArenaNoVirtual() == NULL && not_found_ != NULL) delete not_found_;
  not_found_ = NULL;
}
const ::dspb::NotFound& TxnError::not_found() const {
  const ::dspb::NotFound* p = not_found_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NotFound*>(
      &::dspb::_NotFound_default_instance_);
}
::dspb::NotFound* TxnError::mutable_not_found() {
  
  if (not_found_ == NULL) {
    not_found_ = new ::dspb::NotFound;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.not_found)
  return not_found_;
}
::dspb::NotFound* TxnError::release_not_found() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.not_found)
  
  ::dspb::NotFound* temp = not_found_;
  not_found_ = NULL;
  return temp;
}
void TxnError::set_allocated_not_found(::dspb::NotFound* not_found) {
  delete not_found_;
  not_found_ = not_found;
  if (not_found) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.not_found)
}

// .dspb.NotUnique not_unique = 7;
bool TxnError::has_not_unique() const {
  return this != internal_default_instance() && not_unique_ != NULL;
}
void TxnError::clear_not_unique() {
  if (GetArenaNoVirtual() == NULL && not_unique_ != NULL) delete not_unique_;
  not_unique_ = NULL;
}
const ::dspb::NotUnique& TxnError::not_unique() const {
  const ::dspb::NotUnique* p = not_unique_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.not_unique)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NotUnique*>(
      &::dspb::_NotUnique_default_instance_);
}
::dspb::NotUnique* TxnError::mutable_not_unique() {
  
  if (not_unique_ == NULL) {
    not_unique_ = new ::dspb::NotUnique;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.not_unique)
  return not_unique_;
}
::dspb::NotUnique* TxnError::release_not_unique() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.not_unique)
  
  ::dspb::NotUnique* temp = not_unique_;
  not_unique_ = NULL;
  return temp;
}
void TxnError::set_allocated_not_unique(::dspb::NotUnique* not_unique) {
  delete not_unique_;
  not_unique_ = not_unique;
  if (not_unique) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.not_unique)
}

// .dspb.TxnConflict txn_conflict = 8;
bool TxnError::has_txn_conflict() const {
  return this != internal_default_instance() && txn_conflict_ != NULL;
}
void TxnError::clear_txn_conflict() {
  if (GetArenaNoVirtual() == NULL && txn_conflict_ != NULL) delete txn_conflict_;
  txn_conflict_ = NULL;
}
const ::dspb::TxnConflict& TxnError::txn_conflict() const {
  const ::dspb::TxnConflict* p = txn_conflict_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.txn_conflict)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnConflict*>(
      &::dspb::_TxnConflict_default_instance_);
}
::dspb::TxnConflict* TxnError::mutable_txn_conflict() {
  
  if (txn_conflict_ == NULL) {
    txn_conflict_ = new ::dspb::TxnConflict;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.txn_conflict)
  return txn_conflict_;
}
::dspb::TxnConflict* TxnError::release_txn_conflict() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.txn_conflict)
  
  ::dspb::TxnConflict* temp = txn_conflict_;
  txn_conflict_ = NULL;
  return temp;
}
void TxnError::set_allocated_txn_conflict(::dspb::TxnConflict* txn_conflict) {
  delete txn_conflict_;
  txn_conflict_ = txn_conflict;
  if (txn_conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.txn_conflict)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareRequest::kTxnIdFieldNumber;
const int PrepareRequest::kLocalFieldNumber;
const int PrepareRequest::kIntentsFieldNumber;
const int PrepareRequest::kPrimaryKeyFieldNumber;
const int PrepareRequest::kLockTtlFieldNumber;
const int PrepareRequest::kSecondaryKeysFieldNumber;
const int PrepareRequest::kStrictCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareRequest::PrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.PrepareRequest)
}
PrepareRequest::PrepareRequest(const PrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      intents_(from.intents_),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  ::memcpy(&lock_ttl_, &from.lock_ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&strict_check_) -
    reinterpret_cast<char*>(&lock_ttl_)) + sizeof(strict_check_));
  // @@protoc_insertion_point(copy_constructor:dspb.PrepareRequest)
}

void PrepareRequest::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_check_) -
      reinterpret_cast<char*>(&lock_ttl_)) + sizeof(strict_check_));
  _cached_size_ = 0;
}

PrepareRequest::~PrepareRequest() {
  // @@protoc_insertion_point(destructor:dspb.PrepareRequest)
  SharedDtor();
}

void PrepareRequest::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareRequest& PrepareRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrepareRequest* PrepareRequest::New(::google::protobuf::Arena* arena) const {
  PrepareRequest* n = new PrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intents_.Clear();
  secondary_keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_check_) -
      reinterpret_cast<char*>(&lock_ttl_)) + sizeof(strict_check_));
  _internal_metadata_.Clear();
}

bool PrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.PrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.PrepareRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool local = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.TxnIntent intents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_ttl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool strict_check = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strict_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.PrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.PrepareRequest)
  return false;
#undef DO_
}

void PrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.PrepareRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bool local = 2;
  if (this->local() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->local(), output);
  }

  // repeated .dspb.TxnIntent intents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->intents(static_cast<int>(i)), output);
  }

  // bytes primary_key = 4;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->primary_key(), output);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lock_ttl(), output);
  }

  // repeated bytes secondary_keys = 6;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->secondary_keys(i), output);
  }

  // bool strict_check = 16;
  if (this->strict_check() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->strict_check(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.PrepareRequest)
}

::google::protobuf::uint8* PrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.PrepareRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bool local = 2;
  if (this->local() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->local(), target);
  }

  // repeated .dspb.TxnIntent intents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->intents(static_cast<int>(i)), deterministic, target);
  }

  // bytes primary_key = 4;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->primary_key(), target);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lock_ttl(), target);
  }

  // repeated bytes secondary_keys = 6;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->secondary_keys(i), target);
  }

  // bool strict_check = 16;
  if (this->strict_check() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->strict_check(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.PrepareRequest)
  return target;
}

size_t PrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.PrepareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.TxnIntent intents = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->intents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intents(static_cast<int>(i)));
    }
  }

  // repeated bytes secondary_keys = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 4;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  // bool local = 2;
  if (this->local() != 0) {
    total_size += 1 + 1;
  }

  // bool strict_check = 16;
  if (this->strict_check() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.PrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.PrepareRequest)
    MergeFrom(*source);
  }
}

void PrepareRequest::MergeFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intents_.MergeFrom(from.intents_);
  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
  if (from.local() != 0) {
    set_local(from.local());
  }
  if (from.strict_check() != 0) {
    set_strict_check(from.strict_check());
  }
}

void PrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRequest::CopyFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRequest::IsInitialized() const {
  return true;
}

void PrepareRequest::Swap(PrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareRequest::InternalSwap(PrepareRequest* other) {
  using std::swap;
  intents_.InternalSwap(&other->intents_);
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(lock_ttl_, other->lock_ttl_);
  swap(local_, other->local_);
  swap(strict_check_, other->strict_check_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareRequest

// string txn_id = 1;
void PrepareRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrepareRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.txn_id)
  return txn_id_.GetNoArena();
}
void PrepareRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.txn_id)
}
#if LANG_CXX11
void PrepareRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.PrepareRequest.txn_id)
}
#endif
void PrepareRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.PrepareRequest.txn_id)
}
void PrepareRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.PrepareRequest.txn_id)
}
::std::string* PrepareRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrepareRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.PrepareRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrepareRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.PrepareRequest.txn_id)
}

// bool local = 2;
void PrepareRequest::clear_local() {
  local_ = false;
}
bool PrepareRequest::local() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.local)
  return local_;
}
void PrepareRequest::set_local(bool value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.local)
}

// repeated .dspb.TxnIntent intents = 3;
int PrepareRequest::intents_size() const {
  return intents_.size();
}
void PrepareRequest::clear_intents() {
  intents_.Clear();
}
const ::dspb::TxnIntent& PrepareRequest::intents(int index) const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.intents)
  return intents_.Get(index);
}
::dspb::TxnIntent* PrepareRequest::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.intents)
  return intents_.Mutable(index);
}
::dspb::TxnIntent* PrepareRequest::add_intents() {
  // @@protoc_insertion_point(field_add:dspb.PrepareRequest.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent >*
PrepareRequest::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:dspb.PrepareRequest.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent >&
PrepareRequest::intents() const {
  // @@protoc_insertion_point(field_list:dspb.PrepareRequest.intents)
  return intents_;
}

// bytes primary_key = 4;
void PrepareRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrepareRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.primary_key)
  return primary_key_.GetNoArena();
}
void PrepareRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.primary_key)
}
#if LANG_CXX11
void PrepareRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.PrepareRequest.primary_key)
}
#endif
void PrepareRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.PrepareRequest.primary_key)
}
void PrepareRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.PrepareRequest.primary_key)
}
::std::string* PrepareRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrepareRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.PrepareRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrepareRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.PrepareRequest.primary_key)
}

// uint64 lock_ttl = 5;
void PrepareRequest::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PrepareRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.lock_ttl)
  return lock_ttl_;
}
void PrepareRequest::set_lock_ttl(::google::protobuf::uint64 value) {
  
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.lock_ttl)
}

// repeated bytes secondary_keys = 6;
int PrepareRequest::secondary_keys_size() const {
  return secondary_keys_.size();
}
void PrepareRequest::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& PrepareRequest::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* PrepareRequest::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void PrepareRequest::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PrepareRequest::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void PrepareRequest::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.PrepareRequest.secondary_keys)
}
void PrepareRequest::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.PrepareRequest.secondary_keys)
}
::std::string* PrepareRequest::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_.Add();
}
void PrepareRequest::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.PrepareRequest.secondary_keys)
}
#if LANG_CXX11
void PrepareRequest::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.PrepareRequest.secondary_keys)
}
#endif
void PrepareRequest::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.PrepareRequest.secondary_keys)
}
void PrepareRequest::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.PrepareRequest.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrepareRequest::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PrepareRequest::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.PrepareRequest.secondary_keys)
  return &secondary_keys_;
}

// bool strict_check = 16;
void PrepareRequest::clear_strict_check() {
  strict_check_ = false;
}
bool PrepareRequest::strict_check() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.strict_check)
  return strict_check_;
}
void PrepareRequest::set_strict_check(bool value) {
  
  strict_check_ = value;
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.strict_check)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareResponse::PrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.PrepareResponse)
}
PrepareResponse::PrepareResponse(const PrepareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.PrepareResponse)
}

void PrepareResponse::SharedCtor() {
  _cached_size_ = 0;
}

PrepareResponse::~PrepareResponse() {
  // @@protoc_insertion_point(destructor:dspb.PrepareResponse)
  SharedDtor();
}

void PrepareResponse::SharedDtor() {
}

void PrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareResponse& PrepareResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrepareResponse* PrepareResponse::New(::google::protobuf::Arena* arena) const {
  PrepareResponse* n = new PrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.PrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _internal_metadata_.Clear();
}

bool PrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.PrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.TxnError errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.PrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.PrepareResponse)
  return false;
#undef DO_
}

void PrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.PrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.TxnError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->errors(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.PrepareResponse)
}

::google::protobuf::uint8* PrepareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.PrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.TxnError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.PrepareResponse)
  return target;
}

size_t PrepareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.PrepareResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.TxnError errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.PrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.PrepareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.PrepareResponse)
    MergeFrom(*source);
  }
}

void PrepareResponse::MergeFrom(const PrepareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.PrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void PrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.PrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareResponse::CopyFrom(const PrepareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.PrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareResponse::IsInitialized() const {
  return true;
}

void PrepareResponse::Swap(PrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareResponse::InternalSwap(PrepareResponse* other) {
  using std::swap;
  errors_.InternalSwap(&other->errors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareResponse

// repeated .dspb.TxnError errors = 1;
int PrepareResponse::errors_size() const {
  return errors_.size();
}
void PrepareResponse::clear_errors() {
  errors_.Clear();
}
const ::dspb::TxnError& PrepareResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:dspb.PrepareResponse.errors)
  return errors_.Get(index);
}
::dspb::TxnError* PrepareResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.PrepareResponse.errors)
  return errors_.Mutable(index);
}
::dspb::TxnError* PrepareResponse::add_errors() {
  // @@protoc_insertion_point(field_add:dspb.PrepareResponse.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::TxnError >*
PrepareResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:dspb.PrepareResponse.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::TxnError >&
PrepareResponse::errors() const {
  // @@protoc_insertion_point(field_list:dspb.PrepareResponse.errors)
  return errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecideRequest::kTxnIdFieldNumber;
const int DecideRequest::kStatusFieldNumber;
const int DecideRequest::kKeysFieldNumber;
const int DecideRequest::kRecoverFieldNumber;
const int DecideRequest::kIsPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecideRequest::DecideRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.DecideRequest)
}
DecideRequest::DecideRequest(const DecideRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_primary_) -
    reinterpret_cast<char*>(&status_)) + sizeof(is_primary_));
  // @@protoc_insertion_point(copy_constructor:dspb.DecideRequest)
}

void DecideRequest::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_primary_) -
      reinterpret_cast<char*>(&status_)) + sizeof(is_primary_));
  _cached_size_ = 0;
}

DecideRequest::~DecideRequest() {
  // @@protoc_insertion_point(destructor:dspb.DecideRequest)
  SharedDtor();
}

void DecideRequest::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DecideRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecideRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecideRequest& DecideRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecideRequest* DecideRequest::New(::google::protobuf::Arena* arena) const {
  DecideRequest* n = new DecideRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecideRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.DecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_primary_) -
      reinterpret_cast<char*>(&status_)) + sizeof(is_primary_));
  _internal_metadata_.Clear();
}

bool DecideRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.DecideRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.DecideRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TxnStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::dspb::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recover = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.DecideRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.DecideRequest)
  return false;
#undef DO_
}

void DecideRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.DecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.DecideRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // .dspb.TxnStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  // bool recover = 4;
  if (this->recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recover(), output);
  }

  // bool is_primary = 5;
  if (this->is_primary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_primary(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.DecideRequest)
}

::google::protobuf::uint8* DecideRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.DecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.DecideRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // .dspb.TxnStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->keys(i), target);
  }

  // bool recover = 4;
  if (this->recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recover(), target);
  }

  // bool is_primary = 5;
  if (this->is_primary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_primary(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.DecideRequest)
  return target;
}

size_t DecideRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.DecideRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // .dspb.TxnStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool recover = 4;
  if (this->recover() != 0) {
    total_size += 1 + 1;
  }

  // bool is_primary = 5;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecideRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.DecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecideRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecideRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.DecideRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.DecideRequest)
    MergeFrom(*source);
  }
}

void DecideRequest::MergeFrom(const DecideRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.DecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.recover() != 0) {
    set_recover(from.recover());
  }
  if (from.is_primary() != 0) {
    set_is_primary(from.is_primary());
  }
}

void DecideRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.DecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecideRequest::CopyFrom(const DecideRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.DecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideRequest::IsInitialized() const {
  return true;
}

void DecideRequest::Swap(DecideRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecideRequest::InternalSwap(DecideRequest* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  txn_id_.Swap(&other->txn_id_);
  swap(status_, other->status_);
  swap(recover_, other->recover_);
  swap(is_primary_, other->is_primary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecideRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecideRequest

// string txn_id = 1;
void DecideRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DecideRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.txn_id)
  return txn_id_.GetNoArena();
}
void DecideRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.txn_id)
}
#if LANG_CXX11
void DecideRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.DecideRequest.txn_id)
}
#endif
void DecideRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.DecideRequest.txn_id)
}
void DecideRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.DecideRequest.txn_id)
}
::std::string* DecideRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.DecideRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DecideRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.DecideRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DecideRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.DecideRequest.txn_id)
}

// .dspb.TxnStatus status = 2;
void DecideRequest::clear_status() {
  status_ = 0;
}
::dspb::TxnStatus DecideRequest::status() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.status)
  return static_cast< ::dspb::TxnStatus >(status_);
}
void DecideRequest::set_status(::dspb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.status)
}

// repeated bytes keys = 3;
int DecideRequest::keys_size() const {
  return keys_.size();
}
void DecideRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& DecideRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.keys)
  return keys_.Get(index);
}
::std::string* DecideRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.DecideRequest.keys)
  return keys_.Mutable(index);
}
void DecideRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DecideRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void DecideRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.DecideRequest.keys)
}
void DecideRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.DecideRequest.keys)
}
::std::string* DecideRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.DecideRequest.keys)
  return keys_.Add();
}
void DecideRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.DecideRequest.keys)
}
#if LANG_CXX11
void DecideRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.DecideRequest.keys)
}
#endif
void DecideRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.DecideRequest.keys)
}
void DecideRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.DecideRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideRequest::keys() const {
  // @@protoc_insertion_point(field_list:dspb.DecideRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DecideRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.DecideRequest.keys)
  return &keys_;
}

// bool recover = 4;
void DecideRequest::clear_recover() {
  recover_ = false;
}
bool DecideRequest::recover() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.recover)
  return recover_;
}
void DecideRequest::set_recover(bool value) {
  
  recover_ = value;
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.recover)
}

// bool is_primary = 5;
void DecideRequest::clear_is_primary() {
  is_primary_ = false;
}
bool DecideRequest::is_primary() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.is_primary)
  return is_primary_;
}
void DecideRequest::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.is_primary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecideResponse::kErrFieldNumber;
const int DecideResponse::kSecondaryKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecideResponse::DecideResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.DecideResponse)
}
DecideResponse::DecideResponse(const DecideResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err()) {
    err_ = new ::dspb::TxnError(*from.err_);
  } else {
    err_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.DecideResponse)
}

void DecideResponse::SharedCtor() {
  err_ = NULL;
  _cached_size_ = 0;
}

DecideResponse::~DecideResponse() {
  // @@protoc_insertion_point(destructor:dspb.DecideResponse)
  SharedDtor();
}

void DecideResponse::SharedDtor() {
  if (this != internal_default_instance()) delete err_;
}

void DecideResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecideResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecideResponse& DecideResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecideResponse* DecideResponse::New(::google::protobuf::Arena* arena) const {
  DecideResponse* n = new DecideResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecideResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.DecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && err_ != NULL) {
    delete err_;
  }
  err_ = NULL;
  _internal_metadata_.Clear();
}

bool DecideResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.DecideResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.TxnError err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.DecideResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.DecideResponse)
  return false;
#undef DO_
}

void DecideResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.DecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->err_, output);
  }

  // repeated bytes secondary_keys = 2;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->secondary_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.DecideResponse)
}

::google::protobuf::uint8* DecideResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.DecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->err_, deterministic, target);
  }

  // repeated bytes secondary_keys = 2;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->secondary_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.DecideResponse)
  return target;
}

size_t DecideResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.DecideResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes secondary_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecideResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.DecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecideResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecideResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.DecideResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.DecideResponse)
    MergeFrom(*source);
  }
}

void DecideResponse::MergeFrom(const DecideResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.DecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.has_err()) {
    mutable_err()->::dspb::TxnError::MergeFrom(from.err());
  }
}

void DecideResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.DecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecideResponse::CopyFrom(const DecideResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.DecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideResponse::IsInitialized() const {
  return true;
}

void DecideResponse::Swap(DecideResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecideResponse::InternalSwap(DecideResponse* other) {
  using std::swap;
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecideResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecideResponse

// .dspb.TxnError err = 1;
bool DecideResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
void DecideResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
const ::dspb::TxnError& DecideResponse::err() const {
  const ::dspb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:dspb.DecideResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnError*>(
      &::dspb::_TxnError_default_instance_);
}
::dspb::TxnError* DecideResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::dspb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.DecideResponse.err)
  return err_;
}
::dspb::TxnError* DecideResponse::release_err() {
  // @@protoc_insertion_point(field_release:dspb.DecideResponse.err)
  
  ::dspb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
void DecideResponse::set_allocated_err(::dspb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.DecideResponse.err)
}

// repeated bytes secondary_keys = 2;
int DecideResponse::secondary_keys_size() const {
  return secondary_keys_.size();
}
void DecideResponse::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& DecideResponse::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.DecideResponse.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* DecideResponse::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.DecideResponse.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void DecideResponse::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DecideResponse::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void DecideResponse::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.DecideResponse.secondary_keys)
}
void DecideResponse::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.DecideResponse.secondary_keys)
}
::std::string* DecideResponse::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.DecideResponse.secondary_keys)
  return secondary_keys_.Add();
}
void DecideResponse::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.DecideResponse.secondary_keys)
}
#if LANG_CXX11
void DecideResponse::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.DecideResponse.secondary_keys)
}
#endif
void DecideResponse::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.DecideResponse.secondary_keys)
}
void DecideResponse::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.DecideResponse.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideResponse::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.DecideResponse.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DecideResponse::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.DecideResponse.secondary_keys)
  return &secondary_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearupRequest::kTxnIdFieldNumber;
const int ClearupRequest::kPrimaryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearupRequest::ClearupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ClearupRequest)
}
ClearupRequest::ClearupRequest(const ClearupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.ClearupRequest)
}

void ClearupRequest::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClearupRequest::~ClearupRequest() {
  // @@protoc_insertion_point(destructor:dspb.ClearupRequest)
  SharedDtor();
}

void ClearupRequest::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClearupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearupRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearupRequest& ClearupRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearupRequest* ClearupRequest::New(::google::protobuf::Arena* arena) const {
  ClearupRequest* n = new ClearupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ClearupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ClearupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ClearupRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ClearupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ClearupRequest)
  return false;
#undef DO_
}

void ClearupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ClearupRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->primary_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ClearupRequest)
}

::google::protobuf::uint8* ClearupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ClearupRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->primary_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ClearupRequest)
  return target;
}

size_t ClearupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ClearupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ClearupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ClearupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ClearupRequest)
    MergeFrom(*source);
  }
}

void ClearupRequest::MergeFrom(const ClearupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ClearupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
}

void ClearupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ClearupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearupRequest::CopyFrom(const ClearupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ClearupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearupRequest::IsInitialized() const {
  return true;
}

void ClearupRequest::Swap(ClearupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearupRequest::InternalSwap(ClearupRequest* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearupRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearupRequest

// string txn_id = 1;
void ClearupRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClearupRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.ClearupRequest.txn_id)
  return txn_id_.GetNoArena();
}
void ClearupRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ClearupRequest.txn_id)
}
#if LANG_CXX11
void ClearupRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ClearupRequest.txn_id)
}
#endif
void ClearupRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ClearupRequest.txn_id)
}
void ClearupRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ClearupRequest.txn_id)
}
::std::string* ClearupRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ClearupRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClearupRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.ClearupRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClearupRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.ClearupRequest.txn_id)
}

// bytes primary_key = 2;
void ClearupRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClearupRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.ClearupRequest.primary_key)
  return primary_key_.GetNoArena();
}
void ClearupRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ClearupRequest.primary_key)
}
#if LANG_CXX11
void ClearupRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ClearupRequest.primary_key)
}
#endif
void ClearupRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ClearupRequest.primary_key)
}
void ClearupRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ClearupRequest.primary_key)
}
::std::string* ClearupRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ClearupRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClearupRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.ClearupRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClearupRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ClearupRequest.primary_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearupResponse::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearupResponse::ClearupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ClearupResponse)
}
ClearupResponse::ClearupResponse(const ClearupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err()) {
    err_ = new ::dspb::TxnError(*from.err_);
  } else {
    err_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.ClearupResponse)
}

void ClearupResponse::SharedCtor() {
  err_ = NULL;
  _cached_size_ = 0;
}

ClearupResponse::~ClearupResponse() {
  // @@protoc_insertion_point(destructor:dspb.ClearupResponse)
  SharedDtor();
}

void ClearupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete err_;
}

void ClearupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearupResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearupResponse& ClearupResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearupResponse* ClearupResponse::New(::google::protobuf::Arena* arena) const {
  ClearupResponse* n = new ClearupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_ != NULL) {
    delete err_;
  }
  err_ = NULL;
  _internal_metadata_.Clear();
}

bool ClearupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ClearupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.TxnError err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ClearupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ClearupResponse)
  return false;
#undef DO_
}

void ClearupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->err_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ClearupResponse)
}

::google::protobuf::uint8* ClearupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->err_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ClearupResponse)
  return target;
}

size_t ClearupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ClearupResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ClearupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ClearupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ClearupResponse)
    MergeFrom(*source);
  }
}

void ClearupResponse::MergeFrom(const ClearupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ClearupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err()) {
    mutable_err()->::dspb::TxnError::MergeFrom(from.err());
  }
}

void ClearupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ClearupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearupResponse::CopyFrom(const ClearupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ClearupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearupResponse::IsInitialized() const {
  return true;
}

void ClearupResponse::Swap(ClearupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearupResponse::InternalSwap(ClearupResponse* other) {
  using std::swap;
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearupResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearupResponse

// .dspb.TxnError err = 1;
bool ClearupResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
void ClearupResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
const ::dspb::TxnError& ClearupResponse::err() const {
  const ::dspb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:dspb.ClearupResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnError*>(
      &::dspb::_TxnError_default_instance_);
}
::dspb::TxnError* ClearupResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::dspb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ClearupResponse.err)
  return err_;
}
::dspb::TxnError* ClearupResponse::release_err() {
  // @@protoc_insertion_point(field_release:dspb.ClearupResponse.err)
  
  ::dspb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
void ClearupResponse::set_allocated_err(::dspb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ClearupResponse.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLockInfoRequest::kKeyFieldNumber;
const int GetLockInfoRequest::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLockInfoRequest::GetLockInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetLockInfoRequest)
}
GetLockInfoRequest::GetLockInfoRequest(const GetLockInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.GetLockInfoRequest)
}

void GetLockInfoRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetLockInfoRequest::~GetLockInfoRequest() {
  // @@protoc_insertion_point(destructor:dspb.GetLockInfoRequest)
  SharedDtor();
}

void GetLockInfoRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLockInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLockInfoRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLockInfoRequest& GetLockInfoRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLockInfoRequest* GetLockInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetLockInfoRequest* n = new GetLockInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLockInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetLockInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetLockInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.GetLockInfoRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetLockInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetLockInfoRequest)
  return false;
#undef DO_
}

void GetLockInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetLockInfoRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetLockInfoRequest)
}

::google::protobuf::uint8* GetLockInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetLockInfoRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetLockInfoRequest)
  return target;
}

size_t GetLockInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetLockInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLockInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetLockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLockInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetLockInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetLockInfoRequest)
    MergeFrom(*source);
  }
}

void GetLockInfoRequest::MergeFrom(const GetLockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetLockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
}

void GetLockInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetLockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockInfoRequest::CopyFrom(const GetLockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetLockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockInfoRequest::IsInitialized() const {
  return true;
}

void GetLockInfoRequest::Swap(GetLockInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLockInfoRequest::InternalSwap(GetLockInfoRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  txn_id_.Swap(&other->txn_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLockInfoRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLockInfoRequest

// bytes key = 1;
void GetLockInfoRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetLockInfoRequest::key() const {
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoRequest.key)
  return key_.GetNoArena();
}
void GetLockInfoRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetLockInfoRequest.key)
}
#if LANG_CXX11
void GetLockInfoRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetLockInfoRequest.key)
}
#endif
void GetLockInfoRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetLockInfoRequest.key)
}
void GetLockInfoRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetLockInfoRequest.key)
}
::std::string* GetLockInfoRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLockInfoRequest::release_key() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLockInfoRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoRequest.key)
}

// string txn_id = 2;
void GetLockInfoRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetLockInfoRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoRequest.txn_id)
  return txn_id_.GetNoArena();
}
void GetLockInfoRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetLockInfoRequest.txn_id)
}
#if LANG_CXX11
void GetLockInfoRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetLockInfoRequest.txn_id)
}
#endif
void GetLockInfoRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetLockInfoRequest.txn_id)
}
void GetLockInfoRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetLockInfoRequest.txn_id)
}
::std::string* GetLockInfoRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLockInfoRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLockInfoRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoRequest.txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLockInfoResponse::kErrFieldNumber;
const int GetLockInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLockInfoResponse::GetLockInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetLockInfoResponse)
}
GetLockInfoResponse::GetLockInfoResponse(const GetLockInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err()) {
    err_ = new ::dspb::TxnError(*from.err_);
  } else {
    err_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::dspb::LockInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.GetLockInfoResponse)
}

void GetLockInfoResponse::SharedCtor() {
  ::memset(&err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&err_)) + sizeof(info_));
  _cached_size_ = 0;
}

GetLockInfoResponse::~GetLockInfoResponse() {
  // @@protoc_insertion_point(destructor:dspb.GetLockInfoResponse)
  SharedDtor();
}

void GetLockInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete err_;
  if (this != internal_default_instance()) delete info_;
}

void GetLockInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLockInfoResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLockInfoResponse& GetLockInfoResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLockInfoResponse* GetLockInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetLockInfoResponse* n = new GetLockInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLockInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_ != NULL) {
    delete err_;
  }
  err_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetLockInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetLockInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.TxnError err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.LockInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetLockInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetLockInfoResponse)
  return false;
#undef DO_
}

void GetLockInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->err_, output);
  }

  // .dspb.LockInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetLockInfoResponse)
}

::google::protobuf::uint8* GetLockInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->err_, deterministic, target);
  }

  // .dspb.LockInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetLockInfoResponse)
  return target;
}

size_t GetLockInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetLockInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.TxnError err = 1;
  if (this->has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }

  // .dspb.LockInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLockInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetLockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLockInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetLockInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetLockInfoResponse)
    MergeFrom(*source);
  }
}

void GetLockInfoResponse::MergeFrom(const GetLockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetLockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err()) {
    mutable_err()->::dspb::TxnError::MergeFrom(from.err());
  }
  if (from.has_info()) {
    mutable_info()->::dspb::LockInfo::MergeFrom(from.info());
  }
}

void GetLockInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetLockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockInfoResponse::CopyFrom(const GetLockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetLockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockInfoResponse::IsInitialized() const {
  return true;
}

void GetLockInfoResponse::Swap(GetLockInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLockInfoResponse::InternalSwap(GetLockInfoResponse* other) {
  using std::swap;
  swap(err_, other->err_);
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLockInfoResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLockInfoResponse

// .dspb.TxnError err = 1;
bool GetLockInfoResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
void GetLockInfoResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
const ::dspb::TxnError& GetLockInfoResponse::err() const {
  const ::dspb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnError*>(
      &::dspb::_TxnError_default_instance_);
}
::dspb::TxnError* GetLockInfoResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::dspb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoResponse.err)
  return err_;
}
::dspb::TxnError* GetLockInfoResponse::release_err() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoResponse.err)
  
  ::dspb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
void GetLockInfoResponse::set_allocated_err(::dspb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoResponse.err)
}

// .dspb.LockInfo info = 2;
bool GetLockInfoResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void GetLockInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dspb::LockInfo& GetLockInfoResponse::info() const {
  const ::dspb::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::LockInfo*>(
      &::dspb::_LockInfo_default_instance_);
}
::dspb::LockInfo* GetLockInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dspb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoResponse.info)
  return info_;
}
::dspb::LockInfo* GetLockInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoResponse.info)
  
  ::dspb::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void GetLockInfoResponse::set_allocated_info(::dspb::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoResponse.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectField::kTypFieldNumber;
const int SelectField::kAggreFuncFieldNumber;
const int SelectField::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectField::SelectField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SelectField)
}
SelectField::SelectField(const SelectField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aggre_func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aggre_func().size() > 0) {
    aggre_func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aggre_func_);
  }
  if (from.has_column()) {
    column_ = new ::dspb::ColumnInfo(*from.column_);
  } else {
    column_ = NULL;
  }
  typ_ = from.typ_;
  // @@protoc_insertion_point(copy_constructor:dspb.SelectField)
}

void SelectField::SharedCtor() {
  aggre_func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typ_) -
      reinterpret_cast<char*>(&column_)) + sizeof(typ_));
  _cached_size_ = 0;
}

SelectField::~SelectField() {
  // @@protoc_insertion_point(destructor:dspb.SelectField)
  SharedDtor();
}

void SelectField::SharedDtor() {
  aggre_func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete column_;
}

void SelectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectField::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectField& SelectField::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectField* SelectField::New(::google::protobuf::Arena* arena) const {
  SelectField* n = new SelectField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectField::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SelectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggre_func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && column_ != NULL) {
    delete column_;
  }
  column_ = NULL;
  typ_ = 0;
  _internal_metadata_.Clear();
}

bool SelectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SelectField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.SelectField.Type typ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typ(static_cast< ::dspb::SelectField_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aggre_func = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aggre_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->aggre_func().data(), static_cast<int>(this->aggre_func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.SelectField.aggre_func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ColumnInfo column = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SelectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SelectField)
  return false;
#undef DO_
}

void SelectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SelectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.SelectField.Type typ = 1;
  if (this->typ() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typ(), output);
  }

  // string aggre_func = 2;
  if (this->aggre_func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aggre_func().data(), static_cast<int>(this->aggre_func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.SelectField.aggre_func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->aggre_func(), output);
  }

  // .dspb.ColumnInfo column = 3;
  if (this->has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->column_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SelectField)
}

::google::protobuf::uint8* SelectField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SelectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.SelectField.Type typ = 1;
  if (this->typ() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typ(), target);
  }

  // string aggre_func = 2;
  if (this->aggre_func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aggre_func().data(), static_cast<int>(this->aggre_func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.SelectField.aggre_func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->aggre_func(), target);
  }

  // .dspb.ColumnInfo column = 3;
  if (this->has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->column_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SelectField)
  return target;
}

size_t SelectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SelectField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string aggre_func = 2;
  if (this->aggre_func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aggre_func());
  }

  // .dspb.ColumnInfo column = 3;
  if (this->has_column()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_);
  }

  // .dspb.SelectField.Type typ = 1;
  if (this->typ() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typ());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SelectField)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SelectField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SelectField)
    MergeFrom(*source);
  }
}

void SelectField::MergeFrom(const SelectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SelectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aggre_func().size() > 0) {

    aggre_func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aggre_func_);
  }
  if (from.has_column()) {
    mutable_column()->::dspb::ColumnInfo::MergeFrom(from.column());
  }
  if (from.typ() != 0) {
    set_typ(from.typ());
  }
}

void SelectField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SelectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectField::CopyFrom(const SelectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SelectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectField::IsInitialized() const {
  return true;
}

void SelectField::Swap(SelectField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectField::InternalSwap(SelectField* other) {
  using std::swap;
  aggre_func_.Swap(&other->aggre_func_);
  swap(column_, other->column_);
  swap(typ_, other->typ_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectField::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectField

// .dspb.SelectField.Type typ = 1;
void SelectField::clear_typ() {
  typ_ = 0;
}
::dspb::SelectField_Type SelectField::typ() const {
  // @@protoc_insertion_point(field_get:dspb.SelectField.typ)
  return static_cast< ::dspb::SelectField_Type >(typ_);
}
void SelectField::set_typ(::dspb::SelectField_Type value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectField.typ)
}

// string aggre_func = 2;
void SelectField::clear_aggre_func() {
  aggre_func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectField::aggre_func() const {
  // @@protoc_insertion_point(field_get:dspb.SelectField.aggre_func)
  return aggre_func_.GetNoArena();
}
void SelectField::set_aggre_func(const ::std::string& value) {
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SelectField.aggre_func)
}
#if LANG_CXX11
void SelectField::set_aggre_func(::std::string&& value) {
  
  aggre_func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SelectField.aggre_func)
}
#endif
void SelectField::set_aggre_func(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SelectField.aggre_func)
}
void SelectField::set_aggre_func(const char* value, size_t size) {
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SelectField.aggre_func)
}
::std::string* SelectField::mutable_aggre_func() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SelectField.aggre_func)
  return aggre_func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectField::release_aggre_func() {
  // @@protoc_insertion_point(field_release:dspb.SelectField.aggre_func)
  
  return aggre_func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectField::set_allocated_aggre_func(::std::string* aggre_func) {
  if (aggre_func != NULL) {
    
  } else {
    
  }
  aggre_func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aggre_func);
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectField.aggre_func)
}

// .dspb.ColumnInfo column = 3;
bool SelectField::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
void SelectField::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
const ::dspb::ColumnInfo& SelectField::column() const {
  const ::dspb::ColumnInfo* p = column_;
  // @@protoc_insertion_point(field_get:dspb.SelectField.column)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ColumnInfo*>(
      &::dspb::_ColumnInfo_default_instance_);
}
::dspb::ColumnInfo* SelectField::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::dspb::ColumnInfo;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectField.column)
  return column_;
}
::dspb::ColumnInfo* SelectField::release_column() {
  // @@protoc_insertion_point(field_release:dspb.SelectField.column)
  
  ::dspb::ColumnInfo* temp = column_;
  column_ = NULL;
  return temp;
}
void SelectField::set_allocated_column(::dspb::ColumnInfo* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectField.column)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scope::kStartFieldNumber;
const int Scope::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scope::Scope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Scope)
}
Scope::Scope(const Scope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.Scope)
}

void Scope::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Scope::~Scope() {
  // @@protoc_insertion_point(destructor:dspb.Scope)
  SharedDtor();
}

void Scope::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scope::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scope& Scope::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scope* Scope::New(::google::protobuf::Arena* arena) const {
  Scope* n = new Scope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scope::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Scope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Scope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Scope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Scope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Scope)
  return false;
#undef DO_
}

void Scope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Scope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start(), output);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Scope)
}

::google::protobuf::uint8* Scope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Scope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start(), target);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Scope)
  return target;
}

size_t Scope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Scope)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start());
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  const Scope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Scope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Scope)
    MergeFrom(*source);
  }
}

void Scope::MergeFrom(const Scope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
}

void Scope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scope::CopyFrom(const Scope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scope::IsInitialized() const {
  return true;
}

void Scope::Swap(Scope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scope::InternalSwap(Scope* other) {
  using std::swap;
  start_.Swap(&other->start_);
  limit_.Swap(&other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scope::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scope

// bytes start = 1;
void Scope::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Scope::start() const {
  // @@protoc_insertion_point(field_get:dspb.Scope.start)
  return start_.GetNoArena();
}
void Scope::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Scope.start)
}
#if LANG_CXX11
void Scope::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Scope.start)
}
#endif
void Scope::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Scope.start)
}
void Scope::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Scope.start)
}
::std::string* Scope::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Scope.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scope::release_start() {
  // @@protoc_insertion_point(field_release:dspb.Scope.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scope::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:dspb.Scope.start)
}

// bytes limit = 2;
void Scope::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Scope::limit() const {
  // @@protoc_insertion_point(field_get:dspb.Scope.limit)
  return limit_.GetNoArena();
}
void Scope::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Scope.limit)
}
#if LANG_CXX11
void Scope::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Scope.limit)
}
#endif
void Scope::set_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Scope.limit)
}
void Scope::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Scope.limit)
}
::std::string* Scope::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Scope.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scope::release_limit() {
  // @@protoc_insertion_point(field_release:dspb.Scope.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scope::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:dspb.Scope.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectRequest::kKeyFieldNumber;
const int SelectRequest::kScopeFieldNumber;
const int SelectRequest::kFieldListFieldNumber;
const int SelectRequest::kWhereExprFieldNumber;
const int SelectRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectRequest::SelectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SelectRequest)
}
SelectRequest::SelectRequest(const SelectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_list_(from.field_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    scope_ = new ::dspb::Scope(*from.scope_);
  } else {
    scope_ = NULL;
  }
  if (from.has_where_expr()) {
    where_expr_ = new ::dspb::Expr(*from.where_expr_);
  } else {
    where_expr_ = NULL;
  }
  if (from.has_limit()) {
    limit_ = new ::dspb::Limit(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.SelectRequest)
}

void SelectRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(limit_));
  _cached_size_ = 0;
}

SelectRequest::~SelectRequest() {
  // @@protoc_insertion_point(destructor:dspb.SelectRequest)
  SharedDtor();
}

void SelectRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scope_;
  if (this != internal_default_instance()) delete where_expr_;
  if (this != internal_default_instance()) delete limit_;
}

void SelectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectRequest& SelectRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectRequest* SelectRequest::New(::google::protobuf::Arena* arena) const {
  SelectRequest* n = new SelectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_list_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) {
    delete scope_;
  }
  scope_ = NULL;
  if (GetArenaNoVirtual() == NULL && where_expr_ != NULL) {
    delete where_expr_;
  }
  where_expr_ = NULL;
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool SelectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SelectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Scope scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.SelectField field_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Expr where_expr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_where_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Limit limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SelectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SelectRequest)
  return false;
#undef DO_
}

void SelectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .dspb.Scope scope = 2;
  if (this->has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scope_, output);
  }

  // repeated .dspb.SelectField field_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field_list(static_cast<int>(i)), output);
  }

  // .dspb.Expr where_expr = 4;
  if (this->has_where_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->where_expr_, output);
  }

  // .dspb.Limit limit = 5;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->limit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SelectRequest)
}

::google::protobuf::uint8* SelectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .dspb.Scope scope = 2;
  if (this->has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scope_, deterministic, target);
  }

  // repeated .dspb.SelectField field_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->field_list(static_cast<int>(i)), deterministic, target);
  }

  // .dspb.Expr where_expr = 4;
  if (this->has_where_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->where_expr_, deterministic, target);
  }

  // .dspb.Limit limit = 5;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->limit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SelectRequest)
  return target;
}

size_t SelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SelectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.SelectField field_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_list(static_cast<int>(i)));
    }
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .dspb.Scope scope = 2;
  if (this->has_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scope_);
  }

  // .dspb.Expr where_expr = 4;
  if (this->has_where_expr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->where_expr_);
  }

  // .dspb.Limit limit = 5;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SelectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SelectRequest)
    MergeFrom(*source);
  }
}

void SelectRequest::MergeFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_list_.MergeFrom(from.field_list_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    mutable_scope()->::dspb::Scope::MergeFrom(from.scope());
  }
  if (from.has_where_expr()) {
    mutable_where_expr()->::dspb::Expr::MergeFrom(from.where_expr());
  }
  if (from.has_limit()) {
    mutable_limit()->::dspb::Limit::MergeFrom(from.limit());
  }
}

void SelectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRequest::CopyFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRequest::IsInitialized() const {
  return true;
}

void SelectRequest::Swap(SelectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectRequest::InternalSwap(SelectRequest* other) {
  using std::swap;
  field_list_.InternalSwap(&other->field_list_);
  key_.Swap(&other->key_);
  swap(scope_, other->scope_);
  swap(where_expr_, other->where_expr_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectRequest

// bytes key = 1;
void SelectRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectRequest::key() const {
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.key)
  return key_.GetNoArena();
}
void SelectRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SelectRequest.key)
}
#if LANG_CXX11
void SelectRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SelectRequest.key)
}
#endif
void SelectRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SelectRequest.key)
}
void SelectRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SelectRequest.key)
}
::std::string* SelectRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectRequest::release_key() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.key)
}

// .dspb.Scope scope = 2;
bool SelectRequest::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
void SelectRequest::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) delete scope_;
  scope_ = NULL;
}
const ::dspb::Scope& SelectRequest::scope() const {
  const ::dspb::Scope* p = scope_;
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Scope*>(
      &::dspb::_Scope_default_instance_);
}
::dspb::Scope* SelectRequest::mutable_scope() {
  
  if (scope_ == NULL) {
    scope_ = new ::dspb::Scope;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.scope)
  return scope_;
}
::dspb::Scope* SelectRequest::release_scope() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.scope)
  
  ::dspb::Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_scope(::dspb::Scope* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.scope)
}

// repeated .dspb.SelectField field_list = 3;
int SelectRequest::field_list_size() const {
  return field_list_.size();
}
void SelectRequest::clear_field_list() {
  field_list_.Clear();
}
const ::dspb::SelectField& SelectRequest::field_list(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.field_list)
  return field_list_.Get(index);
}
::dspb::SelectField* SelectRequest::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.field_list)
  return field_list_.Mutable(index);
}
::dspb::SelectField* SelectRequest::add_field_list() {
  // @@protoc_insertion_point(field_add:dspb.SelectRequest.field_list)
  return field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::SelectField >*
SelectRequest::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectRequest.field_list)
  return &field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::SelectField >&
SelectRequest::field_list() const {
  // @@protoc_insertion_point(field_list:dspb.SelectRequest.field_list)
  return field_list_;
}

// .dspb.Expr where_expr = 4;
bool SelectRequest::has_where_expr() const {
  return this != internal_default_instance() && where_expr_ != NULL;
}
void SelectRequest::clear_where_expr() {
  if (GetArenaNoVirtual() == NULL && where_expr_ != NULL) delete where_expr_;
  where_expr_ = NULL;
}
const ::dspb::Expr& SelectRequest::where_expr() const {
  const ::dspb::Expr* p = where_expr_;
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.where_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Expr*>(
      &::dspb::_Expr_default_instance_);
}
::dspb::Expr* SelectRequest::mutable_where_expr() {
  
  if (where_expr_ == NULL) {
    where_expr_ = new ::dspb::Expr;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.where_expr)
  return where_expr_;
}
::dspb::Expr* SelectRequest::release_where_expr() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.where_expr)
  
  ::dspb::Expr* temp = where_expr_;
  where_expr_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_where_expr(::dspb::Expr* where_expr) {
  delete where_expr_;
  where_expr_ = where_expr;
  if (where_expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.where_expr)
}

// .dspb.Limit limit = 5;
bool SelectRequest::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
void SelectRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) delete limit_;
  limit_ = NULL;
}
const ::dspb::Limit& SelectRequest::limit() const {
  const ::dspb::Limit* p = limit_;
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Limit*>(
      &::dspb::_Limit_default_instance_);
}
::dspb::Limit* SelectRequest::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::dspb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.limit)
  return limit_;
}
::dspb::Limit* SelectRequest::release_limit() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.limit)
  
  ::dspb::Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_limit(::dspb::Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowValue::kFieldsFieldNumber;
const int RowValue::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowValue::RowValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RowValue)
}
RowValue::RowValue(const RowValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fields().size() > 0) {
    fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:dspb.RowValue)
}

void RowValue::SharedCtor() {
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RowValue::~RowValue() {
  // @@protoc_insertion_point(destructor:dspb.RowValue)
  SharedDtor();
}

void RowValue::SharedDtor() {
  fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RowValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowValue::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowValue& RowValue::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

RowValue* RowValue::New(::google::protobuf::Arena* arena) const {
  RowValue* n = new RowValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowValue::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RowValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RowValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RowValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RowValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RowValue)
  return false;
#undef DO_
}

void RowValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RowValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fields = 1;
  if (this->fields().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fields(), output);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RowValue)
}

::google::protobuf::uint8* RowValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RowValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fields = 1;
  if (this->fields().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fields(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RowValue)
  return target;
}

size_t RowValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RowValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes fields = 1;
  if (this->fields().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fields());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RowValue)
  GOOGLE_DCHECK_NE(&from, this);
  const RowValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RowValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RowValue)
    MergeFrom(*source);
  }
}

void RowValue::MergeFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RowValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fields().size() > 0) {

    fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void RowValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowValue::CopyFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowValue::IsInitialized() const {
  return true;
}

void RowValue::Swap(RowValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowValue::InternalSwap(RowValue* other) {
  using std::swap;
  fields_.Swap(&other->fields_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowValue::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowValue

// bytes fields = 1;
void RowValue::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RowValue::fields() const {
  // @@protoc_insertion_point(field_get:dspb.RowValue.fields)
  return fields_.GetNoArena();
}
void RowValue::set_fields(const ::std::string& value) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.RowValue.fields)
}
#if LANG_CXX11
void RowValue::set_fields(::std::string&& value) {
  
  fields_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.RowValue.fields)
}
#endif
void RowValue::set_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.RowValue.fields)
}
void RowValue::set_fields(const void* value, size_t size) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.RowValue.fields)
}
::std::string* RowValue::mutable_fields() {
  
  // @@protoc_insertion_point(field_mutable:dspb.RowValue.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowValue::release_fields() {
  // @@protoc_insertion_point(field_release:dspb.RowValue.fields)
  
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RowValue::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    
  } else {
    
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:dspb.RowValue.fields)
}

// uint64 version = 2;
void RowValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RowValue::version() const {
  // @@protoc_insertion_point(field_get:dspb.RowValue.version)
  return version_;
}
void RowValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dspb.RowValue.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowIntent::kOpTypeFieldNumber;
const int RowIntent::kTxnIdFieldNumber;
const int RowIntent::kPrimaryKeyFieldNumber;
const int RowIntent::kTimeoutFieldNumber;
const int RowIntent::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowIntent::RowIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RowIntent)
}
RowIntent::RowIntent(const RowIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_value()) {
    value_ = new ::dspb::RowValue(*from.value_);
  } else {
    value_ = NULL;
  }
  ::memcpy(&op_type_, &from.op_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&op_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:dspb.RowIntent)
}

void RowIntent::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timeout_));
  _cached_size_ = 0;
}

RowIntent::~RowIntent() {
  // @@protoc_insertion_point(destructor:dspb.RowIntent)
  SharedDtor();
}

void RowIntent::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void RowIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowIntent::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowIntent& RowIntent::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

RowIntent* RowIntent::New(::google::protobuf::Arena* arena) const {
  RowIntent* n = new RowIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RowIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(timeout_));
  _internal_metadata_.Clear();
}

bool RowIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RowIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.OpType op_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op_type(static_cast< ::dspb::OpType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.RowIntent.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.RowValue value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RowIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RowIntent)
  return false;
#undef DO_
}

void RowIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RowIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.OpType op_type = 1;
  if (this->op_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.RowIntent.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_key(), output);
  }

  // bool timeout = 4;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->timeout(), output);
  }

  // .dspb.RowValue value = 10;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RowIntent)
}

::google::protobuf::uint8* RowIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RowIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.OpType op_type = 1;
  if (this->op_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.RowIntent.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_key(), target);
  }

  // bool timeout = 4;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->timeout(), target);
  }

  // .dspb.RowValue value = 10;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RowIntent)
  return target;
}

size_t RowIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RowIntent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // .dspb.RowValue value = 10;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .dspb.OpType op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
  }

  // bool timeout = 4;
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RowIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const RowIntent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RowIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RowIntent)
    MergeFrom(*source);
  }
}

void RowIntent::MergeFrom(const RowIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RowIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_value()) {
    mutable_value()->::dspb::RowValue::MergeFrom(from.value());
  }
  if (from.op_type() != 0) {
    set_op_type(from.op_type());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void RowIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RowIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowIntent::CopyFrom(const RowIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RowIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowIntent::IsInitialized() const {
  return true;
}

void RowIntent::Swap(RowIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowIntent::InternalSwap(RowIntent* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(value_, other->value_);
  swap(op_type_, other->op_type_);
  swap(timeout_, other->timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowIntent::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowIntent

// .dspb.OpType op_type = 1;
void RowIntent::clear_op_type() {
  op_type_ = 0;
}
::dspb::OpType RowIntent::op_type() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.op_type)
  return static_cast< ::dspb::OpType >(op_type_);
}
void RowIntent::set_op_type(::dspb::OpType value) {
  
  op_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.RowIntent.op_type)
}

// string txn_id = 2;
void RowIntent::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RowIntent::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.txn_id)
  return txn_id_.GetNoArena();
}
void RowIntent::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.RowIntent.txn_id)
}
#if LANG_CXX11
void RowIntent::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.RowIntent.txn_id)
}
#endif
void RowIntent::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.RowIntent.txn_id)
}
void RowIntent::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.RowIntent.txn_id)
}
::std::string* RowIntent::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.RowIntent.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowIntent::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.RowIntent.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RowIntent::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.RowIntent.txn_id)
}

// bytes primary_key = 3;
void RowIntent::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RowIntent::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.primary_key)
  return primary_key_.GetNoArena();
}
void RowIntent::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.RowIntent.primary_key)
}
#if LANG_CXX11
void RowIntent::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.RowIntent.primary_key)
}
#endif
void RowIntent::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.RowIntent.primary_key)
}
void RowIntent::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.RowIntent.primary_key)
}
::std::string* RowIntent::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.RowIntent.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowIntent::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.RowIntent.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RowIntent::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.RowIntent.primary_key)
}

// bool timeout = 4;
void RowIntent::clear_timeout() {
  timeout_ = false;
}
bool RowIntent::timeout() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.timeout)
  return timeout_;
}
void RowIntent::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:dspb.RowIntent.timeout)
}

// .dspb.RowValue value = 10;
bool RowIntent::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void RowIntent::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::dspb::RowValue& RowIntent::value() const {
  const ::dspb::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:dspb.RowIntent.value)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RowValue*>(
      &::dspb::_RowValue_default_instance_);
}
::dspb::RowValue* RowIntent::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::dspb::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RowIntent.value)
  return value_;
}
::dspb::RowValue* RowIntent::release_value() {
  // @@protoc_insertion_point(field_release:dspb.RowIntent.value)
  
  ::dspb::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
void RowIntent::set_allocated_value(::dspb::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RowIntent.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kKeyFieldNumber;
const int Row::kValueFieldNumber;
const int Row::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::dspb::RowValue(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_intent()) {
    intent_ = new ::dspb::RowIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.Row)
}

void Row::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intent_) -
      reinterpret_cast<char*>(&value_)) + sizeof(intent_));
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:dspb.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete intent_;
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Row& Row::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) {
    delete intent_;
  }
  intent_ = NULL;
  _internal_metadata_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.RowValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.RowIntent intent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .dspb.RowValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // .dspb.RowIntent intent = 3;
  if (this->has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->intent_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .dspb.RowValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  // .dspb.RowIntent intent = 3;
  if (this->has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->intent_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Row)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .dspb.RowValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .dspb.RowIntent intent = 3;
  if (this->has_intent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->intent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::dspb::RowValue::MergeFrom(from.value());
  }
  if (from.has_intent()) {
    mutable_intent()->::dspb::RowIntent::MergeFrom(from.intent());
  }
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  swap(intent_, other->intent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// bytes key = 1;
void Row::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:dspb.Row.key)
  return key_.GetNoArena();
}
void Row::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Row.key)
}
#if LANG_CXX11
void Row::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Row.key)
}
#endif
void Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Row.key)
}
void Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Row.key)
}
::std::string* Row::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Row.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:dspb.Row.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Row::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.Row.key)
}

// .dspb.RowValue value = 2;
bool Row::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void Row::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::dspb::RowValue& Row::value() const {
  const ::dspb::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:dspb.Row.value)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RowValue*>(
      &::dspb::_RowValue_default_instance_);
}
::dspb::RowValue* Row::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::dspb::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Row.value)
  return value_;
}
::dspb::RowValue* Row::release_value() {
  // @@protoc_insertion_point(field_release:dspb.Row.value)
  
  ::dspb::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
void Row::set_allocated_value(::dspb::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Row.value)
}

// .dspb.RowIntent intent = 3;
bool Row::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
void Row::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
const ::dspb::RowIntent& Row::intent() const {
  const ::dspb::RowIntent* p = intent_;
  // @@protoc_insertion_point(field_get:dspb.Row.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RowIntent*>(
      &::dspb::_RowIntent_default_instance_);
}
::dspb::RowIntent* Row::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::dspb::RowIntent;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Row.intent)
  return intent_;
}
::dspb::RowIntent* Row::release_intent() {
  // @@protoc_insertion_point(field_release:dspb.Row.intent)
  
  ::dspb::RowIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void Row::set_allocated_intent(::dspb::RowIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Row.intent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectResponse::kCodeFieldNumber;
const int SelectResponse::kRowsFieldNumber;
const int SelectResponse::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectResponse::SelectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SelectResponse)
}
SelectResponse::SelectResponse(const SelectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:dspb.SelectResponse)
}

void SelectResponse::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  _cached_size_ = 0;
}

SelectResponse::~SelectResponse() {
  // @@protoc_insertion_point(destructor:dspb.SelectResponse)
  SharedDtor();
}

void SelectResponse::SharedDtor() {
}

void SelectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectResponse& SelectResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectResponse* SelectResponse::New(::google::protobuf::Arena* arena) const {
  SelectResponse* n = new SelectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool SelectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SelectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SelectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SelectResponse)
  return false;
#undef DO_
}

void SelectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .dspb.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(static_cast<int>(i)), output);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SelectResponse)
}

::google::protobuf::uint8* SelectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .dspb.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rows(static_cast<int>(i)), deterministic, target);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SelectResponse)
  return target;
}

size_t SelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SelectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.Row rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(static_cast<int>(i)));
    }
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SelectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SelectResponse)
    MergeFrom(*source);
  }
}

void SelectResponse::MergeFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void SelectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectResponse::CopyFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResponse::IsInitialized() const {
  return true;
}

void SelectResponse::Swap(SelectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectResponse::InternalSwap(SelectResponse* other) {
  using std::swap;
  rows_.InternalSwap(&other->rows_);
  swap(offset_, other->offset_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectResponse

// int32 code = 1;
void SelectResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 SelectResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.SelectResponse.code)
  return code_;
}
void SelectResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectResponse.code)
}

// repeated .dspb.Row rows = 2;
int SelectResponse::rows_size() const {
  return rows_.size();
}
void SelectResponse::clear_rows() {
  rows_.Clear();
}
const ::dspb::Row& SelectResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectResponse.rows)
  return rows_.Get(index);
}
::dspb::Row* SelectResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectResponse.rows)
  return rows_.Mutable(index);
}
::dspb::Row* SelectResponse::add_rows() {
  // @@protoc_insertion_point(field_add:dspb.SelectResponse.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Row >*
SelectResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectResponse.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Row >&
SelectResponse::rows() const {
  // @@protoc_insertion_point(field_list:dspb.SelectResponse.rows)
  return rows_;
}

// uint64 offset = 3;
void SelectResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SelectResponse::offset() const {
  // @@protoc_insertion_point(field_get:dspb.SelectResponse.offset)
  return offset_;
}
void SelectResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectResponse.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectFlowRequest::kProcessorsFieldNumber;
const int SelectFlowRequest::kOutputOffsetsFieldNumber;
const int SelectFlowRequest::kGatherTraceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectFlowRequest::SelectFlowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SelectFlowRequest)
}
SelectFlowRequest::SelectFlowRequest(const SelectFlowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      processors_(from.processors_),
      output_offsets_(from.output_offsets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gather_trace_ = from.gather_trace_;
  // @@protoc_insertion_point(copy_constructor:dspb.SelectFlowRequest)
}

void SelectFlowRequest::SharedCtor() {
  gather_trace_ = false;
  _cached_size_ = 0;
}

SelectFlowRequest::~SelectFlowRequest() {
  // @@protoc_insertion_point(destructor:dspb.SelectFlowRequest)
  SharedDtor();
}

void SelectFlowRequest::SharedDtor() {
}

void SelectFlowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectFlowRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectFlowRequest& SelectFlowRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectFlowRequest* SelectFlowRequest::New(::google::protobuf::Arena* arena) const {
  SelectFlowRequest* n = new SelectFlowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectFlowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SelectFlowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processors_.Clear();
  output_offsets_.Clear();
  gather_trace_ = false;
  _internal_metadata_.Clear();
}

bool SelectFlowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SelectFlowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.Processor processors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 output_offsets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_output_offsets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_output_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gather_trace = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_trace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SelectFlowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SelectFlowRequest)
  return false;
#undef DO_
}

void SelectFlowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SelectFlowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Processor processors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->processors(static_cast<int>(i)), output);
  }

  // repeated uint32 output_offsets = 2;
  if (this->output_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _output_offsets_cached_byte_size_));
  }
  for (int i = 0, n = this->output_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->output_offsets(i), output);
  }

  // bool gather_trace = 3;
  if (this->gather_trace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gather_trace(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SelectFlowRequest)
}

::google::protobuf::uint8* SelectFlowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SelectFlowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Processor processors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->processors(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 output_offsets = 2;
  if (this->output_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _output_offsets_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->output_offsets_, target);
  }

  // bool gather_trace = 3;
  if (this->gather_trace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gather_trace(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SelectFlowRequest)
  return target;
}

size_t SelectFlowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SelectFlowRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.Processor processors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->processors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processors(static_cast<int>(i)));
    }
  }

  // repeated uint32 output_offsets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->output_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_offsets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool gather_trace = 3;
  if (this->gather_trace() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectFlowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SelectFlowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectFlowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectFlowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SelectFlowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SelectFlowRequest)
    MergeFrom(*source);
  }
}

void SelectFlowRequest::MergeFrom(const SelectFlowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SelectFlowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processors_.MergeFrom(from.processors_);
  output_offsets_.MergeFrom(from.output_offsets_);
  if (from.gather_trace() != 0) {
    set_gather_trace(from.gather_trace());
  }
}

void SelectFlowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SelectFlowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectFlowRequest::CopyFrom(const SelectFlowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SelectFlowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectFlowRequest::IsInitialized() const {
  return true;
}

void SelectFlowRequest::Swap(SelectFlowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectFlowRequest::InternalSwap(SelectFlowRequest* other) {
  using std::swap;
  processors_.InternalSwap(&other->processors_);
  output_offsets_.InternalSwap(&other->output_offsets_);
  swap(gather_trace_, other->gather_trace_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectFlowRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectFlowRequest

// repeated .dspb.Processor processors = 1;
int SelectFlowRequest::processors_size() const {
  return processors_.size();
}
void SelectFlowRequest::clear_processors() {
  processors_.Clear();
}
const ::dspb::Processor& SelectFlowRequest::processors(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowRequest.processors)
  return processors_.Get(index);
}
::dspb::Processor* SelectFlowRequest::mutable_processors(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowRequest.processors)
  return processors_.Mutable(index);
}
::dspb::Processor* SelectFlowRequest::add_processors() {
  // @@protoc_insertion_point(field_add:dspb.SelectFlowRequest.processors)
  return processors_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Processor >*
SelectFlowRequest::mutable_processors() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowRequest.processors)
  return &processors_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Processor >&
SelectFlowRequest::processors() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowRequest.processors)
  return processors_;
}

// repeated uint32 output_offsets = 2;
int SelectFlowRequest::output_offsets_size() const {
  return output_offsets_.size();
}
void SelectFlowRequest::clear_output_offsets() {
  output_offsets_.Clear();
}
::google::protobuf::uint32 SelectFlowRequest::output_offsets(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowRequest.output_offsets)
  return output_offsets_.Get(index);
}
void SelectFlowRequest::set_output_offsets(int index, ::google::protobuf::uint32 value) {
  output_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:dspb.SelectFlowRequest.output_offsets)
}
void SelectFlowRequest::add_output_offsets(::google::protobuf::uint32 value) {
  output_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:dspb.SelectFlowRequest.output_offsets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SelectFlowRequest::output_offsets() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowRequest.output_offsets)
  return output_offsets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SelectFlowRequest::mutable_output_offsets() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowRequest.output_offsets)
  return &output_offsets_;
}

// bool gather_trace = 3;
void SelectFlowRequest::clear_gather_trace() {
  gather_trace_ = false;
}
bool SelectFlowRequest::gather_trace() const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowRequest.gather_trace)
  return gather_trace_;
}
void SelectFlowRequest::set_gather_trace(bool value) {
  
  gather_trace_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectFlowRequest.gather_trace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectFlowResponse::kCodeFieldNumber;
const int SelectFlowResponse::kRowsFieldNumber;
const int SelectFlowResponse::kLastKeyFieldNumber;
const int SelectFlowResponse::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectFlowResponse::SelectFlowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SelectFlowResponse)
}
SelectFlowResponse::SelectFlowResponse(const SelectFlowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      traces_(from.traces_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_key().size() > 0) {
    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:dspb.SelectFlowResponse)
}

void SelectFlowResponse::SharedCtor() {
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

SelectFlowResponse::~SelectFlowResponse() {
  // @@protoc_insertion_point(destructor:dspb.SelectFlowResponse)
  SharedDtor();
}

void SelectFlowResponse::SharedDtor() {
  last_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelectFlowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectFlowResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectFlowResponse& SelectFlowResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectFlowResponse* SelectFlowResponse::New(::google::protobuf::Arena* arena) const {
  SelectFlowResponse* n = new SelectFlowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectFlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SelectFlowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  traces_.Clear();
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool SelectFlowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SelectFlowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.ProcessorTrace traces = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SelectFlowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SelectFlowResponse)
  return false;
#undef DO_
}

void SelectFlowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SelectFlowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .dspb.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(static_cast<int>(i)), output);
  }

  // bytes last_key = 3;
  if (this->last_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->last_key(), output);
  }

  // repeated .dspb.ProcessorTrace traces = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->traces(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SelectFlowResponse)
}

::google::protobuf::uint8* SelectFlowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SelectFlowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .dspb.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rows(static_cast<int>(i)), deterministic, target);
  }

  // bytes last_key = 3;
  if (this->last_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->last_key(), target);
  }

  // repeated .dspb.ProcessorTrace traces = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traces_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->traces(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SelectFlowResponse)
  return target;
}

size_t SelectFlowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SelectFlowResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.Row rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(static_cast<int>(i)));
    }
  }

  // repeated .dspb.ProcessorTrace traces = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->traces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traces(static_cast<int>(i)));
    }
  }

  // bytes last_key = 3;
  if (this->last_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_key());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectFlowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SelectFlowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectFlowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectFlowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SelectFlowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SelectFlowResponse)
    MergeFrom(*source);
  }
}

void SelectFlowResponse::MergeFrom(const SelectFlowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SelectFlowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  traces_.MergeFrom(from.traces_);
  if (from.last_key().size() > 0) {

    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void SelectFlowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SelectFlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectFlowResponse::CopyFrom(const SelectFlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SelectFlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectFlowResponse::IsInitialized() const {
  return true;
}

void SelectFlowResponse::Swap(SelectFlowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectFlowResponse::InternalSwap(SelectFlowResponse* other) {
  using std::swap;
  rows_.InternalSwap(&other->rows_);
  traces_.InternalSwap(&other->traces_);
  last_key_.Swap(&other->last_key_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectFlowResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectFlowResponse

// int32 code = 1;
void SelectFlowResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 SelectFlowResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.code)
  return code_;
}
void SelectFlowResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectFlowResponse.code)
}

// repeated .dspb.Row rows = 2;
int SelectFlowResponse::rows_size() const {
  return rows_.size();
}
void SelectFlowResponse::clear_rows() {
  rows_.Clear();
}
const ::dspb::Row& SelectFlowResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.rows)
  return rows_.Get(index);
}
::dspb::Row* SelectFlowResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowResponse.rows)
  return rows_.Mutable(index);
}
::dspb::Row* SelectFlowResponse::add_rows() {
  // @@protoc_insertion_point(field_add:dspb.SelectFlowResponse.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Row >*
SelectFlowResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowResponse.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Row >&
SelectFlowResponse::rows() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowResponse.rows)
  return rows_;
}

// bytes last_key = 3;
void SelectFlowResponse::clear_last_key() {
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectFlowResponse::last_key() const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.last_key)
  return last_key_.GetNoArena();
}
void SelectFlowResponse::set_last_key(const ::std::string& value) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SelectFlowResponse.last_key)
}
#if LANG_CXX11
void SelectFlowResponse::set_last_key(::std::string&& value) {
  
  last_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SelectFlowResponse.last_key)
}
#endif
void SelectFlowResponse::set_last_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SelectFlowResponse.last_key)
}
void SelectFlowResponse::set_last_key(const void* value, size_t size) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SelectFlowResponse.last_key)
}
::std::string* SelectFlowResponse::mutable_last_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowResponse.last_key)
  return last_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectFlowResponse::release_last_key() {
  // @@protoc_insertion_point(field_release:dspb.SelectFlowResponse.last_key)
  
  return last_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectFlowResponse::set_allocated_last_key(::std::string* last_key) {
  if (last_key != NULL) {
    
  } else {
    
  }
  last_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectFlowResponse.last_key)
}

// repeated .dspb.ProcessorTrace traces = 4;
int SelectFlowResponse::traces_size() const {
  return traces_.size();
}
void SelectFlowResponse::clear_traces() {
  traces_.Clear();
}
const ::dspb::ProcessorTrace& SelectFlowResponse::traces(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.traces)
  return traces_.Get(index);
}
::dspb::ProcessorTrace* SelectFlowResponse::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowResponse.traces)
  return traces_.Mutable(index);
}
::dspb::ProcessorTrace* SelectFlowResponse::add_traces() {
  // @@protoc_insertion_point(field_add:dspb.SelectFlowResponse.traces)
  return traces_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace >*
SelectFlowResponse::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowResponse.traces)
  return &traces_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace >&
SelectFlowResponse::traces() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowResponse.traces)
  return traces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueIntent::kOpTypeFieldNumber;
const int ValueIntent::kTxnIdFieldNumber;
const int ValueIntent::kPrimaryKeyFieldNumber;
const int ValueIntent::kTimeoutFieldNumber;
const int ValueIntent::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueIntent::ValueIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ValueIntent)
}
ValueIntent::ValueIntent(const ValueIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&op_type_, &from.op_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&op_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:dspb.ValueIntent)
}

void ValueIntent::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(timeout_));
  _cached_size_ = 0;
}

ValueIntent::~ValueIntent() {
  // @@protoc_insertion_point(destructor:dspb.ValueIntent)
  SharedDtor();
}

void ValueIntent::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ValueIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueIntent::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ValueIntent& ValueIntent::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValueIntent* ValueIntent::New(::google::protobuf::Arena* arena) const {
  ValueIntent* n = new ValueIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ValueIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(timeout_));
  _internal_metadata_.Clear();
}

bool ValueIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ValueIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.OpType op_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op_type(static_cast< ::dspb::OpType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ValueIntent.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ValueIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ValueIntent)
  return false;
#undef DO_
}

void ValueIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ValueIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.OpType op_type = 1;
  if (this->op_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ValueIntent.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_key(), output);
  }

  // bool timeout = 4;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->timeout(), output);
  }

  // bytes value = 10;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ValueIntent)
}

::google::protobuf::uint8* ValueIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ValueIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.OpType op_type = 1;
  if (this->op_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ValueIntent.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_key(), target);
  }

  // bool timeout = 4;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->timeout(), target);
  }

  // bytes value = 10;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ValueIntent)
  return target;
}

size_t ValueIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ValueIntent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // bytes value = 10;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .dspb.OpType op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
  }

  // bool timeout = 4;
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ValueIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueIntent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ValueIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ValueIntent)
    MergeFrom(*source);
  }
}

void ValueIntent::MergeFrom(const ValueIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ValueIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.op_type() != 0) {
    set_op_type(from.op_type());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void ValueIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ValueIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueIntent::CopyFrom(const ValueIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ValueIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueIntent::IsInitialized() const {
  return true;
}

void ValueIntent::Swap(ValueIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueIntent::InternalSwap(ValueIntent* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  value_.Swap(&other->value_);
  swap(op_type_, other->op_type_);
  swap(timeout_, other->timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueIntent::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueIntent

// .dspb.OpType op_type = 1;
void ValueIntent::clear_op_type() {
  op_type_ = 0;
}
::dspb::OpType ValueIntent::op_type() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.op_type)
  return static_cast< ::dspb::OpType >(op_type_);
}
void ValueIntent::set_op_type(::dspb::OpType value) {
  
  op_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.op_type)
}

// string txn_id = 2;
void ValueIntent::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ValueIntent::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.txn_id)
  return txn_id_.GetNoArena();
}
void ValueIntent::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.txn_id)
}
#if LANG_CXX11
void ValueIntent::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ValueIntent.txn_id)
}
#endif
void ValueIntent::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ValueIntent.txn_id)
}
void ValueIntent::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ValueIntent.txn_id)
}
::std::string* ValueIntent::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ValueIntent.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueIntent::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.ValueIntent.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueIntent::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.ValueIntent.txn_id)
}

// bytes primary_key = 3;
void ValueIntent::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ValueIntent::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.primary_key)
  return primary_key_.GetNoArena();
}
void ValueIntent::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.primary_key)
}
#if LANG_CXX11
void ValueIntent::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ValueIntent.primary_key)
}
#endif
void ValueIntent::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ValueIntent.primary_key)
}
void ValueIntent::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ValueIntent.primary_key)
}
::std::string* ValueIntent::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ValueIntent.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueIntent::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.ValueIntent.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueIntent::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ValueIntent.primary_key)
}

// bool timeout = 4;
void ValueIntent::clear_timeout() {
  timeout_ = false;
}
bool ValueIntent::timeout() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.timeout)
  return timeout_;
}
void ValueIntent::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.timeout)
}

// bytes value = 10;
void ValueIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ValueIntent::value() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.value)
  return value_.GetNoArena();
}
void ValueIntent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.value)
}
#if LANG_CXX11
void ValueIntent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ValueIntent.value)
}
#endif
void ValueIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ValueIntent.value)
}
void ValueIntent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ValueIntent.value)
}
::std::string* ValueIntent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ValueIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueIntent::release_value() {
  // @@protoc_insertion_point(field_release:dspb.ValueIntent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.ValueIntent.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
const int KeyValue::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_intent()) {
    intent_ = new ::dspb::ValueIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  intent_ = NULL;
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:dspb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValue& KeyValue::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) {
    delete intent_;
  }
  intent_ = NULL;
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ValueIntent intent = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // .dspb.ValueIntent intent = 10;
  if (this->has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->intent_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // .dspb.ValueIntent intent = 10;
  if (this->has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->intent_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.KeyValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .dspb.ValueIntent intent = 10;
  if (this->has_intent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->intent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_intent()) {
    mutable_intent()->::dspb::ValueIntent::MergeFrom(from.intent());
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(intent_, other->intent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// bytes key = 1;
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:dspb.KeyValue.key)
  return key_.GetNoArena();
}
void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.KeyValue.key)
}
#if LANG_CXX11
void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.KeyValue.key)
}
#endif
void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.KeyValue.key)
}
void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.KeyValue.key)
}
::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:dspb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyValue.key)
}

// bytes value = 2;
void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:dspb.KeyValue.value)
  return value_.GetNoArena();
}
void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.KeyValue.value)
}
#if LANG_CXX11
void KeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.KeyValue.value)
}
#endif
void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.KeyValue.value)
}
void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.KeyValue.value)
}
::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:dspb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyValue.value)
}

// .dspb.ValueIntent intent = 10;
bool KeyValue::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
void KeyValue::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
const ::dspb::ValueIntent& KeyValue::intent() const {
  const ::dspb::ValueIntent* p = intent_;
  // @@protoc_insertion_point(field_get:dspb.KeyValue.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ValueIntent*>(
      &::dspb::_ValueIntent_default_instance_);
}
::dspb::ValueIntent* KeyValue::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::dspb::ValueIntent;
  }
  // @@protoc_insertion_point(field_mutable:dspb.KeyValue.intent)
  return intent_;
}
::dspb::ValueIntent* KeyValue::release_intent() {
  // @@protoc_insertion_point(field_release:dspb.KeyValue.intent)
  
  ::dspb::ValueIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void KeyValue::set_allocated_intent(::dspb::ValueIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyValue.intent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRequest::kStartKeyFieldNumber;
const int ScanRequest::kEndKeyFieldNumber;
const int ScanRequest::kMaxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRequest::ScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ScanRequest)
}
ScanRequest::ScanRequest(const ScanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  max_count_ = from.max_count_;
  // @@protoc_insertion_point(copy_constructor:dspb.ScanRequest)
}

void ScanRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_count_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:dspb.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanRequest::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanRequest& ScanRequest::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanRequest* ScanRequest::New(::google::protobuf::Arena* arena) const {
  ScanRequest* n = new ScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ScanRequest)
  return false;
#undef DO_
}

void ScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_key = 1;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  // int64 max_count = 3;
  if (this->max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ScanRequest)
}

::google::protobuf::uint8* ScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_key = 1;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  // int64 max_count = 3;
  if (this->max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ScanRequest)
  return target;
}

size_t ScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ScanRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start_key = 1;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // int64 max_count = 3;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ScanRequest)
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.max_count() != 0) {
    set_max_count(from.max_count());
  }
}

void ScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {
  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRequest::InternalSwap(ScanRequest* other) {
  using std::swap;
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  swap(max_count_, other->max_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanRequest::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanRequest

// bytes start_key = 1;
void ScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.start_key)
  return start_key_.GetNoArena();
}
void ScanRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.start_key)
}
#if LANG_CXX11
void ScanRequest::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ScanRequest.start_key)
}
#endif
void ScanRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ScanRequest.start_key)
}
void ScanRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ScanRequest.start_key)
}
::std::string* ScanRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:dspb.ScanRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ScanRequest.start_key)
}

// bytes end_key = 2;
void ScanRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.end_key)
  return end_key_.GetNoArena();
}
void ScanRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.end_key)
}
#if LANG_CXX11
void ScanRequest::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ScanRequest.end_key)
}
#endif
void ScanRequest::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ScanRequest.end_key)
}
void ScanRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ScanRequest.end_key)
}
::std::string* ScanRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ScanRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:dspb.ScanRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ScanRequest.end_key)
}

// int64 max_count = 3;
void ScanRequest::clear_max_count() {
  max_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ScanRequest::max_count() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.max_count)
  return max_count_;
}
void ScanRequest::set_max_count(::google::protobuf::int64 value) {
  
  max_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.max_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanResponse::kCodeFieldNumber;
const int ScanResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanResponse::ScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ftxn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ScanResponse)
}
ScanResponse::ScanResponse(const ScanResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kvs_(from.kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:dspb.ScanResponse)
}

void ScanResponse::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:dspb.ScanResponse)
  SharedDtor();
}

void ScanResponse::SharedDtor() {
}

void ScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanResponse::descriptor() {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanResponse& ScanResponse::default_instance() {
  protobuf_dspb_2ftxn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanResponse* ScanResponse::New(::google::protobuf::Arena* arena) const {
  ScanResponse* n = new ScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  code_ = 0;
  _internal_metadata_.Clear();
}

bool ScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.KeyValue kvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ScanResponse)
  return false;
#undef DO_
}

void ScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .dspb.KeyValue kvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ScanResponse)
}

::google::protobuf::uint8* ScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .dspb.KeyValue kvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kvs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ScanResponse)
  return target;
}

size_t ScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ScanResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.KeyValue kvs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(static_cast<int>(i)));
    }
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ScanResponse)
    MergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {
  return true;
}

void ScanResponse::Swap(ScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanResponse::InternalSwap(ScanResponse* other) {
  using std::swap;
  kvs_.InternalSwap(&other->kvs_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanResponse::GetMetadata() const {
  protobuf_dspb_2ftxn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ftxn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanResponse

// int32 code = 1;
void ScanResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 ScanResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.ScanResponse.code)
  return code_;
}
void ScanResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.ScanResponse.code)
}

// repeated .dspb.KeyValue kvs = 2;
int ScanResponse::kvs_size() const {
  return kvs_.size();
}
void ScanResponse::clear_kvs() {
  kvs_.Clear();
}
const ::dspb::KeyValue& ScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:dspb.ScanResponse.kvs)
  return kvs_.Get(index);
}
::dspb::KeyValue* ScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.ScanResponse.kvs)
  return kvs_.Mutable(index);
}
::dspb::KeyValue* ScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:dspb.ScanResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::KeyValue >*
ScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:dspb.ScanResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::KeyValue >&
ScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:dspb.ScanResponse.kvs)
  return kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
