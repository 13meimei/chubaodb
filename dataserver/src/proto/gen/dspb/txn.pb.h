// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/txn.proto

#ifndef PROTOBUF_dspb_2ftxn_2eproto__INCLUDED
#define PROTOBUF_dspb_2ftxn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dspb/expr.pb.h"
#include "dspb/processorpb.pb.h"
// @@protoc_insertion_point(includes)
namespace dspb {
class ClearupRequest;
class ClearupRequestDefaultTypeInternal;
extern ClearupRequestDefaultTypeInternal _ClearupRequest_default_instance_;
class ClearupResponse;
class ClearupResponseDefaultTypeInternal;
extern ClearupResponseDefaultTypeInternal _ClearupResponse_default_instance_;
class DecideRequest;
class DecideRequestDefaultTypeInternal;
extern DecideRequestDefaultTypeInternal _DecideRequest_default_instance_;
class DecideResponse;
class DecideResponseDefaultTypeInternal;
extern DecideResponseDefaultTypeInternal _DecideResponse_default_instance_;
class GetLockInfoRequest;
class GetLockInfoRequestDefaultTypeInternal;
extern GetLockInfoRequestDefaultTypeInternal _GetLockInfoRequest_default_instance_;
class GetLockInfoResponse;
class GetLockInfoResponseDefaultTypeInternal;
extern GetLockInfoResponseDefaultTypeInternal _GetLockInfoResponse_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class LockError;
class LockErrorDefaultTypeInternal;
extern LockErrorDefaultTypeInternal _LockError_default_instance_;
class LockInfo;
class LockInfoDefaultTypeInternal;
extern LockInfoDefaultTypeInternal _LockInfo_default_instance_;
class NotFound;
class NotFoundDefaultTypeInternal;
extern NotFoundDefaultTypeInternal _NotFound_default_instance_;
class NotUnique;
class NotUniqueDefaultTypeInternal;
extern NotUniqueDefaultTypeInternal _NotUnique_default_instance_;
class PrepareRequest;
class PrepareRequestDefaultTypeInternal;
extern PrepareRequestDefaultTypeInternal _PrepareRequest_default_instance_;
class PrepareResponse;
class PrepareResponseDefaultTypeInternal;
extern PrepareResponseDefaultTypeInternal _PrepareResponse_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class RowIntent;
class RowIntentDefaultTypeInternal;
extern RowIntentDefaultTypeInternal _RowIntent_default_instance_;
class RowValue;
class RowValueDefaultTypeInternal;
extern RowValueDefaultTypeInternal _RowValue_default_instance_;
class ScanRequest;
class ScanRequestDefaultTypeInternal;
extern ScanRequestDefaultTypeInternal _ScanRequest_default_instance_;
class ScanResponse;
class ScanResponseDefaultTypeInternal;
extern ScanResponseDefaultTypeInternal _ScanResponse_default_instance_;
class Scope;
class ScopeDefaultTypeInternal;
extern ScopeDefaultTypeInternal _Scope_default_instance_;
class SelectField;
class SelectFieldDefaultTypeInternal;
extern SelectFieldDefaultTypeInternal _SelectField_default_instance_;
class SelectFlowRequest;
class SelectFlowRequestDefaultTypeInternal;
extern SelectFlowRequestDefaultTypeInternal _SelectFlowRequest_default_instance_;
class SelectFlowResponse;
class SelectFlowResponseDefaultTypeInternal;
extern SelectFlowResponseDefaultTypeInternal _SelectFlowResponse_default_instance_;
class SelectRequest;
class SelectRequestDefaultTypeInternal;
extern SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
class SelectResponse;
class SelectResponseDefaultTypeInternal;
extern SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
class ServerError;
class ServerErrorDefaultTypeInternal;
extern ServerErrorDefaultTypeInternal _ServerError_default_instance_;
class StatusConflict;
class StatusConflictDefaultTypeInternal;
extern StatusConflictDefaultTypeInternal _StatusConflict_default_instance_;
class TxnConflict;
class TxnConflictDefaultTypeInternal;
extern TxnConflictDefaultTypeInternal _TxnConflict_default_instance_;
class TxnError;
class TxnErrorDefaultTypeInternal;
extern TxnErrorDefaultTypeInternal _TxnError_default_instance_;
class TxnIntent;
class TxnIntentDefaultTypeInternal;
extern TxnIntentDefaultTypeInternal _TxnIntent_default_instance_;
class TxnValue;
class TxnValueDefaultTypeInternal;
extern TxnValueDefaultTypeInternal _TxnValue_default_instance_;
class UnexpectedVer;
class UnexpectedVerDefaultTypeInternal;
extern UnexpectedVerDefaultTypeInternal _UnexpectedVer_default_instance_;
class ValueIntent;
class ValueIntentDefaultTypeInternal;
extern ValueIntentDefaultTypeInternal _ValueIntent_default_instance_;
}  // namespace dspb

namespace dspb {

namespace protobuf_dspb_2ftxn_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dspb_2ftxn_2eproto

enum TxnError_ErrType {
  TxnError_ErrType_UNKNOWN = 0,
  TxnError_ErrType_SERVER_ERROR = 1,
  TxnError_ErrType_LOCKED = 2,
  TxnError_ErrType_UNEXPECTED_VER = 3,
  TxnError_ErrType_STATUS_CONFLICT = 4,
  TxnError_ErrType_NOT_FOUND = 5,
  TxnError_ErrType_NOT_UNIQUE = 6,
  TxnError_ErrType_TXN_CONFLICT = 7,
  TxnError_ErrType_TxnError_ErrType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TxnError_ErrType_TxnError_ErrType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TxnError_ErrType_IsValid(int value);
const TxnError_ErrType TxnError_ErrType_ErrType_MIN = TxnError_ErrType_UNKNOWN;
const TxnError_ErrType TxnError_ErrType_ErrType_MAX = TxnError_ErrType_TXN_CONFLICT;
const int TxnError_ErrType_ErrType_ARRAYSIZE = TxnError_ErrType_ErrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnError_ErrType_descriptor();
inline const ::std::string& TxnError_ErrType_Name(TxnError_ErrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnError_ErrType_descriptor(), value);
}
inline bool TxnError_ErrType_Parse(
    const ::std::string& name, TxnError_ErrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnError_ErrType>(
    TxnError_ErrType_descriptor(), name, value);
}
enum SelectField_Type {
  SelectField_Type_Column = 0,
  SelectField_Type_AggreFunction = 1,
  SelectField_Type_SelectField_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SelectField_Type_SelectField_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SelectField_Type_IsValid(int value);
const SelectField_Type SelectField_Type_Type_MIN = SelectField_Type_Column;
const SelectField_Type SelectField_Type_Type_MAX = SelectField_Type_AggreFunction;
const int SelectField_Type_Type_ARRAYSIZE = SelectField_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SelectField_Type_descriptor();
inline const ::std::string& SelectField_Type_Name(SelectField_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SelectField_Type_descriptor(), value);
}
inline bool SelectField_Type_Parse(
    const ::std::string& name, SelectField_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SelectField_Type>(
    SelectField_Type_descriptor(), name, value);
}
enum OpType {
  INSERT = 0,
  DELETE = 1,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpType_IsValid(int value);
const OpType OpType_MIN = INSERT;
const OpType OpType_MAX = DELETE;
const int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpType_descriptor();
inline const ::std::string& OpType_Name(OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpType_descriptor(), value);
}
inline bool OpType_Parse(
    const ::std::string& name, OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
enum TxnStatus {
  TXN_INIT = 0,
  COMMITTED = 1,
  ABORTED = 2,
  TxnStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TxnStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TxnStatus_IsValid(int value);
const TxnStatus TxnStatus_MIN = TXN_INIT;
const TxnStatus TxnStatus_MAX = ABORTED;
const int TxnStatus_ARRAYSIZE = TxnStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnStatus_descriptor();
inline const ::std::string& TxnStatus_Name(TxnStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnStatus_descriptor(), value);
}
inline bool TxnStatus_Parse(
    const ::std::string& name, TxnStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnStatus>(
    TxnStatus_descriptor(), name, value);
}
// ===================================================================

class TxnIntent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.TxnIntent) */ {
 public:
  TxnIntent();
  virtual ~TxnIntent();

  TxnIntent(const TxnIntent& from);

  inline TxnIntent& operator=(const TxnIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnIntent(TxnIntent&& from) noexcept
    : TxnIntent() {
    *this = ::std::move(from);
  }

  inline TxnIntent& operator=(TxnIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnIntent& default_instance();

  static inline const TxnIntent* internal_default_instance() {
    return reinterpret_cast<const TxnIntent*>(
               &_TxnIntent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TxnIntent* other);
  friend void swap(TxnIntent& a, TxnIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnIntent* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnIntent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnIntent& from);
  void MergeFrom(const TxnIntent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .dspb.OpType typ = 1;
  void clear_typ();
  static const int kTypFieldNumber = 1;
  ::dspb::OpType typ() const;
  void set_typ(::dspb::OpType value);

  // bool check_unique = 4;
  void clear_check_unique();
  static const int kCheckUniqueFieldNumber = 4;
  bool check_unique() const;
  void set_check_unique(bool value);

  // bool is_primary = 6;
  void clear_is_primary();
  static const int kIsPrimaryFieldNumber = 6;
  bool is_primary() const;
  void set_is_primary(bool value);

  // uint64 expected_ver = 5;
  void clear_expected_ver();
  static const int kExpectedVerFieldNumber = 5;
  ::google::protobuf::uint64 expected_ver() const;
  void set_expected_ver(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.TxnIntent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int typ_;
  bool check_unique_;
  bool is_primary_;
  ::google::protobuf::uint64 expected_ver_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.TxnValue) */ {
 public:
  TxnValue();
  virtual ~TxnValue();

  TxnValue(const TxnValue& from);

  inline TxnValue& operator=(const TxnValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnValue(TxnValue&& from) noexcept
    : TxnValue() {
    *this = ::std::move(from);
  }

  inline TxnValue& operator=(TxnValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnValue& default_instance();

  static inline const TxnValue* internal_default_instance() {
    return reinterpret_cast<const TxnValue*>(
               &_TxnValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TxnValue* other);
  friend void swap(TxnValue& a, TxnValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnValue* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnValue& from);
  void MergeFrom(const TxnValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes secondary_keys = 11;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 11;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 3;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // .dspb.TxnIntent intent = 2;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 2;
  const ::dspb::TxnIntent& intent() const;
  ::dspb::TxnIntent* mutable_intent();
  ::dspb::TxnIntent* release_intent();
  void set_allocated_intent(::dspb::TxnIntent* intent);

  // uint64 expired_at = 4;
  void clear_expired_at();
  static const int kExpiredAtFieldNumber = 4;
  ::google::protobuf::uint64 expired_at() const;
  void set_expired_at(::google::protobuf::uint64 value);

  // uint64 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // .dspb.TxnStatus txn_status = 10;
  void clear_txn_status();
  static const int kTxnStatusFieldNumber = 10;
  ::dspb::TxnStatus txn_status() const;
  void set_txn_status(::dspb::TxnStatus value);

  // @@protoc_insertion_point(class_scope:dspb.TxnValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::dspb::TxnIntent* intent_;
  ::google::protobuf::uint64 expired_at_;
  ::google::protobuf::uint64 version_;
  int txn_status_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.LockInfo) */ {
 public:
  LockInfo();
  virtual ~LockInfo();

  LockInfo(const LockInfo& from);

  inline LockInfo& operator=(const LockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockInfo(LockInfo&& from) noexcept
    : LockInfo() {
    *this = ::std::move(from);
  }

  inline LockInfo& operator=(LockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockInfo& default_instance();

  static inline const LockInfo* internal_default_instance() {
    return reinterpret_cast<const LockInfo*>(
               &_LockInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LockInfo* other);
  friend void swap(LockInfo& a, LockInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LockInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockInfo& from);
  void MergeFrom(const LockInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes secondary_keys = 13;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 13;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 11;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 11;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // bool timeout = 2;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  bool timeout() const;
  void set_timeout(bool value);

  // bool is_primary = 10;
  void clear_is_primary();
  static const int kIsPrimaryFieldNumber = 10;
  bool is_primary() const;
  void set_is_primary(bool value);

  // .dspb.TxnStatus status = 12;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  ::dspb::TxnStatus status() const;
  void set_status(::dspb::TxnStatus value);

  // @@protoc_insertion_point(class_scope:dspb.LockInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  bool timeout_;
  bool is_primary_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.LockError) */ {
 public:
  LockError();
  virtual ~LockError();

  LockError(const LockError& from);

  inline LockError& operator=(const LockError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockError(LockError&& from) noexcept
    : LockError() {
    *this = ::std::move(from);
  }

  inline LockError& operator=(LockError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockError& default_instance();

  static inline const LockError* internal_default_instance() {
    return reinterpret_cast<const LockError*>(
               &_LockError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LockError* other);
  friend void swap(LockError& a, LockError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockError* New() const PROTOBUF_FINAL { return New(NULL); }

  LockError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockError& from);
  void MergeFrom(const LockError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .dspb.LockInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::dspb::LockInfo& info() const;
  ::dspb::LockInfo* mutable_info();
  ::dspb::LockInfo* release_info();
  void set_allocated_info(::dspb::LockInfo* info);

  // @@protoc_insertion_point(class_scope:dspb.LockError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::dspb::LockInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnexpectedVer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.UnexpectedVer) */ {
 public:
  UnexpectedVer();
  virtual ~UnexpectedVer();

  UnexpectedVer(const UnexpectedVer& from);

  inline UnexpectedVer& operator=(const UnexpectedVer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnexpectedVer(UnexpectedVer&& from) noexcept
    : UnexpectedVer() {
    *this = ::std::move(from);
  }

  inline UnexpectedVer& operator=(UnexpectedVer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnexpectedVer& default_instance();

  static inline const UnexpectedVer* internal_default_instance() {
    return reinterpret_cast<const UnexpectedVer*>(
               &_UnexpectedVer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UnexpectedVer* other);
  friend void swap(UnexpectedVer& a, UnexpectedVer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnexpectedVer* New() const PROTOBUF_FINAL { return New(NULL); }

  UnexpectedVer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnexpectedVer& from);
  void MergeFrom(const UnexpectedVer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnexpectedVer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // uint64 expected_ver = 2;
  void clear_expected_ver();
  static const int kExpectedVerFieldNumber = 2;
  ::google::protobuf::uint64 expected_ver() const;
  void set_expected_ver(::google::protobuf::uint64 value);

  // uint64 actual_ver = 3;
  void clear_actual_ver();
  static const int kActualVerFieldNumber = 3;
  ::google::protobuf::uint64 actual_ver() const;
  void set_actual_ver(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.UnexpectedVer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 expected_ver_;
  ::google::protobuf::uint64 actual_ver_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusConflict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.StatusConflict) */ {
 public:
  StatusConflict();
  virtual ~StatusConflict();

  StatusConflict(const StatusConflict& from);

  inline StatusConflict& operator=(const StatusConflict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusConflict(StatusConflict&& from) noexcept
    : StatusConflict() {
    *this = ::std::move(from);
  }

  inline StatusConflict& operator=(StatusConflict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusConflict& default_instance();

  static inline const StatusConflict* internal_default_instance() {
    return reinterpret_cast<const StatusConflict*>(
               &_StatusConflict_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StatusConflict* other);
  friend void swap(StatusConflict& a, StatusConflict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusConflict* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusConflict* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusConflict& from);
  void MergeFrom(const StatusConflict& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusConflict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dspb.TxnStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::dspb::TxnStatus status() const;
  void set_status(::dspb::TxnStatus value);

  // @@protoc_insertion_point(class_scope:dspb.StatusConflict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ServerError) */ {
 public:
  ServerError();
  virtual ~ServerError();

  ServerError(const ServerError& from);

  inline ServerError& operator=(const ServerError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerError(ServerError&& from) noexcept
    : ServerError() {
    *this = ::std::move(from);
  }

  inline ServerError& operator=(ServerError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerError& default_instance();

  static inline const ServerError* internal_default_instance() {
    return reinterpret_cast<const ServerError*>(
               &_ServerError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ServerError* other);
  friend void swap(ServerError& a, ServerError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerError* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerError& from);
  void MergeFrom(const ServerError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dspb.ServerError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotFound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.NotFound) */ {
 public:
  NotFound();
  virtual ~NotFound();

  NotFound(const NotFound& from);

  inline NotFound& operator=(const NotFound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotFound(NotFound&& from) noexcept
    : NotFound() {
    *this = ::std::move(from);
  }

  inline NotFound& operator=(NotFound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotFound& default_instance();

  static inline const NotFound* internal_default_instance() {
    return reinterpret_cast<const NotFound*>(
               &_NotFound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NotFound* other);
  friend void swap(NotFound& a, NotFound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotFound* New() const PROTOBUF_FINAL { return New(NULL); }

  NotFound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotFound& from);
  void MergeFrom(const NotFound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotFound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:dspb.NotFound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotUnique : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.NotUnique) */ {
 public:
  NotUnique();
  virtual ~NotUnique();

  NotUnique(const NotUnique& from);

  inline NotUnique& operator=(const NotUnique& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotUnique(NotUnique&& from) noexcept
    : NotUnique() {
    *this = ::std::move(from);
  }

  inline NotUnique& operator=(NotUnique&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotUnique& default_instance();

  static inline const NotUnique* internal_default_instance() {
    return reinterpret_cast<const NotUnique*>(
               &_NotUnique_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(NotUnique* other);
  friend void swap(NotUnique& a, NotUnique& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotUnique* New() const PROTOBUF_FINAL { return New(NULL); }

  NotUnique* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotUnique& from);
  void MergeFrom(const NotUnique& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotUnique* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:dspb.NotUnique)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnConflict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.TxnConflict) */ {
 public:
  TxnConflict();
  virtual ~TxnConflict();

  TxnConflict(const TxnConflict& from);

  inline TxnConflict& operator=(const TxnConflict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnConflict(TxnConflict&& from) noexcept
    : TxnConflict() {
    *this = ::std::move(from);
  }

  inline TxnConflict& operator=(TxnConflict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnConflict& default_instance();

  static inline const TxnConflict* internal_default_instance() {
    return reinterpret_cast<const TxnConflict*>(
               &_TxnConflict_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TxnConflict* other);
  friend void swap(TxnConflict& a, TxnConflict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnConflict* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnConflict* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnConflict& from);
  void MergeFrom(const TxnConflict& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnConflict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string expected_txn_id = 1;
  void clear_expected_txn_id();
  static const int kExpectedTxnIdFieldNumber = 1;
  const ::std::string& expected_txn_id() const;
  void set_expected_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_expected_txn_id(::std::string&& value);
  #endif
  void set_expected_txn_id(const char* value);
  void set_expected_txn_id(const char* value, size_t size);
  ::std::string* mutable_expected_txn_id();
  ::std::string* release_expected_txn_id();
  void set_allocated_expected_txn_id(::std::string* expected_txn_id);

  // string actual_txn_id = 2;
  void clear_actual_txn_id();
  static const int kActualTxnIdFieldNumber = 2;
  const ::std::string& actual_txn_id() const;
  void set_actual_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_actual_txn_id(::std::string&& value);
  #endif
  void set_actual_txn_id(const char* value);
  void set_actual_txn_id(const char* value, size_t size);
  ::std::string* mutable_actual_txn_id();
  ::std::string* release_actual_txn_id();
  void set_allocated_actual_txn_id(::std::string* actual_txn_id);

  // @@protoc_insertion_point(class_scope:dspb.TxnConflict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr expected_txn_id_;
  ::google::protobuf::internal::ArenaStringPtr actual_txn_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.TxnError) */ {
 public:
  TxnError();
  virtual ~TxnError();

  TxnError(const TxnError& from);

  inline TxnError& operator=(const TxnError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnError(TxnError&& from) noexcept
    : TxnError() {
    *this = ::std::move(from);
  }

  inline TxnError& operator=(TxnError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnError& default_instance();

  static inline const TxnError* internal_default_instance() {
    return reinterpret_cast<const TxnError*>(
               &_TxnError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TxnError* other);
  friend void swap(TxnError& a, TxnError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnError* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnError& from);
  void MergeFrom(const TxnError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TxnError_ErrType ErrType;
  static const ErrType UNKNOWN =
    TxnError_ErrType_UNKNOWN;
  static const ErrType SERVER_ERROR =
    TxnError_ErrType_SERVER_ERROR;
  static const ErrType LOCKED =
    TxnError_ErrType_LOCKED;
  static const ErrType UNEXPECTED_VER =
    TxnError_ErrType_UNEXPECTED_VER;
  static const ErrType STATUS_CONFLICT =
    TxnError_ErrType_STATUS_CONFLICT;
  static const ErrType NOT_FOUND =
    TxnError_ErrType_NOT_FOUND;
  static const ErrType NOT_UNIQUE =
    TxnError_ErrType_NOT_UNIQUE;
  static const ErrType TXN_CONFLICT =
    TxnError_ErrType_TXN_CONFLICT;
  static inline bool ErrType_IsValid(int value) {
    return TxnError_ErrType_IsValid(value);
  }
  static const ErrType ErrType_MIN =
    TxnError_ErrType_ErrType_MIN;
  static const ErrType ErrType_MAX =
    TxnError_ErrType_ErrType_MAX;
  static const int ErrType_ARRAYSIZE =
    TxnError_ErrType_ErrType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrType_descriptor() {
    return TxnError_ErrType_descriptor();
  }
  static inline const ::std::string& ErrType_Name(ErrType value) {
    return TxnError_ErrType_Name(value);
  }
  static inline bool ErrType_Parse(const ::std::string& name,
      ErrType* value) {
    return TxnError_ErrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .dspb.ServerError server_err = 2;
  bool has_server_err() const;
  void clear_server_err();
  static const int kServerErrFieldNumber = 2;
  const ::dspb::ServerError& server_err() const;
  ::dspb::ServerError* mutable_server_err();
  ::dspb::ServerError* release_server_err();
  void set_allocated_server_err(::dspb::ServerError* server_err);

  // .dspb.LockError lock_err = 3;
  bool has_lock_err() const;
  void clear_lock_err();
  static const int kLockErrFieldNumber = 3;
  const ::dspb::LockError& lock_err() const;
  ::dspb::LockError* mutable_lock_err();
  ::dspb::LockError* release_lock_err();
  void set_allocated_lock_err(::dspb::LockError* lock_err);

  // .dspb.UnexpectedVer unexpected_ver = 4;
  bool has_unexpected_ver() const;
  void clear_unexpected_ver();
  static const int kUnexpectedVerFieldNumber = 4;
  const ::dspb::UnexpectedVer& unexpected_ver() const;
  ::dspb::UnexpectedVer* mutable_unexpected_ver();
  ::dspb::UnexpectedVer* release_unexpected_ver();
  void set_allocated_unexpected_ver(::dspb::UnexpectedVer* unexpected_ver);

  // .dspb.StatusConflict status_conflict = 5;
  bool has_status_conflict() const;
  void clear_status_conflict();
  static const int kStatusConflictFieldNumber = 5;
  const ::dspb::StatusConflict& status_conflict() const;
  ::dspb::StatusConflict* mutable_status_conflict();
  ::dspb::StatusConflict* release_status_conflict();
  void set_allocated_status_conflict(::dspb::StatusConflict* status_conflict);

  // .dspb.NotFound not_found = 6;
  bool has_not_found() const;
  void clear_not_found();
  static const int kNotFoundFieldNumber = 6;
  const ::dspb::NotFound& not_found() const;
  ::dspb::NotFound* mutable_not_found();
  ::dspb::NotFound* release_not_found();
  void set_allocated_not_found(::dspb::NotFound* not_found);

  // .dspb.NotUnique not_unique = 7;
  bool has_not_unique() const;
  void clear_not_unique();
  static const int kNotUniqueFieldNumber = 7;
  const ::dspb::NotUnique& not_unique() const;
  ::dspb::NotUnique* mutable_not_unique();
  ::dspb::NotUnique* release_not_unique();
  void set_allocated_not_unique(::dspb::NotUnique* not_unique);

  // .dspb.TxnConflict txn_conflict = 8;
  bool has_txn_conflict() const;
  void clear_txn_conflict();
  static const int kTxnConflictFieldNumber = 8;
  const ::dspb::TxnConflict& txn_conflict() const;
  ::dspb::TxnConflict* mutable_txn_conflict();
  ::dspb::TxnConflict* release_txn_conflict();
  void set_allocated_txn_conflict(::dspb::TxnConflict* txn_conflict);

  // .dspb.TxnError.ErrType err_type = 1;
  void clear_err_type();
  static const int kErrTypeFieldNumber = 1;
  ::dspb::TxnError_ErrType err_type() const;
  void set_err_type(::dspb::TxnError_ErrType value);

  // @@protoc_insertion_point(class_scope:dspb.TxnError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::ServerError* server_err_;
  ::dspb::LockError* lock_err_;
  ::dspb::UnexpectedVer* unexpected_ver_;
  ::dspb::StatusConflict* status_conflict_;
  ::dspb::NotFound* not_found_;
  ::dspb::NotUnique* not_unique_;
  ::dspb::TxnConflict* txn_conflict_;
  int err_type_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.PrepareRequest) */ {
 public:
  PrepareRequest();
  virtual ~PrepareRequest();

  PrepareRequest(const PrepareRequest& from);

  inline PrepareRequest& operator=(const PrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareRequest(PrepareRequest&& from) noexcept
    : PrepareRequest() {
    *this = ::std::move(from);
  }

  inline PrepareRequest& operator=(PrepareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareRequest& default_instance();

  static inline const PrepareRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareRequest*>(
               &_PrepareRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PrepareRequest* other);
  friend void swap(PrepareRequest& a, PrepareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PrepareRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrepareRequest& from);
  void MergeFrom(const PrepareRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrepareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.TxnIntent intents = 3;
  int intents_size() const;
  void clear_intents();
  static const int kIntentsFieldNumber = 3;
  const ::dspb::TxnIntent& intents(int index) const;
  ::dspb::TxnIntent* mutable_intents(int index);
  ::dspb::TxnIntent* add_intents();
  ::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent >*
      mutable_intents();
  const ::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent >&
      intents() const;

  // repeated bytes secondary_keys = 6;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 6;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 4;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 4;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // uint64 lock_ttl = 5;
  void clear_lock_ttl();
  static const int kLockTtlFieldNumber = 5;
  ::google::protobuf::uint64 lock_ttl() const;
  void set_lock_ttl(::google::protobuf::uint64 value);

  // bool local = 2;
  void clear_local();
  static const int kLocalFieldNumber = 2;
  bool local() const;
  void set_local(bool value);

  // bool strict_check = 16;
  void clear_strict_check();
  static const int kStrictCheckFieldNumber = 16;
  bool strict_check() const;
  void set_strict_check(bool value);

  // @@protoc_insertion_point(class_scope:dspb.PrepareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent > intents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::google::protobuf::uint64 lock_ttl_;
  bool local_;
  bool strict_check_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.PrepareResponse) */ {
 public:
  PrepareResponse();
  virtual ~PrepareResponse();

  PrepareResponse(const PrepareResponse& from);

  inline PrepareResponse& operator=(const PrepareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareResponse(PrepareResponse&& from) noexcept
    : PrepareResponse() {
    *this = ::std::move(from);
  }

  inline PrepareResponse& operator=(PrepareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareResponse& default_instance();

  static inline const PrepareResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareResponse*>(
               &_PrepareResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PrepareResponse* other);
  friend void swap(PrepareResponse& a, PrepareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PrepareResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrepareResponse& from);
  void MergeFrom(const PrepareResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrepareResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.TxnError errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  const ::dspb::TxnError& errors(int index) const;
  ::dspb::TxnError* mutable_errors(int index);
  ::dspb::TxnError* add_errors();
  ::google::protobuf::RepeatedPtrField< ::dspb::TxnError >*
      mutable_errors();
  const ::google::protobuf::RepeatedPtrField< ::dspb::TxnError >&
      errors() const;

  // @@protoc_insertion_point(class_scope:dspb.PrepareResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::TxnError > errors_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecideRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.DecideRequest) */ {
 public:
  DecideRequest();
  virtual ~DecideRequest();

  DecideRequest(const DecideRequest& from);

  inline DecideRequest& operator=(const DecideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecideRequest(DecideRequest&& from) noexcept
    : DecideRequest() {
    *this = ::std::move(from);
  }

  inline DecideRequest& operator=(DecideRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecideRequest& default_instance();

  static inline const DecideRequest* internal_default_instance() {
    return reinterpret_cast<const DecideRequest*>(
               &_DecideRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DecideRequest* other);
  friend void swap(DecideRequest& a, DecideRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecideRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DecideRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecideRequest& from);
  void MergeFrom(const DecideRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecideRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // .dspb.TxnStatus status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::dspb::TxnStatus status() const;
  void set_status(::dspb::TxnStatus value);

  // bool recover = 4;
  void clear_recover();
  static const int kRecoverFieldNumber = 4;
  bool recover() const;
  void set_recover(bool value);

  // bool is_primary = 5;
  void clear_is_primary();
  static const int kIsPrimaryFieldNumber = 5;
  bool is_primary() const;
  void set_is_primary(bool value);

  // @@protoc_insertion_point(class_scope:dspb.DecideRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  int status_;
  bool recover_;
  bool is_primary_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecideResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.DecideResponse) */ {
 public:
  DecideResponse();
  virtual ~DecideResponse();

  DecideResponse(const DecideResponse& from);

  inline DecideResponse& operator=(const DecideResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecideResponse(DecideResponse&& from) noexcept
    : DecideResponse() {
    *this = ::std::move(from);
  }

  inline DecideResponse& operator=(DecideResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecideResponse& default_instance();

  static inline const DecideResponse* internal_default_instance() {
    return reinterpret_cast<const DecideResponse*>(
               &_DecideResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DecideResponse* other);
  friend void swap(DecideResponse& a, DecideResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecideResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DecideResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecideResponse& from);
  void MergeFrom(const DecideResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecideResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes secondary_keys = 2;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 2;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // .dspb.TxnError err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::dspb::TxnError& err() const;
  ::dspb::TxnError* mutable_err();
  ::dspb::TxnError* release_err();
  void set_allocated_err(::dspb::TxnError* err);

  // @@protoc_insertion_point(class_scope:dspb.DecideResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::dspb::TxnError* err_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ClearupRequest) */ {
 public:
  ClearupRequest();
  virtual ~ClearupRequest();

  ClearupRequest(const ClearupRequest& from);

  inline ClearupRequest& operator=(const ClearupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearupRequest(ClearupRequest&& from) noexcept
    : ClearupRequest() {
    *this = ::std::move(from);
  }

  inline ClearupRequest& operator=(ClearupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearupRequest& default_instance();

  static inline const ClearupRequest* internal_default_instance() {
    return reinterpret_cast<const ClearupRequest*>(
               &_ClearupRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ClearupRequest* other);
  friend void swap(ClearupRequest& a, ClearupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearupRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearupRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearupRequest& from);
  void MergeFrom(const ClearupRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 2;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 2;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // @@protoc_insertion_point(class_scope:dspb.ClearupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ClearupResponse) */ {
 public:
  ClearupResponse();
  virtual ~ClearupResponse();

  ClearupResponse(const ClearupResponse& from);

  inline ClearupResponse& operator=(const ClearupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearupResponse(ClearupResponse&& from) noexcept
    : ClearupResponse() {
    *this = ::std::move(from);
  }

  inline ClearupResponse& operator=(ClearupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearupResponse& default_instance();

  static inline const ClearupResponse* internal_default_instance() {
    return reinterpret_cast<const ClearupResponse*>(
               &_ClearupResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ClearupResponse* other);
  friend void swap(ClearupResponse& a, ClearupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearupResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearupResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearupResponse& from);
  void MergeFrom(const ClearupResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dspb.TxnError err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::dspb::TxnError& err() const;
  ::dspb::TxnError* mutable_err();
  ::dspb::TxnError* release_err();
  void set_allocated_err(::dspb::TxnError* err);

  // @@protoc_insertion_point(class_scope:dspb.ClearupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::TxnError* err_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLockInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetLockInfoRequest) */ {
 public:
  GetLockInfoRequest();
  virtual ~GetLockInfoRequest();

  GetLockInfoRequest(const GetLockInfoRequest& from);

  inline GetLockInfoRequest& operator=(const GetLockInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLockInfoRequest(GetLockInfoRequest&& from) noexcept
    : GetLockInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetLockInfoRequest& operator=(GetLockInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLockInfoRequest& default_instance();

  static inline const GetLockInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetLockInfoRequest*>(
               &_GetLockInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetLockInfoRequest* other);
  friend void swap(GetLockInfoRequest& a, GetLockInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLockInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLockInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLockInfoRequest& from);
  void MergeFrom(const GetLockInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLockInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string txn_id = 2;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 2;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // @@protoc_insertion_point(class_scope:dspb.GetLockInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLockInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetLockInfoResponse) */ {
 public:
  GetLockInfoResponse();
  virtual ~GetLockInfoResponse();

  GetLockInfoResponse(const GetLockInfoResponse& from);

  inline GetLockInfoResponse& operator=(const GetLockInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLockInfoResponse(GetLockInfoResponse&& from) noexcept
    : GetLockInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetLockInfoResponse& operator=(GetLockInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLockInfoResponse& default_instance();

  static inline const GetLockInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetLockInfoResponse*>(
               &_GetLockInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GetLockInfoResponse* other);
  friend void swap(GetLockInfoResponse& a, GetLockInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLockInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLockInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLockInfoResponse& from);
  void MergeFrom(const GetLockInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLockInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dspb.TxnError err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::dspb::TxnError& err() const;
  ::dspb::TxnError* mutable_err();
  ::dspb::TxnError* release_err();
  void set_allocated_err(::dspb::TxnError* err);

  // .dspb.LockInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::dspb::LockInfo& info() const;
  ::dspb::LockInfo* mutable_info();
  ::dspb::LockInfo* release_info();
  void set_allocated_info(::dspb::LockInfo* info);

  // @@protoc_insertion_point(class_scope:dspb.GetLockInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::TxnError* err_;
  ::dspb::LockInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SelectField) */ {
 public:
  SelectField();
  virtual ~SelectField();

  SelectField(const SelectField& from);

  inline SelectField& operator=(const SelectField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectField(SelectField&& from) noexcept
    : SelectField() {
    *this = ::std::move(from);
  }

  inline SelectField& operator=(SelectField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectField& default_instance();

  static inline const SelectField* internal_default_instance() {
    return reinterpret_cast<const SelectField*>(
               &_SelectField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SelectField* other);
  friend void swap(SelectField& a, SelectField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectField* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectField& from);
  void MergeFrom(const SelectField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SelectField_Type Type;
  static const Type Column =
    SelectField_Type_Column;
  static const Type AggreFunction =
    SelectField_Type_AggreFunction;
  static inline bool Type_IsValid(int value) {
    return SelectField_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SelectField_Type_Type_MIN;
  static const Type Type_MAX =
    SelectField_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SelectField_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SelectField_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SelectField_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SelectField_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string aggre_func = 2;
  void clear_aggre_func();
  static const int kAggreFuncFieldNumber = 2;
  const ::std::string& aggre_func() const;
  void set_aggre_func(const ::std::string& value);
  #if LANG_CXX11
  void set_aggre_func(::std::string&& value);
  #endif
  void set_aggre_func(const char* value);
  void set_aggre_func(const char* value, size_t size);
  ::std::string* mutable_aggre_func();
  ::std::string* release_aggre_func();
  void set_allocated_aggre_func(::std::string* aggre_func);

  // .dspb.ColumnInfo column = 3;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  const ::dspb::ColumnInfo& column() const;
  ::dspb::ColumnInfo* mutable_column();
  ::dspb::ColumnInfo* release_column();
  void set_allocated_column(::dspb::ColumnInfo* column);

  // .dspb.SelectField.Type typ = 1;
  void clear_typ();
  static const int kTypFieldNumber = 1;
  ::dspb::SelectField_Type typ() const;
  void set_typ(::dspb::SelectField_Type value);

  // @@protoc_insertion_point(class_scope:dspb.SelectField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr aggre_func_;
  ::dspb::ColumnInfo* column_;
  int typ_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.Scope) */ {
 public:
  Scope();
  virtual ~Scope();

  Scope(const Scope& from);

  inline Scope& operator=(const Scope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scope(Scope&& from) noexcept
    : Scope() {
    *this = ::std::move(from);
  }

  inline Scope& operator=(Scope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Scope& default_instance();

  static inline const Scope* internal_default_instance() {
    return reinterpret_cast<const Scope*>(
               &_Scope_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Scope* other);
  friend void swap(Scope& a, Scope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scope* New() const PROTOBUF_FINAL { return New(NULL); }

  Scope* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Scope& from);
  void MergeFrom(const Scope& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Scope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::std::string& start() const;
  void set_start(const ::std::string& value);
  #if LANG_CXX11
  void set_start(::std::string&& value);
  #endif
  void set_start(const char* value);
  void set_start(const void* value, size_t size);
  ::std::string* mutable_start();
  ::std::string* release_start();
  void set_allocated_start(::std::string* start);

  // bytes limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  const ::std::string& limit() const;
  void set_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_limit(::std::string&& value);
  #endif
  void set_limit(const char* value);
  void set_limit(const void* value, size_t size);
  ::std::string* mutable_limit();
  ::std::string* release_limit();
  void set_allocated_limit(::std::string* limit);

  // @@protoc_insertion_point(class_scope:dspb.Scope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_;
  ::google::protobuf::internal::ArenaStringPtr limit_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SelectRequest) */ {
 public:
  SelectRequest();
  virtual ~SelectRequest();

  SelectRequest(const SelectRequest& from);

  inline SelectRequest& operator=(const SelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectRequest(SelectRequest&& from) noexcept
    : SelectRequest() {
    *this = ::std::move(from);
  }

  inline SelectRequest& operator=(SelectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectRequest& default_instance();

  static inline const SelectRequest* internal_default_instance() {
    return reinterpret_cast<const SelectRequest*>(
               &_SelectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SelectRequest* other);
  friend void swap(SelectRequest& a, SelectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectRequest& from);
  void MergeFrom(const SelectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.SelectField field_list = 3;
  int field_list_size() const;
  void clear_field_list();
  static const int kFieldListFieldNumber = 3;
  const ::dspb::SelectField& field_list(int index) const;
  ::dspb::SelectField* mutable_field_list(int index);
  ::dspb::SelectField* add_field_list();
  ::google::protobuf::RepeatedPtrField< ::dspb::SelectField >*
      mutable_field_list();
  const ::google::protobuf::RepeatedPtrField< ::dspb::SelectField >&
      field_list() const;

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .dspb.Scope scope = 2;
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 2;
  const ::dspb::Scope& scope() const;
  ::dspb::Scope* mutable_scope();
  ::dspb::Scope* release_scope();
  void set_allocated_scope(::dspb::Scope* scope);

  // .dspb.Expr where_expr = 4;
  bool has_where_expr() const;
  void clear_where_expr();
  static const int kWhereExprFieldNumber = 4;
  const ::dspb::Expr& where_expr() const;
  ::dspb::Expr* mutable_where_expr();
  ::dspb::Expr* release_where_expr();
  void set_allocated_where_expr(::dspb::Expr* where_expr);

  // .dspb.Limit limit = 5;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 5;
  const ::dspb::Limit& limit() const;
  ::dspb::Limit* mutable_limit();
  ::dspb::Limit* release_limit();
  void set_allocated_limit(::dspb::Limit* limit);

  // @@protoc_insertion_point(class_scope:dspb.SelectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::SelectField > field_list_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::dspb::Scope* scope_;
  ::dspb::Expr* where_expr_;
  ::dspb::Limit* limit_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RowValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.RowValue) */ {
 public:
  RowValue();
  virtual ~RowValue();

  RowValue(const RowValue& from);

  inline RowValue& operator=(const RowValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowValue(RowValue&& from) noexcept
    : RowValue() {
    *this = ::std::move(from);
  }

  inline RowValue& operator=(RowValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RowValue& default_instance();

  static inline const RowValue* internal_default_instance() {
    return reinterpret_cast<const RowValue*>(
               &_RowValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(RowValue* other);
  friend void swap(RowValue& a, RowValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowValue* New() const PROTOBUF_FINAL { return New(NULL); }

  RowValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RowValue& from);
  void MergeFrom(const RowValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RowValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fields = 1;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  const ::std::string& fields() const;
  void set_fields(const ::std::string& value);
  #if LANG_CXX11
  void set_fields(::std::string&& value);
  #endif
  void set_fields(const char* value);
  void set_fields(const void* value, size_t size);
  ::std::string* mutable_fields();
  ::std::string* release_fields();
  void set_allocated_fields(::std::string* fields);

  // uint64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.RowValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fields_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RowIntent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.RowIntent) */ {
 public:
  RowIntent();
  virtual ~RowIntent();

  RowIntent(const RowIntent& from);

  inline RowIntent& operator=(const RowIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowIntent(RowIntent&& from) noexcept
    : RowIntent() {
    *this = ::std::move(from);
  }

  inline RowIntent& operator=(RowIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RowIntent& default_instance();

  static inline const RowIntent* internal_default_instance() {
    return reinterpret_cast<const RowIntent*>(
               &_RowIntent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(RowIntent* other);
  friend void swap(RowIntent& a, RowIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowIntent* New() const PROTOBUF_FINAL { return New(NULL); }

  RowIntent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RowIntent& from);
  void MergeFrom(const RowIntent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RowIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string txn_id = 2;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 2;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 3;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // .dspb.RowValue value = 10;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 10;
  const ::dspb::RowValue& value() const;
  ::dspb::RowValue* mutable_value();
  ::dspb::RowValue* release_value();
  void set_allocated_value(::dspb::RowValue* value);

  // .dspb.OpType op_type = 1;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  ::dspb::OpType op_type() const;
  void set_op_type(::dspb::OpType value);

  // bool timeout = 4;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  bool timeout() const;
  void set_timeout(bool value);

  // @@protoc_insertion_point(class_scope:dspb.RowIntent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::dspb::RowValue* value_;
  int op_type_;
  bool timeout_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const PROTOBUF_FINAL { return New(NULL); }

  Row* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .dspb.RowValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::dspb::RowValue& value() const;
  ::dspb::RowValue* mutable_value();
  ::dspb::RowValue* release_value();
  void set_allocated_value(::dspb::RowValue* value);

  // .dspb.RowIntent intent = 3;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 3;
  const ::dspb::RowIntent& intent() const;
  ::dspb::RowIntent* mutable_intent();
  ::dspb::RowIntent* release_intent();
  void set_allocated_intent(::dspb::RowIntent* intent);

  // @@protoc_insertion_point(class_scope:dspb.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::dspb::RowValue* value_;
  ::dspb::RowIntent* intent_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SelectResponse) */ {
 public:
  SelectResponse();
  virtual ~SelectResponse();

  SelectResponse(const SelectResponse& from);

  inline SelectResponse& operator=(const SelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectResponse(SelectResponse&& from) noexcept
    : SelectResponse() {
    *this = ::std::move(from);
  }

  inline SelectResponse& operator=(SelectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectResponse& default_instance();

  static inline const SelectResponse* internal_default_instance() {
    return reinterpret_cast<const SelectResponse*>(
               &_SelectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SelectResponse* other);
  friend void swap(SelectResponse& a, SelectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectResponse& from);
  void MergeFrom(const SelectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.Row rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::dspb::Row& rows(int index) const;
  ::dspb::Row* mutable_rows(int index);
  ::dspb::Row* add_rows();
  ::google::protobuf::RepeatedPtrField< ::dspb::Row >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::dspb::Row >&
      rows() const;

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dspb.SelectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::Row > rows_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectFlowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SelectFlowRequest) */ {
 public:
  SelectFlowRequest();
  virtual ~SelectFlowRequest();

  SelectFlowRequest(const SelectFlowRequest& from);

  inline SelectFlowRequest& operator=(const SelectFlowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectFlowRequest(SelectFlowRequest&& from) noexcept
    : SelectFlowRequest() {
    *this = ::std::move(from);
  }

  inline SelectFlowRequest& operator=(SelectFlowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectFlowRequest& default_instance();

  static inline const SelectFlowRequest* internal_default_instance() {
    return reinterpret_cast<const SelectFlowRequest*>(
               &_SelectFlowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SelectFlowRequest* other);
  friend void swap(SelectFlowRequest& a, SelectFlowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectFlowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectFlowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectFlowRequest& from);
  void MergeFrom(const SelectFlowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectFlowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.Processor processors = 1;
  int processors_size() const;
  void clear_processors();
  static const int kProcessorsFieldNumber = 1;
  const ::dspb::Processor& processors(int index) const;
  ::dspb::Processor* mutable_processors(int index);
  ::dspb::Processor* add_processors();
  ::google::protobuf::RepeatedPtrField< ::dspb::Processor >*
      mutable_processors();
  const ::google::protobuf::RepeatedPtrField< ::dspb::Processor >&
      processors() const;

  // repeated uint32 output_offsets = 2;
  int output_offsets_size() const;
  void clear_output_offsets();
  static const int kOutputOffsetsFieldNumber = 2;
  ::google::protobuf::uint32 output_offsets(int index) const;
  void set_output_offsets(int index, ::google::protobuf::uint32 value);
  void add_output_offsets(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      output_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_output_offsets();

  // bool gather_trace = 3;
  void clear_gather_trace();
  static const int kGatherTraceFieldNumber = 3;
  bool gather_trace() const;
  void set_gather_trace(bool value);

  // @@protoc_insertion_point(class_scope:dspb.SelectFlowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::Processor > processors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > output_offsets_;
  mutable int _output_offsets_cached_byte_size_;
  bool gather_trace_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectFlowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SelectFlowResponse) */ {
 public:
  SelectFlowResponse();
  virtual ~SelectFlowResponse();

  SelectFlowResponse(const SelectFlowResponse& from);

  inline SelectFlowResponse& operator=(const SelectFlowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectFlowResponse(SelectFlowResponse&& from) noexcept
    : SelectFlowResponse() {
    *this = ::std::move(from);
  }

  inline SelectFlowResponse& operator=(SelectFlowResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectFlowResponse& default_instance();

  static inline const SelectFlowResponse* internal_default_instance() {
    return reinterpret_cast<const SelectFlowResponse*>(
               &_SelectFlowResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SelectFlowResponse* other);
  friend void swap(SelectFlowResponse& a, SelectFlowResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectFlowResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectFlowResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectFlowResponse& from);
  void MergeFrom(const SelectFlowResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectFlowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.Row rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::dspb::Row& rows(int index) const;
  ::dspb::Row* mutable_rows(int index);
  ::dspb::Row* add_rows();
  ::google::protobuf::RepeatedPtrField< ::dspb::Row >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::dspb::Row >&
      rows() const;

  // repeated .dspb.ProcessorTrace traces = 4;
  int traces_size() const;
  void clear_traces();
  static const int kTracesFieldNumber = 4;
  const ::dspb::ProcessorTrace& traces(int index) const;
  ::dspb::ProcessorTrace* mutable_traces(int index);
  ::dspb::ProcessorTrace* add_traces();
  ::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace >*
      mutable_traces();
  const ::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace >&
      traces() const;

  // bytes last_key = 3;
  void clear_last_key();
  static const int kLastKeyFieldNumber = 3;
  const ::std::string& last_key() const;
  void set_last_key(const ::std::string& value);
  #if LANG_CXX11
  void set_last_key(::std::string&& value);
  #endif
  void set_last_key(const char* value);
  void set_last_key(const void* value, size_t size);
  ::std::string* mutable_last_key();
  ::std::string* release_last_key();
  void set_allocated_last_key(::std::string* last_key);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dspb.SelectFlowResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::Row > rows_;
  ::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace > traces_;
  ::google::protobuf::internal::ArenaStringPtr last_key_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueIntent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ValueIntent) */ {
 public:
  ValueIntent();
  virtual ~ValueIntent();

  ValueIntent(const ValueIntent& from);

  inline ValueIntent& operator=(const ValueIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueIntent(ValueIntent&& from) noexcept
    : ValueIntent() {
    *this = ::std::move(from);
  }

  inline ValueIntent& operator=(ValueIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueIntent& default_instance();

  static inline const ValueIntent* internal_default_instance() {
    return reinterpret_cast<const ValueIntent*>(
               &_ValueIntent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ValueIntent* other);
  friend void swap(ValueIntent& a, ValueIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueIntent* New() const PROTOBUF_FINAL { return New(NULL); }

  ValueIntent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValueIntent& from);
  void MergeFrom(const ValueIntent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValueIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string txn_id = 2;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 2;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 3;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // bytes value = 10;
  void clear_value();
  static const int kValueFieldNumber = 10;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .dspb.OpType op_type = 1;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  ::dspb::OpType op_type() const;
  void set_op_type(::dspb::OpType value);

  // bool timeout = 4;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  bool timeout() const;
  void set_timeout(bool value);

  // @@protoc_insertion_point(class_scope:dspb.ValueIntent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int op_type_;
  bool timeout_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(KeyValue* other);
  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .dspb.ValueIntent intent = 10;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 10;
  const ::dspb::ValueIntent& intent() const;
  ::dspb::ValueIntent* mutable_intent();
  ::dspb::ValueIntent* release_intent();
  void set_allocated_intent(::dspb::ValueIntent* intent);

  // @@protoc_insertion_point(class_scope:dspb.KeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::dspb::ValueIntent* intent_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ScanRequest) */ {
 public:
  ScanRequest();
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanRequest(ScanRequest&& from) noexcept
    : ScanRequest() {
    *this = ::std::move(from);
  }

  inline ScanRequest& operator=(ScanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanRequest& default_instance();

  static inline const ScanRequest* internal_default_instance() {
    return reinterpret_cast<const ScanRequest*>(
               &_ScanRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(ScanRequest* other);
  friend void swap(ScanRequest& a, ScanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ScanRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes start_key = 1;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 1;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 2;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 2;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // int64 max_count = 3;
  void clear_max_count();
  static const int kMaxCountFieldNumber = 3;
  ::google::protobuf::int64 max_count() const;
  void set_max_count(::google::protobuf::int64 value);

  // bool only_one = 4;
  void clear_only_one();
  static const int kOnlyOneFieldNumber = 4;
  bool only_one() const;
  void set_only_one(bool value);

  // @@protoc_insertion_point(class_scope:dspb.ScanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::int64 max_count_;
  bool only_one_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ScanResponse) */ {
 public:
  ScanResponse();
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanResponse(ScanResponse&& from) noexcept
    : ScanResponse() {
    *this = ::std::move(from);
  }

  inline ScanResponse& operator=(ScanResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanResponse& default_instance();

  static inline const ScanResponse* internal_default_instance() {
    return reinterpret_cast<const ScanResponse*>(
               &_ScanResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(ScanResponse* other);
  friend void swap(ScanResponse& a, ScanResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ScanResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.KeyValue kvs = 2;
  int kvs_size() const;
  void clear_kvs();
  static const int kKvsFieldNumber = 2;
  const ::dspb::KeyValue& kvs(int index) const;
  ::dspb::KeyValue* mutable_kvs(int index);
  ::dspb::KeyValue* add_kvs();
  ::google::protobuf::RepeatedPtrField< ::dspb::KeyValue >*
      mutable_kvs();
  const ::google::protobuf::RepeatedPtrField< ::dspb::KeyValue >&
      kvs() const;

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dspb.ScanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::KeyValue > kvs_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2ftxn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxnIntent

// .dspb.OpType typ = 1;
inline void TxnIntent::clear_typ() {
  typ_ = 0;
}
inline ::dspb::OpType TxnIntent::typ() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.typ)
  return static_cast< ::dspb::OpType >(typ_);
}
inline void TxnIntent::set_typ(::dspb::OpType value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.typ)
}

// bytes key = 2;
inline void TxnIntent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnIntent::key() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.key)
  return key_.GetNoArena();
}
inline void TxnIntent::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.key)
}
#if LANG_CXX11
inline void TxnIntent::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnIntent.key)
}
#endif
inline void TxnIntent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnIntent.key)
}
inline void TxnIntent::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnIntent.key)
}
inline ::std::string* TxnIntent::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnIntent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnIntent::release_key() {
  // @@protoc_insertion_point(field_release:dspb.TxnIntent.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnIntent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnIntent.key)
}

// bytes value = 3;
inline void TxnIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnIntent::value() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.value)
  return value_.GetNoArena();
}
inline void TxnIntent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.value)
}
#if LANG_CXX11
inline void TxnIntent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnIntent.value)
}
#endif
inline void TxnIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnIntent.value)
}
inline void TxnIntent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnIntent.value)
}
inline ::std::string* TxnIntent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnIntent::release_value() {
  // @@protoc_insertion_point(field_release:dspb.TxnIntent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnIntent.value)
}

// bool check_unique = 4;
inline void TxnIntent::clear_check_unique() {
  check_unique_ = false;
}
inline bool TxnIntent::check_unique() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.check_unique)
  return check_unique_;
}
inline void TxnIntent::set_check_unique(bool value) {
  
  check_unique_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.check_unique)
}

// uint64 expected_ver = 5;
inline void TxnIntent::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnIntent::expected_ver() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.expected_ver)
  return expected_ver_;
}
inline void TxnIntent::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.expected_ver)
}

// bool is_primary = 6;
inline void TxnIntent::clear_is_primary() {
  is_primary_ = false;
}
inline bool TxnIntent::is_primary() const {
  // @@protoc_insertion_point(field_get:dspb.TxnIntent.is_primary)
  return is_primary_;
}
inline void TxnIntent::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnIntent.is_primary)
}

// -------------------------------------------------------------------

// TxnValue

// string txn_id = 1;
inline void TxnValue::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnValue::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.txn_id)
  return txn_id_.GetNoArena();
}
inline void TxnValue::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnValue.txn_id)
}
#if LANG_CXX11
inline void TxnValue::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnValue.txn_id)
}
#endif
inline void TxnValue::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnValue.txn_id)
}
inline void TxnValue::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnValue.txn_id)
}
inline ::std::string* TxnValue::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnValue::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.TxnValue.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnValue::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnValue.txn_id)
}

// .dspb.TxnIntent intent = 2;
inline bool TxnValue::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
inline void TxnValue::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
inline const ::dspb::TxnIntent& TxnValue::intent() const {
  const ::dspb::TxnIntent* p = intent_;
  // @@protoc_insertion_point(field_get:dspb.TxnValue.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnIntent*>(
      &::dspb::_TxnIntent_default_instance_);
}
inline ::dspb::TxnIntent* TxnValue::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::dspb::TxnIntent;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.intent)
  return intent_;
}
inline ::dspb::TxnIntent* TxnValue::release_intent() {
  // @@protoc_insertion_point(field_release:dspb.TxnValue.intent)
  
  ::dspb::TxnIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline void TxnValue::set_allocated_intent(::dspb::TxnIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnValue.intent)
}

// bytes primary_key = 3;
inline void TxnValue::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnValue::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.primary_key)
  return primary_key_.GetNoArena();
}
inline void TxnValue::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnValue.primary_key)
}
#if LANG_CXX11
inline void TxnValue::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnValue.primary_key)
}
#endif
inline void TxnValue::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnValue.primary_key)
}
inline void TxnValue::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnValue.primary_key)
}
inline ::std::string* TxnValue::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnValue::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.TxnValue.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnValue::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnValue.primary_key)
}

// uint64 expired_at = 4;
inline void TxnValue::clear_expired_at() {
  expired_at_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnValue::expired_at() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.expired_at)
  return expired_at_;
}
inline void TxnValue::set_expired_at(::google::protobuf::uint64 value) {
  
  expired_at_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnValue.expired_at)
}

// uint64 version = 5;
inline void TxnValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnValue::version() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.version)
  return version_;
}
inline void TxnValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnValue.version)
}

// .dspb.TxnStatus txn_status = 10;
inline void TxnValue::clear_txn_status() {
  txn_status_ = 0;
}
inline ::dspb::TxnStatus TxnValue::txn_status() const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.txn_status)
  return static_cast< ::dspb::TxnStatus >(txn_status_);
}
inline void TxnValue::set_txn_status(::dspb::TxnStatus value) {
  
  txn_status_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnValue.txn_status)
}

// repeated bytes secondary_keys = 11;
inline int TxnValue::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void TxnValue::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& TxnValue::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.TxnValue.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* TxnValue::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.TxnValue.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void TxnValue::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TxnValue::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TxnValue::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.TxnValue.secondary_keys)
}
inline void TxnValue::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnValue.secondary_keys)
}
inline ::std::string* TxnValue::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.TxnValue.secondary_keys)
  return secondary_keys_.Add();
}
inline void TxnValue::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.TxnValue.secondary_keys)
}
#if LANG_CXX11
inline void TxnValue::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.TxnValue.secondary_keys)
}
#endif
inline void TxnValue::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.TxnValue.secondary_keys)
}
inline void TxnValue::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.TxnValue.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnValue::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.TxnValue.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxnValue::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.TxnValue.secondary_keys)
  return &secondary_keys_;
}

// -------------------------------------------------------------------

// LockInfo

// string txn_id = 1;
inline void LockInfo::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockInfo::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.txn_id)
  return txn_id_.GetNoArena();
}
inline void LockInfo::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.LockInfo.txn_id)
}
#if LANG_CXX11
inline void LockInfo::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.LockInfo.txn_id)
}
#endif
inline void LockInfo::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.LockInfo.txn_id)
}
inline void LockInfo::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.LockInfo.txn_id)
}
inline ::std::string* LockInfo::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.LockInfo.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockInfo::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.LockInfo.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockInfo::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.LockInfo.txn_id)
}

// bool timeout = 2;
inline void LockInfo::clear_timeout() {
  timeout_ = false;
}
inline bool LockInfo::timeout() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.timeout)
  return timeout_;
}
inline void LockInfo::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:dspb.LockInfo.timeout)
}

// bool is_primary = 10;
inline void LockInfo::clear_is_primary() {
  is_primary_ = false;
}
inline bool LockInfo::is_primary() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.is_primary)
  return is_primary_;
}
inline void LockInfo::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:dspb.LockInfo.is_primary)
}

// bytes primary_key = 11;
inline void LockInfo::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockInfo::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.primary_key)
  return primary_key_.GetNoArena();
}
inline void LockInfo::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.LockInfo.primary_key)
}
#if LANG_CXX11
inline void LockInfo::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.LockInfo.primary_key)
}
#endif
inline void LockInfo::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.LockInfo.primary_key)
}
inline void LockInfo::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.LockInfo.primary_key)
}
inline ::std::string* LockInfo::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.LockInfo.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockInfo::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.LockInfo.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockInfo::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.LockInfo.primary_key)
}

// .dspb.TxnStatus status = 12;
inline void LockInfo::clear_status() {
  status_ = 0;
}
inline ::dspb::TxnStatus LockInfo::status() const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.status)
  return static_cast< ::dspb::TxnStatus >(status_);
}
inline void LockInfo::set_status(::dspb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dspb.LockInfo.status)
}

// repeated bytes secondary_keys = 13;
inline int LockInfo::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void LockInfo::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& LockInfo::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.LockInfo.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* LockInfo::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.LockInfo.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void LockInfo::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LockInfo::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LockInfo::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.LockInfo.secondary_keys)
}
inline void LockInfo::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.LockInfo.secondary_keys)
}
inline ::std::string* LockInfo::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.LockInfo.secondary_keys)
  return secondary_keys_.Add();
}
inline void LockInfo::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.LockInfo.secondary_keys)
}
#if LANG_CXX11
inline void LockInfo::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.LockInfo.secondary_keys)
}
#endif
inline void LockInfo::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.LockInfo.secondary_keys)
}
inline void LockInfo::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.LockInfo.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockInfo::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.LockInfo.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockInfo::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.LockInfo.secondary_keys)
  return &secondary_keys_;
}

// -------------------------------------------------------------------

// LockError

// bytes key = 1;
inline void LockError::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockError::key() const {
  // @@protoc_insertion_point(field_get:dspb.LockError.key)
  return key_.GetNoArena();
}
inline void LockError::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.LockError.key)
}
#if LANG_CXX11
inline void LockError::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.LockError.key)
}
#endif
inline void LockError::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.LockError.key)
}
inline void LockError::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.LockError.key)
}
inline ::std::string* LockError::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.LockError.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockError::release_key() {
  // @@protoc_insertion_point(field_release:dspb.LockError.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockError::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.LockError.key)
}

// .dspb.LockInfo info = 2;
inline bool LockError::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void LockError::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dspb::LockInfo& LockError::info() const {
  const ::dspb::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:dspb.LockError.info)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::LockInfo*>(
      &::dspb::_LockInfo_default_instance_);
}
inline ::dspb::LockInfo* LockError::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dspb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:dspb.LockError.info)
  return info_;
}
inline ::dspb::LockInfo* LockError::release_info() {
  // @@protoc_insertion_point(field_release:dspb.LockError.info)
  
  ::dspb::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void LockError::set_allocated_info(::dspb::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.LockError.info)
}

// -------------------------------------------------------------------

// UnexpectedVer

// bytes key = 1;
inline void UnexpectedVer::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnexpectedVer::key() const {
  // @@protoc_insertion_point(field_get:dspb.UnexpectedVer.key)
  return key_.GetNoArena();
}
inline void UnexpectedVer::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.UnexpectedVer.key)
}
#if LANG_CXX11
inline void UnexpectedVer::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.UnexpectedVer.key)
}
#endif
inline void UnexpectedVer::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.UnexpectedVer.key)
}
inline void UnexpectedVer::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.UnexpectedVer.key)
}
inline ::std::string* UnexpectedVer::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.UnexpectedVer.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnexpectedVer::release_key() {
  // @@protoc_insertion_point(field_release:dspb.UnexpectedVer.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnexpectedVer::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.UnexpectedVer.key)
}

// uint64 expected_ver = 2;
inline void UnexpectedVer::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnexpectedVer::expected_ver() const {
  // @@protoc_insertion_point(field_get:dspb.UnexpectedVer.expected_ver)
  return expected_ver_;
}
inline void UnexpectedVer::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:dspb.UnexpectedVer.expected_ver)
}

// uint64 actual_ver = 3;
inline void UnexpectedVer::clear_actual_ver() {
  actual_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnexpectedVer::actual_ver() const {
  // @@protoc_insertion_point(field_get:dspb.UnexpectedVer.actual_ver)
  return actual_ver_;
}
inline void UnexpectedVer::set_actual_ver(::google::protobuf::uint64 value) {
  
  actual_ver_ = value;
  // @@protoc_insertion_point(field_set:dspb.UnexpectedVer.actual_ver)
}

// -------------------------------------------------------------------

// StatusConflict

// .dspb.TxnStatus status = 1;
inline void StatusConflict::clear_status() {
  status_ = 0;
}
inline ::dspb::TxnStatus StatusConflict::status() const {
  // @@protoc_insertion_point(field_get:dspb.StatusConflict.status)
  return static_cast< ::dspb::TxnStatus >(status_);
}
inline void StatusConflict::set_status(::dspb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dspb.StatusConflict.status)
}

// -------------------------------------------------------------------

// ServerError

// int32 code = 1;
inline void ServerError::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ServerError::code() const {
  // @@protoc_insertion_point(field_get:dspb.ServerError.code)
  return code_;
}
inline void ServerError::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.ServerError.code)
}

// string msg = 2;
inline void ServerError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerError::msg() const {
  // @@protoc_insertion_point(field_get:dspb.ServerError.msg)
  return msg_.GetNoArena();
}
inline void ServerError::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ServerError.msg)
}
#if LANG_CXX11
inline void ServerError::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ServerError.msg)
}
#endif
inline void ServerError::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ServerError.msg)
}
inline void ServerError::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ServerError.msg)
}
inline ::std::string* ServerError::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ServerError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerError::release_msg() {
  // @@protoc_insertion_point(field_release:dspb.ServerError.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:dspb.ServerError.msg)
}

// -------------------------------------------------------------------

// NotFound

// bytes key = 1;
inline void NotFound::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotFound::key() const {
  // @@protoc_insertion_point(field_get:dspb.NotFound.key)
  return key_.GetNoArena();
}
inline void NotFound::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.NotFound.key)
}
#if LANG_CXX11
inline void NotFound::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.NotFound.key)
}
#endif
inline void NotFound::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.NotFound.key)
}
inline void NotFound::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.NotFound.key)
}
inline ::std::string* NotFound::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.NotFound.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotFound::release_key() {
  // @@protoc_insertion_point(field_release:dspb.NotFound.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotFound::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.NotFound.key)
}

// -------------------------------------------------------------------

// NotUnique

// bytes key = 1;
inline void NotUnique::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotUnique::key() const {
  // @@protoc_insertion_point(field_get:dspb.NotUnique.key)
  return key_.GetNoArena();
}
inline void NotUnique::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.NotUnique.key)
}
#if LANG_CXX11
inline void NotUnique::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.NotUnique.key)
}
#endif
inline void NotUnique::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.NotUnique.key)
}
inline void NotUnique::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.NotUnique.key)
}
inline ::std::string* NotUnique::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.NotUnique.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotUnique::release_key() {
  // @@protoc_insertion_point(field_release:dspb.NotUnique.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotUnique::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.NotUnique.key)
}

// -------------------------------------------------------------------

// TxnConflict

// string expected_txn_id = 1;
inline void TxnConflict::clear_expected_txn_id() {
  expected_txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnConflict::expected_txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.TxnConflict.expected_txn_id)
  return expected_txn_id_.GetNoArena();
}
inline void TxnConflict::set_expected_txn_id(const ::std::string& value) {
  
  expected_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnConflict.expected_txn_id)
}
#if LANG_CXX11
inline void TxnConflict::set_expected_txn_id(::std::string&& value) {
  
  expected_txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnConflict.expected_txn_id)
}
#endif
inline void TxnConflict::set_expected_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expected_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnConflict.expected_txn_id)
}
inline void TxnConflict::set_expected_txn_id(const char* value, size_t size) {
  
  expected_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnConflict.expected_txn_id)
}
inline ::std::string* TxnConflict::mutable_expected_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnConflict.expected_txn_id)
  return expected_txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnConflict::release_expected_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.TxnConflict.expected_txn_id)
  
  return expected_txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnConflict::set_allocated_expected_txn_id(::std::string* expected_txn_id) {
  if (expected_txn_id != NULL) {
    
  } else {
    
  }
  expected_txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expected_txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnConflict.expected_txn_id)
}

// string actual_txn_id = 2;
inline void TxnConflict::clear_actual_txn_id() {
  actual_txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnConflict::actual_txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.TxnConflict.actual_txn_id)
  return actual_txn_id_.GetNoArena();
}
inline void TxnConflict::set_actual_txn_id(const ::std::string& value) {
  
  actual_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.TxnConflict.actual_txn_id)
}
#if LANG_CXX11
inline void TxnConflict::set_actual_txn_id(::std::string&& value) {
  
  actual_txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.TxnConflict.actual_txn_id)
}
#endif
inline void TxnConflict::set_actual_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actual_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.TxnConflict.actual_txn_id)
}
inline void TxnConflict::set_actual_txn_id(const char* value, size_t size) {
  
  actual_txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.TxnConflict.actual_txn_id)
}
inline ::std::string* TxnConflict::mutable_actual_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.TxnConflict.actual_txn_id)
  return actual_txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnConflict::release_actual_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.TxnConflict.actual_txn_id)
  
  return actual_txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnConflict::set_allocated_actual_txn_id(::std::string* actual_txn_id) {
  if (actual_txn_id != NULL) {
    
  } else {
    
  }
  actual_txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actual_txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnConflict.actual_txn_id)
}

// -------------------------------------------------------------------

// TxnError

// .dspb.TxnError.ErrType err_type = 1;
inline void TxnError::clear_err_type() {
  err_type_ = 0;
}
inline ::dspb::TxnError_ErrType TxnError::err_type() const {
  // @@protoc_insertion_point(field_get:dspb.TxnError.err_type)
  return static_cast< ::dspb::TxnError_ErrType >(err_type_);
}
inline void TxnError::set_err_type(::dspb::TxnError_ErrType value) {
  
  err_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.TxnError.err_type)
}

// .dspb.ServerError server_err = 2;
inline bool TxnError::has_server_err() const {
  return this != internal_default_instance() && server_err_ != NULL;
}
inline void TxnError::clear_server_err() {
  if (GetArenaNoVirtual() == NULL && server_err_ != NULL) delete server_err_;
  server_err_ = NULL;
}
inline const ::dspb::ServerError& TxnError::server_err() const {
  const ::dspb::ServerError* p = server_err_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.server_err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ServerError*>(
      &::dspb::_ServerError_default_instance_);
}
inline ::dspb::ServerError* TxnError::mutable_server_err() {
  
  if (server_err_ == NULL) {
    server_err_ = new ::dspb::ServerError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.server_err)
  return server_err_;
}
inline ::dspb::ServerError* TxnError::release_server_err() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.server_err)
  
  ::dspb::ServerError* temp = server_err_;
  server_err_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_server_err(::dspb::ServerError* server_err) {
  delete server_err_;
  server_err_ = server_err;
  if (server_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.server_err)
}

// .dspb.LockError lock_err = 3;
inline bool TxnError::has_lock_err() const {
  return this != internal_default_instance() && lock_err_ != NULL;
}
inline void TxnError::clear_lock_err() {
  if (GetArenaNoVirtual() == NULL && lock_err_ != NULL) delete lock_err_;
  lock_err_ = NULL;
}
inline const ::dspb::LockError& TxnError::lock_err() const {
  const ::dspb::LockError* p = lock_err_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.lock_err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::LockError*>(
      &::dspb::_LockError_default_instance_);
}
inline ::dspb::LockError* TxnError::mutable_lock_err() {
  
  if (lock_err_ == NULL) {
    lock_err_ = new ::dspb::LockError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.lock_err)
  return lock_err_;
}
inline ::dspb::LockError* TxnError::release_lock_err() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.lock_err)
  
  ::dspb::LockError* temp = lock_err_;
  lock_err_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_lock_err(::dspb::LockError* lock_err) {
  delete lock_err_;
  lock_err_ = lock_err;
  if (lock_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.lock_err)
}

// .dspb.UnexpectedVer unexpected_ver = 4;
inline bool TxnError::has_unexpected_ver() const {
  return this != internal_default_instance() && unexpected_ver_ != NULL;
}
inline void TxnError::clear_unexpected_ver() {
  if (GetArenaNoVirtual() == NULL && unexpected_ver_ != NULL) delete unexpected_ver_;
  unexpected_ver_ = NULL;
}
inline const ::dspb::UnexpectedVer& TxnError::unexpected_ver() const {
  const ::dspb::UnexpectedVer* p = unexpected_ver_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.unexpected_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::UnexpectedVer*>(
      &::dspb::_UnexpectedVer_default_instance_);
}
inline ::dspb::UnexpectedVer* TxnError::mutable_unexpected_ver() {
  
  if (unexpected_ver_ == NULL) {
    unexpected_ver_ = new ::dspb::UnexpectedVer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.unexpected_ver)
  return unexpected_ver_;
}
inline ::dspb::UnexpectedVer* TxnError::release_unexpected_ver() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.unexpected_ver)
  
  ::dspb::UnexpectedVer* temp = unexpected_ver_;
  unexpected_ver_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_unexpected_ver(::dspb::UnexpectedVer* unexpected_ver) {
  delete unexpected_ver_;
  unexpected_ver_ = unexpected_ver;
  if (unexpected_ver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.unexpected_ver)
}

// .dspb.StatusConflict status_conflict = 5;
inline bool TxnError::has_status_conflict() const {
  return this != internal_default_instance() && status_conflict_ != NULL;
}
inline void TxnError::clear_status_conflict() {
  if (GetArenaNoVirtual() == NULL && status_conflict_ != NULL) delete status_conflict_;
  status_conflict_ = NULL;
}
inline const ::dspb::StatusConflict& TxnError::status_conflict() const {
  const ::dspb::StatusConflict* p = status_conflict_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.status_conflict)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::StatusConflict*>(
      &::dspb::_StatusConflict_default_instance_);
}
inline ::dspb::StatusConflict* TxnError::mutable_status_conflict() {
  
  if (status_conflict_ == NULL) {
    status_conflict_ = new ::dspb::StatusConflict;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.status_conflict)
  return status_conflict_;
}
inline ::dspb::StatusConflict* TxnError::release_status_conflict() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.status_conflict)
  
  ::dspb::StatusConflict* temp = status_conflict_;
  status_conflict_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_status_conflict(::dspb::StatusConflict* status_conflict) {
  delete status_conflict_;
  status_conflict_ = status_conflict;
  if (status_conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.status_conflict)
}

// .dspb.NotFound not_found = 6;
inline bool TxnError::has_not_found() const {
  return this != internal_default_instance() && not_found_ != NULL;
}
inline void TxnError::clear_not_found() {
  if (GetArenaNoVirtual() == NULL && not_found_ != NULL) delete not_found_;
  not_found_ = NULL;
}
inline const ::dspb::NotFound& TxnError::not_found() const {
  const ::dspb::NotFound* p = not_found_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NotFound*>(
      &::dspb::_NotFound_default_instance_);
}
inline ::dspb::NotFound* TxnError::mutable_not_found() {
  
  if (not_found_ == NULL) {
    not_found_ = new ::dspb::NotFound;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.not_found)
  return not_found_;
}
inline ::dspb::NotFound* TxnError::release_not_found() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.not_found)
  
  ::dspb::NotFound* temp = not_found_;
  not_found_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_not_found(::dspb::NotFound* not_found) {
  delete not_found_;
  not_found_ = not_found;
  if (not_found) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.not_found)
}

// .dspb.NotUnique not_unique = 7;
inline bool TxnError::has_not_unique() const {
  return this != internal_default_instance() && not_unique_ != NULL;
}
inline void TxnError::clear_not_unique() {
  if (GetArenaNoVirtual() == NULL && not_unique_ != NULL) delete not_unique_;
  not_unique_ = NULL;
}
inline const ::dspb::NotUnique& TxnError::not_unique() const {
  const ::dspb::NotUnique* p = not_unique_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.not_unique)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NotUnique*>(
      &::dspb::_NotUnique_default_instance_);
}
inline ::dspb::NotUnique* TxnError::mutable_not_unique() {
  
  if (not_unique_ == NULL) {
    not_unique_ = new ::dspb::NotUnique;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.not_unique)
  return not_unique_;
}
inline ::dspb::NotUnique* TxnError::release_not_unique() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.not_unique)
  
  ::dspb::NotUnique* temp = not_unique_;
  not_unique_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_not_unique(::dspb::NotUnique* not_unique) {
  delete not_unique_;
  not_unique_ = not_unique;
  if (not_unique) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.not_unique)
}

// .dspb.TxnConflict txn_conflict = 8;
inline bool TxnError::has_txn_conflict() const {
  return this != internal_default_instance() && txn_conflict_ != NULL;
}
inline void TxnError::clear_txn_conflict() {
  if (GetArenaNoVirtual() == NULL && txn_conflict_ != NULL) delete txn_conflict_;
  txn_conflict_ = NULL;
}
inline const ::dspb::TxnConflict& TxnError::txn_conflict() const {
  const ::dspb::TxnConflict* p = txn_conflict_;
  // @@protoc_insertion_point(field_get:dspb.TxnError.txn_conflict)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnConflict*>(
      &::dspb::_TxnConflict_default_instance_);
}
inline ::dspb::TxnConflict* TxnError::mutable_txn_conflict() {
  
  if (txn_conflict_ == NULL) {
    txn_conflict_ = new ::dspb::TxnConflict;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TxnError.txn_conflict)
  return txn_conflict_;
}
inline ::dspb::TxnConflict* TxnError::release_txn_conflict() {
  // @@protoc_insertion_point(field_release:dspb.TxnError.txn_conflict)
  
  ::dspb::TxnConflict* temp = txn_conflict_;
  txn_conflict_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_txn_conflict(::dspb::TxnConflict* txn_conflict) {
  delete txn_conflict_;
  txn_conflict_ = txn_conflict;
  if (txn_conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TxnError.txn_conflict)
}

// -------------------------------------------------------------------

// PrepareRequest

// string txn_id = 1;
inline void PrepareRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void PrepareRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.txn_id)
}
#if LANG_CXX11
inline void PrepareRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.PrepareRequest.txn_id)
}
#endif
inline void PrepareRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.PrepareRequest.txn_id)
}
inline void PrepareRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.PrepareRequest.txn_id)
}
inline ::std::string* PrepareRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.PrepareRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.PrepareRequest.txn_id)
}

// bool local = 2;
inline void PrepareRequest::clear_local() {
  local_ = false;
}
inline bool PrepareRequest::local() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.local)
  return local_;
}
inline void PrepareRequest::set_local(bool value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.local)
}

// repeated .dspb.TxnIntent intents = 3;
inline int PrepareRequest::intents_size() const {
  return intents_.size();
}
inline void PrepareRequest::clear_intents() {
  intents_.Clear();
}
inline const ::dspb::TxnIntent& PrepareRequest::intents(int index) const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.intents)
  return intents_.Get(index);
}
inline ::dspb::TxnIntent* PrepareRequest::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.intents)
  return intents_.Mutable(index);
}
inline ::dspb::TxnIntent* PrepareRequest::add_intents() {
  // @@protoc_insertion_point(field_add:dspb.PrepareRequest.intents)
  return intents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent >*
PrepareRequest::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:dspb.PrepareRequest.intents)
  return &intents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::TxnIntent >&
PrepareRequest::intents() const {
  // @@protoc_insertion_point(field_list:dspb.PrepareRequest.intents)
  return intents_;
}

// bytes primary_key = 4;
inline void PrepareRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.primary_key)
  return primary_key_.GetNoArena();
}
inline void PrepareRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.primary_key)
}
#if LANG_CXX11
inline void PrepareRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.PrepareRequest.primary_key)
}
#endif
inline void PrepareRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.PrepareRequest.primary_key)
}
inline void PrepareRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.PrepareRequest.primary_key)
}
inline ::std::string* PrepareRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.PrepareRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.PrepareRequest.primary_key)
}

// uint64 lock_ttl = 5;
inline void PrepareRequest::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.lock_ttl)
  return lock_ttl_;
}
inline void PrepareRequest::set_lock_ttl(::google::protobuf::uint64 value) {
  
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.lock_ttl)
}

// repeated bytes secondary_keys = 6;
inline int PrepareRequest::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void PrepareRequest::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& PrepareRequest::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* PrepareRequest::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void PrepareRequest::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PrepareRequest::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PrepareRequest::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.PrepareRequest.secondary_keys)
}
inline void PrepareRequest::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.PrepareRequest.secondary_keys)
}
inline ::std::string* PrepareRequest::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_.Add();
}
inline void PrepareRequest::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.PrepareRequest.secondary_keys)
}
#if LANG_CXX11
inline void PrepareRequest::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.PrepareRequest.secondary_keys)
}
#endif
inline void PrepareRequest::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.PrepareRequest.secondary_keys)
}
inline void PrepareRequest::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.PrepareRequest.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrepareRequest::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.PrepareRequest.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PrepareRequest::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.PrepareRequest.secondary_keys)
  return &secondary_keys_;
}

// bool strict_check = 16;
inline void PrepareRequest::clear_strict_check() {
  strict_check_ = false;
}
inline bool PrepareRequest::strict_check() const {
  // @@protoc_insertion_point(field_get:dspb.PrepareRequest.strict_check)
  return strict_check_;
}
inline void PrepareRequest::set_strict_check(bool value) {
  
  strict_check_ = value;
  // @@protoc_insertion_point(field_set:dspb.PrepareRequest.strict_check)
}

// -------------------------------------------------------------------

// PrepareResponse

// repeated .dspb.TxnError errors = 1;
inline int PrepareResponse::errors_size() const {
  return errors_.size();
}
inline void PrepareResponse::clear_errors() {
  errors_.Clear();
}
inline const ::dspb::TxnError& PrepareResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:dspb.PrepareResponse.errors)
  return errors_.Get(index);
}
inline ::dspb::TxnError* PrepareResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.PrepareResponse.errors)
  return errors_.Mutable(index);
}
inline ::dspb::TxnError* PrepareResponse::add_errors() {
  // @@protoc_insertion_point(field_add:dspb.PrepareResponse.errors)
  return errors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::TxnError >*
PrepareResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:dspb.PrepareResponse.errors)
  return &errors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::TxnError >&
PrepareResponse::errors() const {
  // @@protoc_insertion_point(field_list:dspb.PrepareResponse.errors)
  return errors_;
}

// -------------------------------------------------------------------

// DecideRequest

// string txn_id = 1;
inline void DecideRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecideRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void DecideRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.txn_id)
}
#if LANG_CXX11
inline void DecideRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.DecideRequest.txn_id)
}
#endif
inline void DecideRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.DecideRequest.txn_id)
}
inline void DecideRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.DecideRequest.txn_id)
}
inline ::std::string* DecideRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.DecideRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecideRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.DecideRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecideRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.DecideRequest.txn_id)
}

// .dspb.TxnStatus status = 2;
inline void DecideRequest::clear_status() {
  status_ = 0;
}
inline ::dspb::TxnStatus DecideRequest::status() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.status)
  return static_cast< ::dspb::TxnStatus >(status_);
}
inline void DecideRequest::set_status(::dspb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.status)
}

// repeated bytes keys = 3;
inline int DecideRequest::keys_size() const {
  return keys_.size();
}
inline void DecideRequest::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& DecideRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.keys)
  return keys_.Get(index);
}
inline ::std::string* DecideRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.DecideRequest.keys)
  return keys_.Mutable(index);
}
inline void DecideRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DecideRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DecideRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.DecideRequest.keys)
}
inline void DecideRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.DecideRequest.keys)
}
inline ::std::string* DecideRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.DecideRequest.keys)
  return keys_.Add();
}
inline void DecideRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.DecideRequest.keys)
}
#if LANG_CXX11
inline void DecideRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.DecideRequest.keys)
}
#endif
inline void DecideRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.DecideRequest.keys)
}
inline void DecideRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.DecideRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideRequest::keys() const {
  // @@protoc_insertion_point(field_list:dspb.DecideRequest.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecideRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.DecideRequest.keys)
  return &keys_;
}

// bool recover = 4;
inline void DecideRequest::clear_recover() {
  recover_ = false;
}
inline bool DecideRequest::recover() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.recover)
  return recover_;
}
inline void DecideRequest::set_recover(bool value) {
  
  recover_ = value;
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.recover)
}

// bool is_primary = 5;
inline void DecideRequest::clear_is_primary() {
  is_primary_ = false;
}
inline bool DecideRequest::is_primary() const {
  // @@protoc_insertion_point(field_get:dspb.DecideRequest.is_primary)
  return is_primary_;
}
inline void DecideRequest::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:dspb.DecideRequest.is_primary)
}

// -------------------------------------------------------------------

// DecideResponse

// .dspb.TxnError err = 1;
inline bool DecideResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline void DecideResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
inline const ::dspb::TxnError& DecideResponse::err() const {
  const ::dspb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:dspb.DecideResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnError*>(
      &::dspb::_TxnError_default_instance_);
}
inline ::dspb::TxnError* DecideResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::dspb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.DecideResponse.err)
  return err_;
}
inline ::dspb::TxnError* DecideResponse::release_err() {
  // @@protoc_insertion_point(field_release:dspb.DecideResponse.err)
  
  ::dspb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
inline void DecideResponse::set_allocated_err(::dspb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.DecideResponse.err)
}

// repeated bytes secondary_keys = 2;
inline int DecideResponse::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void DecideResponse::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& DecideResponse::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.DecideResponse.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* DecideResponse::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.DecideResponse.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void DecideResponse::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DecideResponse::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DecideResponse::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.DecideResponse.secondary_keys)
}
inline void DecideResponse::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.DecideResponse.secondary_keys)
}
inline ::std::string* DecideResponse::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.DecideResponse.secondary_keys)
  return secondary_keys_.Add();
}
inline void DecideResponse::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.DecideResponse.secondary_keys)
}
#if LANG_CXX11
inline void DecideResponse::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.DecideResponse.secondary_keys)
}
#endif
inline void DecideResponse::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.DecideResponse.secondary_keys)
}
inline void DecideResponse::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.DecideResponse.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideResponse::secondary_keys() const {
  // @@protoc_insertion_point(field_list:dspb.DecideResponse.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecideResponse::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.DecideResponse.secondary_keys)
  return &secondary_keys_;
}

// -------------------------------------------------------------------

// ClearupRequest

// string txn_id = 1;
inline void ClearupRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearupRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.ClearupRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void ClearupRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ClearupRequest.txn_id)
}
#if LANG_CXX11
inline void ClearupRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ClearupRequest.txn_id)
}
#endif
inline void ClearupRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ClearupRequest.txn_id)
}
inline void ClearupRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ClearupRequest.txn_id)
}
inline ::std::string* ClearupRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ClearupRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearupRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.ClearupRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearupRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.ClearupRequest.txn_id)
}

// bytes primary_key = 2;
inline void ClearupRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearupRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.ClearupRequest.primary_key)
  return primary_key_.GetNoArena();
}
inline void ClearupRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ClearupRequest.primary_key)
}
#if LANG_CXX11
inline void ClearupRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ClearupRequest.primary_key)
}
#endif
inline void ClearupRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ClearupRequest.primary_key)
}
inline void ClearupRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ClearupRequest.primary_key)
}
inline ::std::string* ClearupRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ClearupRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearupRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.ClearupRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearupRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ClearupRequest.primary_key)
}

// -------------------------------------------------------------------

// ClearupResponse

// .dspb.TxnError err = 1;
inline bool ClearupResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline void ClearupResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
inline const ::dspb::TxnError& ClearupResponse::err() const {
  const ::dspb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:dspb.ClearupResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnError*>(
      &::dspb::_TxnError_default_instance_);
}
inline ::dspb::TxnError* ClearupResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::dspb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ClearupResponse.err)
  return err_;
}
inline ::dspb::TxnError* ClearupResponse::release_err() {
  // @@protoc_insertion_point(field_release:dspb.ClearupResponse.err)
  
  ::dspb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
inline void ClearupResponse::set_allocated_err(::dspb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ClearupResponse.err)
}

// -------------------------------------------------------------------

// GetLockInfoRequest

// bytes key = 1;
inline void GetLockInfoRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLockInfoRequest::key() const {
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoRequest.key)
  return key_.GetNoArena();
}
inline void GetLockInfoRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetLockInfoRequest.key)
}
#if LANG_CXX11
inline void GetLockInfoRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetLockInfoRequest.key)
}
#endif
inline void GetLockInfoRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetLockInfoRequest.key)
}
inline void GetLockInfoRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetLockInfoRequest.key)
}
inline ::std::string* GetLockInfoRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLockInfoRequest::release_key() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLockInfoRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoRequest.key)
}

// string txn_id = 2;
inline void GetLockInfoRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLockInfoRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void GetLockInfoRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetLockInfoRequest.txn_id)
}
#if LANG_CXX11
inline void GetLockInfoRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetLockInfoRequest.txn_id)
}
#endif
inline void GetLockInfoRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetLockInfoRequest.txn_id)
}
inline void GetLockInfoRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetLockInfoRequest.txn_id)
}
inline ::std::string* GetLockInfoRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLockInfoRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLockInfoRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoRequest.txn_id)
}

// -------------------------------------------------------------------

// GetLockInfoResponse

// .dspb.TxnError err = 1;
inline bool GetLockInfoResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline void GetLockInfoResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
inline const ::dspb::TxnError& GetLockInfoResponse::err() const {
  const ::dspb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TxnError*>(
      &::dspb::_TxnError_default_instance_);
}
inline ::dspb::TxnError* GetLockInfoResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::dspb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoResponse.err)
  return err_;
}
inline ::dspb::TxnError* GetLockInfoResponse::release_err() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoResponse.err)
  
  ::dspb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
inline void GetLockInfoResponse::set_allocated_err(::dspb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoResponse.err)
}

// .dspb.LockInfo info = 2;
inline bool GetLockInfoResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void GetLockInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dspb::LockInfo& GetLockInfoResponse::info() const {
  const ::dspb::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:dspb.GetLockInfoResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::LockInfo*>(
      &::dspb::_LockInfo_default_instance_);
}
inline ::dspb::LockInfo* GetLockInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dspb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:dspb.GetLockInfoResponse.info)
  return info_;
}
inline ::dspb::LockInfo* GetLockInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:dspb.GetLockInfoResponse.info)
  
  ::dspb::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetLockInfoResponse::set_allocated_info(::dspb::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.GetLockInfoResponse.info)
}

// -------------------------------------------------------------------

// SelectField

// .dspb.SelectField.Type typ = 1;
inline void SelectField::clear_typ() {
  typ_ = 0;
}
inline ::dspb::SelectField_Type SelectField::typ() const {
  // @@protoc_insertion_point(field_get:dspb.SelectField.typ)
  return static_cast< ::dspb::SelectField_Type >(typ_);
}
inline void SelectField::set_typ(::dspb::SelectField_Type value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectField.typ)
}

// string aggre_func = 2;
inline void SelectField::clear_aggre_func() {
  aggre_func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectField::aggre_func() const {
  // @@protoc_insertion_point(field_get:dspb.SelectField.aggre_func)
  return aggre_func_.GetNoArena();
}
inline void SelectField::set_aggre_func(const ::std::string& value) {
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SelectField.aggre_func)
}
#if LANG_CXX11
inline void SelectField::set_aggre_func(::std::string&& value) {
  
  aggre_func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SelectField.aggre_func)
}
#endif
inline void SelectField::set_aggre_func(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SelectField.aggre_func)
}
inline void SelectField::set_aggre_func(const char* value, size_t size) {
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SelectField.aggre_func)
}
inline ::std::string* SelectField::mutable_aggre_func() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SelectField.aggre_func)
  return aggre_func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectField::release_aggre_func() {
  // @@protoc_insertion_point(field_release:dspb.SelectField.aggre_func)
  
  return aggre_func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectField::set_allocated_aggre_func(::std::string* aggre_func) {
  if (aggre_func != NULL) {
    
  } else {
    
  }
  aggre_func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aggre_func);
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectField.aggre_func)
}

// .dspb.ColumnInfo column = 3;
inline bool SelectField::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
inline void SelectField::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
inline const ::dspb::ColumnInfo& SelectField::column() const {
  const ::dspb::ColumnInfo* p = column_;
  // @@protoc_insertion_point(field_get:dspb.SelectField.column)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ColumnInfo*>(
      &::dspb::_ColumnInfo_default_instance_);
}
inline ::dspb::ColumnInfo* SelectField::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::dspb::ColumnInfo;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectField.column)
  return column_;
}
inline ::dspb::ColumnInfo* SelectField::release_column() {
  // @@protoc_insertion_point(field_release:dspb.SelectField.column)
  
  ::dspb::ColumnInfo* temp = column_;
  column_ = NULL;
  return temp;
}
inline void SelectField::set_allocated_column(::dspb::ColumnInfo* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectField.column)
}

// -------------------------------------------------------------------

// Scope

// bytes start = 1;
inline void Scope::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scope::start() const {
  // @@protoc_insertion_point(field_get:dspb.Scope.start)
  return start_.GetNoArena();
}
inline void Scope::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Scope.start)
}
#if LANG_CXX11
inline void Scope::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Scope.start)
}
#endif
inline void Scope::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Scope.start)
}
inline void Scope::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Scope.start)
}
inline ::std::string* Scope::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Scope.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scope::release_start() {
  // @@protoc_insertion_point(field_release:dspb.Scope.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scope::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:dspb.Scope.start)
}

// bytes limit = 2;
inline void Scope::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scope::limit() const {
  // @@protoc_insertion_point(field_get:dspb.Scope.limit)
  return limit_.GetNoArena();
}
inline void Scope::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Scope.limit)
}
#if LANG_CXX11
inline void Scope::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Scope.limit)
}
#endif
inline void Scope::set_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Scope.limit)
}
inline void Scope::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Scope.limit)
}
inline ::std::string* Scope::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Scope.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scope::release_limit() {
  // @@protoc_insertion_point(field_release:dspb.Scope.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scope::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:dspb.Scope.limit)
}

// -------------------------------------------------------------------

// SelectRequest

// bytes key = 1;
inline void SelectRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectRequest::key() const {
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.key)
  return key_.GetNoArena();
}
inline void SelectRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SelectRequest.key)
}
#if LANG_CXX11
inline void SelectRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SelectRequest.key)
}
#endif
inline void SelectRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SelectRequest.key)
}
inline void SelectRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SelectRequest.key)
}
inline ::std::string* SelectRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectRequest::release_key() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.key)
}

// .dspb.Scope scope = 2;
inline bool SelectRequest::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
inline void SelectRequest::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) delete scope_;
  scope_ = NULL;
}
inline const ::dspb::Scope& SelectRequest::scope() const {
  const ::dspb::Scope* p = scope_;
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Scope*>(
      &::dspb::_Scope_default_instance_);
}
inline ::dspb::Scope* SelectRequest::mutable_scope() {
  
  if (scope_ == NULL) {
    scope_ = new ::dspb::Scope;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.scope)
  return scope_;
}
inline ::dspb::Scope* SelectRequest::release_scope() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.scope)
  
  ::dspb::Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
inline void SelectRequest::set_allocated_scope(::dspb::Scope* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.scope)
}

// repeated .dspb.SelectField field_list = 3;
inline int SelectRequest::field_list_size() const {
  return field_list_.size();
}
inline void SelectRequest::clear_field_list() {
  field_list_.Clear();
}
inline const ::dspb::SelectField& SelectRequest::field_list(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.field_list)
  return field_list_.Get(index);
}
inline ::dspb::SelectField* SelectRequest::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.field_list)
  return field_list_.Mutable(index);
}
inline ::dspb::SelectField* SelectRequest::add_field_list() {
  // @@protoc_insertion_point(field_add:dspb.SelectRequest.field_list)
  return field_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::SelectField >*
SelectRequest::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectRequest.field_list)
  return &field_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::SelectField >&
SelectRequest::field_list() const {
  // @@protoc_insertion_point(field_list:dspb.SelectRequest.field_list)
  return field_list_;
}

// .dspb.Expr where_expr = 4;
inline bool SelectRequest::has_where_expr() const {
  return this != internal_default_instance() && where_expr_ != NULL;
}
inline void SelectRequest::clear_where_expr() {
  if (GetArenaNoVirtual() == NULL && where_expr_ != NULL) delete where_expr_;
  where_expr_ = NULL;
}
inline const ::dspb::Expr& SelectRequest::where_expr() const {
  const ::dspb::Expr* p = where_expr_;
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.where_expr)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Expr*>(
      &::dspb::_Expr_default_instance_);
}
inline ::dspb::Expr* SelectRequest::mutable_where_expr() {
  
  if (where_expr_ == NULL) {
    where_expr_ = new ::dspb::Expr;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.where_expr)
  return where_expr_;
}
inline ::dspb::Expr* SelectRequest::release_where_expr() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.where_expr)
  
  ::dspb::Expr* temp = where_expr_;
  where_expr_ = NULL;
  return temp;
}
inline void SelectRequest::set_allocated_where_expr(::dspb::Expr* where_expr) {
  delete where_expr_;
  where_expr_ = where_expr;
  if (where_expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.where_expr)
}

// .dspb.Limit limit = 5;
inline bool SelectRequest::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
inline void SelectRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) delete limit_;
  limit_ = NULL;
}
inline const ::dspb::Limit& SelectRequest::limit() const {
  const ::dspb::Limit* p = limit_;
  // @@protoc_insertion_point(field_get:dspb.SelectRequest.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Limit*>(
      &::dspb::_Limit_default_instance_);
}
inline ::dspb::Limit* SelectRequest::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::dspb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SelectRequest.limit)
  return limit_;
}
inline ::dspb::Limit* SelectRequest::release_limit() {
  // @@protoc_insertion_point(field_release:dspb.SelectRequest.limit)
  
  ::dspb::Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline void SelectRequest::set_allocated_limit(::dspb::Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectRequest.limit)
}

// -------------------------------------------------------------------

// RowValue

// bytes fields = 1;
inline void RowValue::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowValue::fields() const {
  // @@protoc_insertion_point(field_get:dspb.RowValue.fields)
  return fields_.GetNoArena();
}
inline void RowValue::set_fields(const ::std::string& value) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.RowValue.fields)
}
#if LANG_CXX11
inline void RowValue::set_fields(::std::string&& value) {
  
  fields_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.RowValue.fields)
}
#endif
inline void RowValue::set_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.RowValue.fields)
}
inline void RowValue::set_fields(const void* value, size_t size) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.RowValue.fields)
}
inline ::std::string* RowValue::mutable_fields() {
  
  // @@protoc_insertion_point(field_mutable:dspb.RowValue.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowValue::release_fields() {
  // @@protoc_insertion_point(field_release:dspb.RowValue.fields)
  
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowValue::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    
  } else {
    
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:dspb.RowValue.fields)
}

// uint64 version = 2;
inline void RowValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RowValue::version() const {
  // @@protoc_insertion_point(field_get:dspb.RowValue.version)
  return version_;
}
inline void RowValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dspb.RowValue.version)
}

// -------------------------------------------------------------------

// RowIntent

// .dspb.OpType op_type = 1;
inline void RowIntent::clear_op_type() {
  op_type_ = 0;
}
inline ::dspb::OpType RowIntent::op_type() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.op_type)
  return static_cast< ::dspb::OpType >(op_type_);
}
inline void RowIntent::set_op_type(::dspb::OpType value) {
  
  op_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.RowIntent.op_type)
}

// string txn_id = 2;
inline void RowIntent::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowIntent::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.txn_id)
  return txn_id_.GetNoArena();
}
inline void RowIntent::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.RowIntent.txn_id)
}
#if LANG_CXX11
inline void RowIntent::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.RowIntent.txn_id)
}
#endif
inline void RowIntent::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.RowIntent.txn_id)
}
inline void RowIntent::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.RowIntent.txn_id)
}
inline ::std::string* RowIntent::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.RowIntent.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowIntent::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.RowIntent.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowIntent::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.RowIntent.txn_id)
}

// bytes primary_key = 3;
inline void RowIntent::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowIntent::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.primary_key)
  return primary_key_.GetNoArena();
}
inline void RowIntent::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.RowIntent.primary_key)
}
#if LANG_CXX11
inline void RowIntent::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.RowIntent.primary_key)
}
#endif
inline void RowIntent::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.RowIntent.primary_key)
}
inline void RowIntent::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.RowIntent.primary_key)
}
inline ::std::string* RowIntent::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.RowIntent.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowIntent::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.RowIntent.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowIntent::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.RowIntent.primary_key)
}

// bool timeout = 4;
inline void RowIntent::clear_timeout() {
  timeout_ = false;
}
inline bool RowIntent::timeout() const {
  // @@protoc_insertion_point(field_get:dspb.RowIntent.timeout)
  return timeout_;
}
inline void RowIntent::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:dspb.RowIntent.timeout)
}

// .dspb.RowValue value = 10;
inline bool RowIntent::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void RowIntent::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::dspb::RowValue& RowIntent::value() const {
  const ::dspb::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:dspb.RowIntent.value)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RowValue*>(
      &::dspb::_RowValue_default_instance_);
}
inline ::dspb::RowValue* RowIntent::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::dspb::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RowIntent.value)
  return value_;
}
inline ::dspb::RowValue* RowIntent::release_value() {
  // @@protoc_insertion_point(field_release:dspb.RowIntent.value)
  
  ::dspb::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void RowIntent::set_allocated_value(::dspb::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RowIntent.value)
}

// -------------------------------------------------------------------

// Row

// bytes key = 1;
inline void Row::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:dspb.Row.key)
  return key_.GetNoArena();
}
inline void Row::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Row.key)
}
#if LANG_CXX11
inline void Row::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Row.key)
}
#endif
inline void Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Row.key)
}
inline void Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Row.key)
}
inline ::std::string* Row::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Row.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:dspb.Row.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Row::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.Row.key)
}

// .dspb.RowValue value = 2;
inline bool Row::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Row::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::dspb::RowValue& Row::value() const {
  const ::dspb::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:dspb.Row.value)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RowValue*>(
      &::dspb::_RowValue_default_instance_);
}
inline ::dspb::RowValue* Row::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::dspb::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Row.value)
  return value_;
}
inline ::dspb::RowValue* Row::release_value() {
  // @@protoc_insertion_point(field_release:dspb.Row.value)
  
  ::dspb::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Row::set_allocated_value(::dspb::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Row.value)
}

// .dspb.RowIntent intent = 3;
inline bool Row::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
inline void Row::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
inline const ::dspb::RowIntent& Row::intent() const {
  const ::dspb::RowIntent* p = intent_;
  // @@protoc_insertion_point(field_get:dspb.Row.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RowIntent*>(
      &::dspb::_RowIntent_default_instance_);
}
inline ::dspb::RowIntent* Row::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::dspb::RowIntent;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Row.intent)
  return intent_;
}
inline ::dspb::RowIntent* Row::release_intent() {
  // @@protoc_insertion_point(field_release:dspb.Row.intent)
  
  ::dspb::RowIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline void Row::set_allocated_intent(::dspb::RowIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Row.intent)
}

// -------------------------------------------------------------------

// SelectResponse

// int32 code = 1;
inline void SelectResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 SelectResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.SelectResponse.code)
  return code_;
}
inline void SelectResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectResponse.code)
}

// repeated .dspb.Row rows = 2;
inline int SelectResponse::rows_size() const {
  return rows_.size();
}
inline void SelectResponse::clear_rows() {
  rows_.Clear();
}
inline const ::dspb::Row& SelectResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectResponse.rows)
  return rows_.Get(index);
}
inline ::dspb::Row* SelectResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectResponse.rows)
  return rows_.Mutable(index);
}
inline ::dspb::Row* SelectResponse::add_rows() {
  // @@protoc_insertion_point(field_add:dspb.SelectResponse.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::Row >*
SelectResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectResponse.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::Row >&
SelectResponse::rows() const {
  // @@protoc_insertion_point(field_list:dspb.SelectResponse.rows)
  return rows_;
}

// uint64 offset = 3;
inline void SelectResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SelectResponse::offset() const {
  // @@protoc_insertion_point(field_get:dspb.SelectResponse.offset)
  return offset_;
}
inline void SelectResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectResponse.offset)
}

// -------------------------------------------------------------------

// SelectFlowRequest

// repeated .dspb.Processor processors = 1;
inline int SelectFlowRequest::processors_size() const {
  return processors_.size();
}
inline void SelectFlowRequest::clear_processors() {
  processors_.Clear();
}
inline const ::dspb::Processor& SelectFlowRequest::processors(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowRequest.processors)
  return processors_.Get(index);
}
inline ::dspb::Processor* SelectFlowRequest::mutable_processors(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowRequest.processors)
  return processors_.Mutable(index);
}
inline ::dspb::Processor* SelectFlowRequest::add_processors() {
  // @@protoc_insertion_point(field_add:dspb.SelectFlowRequest.processors)
  return processors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::Processor >*
SelectFlowRequest::mutable_processors() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowRequest.processors)
  return &processors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::Processor >&
SelectFlowRequest::processors() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowRequest.processors)
  return processors_;
}

// repeated uint32 output_offsets = 2;
inline int SelectFlowRequest::output_offsets_size() const {
  return output_offsets_.size();
}
inline void SelectFlowRequest::clear_output_offsets() {
  output_offsets_.Clear();
}
inline ::google::protobuf::uint32 SelectFlowRequest::output_offsets(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowRequest.output_offsets)
  return output_offsets_.Get(index);
}
inline void SelectFlowRequest::set_output_offsets(int index, ::google::protobuf::uint32 value) {
  output_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:dspb.SelectFlowRequest.output_offsets)
}
inline void SelectFlowRequest::add_output_offsets(::google::protobuf::uint32 value) {
  output_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:dspb.SelectFlowRequest.output_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SelectFlowRequest::output_offsets() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowRequest.output_offsets)
  return output_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SelectFlowRequest::mutable_output_offsets() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowRequest.output_offsets)
  return &output_offsets_;
}

// bool gather_trace = 3;
inline void SelectFlowRequest::clear_gather_trace() {
  gather_trace_ = false;
}
inline bool SelectFlowRequest::gather_trace() const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowRequest.gather_trace)
  return gather_trace_;
}
inline void SelectFlowRequest::set_gather_trace(bool value) {
  
  gather_trace_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectFlowRequest.gather_trace)
}

// -------------------------------------------------------------------

// SelectFlowResponse

// int32 code = 1;
inline void SelectFlowResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 SelectFlowResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.code)
  return code_;
}
inline void SelectFlowResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.SelectFlowResponse.code)
}

// repeated .dspb.Row rows = 2;
inline int SelectFlowResponse::rows_size() const {
  return rows_.size();
}
inline void SelectFlowResponse::clear_rows() {
  rows_.Clear();
}
inline const ::dspb::Row& SelectFlowResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.rows)
  return rows_.Get(index);
}
inline ::dspb::Row* SelectFlowResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowResponse.rows)
  return rows_.Mutable(index);
}
inline ::dspb::Row* SelectFlowResponse::add_rows() {
  // @@protoc_insertion_point(field_add:dspb.SelectFlowResponse.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::Row >*
SelectFlowResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowResponse.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::Row >&
SelectFlowResponse::rows() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowResponse.rows)
  return rows_;
}

// bytes last_key = 3;
inline void SelectFlowResponse::clear_last_key() {
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectFlowResponse::last_key() const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.last_key)
  return last_key_.GetNoArena();
}
inline void SelectFlowResponse::set_last_key(const ::std::string& value) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SelectFlowResponse.last_key)
}
#if LANG_CXX11
inline void SelectFlowResponse::set_last_key(::std::string&& value) {
  
  last_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SelectFlowResponse.last_key)
}
#endif
inline void SelectFlowResponse::set_last_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SelectFlowResponse.last_key)
}
inline void SelectFlowResponse::set_last_key(const void* value, size_t size) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SelectFlowResponse.last_key)
}
inline ::std::string* SelectFlowResponse::mutable_last_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowResponse.last_key)
  return last_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectFlowResponse::release_last_key() {
  // @@protoc_insertion_point(field_release:dspb.SelectFlowResponse.last_key)
  
  return last_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectFlowResponse::set_allocated_last_key(::std::string* last_key) {
  if (last_key != NULL) {
    
  } else {
    
  }
  last_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SelectFlowResponse.last_key)
}

// repeated .dspb.ProcessorTrace traces = 4;
inline int SelectFlowResponse::traces_size() const {
  return traces_.size();
}
inline void SelectFlowResponse::clear_traces() {
  traces_.Clear();
}
inline const ::dspb::ProcessorTrace& SelectFlowResponse::traces(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SelectFlowResponse.traces)
  return traces_.Get(index);
}
inline ::dspb::ProcessorTrace* SelectFlowResponse::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SelectFlowResponse.traces)
  return traces_.Mutable(index);
}
inline ::dspb::ProcessorTrace* SelectFlowResponse::add_traces() {
  // @@protoc_insertion_point(field_add:dspb.SelectFlowResponse.traces)
  return traces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace >*
SelectFlowResponse::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SelectFlowResponse.traces)
  return &traces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::ProcessorTrace >&
SelectFlowResponse::traces() const {
  // @@protoc_insertion_point(field_list:dspb.SelectFlowResponse.traces)
  return traces_;
}

// -------------------------------------------------------------------

// ValueIntent

// .dspb.OpType op_type = 1;
inline void ValueIntent::clear_op_type() {
  op_type_ = 0;
}
inline ::dspb::OpType ValueIntent::op_type() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.op_type)
  return static_cast< ::dspb::OpType >(op_type_);
}
inline void ValueIntent::set_op_type(::dspb::OpType value) {
  
  op_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.op_type)
}

// string txn_id = 2;
inline void ValueIntent::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValueIntent::txn_id() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.txn_id)
  return txn_id_.GetNoArena();
}
inline void ValueIntent::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.txn_id)
}
#if LANG_CXX11
inline void ValueIntent::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ValueIntent.txn_id)
}
#endif
inline void ValueIntent::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ValueIntent.txn_id)
}
inline void ValueIntent::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ValueIntent.txn_id)
}
inline ::std::string* ValueIntent::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ValueIntent.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueIntent::release_txn_id() {
  // @@protoc_insertion_point(field_release:dspb.ValueIntent.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueIntent::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:dspb.ValueIntent.txn_id)
}

// bytes primary_key = 3;
inline void ValueIntent::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValueIntent::primary_key() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.primary_key)
  return primary_key_.GetNoArena();
}
inline void ValueIntent::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.primary_key)
}
#if LANG_CXX11
inline void ValueIntent::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ValueIntent.primary_key)
}
#endif
inline void ValueIntent::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ValueIntent.primary_key)
}
inline void ValueIntent::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ValueIntent.primary_key)
}
inline ::std::string* ValueIntent::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ValueIntent.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueIntent::release_primary_key() {
  // @@protoc_insertion_point(field_release:dspb.ValueIntent.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueIntent::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ValueIntent.primary_key)
}

// bool timeout = 4;
inline void ValueIntent::clear_timeout() {
  timeout_ = false;
}
inline bool ValueIntent::timeout() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.timeout)
  return timeout_;
}
inline void ValueIntent::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.timeout)
}

// bytes value = 10;
inline void ValueIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValueIntent::value() const {
  // @@protoc_insertion_point(field_get:dspb.ValueIntent.value)
  return value_.GetNoArena();
}
inline void ValueIntent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ValueIntent.value)
}
#if LANG_CXX11
inline void ValueIntent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ValueIntent.value)
}
#endif
inline void ValueIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ValueIntent.value)
}
inline void ValueIntent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ValueIntent.value)
}
inline ::std::string* ValueIntent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ValueIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueIntent::release_value() {
  // @@protoc_insertion_point(field_release:dspb.ValueIntent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.ValueIntent.value)
}

// -------------------------------------------------------------------

// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:dspb.KeyValue.key)
  return key_.GetNoArena();
}
inline void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.KeyValue.key)
}
#if LANG_CXX11
inline void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.KeyValue.key)
}
#endif
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:dspb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyValue.key)
}

// bytes value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:dspb.KeyValue.value)
  return value_.GetNoArena();
}
inline void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.KeyValue.value)
}
#if LANG_CXX11
inline void KeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.KeyValue.value)
}
#endif
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:dspb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyValue.value)
}

// .dspb.ValueIntent intent = 10;
inline bool KeyValue::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
inline void KeyValue::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
inline const ::dspb::ValueIntent& KeyValue::intent() const {
  const ::dspb::ValueIntent* p = intent_;
  // @@protoc_insertion_point(field_get:dspb.KeyValue.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ValueIntent*>(
      &::dspb::_ValueIntent_default_instance_);
}
inline ::dspb::ValueIntent* KeyValue::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::dspb::ValueIntent;
  }
  // @@protoc_insertion_point(field_mutable:dspb.KeyValue.intent)
  return intent_;
}
inline ::dspb::ValueIntent* KeyValue::release_intent() {
  // @@protoc_insertion_point(field_release:dspb.KeyValue.intent)
  
  ::dspb::ValueIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline void KeyValue::set_allocated_intent(::dspb::ValueIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyValue.intent)
}

// -------------------------------------------------------------------

// ScanRequest

// bytes start_key = 1;
inline void ScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.start_key)
  return start_key_.GetNoArena();
}
inline void ScanRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.start_key)
}
#if LANG_CXX11
inline void ScanRequest::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ScanRequest.start_key)
}
#endif
inline void ScanRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ScanRequest.start_key)
}
inline void ScanRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ScanRequest.start_key)
}
inline ::std::string* ScanRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:dspb.ScanRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ScanRequest.start_key)
}

// bytes end_key = 2;
inline void ScanRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.end_key)
  return end_key_.GetNoArena();
}
inline void ScanRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.end_key)
}
#if LANG_CXX11
inline void ScanRequest::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ScanRequest.end_key)
}
#endif
inline void ScanRequest::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ScanRequest.end_key)
}
inline void ScanRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ScanRequest.end_key)
}
inline ::std::string* ScanRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ScanRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:dspb.ScanRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ScanRequest.end_key)
}

// int64 max_count = 3;
inline void ScanRequest::clear_max_count() {
  max_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ScanRequest::max_count() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.max_count)
  return max_count_;
}
inline void ScanRequest::set_max_count(::google::protobuf::int64 value) {
  
  max_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.max_count)
}

// bool only_one = 4;
inline void ScanRequest::clear_only_one() {
  only_one_ = false;
}
inline bool ScanRequest::only_one() const {
  // @@protoc_insertion_point(field_get:dspb.ScanRequest.only_one)
  return only_one_;
}
inline void ScanRequest::set_only_one(bool value) {
  
  only_one_ = value;
  // @@protoc_insertion_point(field_set:dspb.ScanRequest.only_one)
}

// -------------------------------------------------------------------

// ScanResponse

// int32 code = 1;
inline void ScanResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ScanResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.ScanResponse.code)
  return code_;
}
inline void ScanResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.ScanResponse.code)
}

// repeated .dspb.KeyValue kvs = 2;
inline int ScanResponse::kvs_size() const {
  return kvs_.size();
}
inline void ScanResponse::clear_kvs() {
  kvs_.Clear();
}
inline const ::dspb::KeyValue& ScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:dspb.ScanResponse.kvs)
  return kvs_.Get(index);
}
inline ::dspb::KeyValue* ScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.ScanResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::dspb::KeyValue* ScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:dspb.ScanResponse.kvs)
  return kvs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::KeyValue >*
ScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:dspb.ScanResponse.kvs)
  return &kvs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::KeyValue >&
ScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:dspb.ScanResponse.kvs)
  return kvs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dspb::TxnError_ErrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::TxnError_ErrType>() {
  return ::dspb::TxnError_ErrType_descriptor();
}
template <> struct is_proto_enum< ::dspb::SelectField_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::SelectField_Type>() {
  return ::dspb::SelectField_Type_descriptor();
}
template <> struct is_proto_enum< ::dspb::OpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::OpType>() {
  return ::dspb::OpType_descriptor();
}
template <> struct is_proto_enum< ::dspb::TxnStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::TxnStatus>() {
  return ::dspb::TxnStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dspb_2ftxn_2eproto__INCLUDED
