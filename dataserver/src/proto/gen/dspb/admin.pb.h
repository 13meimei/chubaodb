// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/admin.proto

#ifndef PROTOBUF_dspb_2fadmin_2eproto__INCLUDED
#define PROTOBUF_dspb_2fadmin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace dspb {
class AdminAuth;
class AdminAuthDefaultTypeInternal;
extern AdminAuthDefaultTypeInternal _AdminAuth_default_instance_;
class AdminRequest;
class AdminRequestDefaultTypeInternal;
extern AdminRequestDefaultTypeInternal _AdminRequest_default_instance_;
class AdminResponse;
class AdminResponseDefaultTypeInternal;
extern AdminResponseDefaultTypeInternal _AdminResponse_default_instance_;
class ClearQueueRequest;
class ClearQueueRequestDefaultTypeInternal;
extern ClearQueueRequestDefaultTypeInternal _ClearQueueRequest_default_instance_;
class ClearQueueResponse;
class ClearQueueResponseDefaultTypeInternal;
extern ClearQueueResponseDefaultTypeInternal _ClearQueueResponse_default_instance_;
class CompactionRequest;
class CompactionRequestDefaultTypeInternal;
extern CompactionRequestDefaultTypeInternal _CompactionRequest_default_instance_;
class CompactionResponse;
class CompactionResponseDefaultTypeInternal;
extern CompactionResponseDefaultTypeInternal _CompactionResponse_default_instance_;
class ConfigItem;
class ConfigItemDefaultTypeInternal;
extern ConfigItemDefaultTypeInternal _ConfigItem_default_instance_;
class ConfigKey;
class ConfigKeyDefaultTypeInternal;
extern ConfigKeyDefaultTypeInternal _ConfigKey_default_instance_;
class DumpRequest;
class DumpRequestDefaultTypeInternal;
extern DumpRequestDefaultTypeInternal _DumpRequest_default_instance_;
class DumpResponse;
class DumpResponseDefaultTypeInternal;
extern DumpResponseDefaultTypeInternal _DumpResponse_default_instance_;
class FlushDBRequest;
class FlushDBRequestDefaultTypeInternal;
extern FlushDBRequestDefaultTypeInternal _FlushDBRequest_default_instance_;
class FlushDBResponse;
class FlushDBResponseDefaultTypeInternal;
extern FlushDBResponseDefaultTypeInternal _FlushDBResponse_default_instance_;
class ForceSplitRequest;
class ForceSplitRequestDefaultTypeInternal;
extern ForceSplitRequestDefaultTypeInternal _ForceSplitRequest_default_instance_;
class ForceSplitResponse;
class ForceSplitResponseDefaultTypeInternal;
extern ForceSplitResponseDefaultTypeInternal _ForceSplitResponse_default_instance_;
class GetConfigRequest;
class GetConfigRequestDefaultTypeInternal;
extern GetConfigRequestDefaultTypeInternal _GetConfigRequest_default_instance_;
class GetConfigResponse;
class GetConfigResponseDefaultTypeInternal;
extern GetConfigResponseDefaultTypeInternal _GetConfigResponse_default_instance_;
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class GetPendingsRequest;
class GetPendingsRequestDefaultTypeInternal;
extern GetPendingsRequestDefaultTypeInternal _GetPendingsRequest_default_instance_;
class GetPendingsResponse;
class GetPendingsResponseDefaultTypeInternal;
extern GetPendingsResponseDefaultTypeInternal _GetPendingsResponse_default_instance_;
class ProfileRequest;
class ProfileRequestDefaultTypeInternal;
extern ProfileRequestDefaultTypeInternal _ProfileRequest_default_instance_;
class ProfileResponse;
class ProfileResponseDefaultTypeInternal;
extern ProfileResponseDefaultTypeInternal _ProfileResponse_default_instance_;
class SetConfigRequest;
class SetConfigRequestDefaultTypeInternal;
extern SetConfigRequestDefaultTypeInternal _SetConfigRequest_default_instance_;
class SetConfigResponse;
class SetConfigResponseDefaultTypeInternal;
extern SetConfigResponseDefaultTypeInternal _SetConfigResponse_default_instance_;
}  // namespace dspb

namespace dspb {

namespace protobuf_dspb_2fadmin_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dspb_2fadmin_2eproto

enum AdminAuth_AuthMethod {
  AdminAuth_AuthMethod_MD5_DIGEST = 0,
  AdminAuth_AuthMethod_AdminAuth_AuthMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AdminAuth_AuthMethod_AdminAuth_AuthMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AdminAuth_AuthMethod_IsValid(int value);
const AdminAuth_AuthMethod AdminAuth_AuthMethod_AuthMethod_MIN = AdminAuth_AuthMethod_MD5_DIGEST;
const AdminAuth_AuthMethod AdminAuth_AuthMethod_AuthMethod_MAX = AdminAuth_AuthMethod_MD5_DIGEST;
const int AdminAuth_AuthMethod_AuthMethod_ARRAYSIZE = AdminAuth_AuthMethod_AuthMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdminAuth_AuthMethod_descriptor();
inline const ::std::string& AdminAuth_AuthMethod_Name(AdminAuth_AuthMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdminAuth_AuthMethod_descriptor(), value);
}
inline bool AdminAuth_AuthMethod_Parse(
    const ::std::string& name, AdminAuth_AuthMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdminAuth_AuthMethod>(
    AdminAuth_AuthMethod_descriptor(), name, value);
}
enum ClearQueueRequest_QueueType {
  ClearQueueRequest_QueueType_ALL = 0,
  ClearQueueRequest_QueueType_FAST_WORKER = 1,
  ClearQueueRequest_QueueType_SLOW_WORKER = 2,
  ClearQueueRequest_QueueType_ClearQueueRequest_QueueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClearQueueRequest_QueueType_ClearQueueRequest_QueueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClearQueueRequest_QueueType_IsValid(int value);
const ClearQueueRequest_QueueType ClearQueueRequest_QueueType_QueueType_MIN = ClearQueueRequest_QueueType_ALL;
const ClearQueueRequest_QueueType ClearQueueRequest_QueueType_QueueType_MAX = ClearQueueRequest_QueueType_SLOW_WORKER;
const int ClearQueueRequest_QueueType_QueueType_ARRAYSIZE = ClearQueueRequest_QueueType_QueueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClearQueueRequest_QueueType_descriptor();
inline const ::std::string& ClearQueueRequest_QueueType_Name(ClearQueueRequest_QueueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClearQueueRequest_QueueType_descriptor(), value);
}
inline bool ClearQueueRequest_QueueType_Parse(
    const ::std::string& name, ClearQueueRequest_QueueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClearQueueRequest_QueueType>(
    ClearQueueRequest_QueueType_descriptor(), name, value);
}
enum GetPendingsRequest_PendingType {
  GetPendingsRequest_PendingType_ALL = 0,
  GetPendingsRequest_PendingType_INSERT = 1,
  GetPendingsRequest_PendingType_SELECT = 2,
  GetPendingsRequest_PendingType_PONIT_SELECT = 3,
  GetPendingsRequest_PendingType_RANGE_SELECT = 4,
  GetPendingsRequest_PendingType_GetPendingsRequest_PendingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetPendingsRequest_PendingType_GetPendingsRequest_PendingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetPendingsRequest_PendingType_IsValid(int value);
const GetPendingsRequest_PendingType GetPendingsRequest_PendingType_PendingType_MIN = GetPendingsRequest_PendingType_ALL;
const GetPendingsRequest_PendingType GetPendingsRequest_PendingType_PendingType_MAX = GetPendingsRequest_PendingType_RANGE_SELECT;
const int GetPendingsRequest_PendingType_PendingType_ARRAYSIZE = GetPendingsRequest_PendingType_PendingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetPendingsRequest_PendingType_descriptor();
inline const ::std::string& GetPendingsRequest_PendingType_Name(GetPendingsRequest_PendingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetPendingsRequest_PendingType_descriptor(), value);
}
inline bool GetPendingsRequest_PendingType_Parse(
    const ::std::string& name, GetPendingsRequest_PendingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetPendingsRequest_PendingType>(
    GetPendingsRequest_PendingType_descriptor(), name, value);
}
enum ProfileRequest_ProfileType {
  ProfileRequest_ProfileType_CPU = 0,
  ProfileRequest_ProfileType_HEAP = 1,
  ProfileRequest_ProfileType_ROCKSDB = 2,
  ProfileRequest_ProfileType_ProfileRequest_ProfileType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProfileRequest_ProfileType_ProfileRequest_ProfileType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProfileRequest_ProfileType_IsValid(int value);
const ProfileRequest_ProfileType ProfileRequest_ProfileType_ProfileType_MIN = ProfileRequest_ProfileType_CPU;
const ProfileRequest_ProfileType ProfileRequest_ProfileType_ProfileType_MAX = ProfileRequest_ProfileType_ROCKSDB;
const int ProfileRequest_ProfileType_ProfileType_ARRAYSIZE = ProfileRequest_ProfileType_ProfileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProfileRequest_ProfileType_descriptor();
inline const ::std::string& ProfileRequest_ProfileType_Name(ProfileRequest_ProfileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProfileRequest_ProfileType_descriptor(), value);
}
inline bool ProfileRequest_ProfileType_Parse(
    const ::std::string& name, ProfileRequest_ProfileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProfileRequest_ProfileType>(
    ProfileRequest_ProfileType_descriptor(), name, value);
}
enum ProfileRequest_ProfileOp {
  ProfileRequest_ProfileOp_PROFILE_START = 0,
  ProfileRequest_ProfileOp_PROFILE_STOP = 1,
  ProfileRequest_ProfileOp_ProfileRequest_ProfileOp_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProfileRequest_ProfileOp_ProfileRequest_ProfileOp_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProfileRequest_ProfileOp_IsValid(int value);
const ProfileRequest_ProfileOp ProfileRequest_ProfileOp_ProfileOp_MIN = ProfileRequest_ProfileOp_PROFILE_START;
const ProfileRequest_ProfileOp ProfileRequest_ProfileOp_ProfileOp_MAX = ProfileRequest_ProfileOp_PROFILE_STOP;
const int ProfileRequest_ProfileOp_ProfileOp_ARRAYSIZE = ProfileRequest_ProfileOp_ProfileOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProfileRequest_ProfileOp_descriptor();
inline const ::std::string& ProfileRequest_ProfileOp_Name(ProfileRequest_ProfileOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProfileRequest_ProfileOp_descriptor(), value);
}
inline bool ProfileRequest_ProfileOp_Parse(
    const ::std::string& name, ProfileRequest_ProfileOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProfileRequest_ProfileOp>(
    ProfileRequest_ProfileOp_descriptor(), name, value);
}
// ===================================================================

class AdminAuth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.AdminAuth) */ {
 public:
  AdminAuth();
  virtual ~AdminAuth();

  AdminAuth(const AdminAuth& from);

  inline AdminAuth& operator=(const AdminAuth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminAuth(AdminAuth&& from) noexcept
    : AdminAuth() {
    *this = ::std::move(from);
  }

  inline AdminAuth& operator=(AdminAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminAuth& default_instance();

  static inline const AdminAuth* internal_default_instance() {
    return reinterpret_cast<const AdminAuth*>(
               &_AdminAuth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AdminAuth* other);
  friend void swap(AdminAuth& a, AdminAuth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminAuth* New() const PROTOBUF_FINAL { return New(NULL); }

  AdminAuth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdminAuth& from);
  void MergeFrom(const AdminAuth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdminAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AdminAuth_AuthMethod AuthMethod;
  static const AuthMethod MD5_DIGEST =
    AdminAuth_AuthMethod_MD5_DIGEST;
  static inline bool AuthMethod_IsValid(int value) {
    return AdminAuth_AuthMethod_IsValid(value);
  }
  static const AuthMethod AuthMethod_MIN =
    AdminAuth_AuthMethod_AuthMethod_MIN;
  static const AuthMethod AuthMethod_MAX =
    AdminAuth_AuthMethod_AuthMethod_MAX;
  static const int AuthMethod_ARRAYSIZE =
    AdminAuth_AuthMethod_AuthMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuthMethod_descriptor() {
    return AdminAuth_AuthMethod_descriptor();
  }
  static inline const ::std::string& AuthMethod_Name(AuthMethod value) {
    return AdminAuth_AuthMethod_Name(value);
  }
  static inline bool AuthMethod_Parse(const ::std::string& name,
      AuthMethod* value) {
    return AdminAuth_AuthMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string sign = 3;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // int64 epoch = 2;
  void clear_epoch();
  static const int kEpochFieldNumber = 2;
  ::google::protobuf::int64 epoch() const;
  void set_epoch(::google::protobuf::int64 value);

  // .dspb.AdminAuth.AuthMethod method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::dspb::AdminAuth_AuthMethod method() const;
  void set_method(::dspb::AdminAuth_AuthMethod value);

  // @@protoc_insertion_point(class_scope:dspb.AdminAuth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::int64 epoch_;
  int method_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.AdminRequest) */ {
 public:
  AdminRequest();
  virtual ~AdminRequest();

  AdminRequest(const AdminRequest& from);

  inline AdminRequest& operator=(const AdminRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminRequest(AdminRequest&& from) noexcept
    : AdminRequest() {
    *this = ::std::move(from);
  }

  inline AdminRequest& operator=(AdminRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminRequest& default_instance();

  enum ReqCase {
    kSetCfg = 10,
    kGetCfg = 11,
    kGetInfo = 12,
    kForceSplit = 13,
    kCompaction = 14,
    kClearQueue = 15,
    kGetPendings = 16,
    kFlushDb = 17,
    kProfile = 18,
    kDump = 19,
    REQ_NOT_SET = 0,
  };

  static inline const AdminRequest* internal_default_instance() {
    return reinterpret_cast<const AdminRequest*>(
               &_AdminRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AdminRequest* other);
  friend void swap(AdminRequest& a, AdminRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AdminRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdminRequest& from);
  void MergeFrom(const AdminRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdminRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dspb.AdminAuth auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::dspb::AdminAuth& auth() const;
  ::dspb::AdminAuth* mutable_auth();
  ::dspb::AdminAuth* release_auth();
  void set_allocated_auth(::dspb::AdminAuth* auth);

  // .dspb.SetConfigRequest set_cfg = 10;
  bool has_set_cfg() const;
  void clear_set_cfg();
  static const int kSetCfgFieldNumber = 10;
  const ::dspb::SetConfigRequest& set_cfg() const;
  ::dspb::SetConfigRequest* mutable_set_cfg();
  ::dspb::SetConfigRequest* release_set_cfg();
  void set_allocated_set_cfg(::dspb::SetConfigRequest* set_cfg);

  // .dspb.GetConfigRequest get_cfg = 11;
  bool has_get_cfg() const;
  void clear_get_cfg();
  static const int kGetCfgFieldNumber = 11;
  const ::dspb::GetConfigRequest& get_cfg() const;
  ::dspb::GetConfigRequest* mutable_get_cfg();
  ::dspb::GetConfigRequest* release_get_cfg();
  void set_allocated_get_cfg(::dspb::GetConfigRequest* get_cfg);

  // .dspb.GetInfoRequest get_info = 12;
  bool has_get_info() const;
  void clear_get_info();
  static const int kGetInfoFieldNumber = 12;
  const ::dspb::GetInfoRequest& get_info() const;
  ::dspb::GetInfoRequest* mutable_get_info();
  ::dspb::GetInfoRequest* release_get_info();
  void set_allocated_get_info(::dspb::GetInfoRequest* get_info);

  // .dspb.ForceSplitRequest force_split = 13;
  bool has_force_split() const;
  void clear_force_split();
  static const int kForceSplitFieldNumber = 13;
  const ::dspb::ForceSplitRequest& force_split() const;
  ::dspb::ForceSplitRequest* mutable_force_split();
  ::dspb::ForceSplitRequest* release_force_split();
  void set_allocated_force_split(::dspb::ForceSplitRequest* force_split);

  // .dspb.CompactionRequest compaction = 14;
  bool has_compaction() const;
  void clear_compaction();
  static const int kCompactionFieldNumber = 14;
  const ::dspb::CompactionRequest& compaction() const;
  ::dspb::CompactionRequest* mutable_compaction();
  ::dspb::CompactionRequest* release_compaction();
  void set_allocated_compaction(::dspb::CompactionRequest* compaction);

  // .dspb.ClearQueueRequest clear_queue = 15;
  bool has_clear_queue() const;
  void clear_clear_queue();
  static const int kClearQueueFieldNumber = 15;
  const ::dspb::ClearQueueRequest& clear_queue() const;
  ::dspb::ClearQueueRequest* mutable_clear_queue();
  ::dspb::ClearQueueRequest* release_clear_queue();
  void set_allocated_clear_queue(::dspb::ClearQueueRequest* clear_queue);

  // .dspb.GetPendingsRequest get_pendings = 16;
  bool has_get_pendings() const;
  void clear_get_pendings();
  static const int kGetPendingsFieldNumber = 16;
  const ::dspb::GetPendingsRequest& get_pendings() const;
  ::dspb::GetPendingsRequest* mutable_get_pendings();
  ::dspb::GetPendingsRequest* release_get_pendings();
  void set_allocated_get_pendings(::dspb::GetPendingsRequest* get_pendings);

  // .dspb.FlushDBRequest flush_db = 17;
  bool has_flush_db() const;
  void clear_flush_db();
  static const int kFlushDbFieldNumber = 17;
  const ::dspb::FlushDBRequest& flush_db() const;
  ::dspb::FlushDBRequest* mutable_flush_db();
  ::dspb::FlushDBRequest* release_flush_db();
  void set_allocated_flush_db(::dspb::FlushDBRequest* flush_db);

  // .dspb.ProfileRequest profile = 18;
  bool has_profile() const;
  void clear_profile();
  static const int kProfileFieldNumber = 18;
  const ::dspb::ProfileRequest& profile() const;
  ::dspb::ProfileRequest* mutable_profile();
  ::dspb::ProfileRequest* release_profile();
  void set_allocated_profile(::dspb::ProfileRequest* profile);

  // .dspb.DumpRequest dump = 19;
  bool has_dump() const;
  void clear_dump();
  static const int kDumpFieldNumber = 19;
  const ::dspb::DumpRequest& dump() const;
  ::dspb::DumpRequest* mutable_dump();
  ::dspb::DumpRequest* release_dump();
  void set_allocated_dump(::dspb::DumpRequest* dump);

  ReqCase req_case() const;
  // @@protoc_insertion_point(class_scope:dspb.AdminRequest)
 private:
  void set_has_set_cfg();
  void set_has_get_cfg();
  void set_has_get_info();
  void set_has_force_split();
  void set_has_compaction();
  void set_has_clear_queue();
  void set_has_get_pendings();
  void set_has_flush_db();
  void set_has_profile();
  void set_has_dump();

  inline bool has_req() const;
  void clear_req();
  inline void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::AdminAuth* auth_;
  union ReqUnion {
    ReqUnion() {}
    ::dspb::SetConfigRequest* set_cfg_;
    ::dspb::GetConfigRequest* get_cfg_;
    ::dspb::GetInfoRequest* get_info_;
    ::dspb::ForceSplitRequest* force_split_;
    ::dspb::CompactionRequest* compaction_;
    ::dspb::ClearQueueRequest* clear_queue_;
    ::dspb::GetPendingsRequest* get_pendings_;
    ::dspb::FlushDBRequest* flush_db_;
    ::dspb::ProfileRequest* profile_;
    ::dspb::DumpRequest* dump_;
  } req_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.AdminResponse) */ {
 public:
  AdminResponse();
  virtual ~AdminResponse();

  AdminResponse(const AdminResponse& from);

  inline AdminResponse& operator=(const AdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminResponse(AdminResponse&& from) noexcept
    : AdminResponse() {
    *this = ::std::move(from);
  }

  inline AdminResponse& operator=(AdminResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminResponse& default_instance();

  enum RespCase {
    kSetCfg = 10,
    kGetCfg = 11,
    kGetInfo = 12,
    kForceSplit = 13,
    kCompaction = 14,
    kClearQueue = 15,
    kGetPendings = 16,
    kFlushDb = 17,
    kProfile = 18,
    kDump = 19,
    RESP_NOT_SET = 0,
  };

  static inline const AdminResponse* internal_default_instance() {
    return reinterpret_cast<const AdminResponse*>(
               &_AdminResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AdminResponse* other);
  friend void swap(AdminResponse& a, AdminResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AdminResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdminResponse& from);
  void MergeFrom(const AdminResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdminResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // .dspb.SetConfigResponse set_cfg = 10;
  bool has_set_cfg() const;
  void clear_set_cfg();
  static const int kSetCfgFieldNumber = 10;
  const ::dspb::SetConfigResponse& set_cfg() const;
  ::dspb::SetConfigResponse* mutable_set_cfg();
  ::dspb::SetConfigResponse* release_set_cfg();
  void set_allocated_set_cfg(::dspb::SetConfigResponse* set_cfg);

  // .dspb.GetConfigResponse get_cfg = 11;
  bool has_get_cfg() const;
  void clear_get_cfg();
  static const int kGetCfgFieldNumber = 11;
  const ::dspb::GetConfigResponse& get_cfg() const;
  ::dspb::GetConfigResponse* mutable_get_cfg();
  ::dspb::GetConfigResponse* release_get_cfg();
  void set_allocated_get_cfg(::dspb::GetConfigResponse* get_cfg);

  // .dspb.GetInfoResponse get_info = 12;
  bool has_get_info() const;
  void clear_get_info();
  static const int kGetInfoFieldNumber = 12;
  const ::dspb::GetInfoResponse& get_info() const;
  ::dspb::GetInfoResponse* mutable_get_info();
  ::dspb::GetInfoResponse* release_get_info();
  void set_allocated_get_info(::dspb::GetInfoResponse* get_info);

  // .dspb.ForceSplitResponse force_split = 13;
  bool has_force_split() const;
  void clear_force_split();
  static const int kForceSplitFieldNumber = 13;
  const ::dspb::ForceSplitResponse& force_split() const;
  ::dspb::ForceSplitResponse* mutable_force_split();
  ::dspb::ForceSplitResponse* release_force_split();
  void set_allocated_force_split(::dspb::ForceSplitResponse* force_split);

  // .dspb.CompactionResponse compaction = 14;
  bool has_compaction() const;
  void clear_compaction();
  static const int kCompactionFieldNumber = 14;
  const ::dspb::CompactionResponse& compaction() const;
  ::dspb::CompactionResponse* mutable_compaction();
  ::dspb::CompactionResponse* release_compaction();
  void set_allocated_compaction(::dspb::CompactionResponse* compaction);

  // .dspb.ClearQueueResponse clear_queue = 15;
  bool has_clear_queue() const;
  void clear_clear_queue();
  static const int kClearQueueFieldNumber = 15;
  const ::dspb::ClearQueueResponse& clear_queue() const;
  ::dspb::ClearQueueResponse* mutable_clear_queue();
  ::dspb::ClearQueueResponse* release_clear_queue();
  void set_allocated_clear_queue(::dspb::ClearQueueResponse* clear_queue);

  // .dspb.GetPendingsResponse get_pendings = 16;
  bool has_get_pendings() const;
  void clear_get_pendings();
  static const int kGetPendingsFieldNumber = 16;
  const ::dspb::GetPendingsResponse& get_pendings() const;
  ::dspb::GetPendingsResponse* mutable_get_pendings();
  ::dspb::GetPendingsResponse* release_get_pendings();
  void set_allocated_get_pendings(::dspb::GetPendingsResponse* get_pendings);

  // .dspb.FlushDBResponse flush_db = 17;
  bool has_flush_db() const;
  void clear_flush_db();
  static const int kFlushDbFieldNumber = 17;
  const ::dspb::FlushDBResponse& flush_db() const;
  ::dspb::FlushDBResponse* mutable_flush_db();
  ::dspb::FlushDBResponse* release_flush_db();
  void set_allocated_flush_db(::dspb::FlushDBResponse* flush_db);

  // .dspb.ProfileResponse profile = 18;
  bool has_profile() const;
  void clear_profile();
  static const int kProfileFieldNumber = 18;
  const ::dspb::ProfileResponse& profile() const;
  ::dspb::ProfileResponse* mutable_profile();
  ::dspb::ProfileResponse* release_profile();
  void set_allocated_profile(::dspb::ProfileResponse* profile);

  // .dspb.DumpResponse dump = 19;
  bool has_dump() const;
  void clear_dump();
  static const int kDumpFieldNumber = 19;
  const ::dspb::DumpResponse& dump() const;
  ::dspb::DumpResponse* mutable_dump();
  ::dspb::DumpResponse* release_dump();
  void set_allocated_dump(::dspb::DumpResponse* dump);

  RespCase resp_case() const;
  // @@protoc_insertion_point(class_scope:dspb.AdminResponse)
 private:
  void set_has_set_cfg();
  void set_has_get_cfg();
  void set_has_get_info();
  void set_has_force_split();
  void set_has_compaction();
  void set_has_clear_queue();
  void set_has_get_pendings();
  void set_has_flush_db();
  void set_has_profile();
  void set_has_dump();

  inline bool has_resp() const;
  void clear_resp();
  inline void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 code_;
  union RespUnion {
    RespUnion() {}
    ::dspb::SetConfigResponse* set_cfg_;
    ::dspb::GetConfigResponse* get_cfg_;
    ::dspb::GetInfoResponse* get_info_;
    ::dspb::ForceSplitResponse* force_split_;
    ::dspb::CompactionResponse* compaction_;
    ::dspb::ClearQueueResponse* clear_queue_;
    ::dspb::GetPendingsResponse* get_pendings_;
    ::dspb::FlushDBResponse* flush_db_;
    ::dspb::ProfileResponse* profile_;
    ::dspb::DumpResponse* dump_;
  } resp_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ConfigKey) */ {
 public:
  ConfigKey();
  virtual ~ConfigKey();

  ConfigKey(const ConfigKey& from);

  inline ConfigKey& operator=(const ConfigKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigKey(ConfigKey&& from) noexcept
    : ConfigKey() {
    *this = ::std::move(from);
  }

  inline ConfigKey& operator=(ConfigKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigKey& default_instance();

  static inline const ConfigKey* internal_default_instance() {
    return reinterpret_cast<const ConfigKey*>(
               &_ConfigKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConfigKey* other);
  friend void swap(ConfigKey& a, ConfigKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigKey& from);
  void MergeFrom(const ConfigKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string section = 1;
  void clear_section();
  static const int kSectionFieldNumber = 1;
  const ::std::string& section() const;
  void set_section(const ::std::string& value);
  #if LANG_CXX11
  void set_section(::std::string&& value);
  #endif
  void set_section(const char* value);
  void set_section(const char* value, size_t size);
  ::std::string* mutable_section();
  ::std::string* release_section();
  void set_allocated_section(::std::string* section);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dspb.ConfigKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr section_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ConfigItem) */ {
 public:
  ConfigItem();
  virtual ~ConfigItem();

  ConfigItem(const ConfigItem& from);

  inline ConfigItem& operator=(const ConfigItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigItem(ConfigItem&& from) noexcept
    : ConfigItem() {
    *this = ::std::move(from);
  }

  inline ConfigItem& operator=(ConfigItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigItem& default_instance();

  static inline const ConfigItem* internal_default_instance() {
    return reinterpret_cast<const ConfigItem*>(
               &_ConfigItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ConfigItem* other);
  friend void swap(ConfigItem& a, ConfigItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigItem& from);
  void MergeFrom(const ConfigItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .dspb.ConfigKey key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::dspb::ConfigKey& key() const;
  ::dspb::ConfigKey* mutable_key();
  ::dspb::ConfigKey* release_key();
  void set_allocated_key(::dspb::ConfigKey* key);

  // @@protoc_insertion_point(class_scope:dspb.ConfigItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::dspb::ConfigKey* key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SetConfigRequest) */ {
 public:
  SetConfigRequest();
  virtual ~SetConfigRequest();

  SetConfigRequest(const SetConfigRequest& from);

  inline SetConfigRequest& operator=(const SetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetConfigRequest(SetConfigRequest&& from) noexcept
    : SetConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetConfigRequest& operator=(SetConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfigRequest& default_instance();

  static inline const SetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetConfigRequest*>(
               &_SetConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SetConfigRequest* other);
  friend void swap(SetConfigRequest& a, SetConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetConfigRequest& from);
  void MergeFrom(const SetConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.ConfigItem configs = 1;
  int configs_size() const;
  void clear_configs();
  static const int kConfigsFieldNumber = 1;
  const ::dspb::ConfigItem& configs(int index) const;
  ::dspb::ConfigItem* mutable_configs(int index);
  ::dspb::ConfigItem* add_configs();
  ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >*
      mutable_configs();
  const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >&
      configs() const;

  // @@protoc_insertion_point(class_scope:dspb.SetConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem > configs_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SetConfigResponse) */ {
 public:
  SetConfigResponse();
  virtual ~SetConfigResponse();

  SetConfigResponse(const SetConfigResponse& from);

  inline SetConfigResponse& operator=(const SetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetConfigResponse(SetConfigResponse&& from) noexcept
    : SetConfigResponse() {
    *this = ::std::move(from);
  }

  inline SetConfigResponse& operator=(SetConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfigResponse& default_instance();

  static inline const SetConfigResponse* internal_default_instance() {
    return reinterpret_cast<const SetConfigResponse*>(
               &_SetConfigResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SetConfigResponse* other);
  friend void swap(SetConfigResponse& a, SetConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetConfigResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetConfigResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetConfigResponse& from);
  void MergeFrom(const SetConfigResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.SetConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetConfigRequest) */ {
 public:
  GetConfigRequest();
  virtual ~GetConfigRequest();

  GetConfigRequest(const GetConfigRequest& from);

  inline GetConfigRequest& operator=(const GetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConfigRequest(GetConfigRequest&& from) noexcept
    : GetConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRequest& operator=(GetConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConfigRequest& default_instance();

  static inline const GetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRequest*>(
               &_GetConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetConfigRequest* other);
  friend void swap(GetConfigRequest& a, GetConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConfigRequest& from);
  void MergeFrom(const GetConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.ConfigKey key = 1;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::dspb::ConfigKey& key(int index) const;
  ::dspb::ConfigKey* mutable_key(int index);
  ::dspb::ConfigKey* add_key();
  ::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey >*
      mutable_key();
  const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey >&
      key() const;

  // @@protoc_insertion_point(class_scope:dspb.GetConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey > key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetConfigResponse) */ {
 public:
  GetConfigResponse();
  virtual ~GetConfigResponse();

  GetConfigResponse(const GetConfigResponse& from);

  inline GetConfigResponse& operator=(const GetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConfigResponse(GetConfigResponse&& from) noexcept
    : GetConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigResponse& operator=(GetConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConfigResponse& default_instance();

  static inline const GetConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigResponse*>(
               &_GetConfigResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetConfigResponse* other);
  friend void swap(GetConfigResponse& a, GetConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConfigResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConfigResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConfigResponse& from);
  void MergeFrom(const GetConfigResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dspb.ConfigItem configs = 1;
  int configs_size() const;
  void clear_configs();
  static const int kConfigsFieldNumber = 1;
  const ::dspb::ConfigItem& configs(int index) const;
  ::dspb::ConfigItem* mutable_configs(int index);
  ::dspb::ConfigItem* add_configs();
  ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >*
      mutable_configs();
  const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >&
      configs() const;

  // @@protoc_insertion_point(class_scope:dspb.GetConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem > configs_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoRequest& default_instance();

  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetInfoRequest* other);
  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:dspb.GetInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoResponse& default_instance();

  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetInfoResponse* other);
  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:dspb.GetInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForceSplitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ForceSplitRequest) */ {
 public:
  ForceSplitRequest();
  virtual ~ForceSplitRequest();

  ForceSplitRequest(const ForceSplitRequest& from);

  inline ForceSplitRequest& operator=(const ForceSplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForceSplitRequest(ForceSplitRequest&& from) noexcept
    : ForceSplitRequest() {
    *this = ::std::move(from);
  }

  inline ForceSplitRequest& operator=(ForceSplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForceSplitRequest& default_instance();

  static inline const ForceSplitRequest* internal_default_instance() {
    return reinterpret_cast<const ForceSplitRequest*>(
               &_ForceSplitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ForceSplitRequest* other);
  friend void swap(ForceSplitRequest& a, ForceSplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceSplitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ForceSplitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForceSplitRequest& from);
  void MergeFrom(const ForceSplitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForceSplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.ForceSplitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForceSplitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ForceSplitResponse) */ {
 public:
  ForceSplitResponse();
  virtual ~ForceSplitResponse();

  ForceSplitResponse(const ForceSplitResponse& from);

  inline ForceSplitResponse& operator=(const ForceSplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForceSplitResponse(ForceSplitResponse&& from) noexcept
    : ForceSplitResponse() {
    *this = ::std::move(from);
  }

  inline ForceSplitResponse& operator=(ForceSplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForceSplitResponse& default_instance();

  static inline const ForceSplitResponse* internal_default_instance() {
    return reinterpret_cast<const ForceSplitResponse*>(
               &_ForceSplitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ForceSplitResponse* other);
  friend void swap(ForceSplitResponse& a, ForceSplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceSplitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ForceSplitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForceSplitResponse& from);
  void MergeFrom(const ForceSplitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForceSplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes split_key = 1;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 1;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // @@protoc_insertion_point(class_scope:dspb.ForceSplitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.CompactionRequest) */ {
 public:
  CompactionRequest();
  virtual ~CompactionRequest();

  CompactionRequest(const CompactionRequest& from);

  inline CompactionRequest& operator=(const CompactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompactionRequest(CompactionRequest&& from) noexcept
    : CompactionRequest() {
    *this = ::std::move(from);
  }

  inline CompactionRequest& operator=(CompactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactionRequest& default_instance();

  static inline const CompactionRequest* internal_default_instance() {
    return reinterpret_cast<const CompactionRequest*>(
               &_CompactionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CompactionRequest* other);
  friend void swap(CompactionRequest& a, CompactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CompactionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompactionRequest& from);
  void MergeFrom(const CompactionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // int64 transaction_id = 2;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  ::google::protobuf::int64 transaction_id() const;
  void set_transaction_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dspb.CompactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::int64 transaction_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.CompactionResponse) */ {
 public:
  CompactionResponse();
  virtual ~CompactionResponse();

  CompactionResponse(const CompactionResponse& from);

  inline CompactionResponse& operator=(const CompactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompactionResponse(CompactionResponse&& from) noexcept
    : CompactionResponse() {
    *this = ::std::move(from);
  }

  inline CompactionResponse& operator=(CompactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactionResponse& default_instance();

  static inline const CompactionResponse* internal_default_instance() {
    return reinterpret_cast<const CompactionResponse*>(
               &_CompactionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CompactionResponse* other);
  friend void swap(CompactionResponse& a, CompactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CompactionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompactionResponse& from);
  void MergeFrom(const CompactionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes begin_key = 1;
  void clear_begin_key();
  static const int kBeginKeyFieldNumber = 1;
  const ::std::string& begin_key() const;
  void set_begin_key(const ::std::string& value);
  #if LANG_CXX11
  void set_begin_key(::std::string&& value);
  #endif
  void set_begin_key(const char* value);
  void set_begin_key(const void* value, size_t size);
  ::std::string* mutable_begin_key();
  ::std::string* release_begin_key();
  void set_allocated_begin_key(::std::string* begin_key);

  // bytes end_key = 2;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 2;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // @@protoc_insertion_point(class_scope:dspb.CompactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr begin_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ClearQueueRequest) */ {
 public:
  ClearQueueRequest();
  virtual ~ClearQueueRequest();

  ClearQueueRequest(const ClearQueueRequest& from);

  inline ClearQueueRequest& operator=(const ClearQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearQueueRequest(ClearQueueRequest&& from) noexcept
    : ClearQueueRequest() {
    *this = ::std::move(from);
  }

  inline ClearQueueRequest& operator=(ClearQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearQueueRequest& default_instance();

  static inline const ClearQueueRequest* internal_default_instance() {
    return reinterpret_cast<const ClearQueueRequest*>(
               &_ClearQueueRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ClearQueueRequest* other);
  friend void swap(ClearQueueRequest& a, ClearQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearQueueRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearQueueRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearQueueRequest& from);
  void MergeFrom(const ClearQueueRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClearQueueRequest_QueueType QueueType;
  static const QueueType ALL =
    ClearQueueRequest_QueueType_ALL;
  static const QueueType FAST_WORKER =
    ClearQueueRequest_QueueType_FAST_WORKER;
  static const QueueType SLOW_WORKER =
    ClearQueueRequest_QueueType_SLOW_WORKER;
  static inline bool QueueType_IsValid(int value) {
    return ClearQueueRequest_QueueType_IsValid(value);
  }
  static const QueueType QueueType_MIN =
    ClearQueueRequest_QueueType_QueueType_MIN;
  static const QueueType QueueType_MAX =
    ClearQueueRequest_QueueType_QueueType_MAX;
  static const int QueueType_ARRAYSIZE =
    ClearQueueRequest_QueueType_QueueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueueType_descriptor() {
    return ClearQueueRequest_QueueType_descriptor();
  }
  static inline const ::std::string& QueueType_Name(QueueType value) {
    return ClearQueueRequest_QueueType_Name(value);
  }
  static inline bool QueueType_Parse(const ::std::string& name,
      QueueType* value) {
    return ClearQueueRequest_QueueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .dspb.ClearQueueRequest.QueueType queue_type = 1;
  void clear_queue_type();
  static const int kQueueTypeFieldNumber = 1;
  ::dspb::ClearQueueRequest_QueueType queue_type() const;
  void set_queue_type(::dspb::ClearQueueRequest_QueueType value);

  // @@protoc_insertion_point(class_scope:dspb.ClearQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int queue_type_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearQueueResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ClearQueueResponse) */ {
 public:
  ClearQueueResponse();
  virtual ~ClearQueueResponse();

  ClearQueueResponse(const ClearQueueResponse& from);

  inline ClearQueueResponse& operator=(const ClearQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearQueueResponse(ClearQueueResponse&& from) noexcept
    : ClearQueueResponse() {
    *this = ::std::move(from);
  }

  inline ClearQueueResponse& operator=(ClearQueueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearQueueResponse& default_instance();

  static inline const ClearQueueResponse* internal_default_instance() {
    return reinterpret_cast<const ClearQueueResponse*>(
               &_ClearQueueResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ClearQueueResponse* other);
  friend void swap(ClearQueueResponse& a, ClearQueueResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearQueueResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearQueueResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearQueueResponse& from);
  void MergeFrom(const ClearQueueResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearQueueResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 cleared = 1;
  void clear_cleared();
  static const int kClearedFieldNumber = 1;
  ::google::protobuf::uint64 cleared() const;
  void set_cleared(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.ClearQueueResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cleared_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPendingsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetPendingsRequest) */ {
 public:
  GetPendingsRequest();
  virtual ~GetPendingsRequest();

  GetPendingsRequest(const GetPendingsRequest& from);

  inline GetPendingsRequest& operator=(const GetPendingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPendingsRequest(GetPendingsRequest&& from) noexcept
    : GetPendingsRequest() {
    *this = ::std::move(from);
  }

  inline GetPendingsRequest& operator=(GetPendingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPendingsRequest& default_instance();

  static inline const GetPendingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPendingsRequest*>(
               &_GetPendingsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetPendingsRequest* other);
  friend void swap(GetPendingsRequest& a, GetPendingsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPendingsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPendingsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPendingsRequest& from);
  void MergeFrom(const GetPendingsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPendingsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetPendingsRequest_PendingType PendingType;
  static const PendingType ALL =
    GetPendingsRequest_PendingType_ALL;
  static const PendingType INSERT =
    GetPendingsRequest_PendingType_INSERT;
  static const PendingType SELECT =
    GetPendingsRequest_PendingType_SELECT;
  static const PendingType PONIT_SELECT =
    GetPendingsRequest_PendingType_PONIT_SELECT;
  static const PendingType RANGE_SELECT =
    GetPendingsRequest_PendingType_RANGE_SELECT;
  static inline bool PendingType_IsValid(int value) {
    return GetPendingsRequest_PendingType_IsValid(value);
  }
  static const PendingType PendingType_MIN =
    GetPendingsRequest_PendingType_PendingType_MIN;
  static const PendingType PendingType_MAX =
    GetPendingsRequest_PendingType_PendingType_MAX;
  static const int PendingType_ARRAYSIZE =
    GetPendingsRequest_PendingType_PendingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PendingType_descriptor() {
    return GetPendingsRequest_PendingType_descriptor();
  }
  static inline const ::std::string& PendingType_Name(PendingType value) {
    return GetPendingsRequest_PendingType_Name(value);
  }
  static inline bool PendingType_Parse(const ::std::string& name,
      PendingType* value) {
    return GetPendingsRequest_PendingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // .dspb.GetPendingsRequest.PendingType ptype = 1;
  void clear_ptype();
  static const int kPtypeFieldNumber = 1;
  ::dspb::GetPendingsRequest_PendingType ptype() const;
  void set_ptype(::dspb::GetPendingsRequest_PendingType value);

  // @@protoc_insertion_point(class_scope:dspb.GetPendingsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 count_;
  int ptype_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPendingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetPendingsResponse) */ {
 public:
  GetPendingsResponse();
  virtual ~GetPendingsResponse();

  GetPendingsResponse(const GetPendingsResponse& from);

  inline GetPendingsResponse& operator=(const GetPendingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPendingsResponse(GetPendingsResponse&& from) noexcept
    : GetPendingsResponse() {
    *this = ::std::move(from);
  }

  inline GetPendingsResponse& operator=(GetPendingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPendingsResponse& default_instance();

  static inline const GetPendingsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPendingsResponse*>(
               &_GetPendingsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GetPendingsResponse* other);
  friend void swap(GetPendingsResponse& a, GetPendingsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPendingsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPendingsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPendingsResponse& from);
  void MergeFrom(const GetPendingsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPendingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string desc = 1;
  void clear_desc();
  static const int kDescFieldNumber = 1;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:dspb.GetPendingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlushDBRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.FlushDBRequest) */ {
 public:
  FlushDBRequest();
  virtual ~FlushDBRequest();

  FlushDBRequest(const FlushDBRequest& from);

  inline FlushDBRequest& operator=(const FlushDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushDBRequest(FlushDBRequest&& from) noexcept
    : FlushDBRequest() {
    *this = ::std::move(from);
  }

  inline FlushDBRequest& operator=(FlushDBRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushDBRequest& default_instance();

  static inline const FlushDBRequest* internal_default_instance() {
    return reinterpret_cast<const FlushDBRequest*>(
               &_FlushDBRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(FlushDBRequest* other);
  friend void swap(FlushDBRequest& a, FlushDBRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushDBRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FlushDBRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlushDBRequest& from);
  void MergeFrom(const FlushDBRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlushDBRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool wait = 1;
  void clear_wait();
  static const int kWaitFieldNumber = 1;
  bool wait() const;
  void set_wait(bool value);

  // @@protoc_insertion_point(class_scope:dspb.FlushDBRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool wait_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlushDBResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.FlushDBResponse) */ {
 public:
  FlushDBResponse();
  virtual ~FlushDBResponse();

  FlushDBResponse(const FlushDBResponse& from);

  inline FlushDBResponse& operator=(const FlushDBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushDBResponse(FlushDBResponse&& from) noexcept
    : FlushDBResponse() {
    *this = ::std::move(from);
  }

  inline FlushDBResponse& operator=(FlushDBResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushDBResponse& default_instance();

  static inline const FlushDBResponse* internal_default_instance() {
    return reinterpret_cast<const FlushDBResponse*>(
               &_FlushDBResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(FlushDBResponse* other);
  friend void swap(FlushDBResponse& a, FlushDBResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushDBResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FlushDBResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlushDBResponse& from);
  void MergeFrom(const FlushDBResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlushDBResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.FlushDBResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ProfileRequest) */ {
 public:
  ProfileRequest();
  virtual ~ProfileRequest();

  ProfileRequest(const ProfileRequest& from);

  inline ProfileRequest& operator=(const ProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileRequest(ProfileRequest&& from) noexcept
    : ProfileRequest() {
    *this = ::std::move(from);
  }

  inline ProfileRequest& operator=(ProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileRequest& default_instance();

  static inline const ProfileRequest* internal_default_instance() {
    return reinterpret_cast<const ProfileRequest*>(
               &_ProfileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ProfileRequest* other);
  friend void swap(ProfileRequest& a, ProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ProfileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProfileRequest& from);
  void MergeFrom(const ProfileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProfileRequest_ProfileType ProfileType;
  static const ProfileType CPU =
    ProfileRequest_ProfileType_CPU;
  static const ProfileType HEAP =
    ProfileRequest_ProfileType_HEAP;
  static const ProfileType ROCKSDB =
    ProfileRequest_ProfileType_ROCKSDB;
  static inline bool ProfileType_IsValid(int value) {
    return ProfileRequest_ProfileType_IsValid(value);
  }
  static const ProfileType ProfileType_MIN =
    ProfileRequest_ProfileType_ProfileType_MIN;
  static const ProfileType ProfileType_MAX =
    ProfileRequest_ProfileType_ProfileType_MAX;
  static const int ProfileType_ARRAYSIZE =
    ProfileRequest_ProfileType_ProfileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProfileType_descriptor() {
    return ProfileRequest_ProfileType_descriptor();
  }
  static inline const ::std::string& ProfileType_Name(ProfileType value) {
    return ProfileRequest_ProfileType_Name(value);
  }
  static inline bool ProfileType_Parse(const ::std::string& name,
      ProfileType* value) {
    return ProfileRequest_ProfileType_Parse(name, value);
  }

  typedef ProfileRequest_ProfileOp ProfileOp;
  static const ProfileOp PROFILE_START =
    ProfileRequest_ProfileOp_PROFILE_START;
  static const ProfileOp PROFILE_STOP =
    ProfileRequest_ProfileOp_PROFILE_STOP;
  static inline bool ProfileOp_IsValid(int value) {
    return ProfileRequest_ProfileOp_IsValid(value);
  }
  static const ProfileOp ProfileOp_MIN =
    ProfileRequest_ProfileOp_ProfileOp_MIN;
  static const ProfileOp ProfileOp_MAX =
    ProfileRequest_ProfileOp_ProfileOp_MAX;
  static const int ProfileOp_ARRAYSIZE =
    ProfileRequest_ProfileOp_ProfileOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProfileOp_descriptor() {
    return ProfileRequest_ProfileOp_descriptor();
  }
  static inline const ::std::string& ProfileOp_Name(ProfileOp value) {
    return ProfileRequest_ProfileOp_Name(value);
  }
  static inline bool ProfileOp_Parse(const ::std::string& name,
      ProfileOp* value) {
    return ProfileRequest_ProfileOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string output_path = 2;
  void clear_output_path();
  static const int kOutputPathFieldNumber = 2;
  const ::std::string& output_path() const;
  void set_output_path(const ::std::string& value);
  #if LANG_CXX11
  void set_output_path(::std::string&& value);
  #endif
  void set_output_path(const char* value);
  void set_output_path(const char* value, size_t size);
  ::std::string* mutable_output_path();
  ::std::string* release_output_path();
  void set_allocated_output_path(::std::string* output_path);

  // .dspb.ProfileRequest.ProfileType ptype = 1;
  void clear_ptype();
  static const int kPtypeFieldNumber = 1;
  ::dspb::ProfileRequest_ProfileType ptype() const;
  void set_ptype(::dspb::ProfileRequest_ProfileType value);

  // .dspb.ProfileRequest.ProfileOp op = 3;
  void clear_op();
  static const int kOpFieldNumber = 3;
  ::dspb::ProfileRequest_ProfileOp op() const;
  void set_op(::dspb::ProfileRequest_ProfileOp value);

  // @@protoc_insertion_point(class_scope:dspb.ProfileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_path_;
  int ptype_;
  int op_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ProfileResponse) */ {
 public:
  ProfileResponse();
  virtual ~ProfileResponse();

  ProfileResponse(const ProfileResponse& from);

  inline ProfileResponse& operator=(const ProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileResponse(ProfileResponse&& from) noexcept
    : ProfileResponse() {
    *this = ::std::move(from);
  }

  inline ProfileResponse& operator=(ProfileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileResponse& default_instance();

  static inline const ProfileResponse* internal_default_instance() {
    return reinterpret_cast<const ProfileResponse*>(
               &_ProfileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(ProfileResponse* other);
  friend void swap(ProfileResponse& a, ProfileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ProfileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProfileResponse& from);
  void MergeFrom(const ProfileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.ProfileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.DumpRequest) */ {
 public:
  DumpRequest();
  virtual ~DumpRequest();

  DumpRequest(const DumpRequest& from);

  inline DumpRequest& operator=(const DumpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpRequest(DumpRequest&& from) noexcept
    : DumpRequest() {
    *this = ::std::move(from);
  }

  inline DumpRequest& operator=(DumpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpRequest& default_instance();

  static inline const DumpRequest* internal_default_instance() {
    return reinterpret_cast<const DumpRequest*>(
               &_DumpRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DumpRequest* other);
  friend void swap(DumpRequest& a, DumpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpRequest& from);
  void MergeFrom(const DumpRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.DumpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.DumpResponse) */ {
 public:
  DumpResponse();
  virtual ~DumpResponse();

  DumpResponse(const DumpResponse& from);

  inline DumpResponse& operator=(const DumpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpResponse(DumpResponse&& from) noexcept
    : DumpResponse() {
    *this = ::std::move(from);
  }

  inline DumpResponse& operator=(DumpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpResponse& default_instance();

  static inline const DumpResponse* internal_default_instance() {
    return reinterpret_cast<const DumpResponse*>(
               &_DumpResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(DumpResponse* other);
  friend void swap(DumpResponse& a, DumpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpResponse& from);
  void MergeFrom(const DumpResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.DumpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fadmin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdminAuth

// .dspb.AdminAuth.AuthMethod method = 1;
inline void AdminAuth::clear_method() {
  method_ = 0;
}
inline ::dspb::AdminAuth_AuthMethod AdminAuth::method() const {
  // @@protoc_insertion_point(field_get:dspb.AdminAuth.method)
  return static_cast< ::dspb::AdminAuth_AuthMethod >(method_);
}
inline void AdminAuth::set_method(::dspb::AdminAuth_AuthMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:dspb.AdminAuth.method)
}

// int64 epoch = 2;
inline void AdminAuth::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AdminAuth::epoch() const {
  // @@protoc_insertion_point(field_get:dspb.AdminAuth.epoch)
  return epoch_;
}
inline void AdminAuth::set_epoch(::google::protobuf::int64 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dspb.AdminAuth.epoch)
}

// string sign = 3;
inline void AdminAuth::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdminAuth::sign() const {
  // @@protoc_insertion_point(field_get:dspb.AdminAuth.sign)
  return sign_.GetNoArena();
}
inline void AdminAuth::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.AdminAuth.sign)
}
#if LANG_CXX11
inline void AdminAuth::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.AdminAuth.sign)
}
#endif
inline void AdminAuth::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.AdminAuth.sign)
}
inline void AdminAuth::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.AdminAuth.sign)
}
inline ::std::string* AdminAuth::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:dspb.AdminAuth.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdminAuth::release_sign() {
  // @@protoc_insertion_point(field_release:dspb.AdminAuth.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdminAuth::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminAuth.sign)
}

// -------------------------------------------------------------------

// AdminRequest

// .dspb.AdminAuth auth = 1;
inline bool AdminRequest::has_auth() const {
  return this != internal_default_instance() && auth_ != NULL;
}
inline void AdminRequest::clear_auth() {
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) delete auth_;
  auth_ = NULL;
}
inline const ::dspb::AdminAuth& AdminRequest::auth() const {
  const ::dspb::AdminAuth* p = auth_;
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.auth)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::AdminAuth*>(
      &::dspb::_AdminAuth_default_instance_);
}
inline ::dspb::AdminAuth* AdminRequest::mutable_auth() {
  
  if (auth_ == NULL) {
    auth_ = new ::dspb::AdminAuth;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.auth)
  return auth_;
}
inline ::dspb::AdminAuth* AdminRequest::release_auth() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.auth)
  
  ::dspb::AdminAuth* temp = auth_;
  auth_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_auth(::dspb::AdminAuth* auth) {
  delete auth_;
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.auth)
}

// .dspb.SetConfigRequest set_cfg = 10;
inline bool AdminRequest::has_set_cfg() const {
  return req_case() == kSetCfg;
}
inline void AdminRequest::set_has_set_cfg() {
  _oneof_case_[0] = kSetCfg;
}
inline void AdminRequest::clear_set_cfg() {
  if (has_set_cfg()) {
    delete req_.set_cfg_;
    clear_has_req();
  }
}
inline  const ::dspb::SetConfigRequest& AdminRequest::set_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.set_cfg)
  return has_set_cfg()
      ? *req_.set_cfg_
      : ::dspb::SetConfigRequest::default_instance();
}
inline ::dspb::SetConfigRequest* AdminRequest::mutable_set_cfg() {
  if (!has_set_cfg()) {
    clear_req();
    set_has_set_cfg();
    req_.set_cfg_ = new ::dspb::SetConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.set_cfg)
  return req_.set_cfg_;
}
inline ::dspb::SetConfigRequest* AdminRequest::release_set_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.set_cfg)
  if (has_set_cfg()) {
    clear_has_req();
    ::dspb::SetConfigRequest* temp = req_.set_cfg_;
    req_.set_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_set_cfg(::dspb::SetConfigRequest* set_cfg) {
  clear_req();
  if (set_cfg) {
    set_has_set_cfg();
    req_.set_cfg_ = set_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.set_cfg)
}

// .dspb.GetConfigRequest get_cfg = 11;
inline bool AdminRequest::has_get_cfg() const {
  return req_case() == kGetCfg;
}
inline void AdminRequest::set_has_get_cfg() {
  _oneof_case_[0] = kGetCfg;
}
inline void AdminRequest::clear_get_cfg() {
  if (has_get_cfg()) {
    delete req_.get_cfg_;
    clear_has_req();
  }
}
inline  const ::dspb::GetConfigRequest& AdminRequest::get_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.get_cfg)
  return has_get_cfg()
      ? *req_.get_cfg_
      : ::dspb::GetConfigRequest::default_instance();
}
inline ::dspb::GetConfigRequest* AdminRequest::mutable_get_cfg() {
  if (!has_get_cfg()) {
    clear_req();
    set_has_get_cfg();
    req_.get_cfg_ = new ::dspb::GetConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.get_cfg)
  return req_.get_cfg_;
}
inline ::dspb::GetConfigRequest* AdminRequest::release_get_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.get_cfg)
  if (has_get_cfg()) {
    clear_has_req();
    ::dspb::GetConfigRequest* temp = req_.get_cfg_;
    req_.get_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_get_cfg(::dspb::GetConfigRequest* get_cfg) {
  clear_req();
  if (get_cfg) {
    set_has_get_cfg();
    req_.get_cfg_ = get_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.get_cfg)
}

// .dspb.GetInfoRequest get_info = 12;
inline bool AdminRequest::has_get_info() const {
  return req_case() == kGetInfo;
}
inline void AdminRequest::set_has_get_info() {
  _oneof_case_[0] = kGetInfo;
}
inline void AdminRequest::clear_get_info() {
  if (has_get_info()) {
    delete req_.get_info_;
    clear_has_req();
  }
}
inline  const ::dspb::GetInfoRequest& AdminRequest::get_info() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.get_info)
  return has_get_info()
      ? *req_.get_info_
      : ::dspb::GetInfoRequest::default_instance();
}
inline ::dspb::GetInfoRequest* AdminRequest::mutable_get_info() {
  if (!has_get_info()) {
    clear_req();
    set_has_get_info();
    req_.get_info_ = new ::dspb::GetInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.get_info)
  return req_.get_info_;
}
inline ::dspb::GetInfoRequest* AdminRequest::release_get_info() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.get_info)
  if (has_get_info()) {
    clear_has_req();
    ::dspb::GetInfoRequest* temp = req_.get_info_;
    req_.get_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_get_info(::dspb::GetInfoRequest* get_info) {
  clear_req();
  if (get_info) {
    set_has_get_info();
    req_.get_info_ = get_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.get_info)
}

// .dspb.ForceSplitRequest force_split = 13;
inline bool AdminRequest::has_force_split() const {
  return req_case() == kForceSplit;
}
inline void AdminRequest::set_has_force_split() {
  _oneof_case_[0] = kForceSplit;
}
inline void AdminRequest::clear_force_split() {
  if (has_force_split()) {
    delete req_.force_split_;
    clear_has_req();
  }
}
inline  const ::dspb::ForceSplitRequest& AdminRequest::force_split() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.force_split)
  return has_force_split()
      ? *req_.force_split_
      : ::dspb::ForceSplitRequest::default_instance();
}
inline ::dspb::ForceSplitRequest* AdminRequest::mutable_force_split() {
  if (!has_force_split()) {
    clear_req();
    set_has_force_split();
    req_.force_split_ = new ::dspb::ForceSplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.force_split)
  return req_.force_split_;
}
inline ::dspb::ForceSplitRequest* AdminRequest::release_force_split() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.force_split)
  if (has_force_split()) {
    clear_has_req();
    ::dspb::ForceSplitRequest* temp = req_.force_split_;
    req_.force_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_force_split(::dspb::ForceSplitRequest* force_split) {
  clear_req();
  if (force_split) {
    set_has_force_split();
    req_.force_split_ = force_split;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.force_split)
}

// .dspb.CompactionRequest compaction = 14;
inline bool AdminRequest::has_compaction() const {
  return req_case() == kCompaction;
}
inline void AdminRequest::set_has_compaction() {
  _oneof_case_[0] = kCompaction;
}
inline void AdminRequest::clear_compaction() {
  if (has_compaction()) {
    delete req_.compaction_;
    clear_has_req();
  }
}
inline  const ::dspb::CompactionRequest& AdminRequest::compaction() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.compaction)
  return has_compaction()
      ? *req_.compaction_
      : ::dspb::CompactionRequest::default_instance();
}
inline ::dspb::CompactionRequest* AdminRequest::mutable_compaction() {
  if (!has_compaction()) {
    clear_req();
    set_has_compaction();
    req_.compaction_ = new ::dspb::CompactionRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.compaction)
  return req_.compaction_;
}
inline ::dspb::CompactionRequest* AdminRequest::release_compaction() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.compaction)
  if (has_compaction()) {
    clear_has_req();
    ::dspb::CompactionRequest* temp = req_.compaction_;
    req_.compaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_compaction(::dspb::CompactionRequest* compaction) {
  clear_req();
  if (compaction) {
    set_has_compaction();
    req_.compaction_ = compaction;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.compaction)
}

// .dspb.ClearQueueRequest clear_queue = 15;
inline bool AdminRequest::has_clear_queue() const {
  return req_case() == kClearQueue;
}
inline void AdminRequest::set_has_clear_queue() {
  _oneof_case_[0] = kClearQueue;
}
inline void AdminRequest::clear_clear_queue() {
  if (has_clear_queue()) {
    delete req_.clear_queue_;
    clear_has_req();
  }
}
inline  const ::dspb::ClearQueueRequest& AdminRequest::clear_queue() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.clear_queue)
  return has_clear_queue()
      ? *req_.clear_queue_
      : ::dspb::ClearQueueRequest::default_instance();
}
inline ::dspb::ClearQueueRequest* AdminRequest::mutable_clear_queue() {
  if (!has_clear_queue()) {
    clear_req();
    set_has_clear_queue();
    req_.clear_queue_ = new ::dspb::ClearQueueRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.clear_queue)
  return req_.clear_queue_;
}
inline ::dspb::ClearQueueRequest* AdminRequest::release_clear_queue() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.clear_queue)
  if (has_clear_queue()) {
    clear_has_req();
    ::dspb::ClearQueueRequest* temp = req_.clear_queue_;
    req_.clear_queue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_clear_queue(::dspb::ClearQueueRequest* clear_queue) {
  clear_req();
  if (clear_queue) {
    set_has_clear_queue();
    req_.clear_queue_ = clear_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.clear_queue)
}

// .dspb.GetPendingsRequest get_pendings = 16;
inline bool AdminRequest::has_get_pendings() const {
  return req_case() == kGetPendings;
}
inline void AdminRequest::set_has_get_pendings() {
  _oneof_case_[0] = kGetPendings;
}
inline void AdminRequest::clear_get_pendings() {
  if (has_get_pendings()) {
    delete req_.get_pendings_;
    clear_has_req();
  }
}
inline  const ::dspb::GetPendingsRequest& AdminRequest::get_pendings() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.get_pendings)
  return has_get_pendings()
      ? *req_.get_pendings_
      : ::dspb::GetPendingsRequest::default_instance();
}
inline ::dspb::GetPendingsRequest* AdminRequest::mutable_get_pendings() {
  if (!has_get_pendings()) {
    clear_req();
    set_has_get_pendings();
    req_.get_pendings_ = new ::dspb::GetPendingsRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.get_pendings)
  return req_.get_pendings_;
}
inline ::dspb::GetPendingsRequest* AdminRequest::release_get_pendings() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.get_pendings)
  if (has_get_pendings()) {
    clear_has_req();
    ::dspb::GetPendingsRequest* temp = req_.get_pendings_;
    req_.get_pendings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_get_pendings(::dspb::GetPendingsRequest* get_pendings) {
  clear_req();
  if (get_pendings) {
    set_has_get_pendings();
    req_.get_pendings_ = get_pendings;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.get_pendings)
}

// .dspb.FlushDBRequest flush_db = 17;
inline bool AdminRequest::has_flush_db() const {
  return req_case() == kFlushDb;
}
inline void AdminRequest::set_has_flush_db() {
  _oneof_case_[0] = kFlushDb;
}
inline void AdminRequest::clear_flush_db() {
  if (has_flush_db()) {
    delete req_.flush_db_;
    clear_has_req();
  }
}
inline  const ::dspb::FlushDBRequest& AdminRequest::flush_db() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.flush_db)
  return has_flush_db()
      ? *req_.flush_db_
      : ::dspb::FlushDBRequest::default_instance();
}
inline ::dspb::FlushDBRequest* AdminRequest::mutable_flush_db() {
  if (!has_flush_db()) {
    clear_req();
    set_has_flush_db();
    req_.flush_db_ = new ::dspb::FlushDBRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.flush_db)
  return req_.flush_db_;
}
inline ::dspb::FlushDBRequest* AdminRequest::release_flush_db() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.flush_db)
  if (has_flush_db()) {
    clear_has_req();
    ::dspb::FlushDBRequest* temp = req_.flush_db_;
    req_.flush_db_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_flush_db(::dspb::FlushDBRequest* flush_db) {
  clear_req();
  if (flush_db) {
    set_has_flush_db();
    req_.flush_db_ = flush_db;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.flush_db)
}

// .dspb.ProfileRequest profile = 18;
inline bool AdminRequest::has_profile() const {
  return req_case() == kProfile;
}
inline void AdminRequest::set_has_profile() {
  _oneof_case_[0] = kProfile;
}
inline void AdminRequest::clear_profile() {
  if (has_profile()) {
    delete req_.profile_;
    clear_has_req();
  }
}
inline  const ::dspb::ProfileRequest& AdminRequest::profile() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.profile)
  return has_profile()
      ? *req_.profile_
      : ::dspb::ProfileRequest::default_instance();
}
inline ::dspb::ProfileRequest* AdminRequest::mutable_profile() {
  if (!has_profile()) {
    clear_req();
    set_has_profile();
    req_.profile_ = new ::dspb::ProfileRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.profile)
  return req_.profile_;
}
inline ::dspb::ProfileRequest* AdminRequest::release_profile() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.profile)
  if (has_profile()) {
    clear_has_req();
    ::dspb::ProfileRequest* temp = req_.profile_;
    req_.profile_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_profile(::dspb::ProfileRequest* profile) {
  clear_req();
  if (profile) {
    set_has_profile();
    req_.profile_ = profile;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.profile)
}

// .dspb.DumpRequest dump = 19;
inline bool AdminRequest::has_dump() const {
  return req_case() == kDump;
}
inline void AdminRequest::set_has_dump() {
  _oneof_case_[0] = kDump;
}
inline void AdminRequest::clear_dump() {
  if (has_dump()) {
    delete req_.dump_;
    clear_has_req();
  }
}
inline  const ::dspb::DumpRequest& AdminRequest::dump() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.dump)
  return has_dump()
      ? *req_.dump_
      : ::dspb::DumpRequest::default_instance();
}
inline ::dspb::DumpRequest* AdminRequest::mutable_dump() {
  if (!has_dump()) {
    clear_req();
    set_has_dump();
    req_.dump_ = new ::dspb::DumpRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.dump)
  return req_.dump_;
}
inline ::dspb::DumpRequest* AdminRequest::release_dump() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.dump)
  if (has_dump()) {
    clear_has_req();
    ::dspb::DumpRequest* temp = req_.dump_;
    req_.dump_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminRequest::set_allocated_dump(::dspb::DumpRequest* dump) {
  clear_req();
  if (dump) {
    set_has_dump();
    req_.dump_ = dump;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.dump)
}

inline bool AdminRequest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
inline void AdminRequest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
inline AdminRequest::ReqCase AdminRequest::req_case() const {
  return AdminRequest::ReqCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdminResponse

// uint32 code = 1;
inline void AdminResponse::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 AdminResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.code)
  return code_;
}
inline void AdminResponse::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.AdminResponse.code)
}

// string error_msg = 2;
inline void AdminResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdminResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.error_msg)
  return error_msg_.GetNoArena();
}
inline void AdminResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.AdminResponse.error_msg)
}
#if LANG_CXX11
inline void AdminResponse::set_error_msg(::std::string&& value) {
  
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.AdminResponse.error_msg)
}
#endif
inline void AdminResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.AdminResponse.error_msg)
}
inline void AdminResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.AdminResponse.error_msg)
}
inline ::std::string* AdminResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdminResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdminResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.error_msg)
}

// .dspb.SetConfigResponse set_cfg = 10;
inline bool AdminResponse::has_set_cfg() const {
  return resp_case() == kSetCfg;
}
inline void AdminResponse::set_has_set_cfg() {
  _oneof_case_[0] = kSetCfg;
}
inline void AdminResponse::clear_set_cfg() {
  if (has_set_cfg()) {
    delete resp_.set_cfg_;
    clear_has_resp();
  }
}
inline  const ::dspb::SetConfigResponse& AdminResponse::set_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.set_cfg)
  return has_set_cfg()
      ? *resp_.set_cfg_
      : ::dspb::SetConfigResponse::default_instance();
}
inline ::dspb::SetConfigResponse* AdminResponse::mutable_set_cfg() {
  if (!has_set_cfg()) {
    clear_resp();
    set_has_set_cfg();
    resp_.set_cfg_ = new ::dspb::SetConfigResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.set_cfg)
  return resp_.set_cfg_;
}
inline ::dspb::SetConfigResponse* AdminResponse::release_set_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.set_cfg)
  if (has_set_cfg()) {
    clear_has_resp();
    ::dspb::SetConfigResponse* temp = resp_.set_cfg_;
    resp_.set_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_set_cfg(::dspb::SetConfigResponse* set_cfg) {
  clear_resp();
  if (set_cfg) {
    set_has_set_cfg();
    resp_.set_cfg_ = set_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.set_cfg)
}

// .dspb.GetConfigResponse get_cfg = 11;
inline bool AdminResponse::has_get_cfg() const {
  return resp_case() == kGetCfg;
}
inline void AdminResponse::set_has_get_cfg() {
  _oneof_case_[0] = kGetCfg;
}
inline void AdminResponse::clear_get_cfg() {
  if (has_get_cfg()) {
    delete resp_.get_cfg_;
    clear_has_resp();
  }
}
inline  const ::dspb::GetConfigResponse& AdminResponse::get_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.get_cfg)
  return has_get_cfg()
      ? *resp_.get_cfg_
      : ::dspb::GetConfigResponse::default_instance();
}
inline ::dspb::GetConfigResponse* AdminResponse::mutable_get_cfg() {
  if (!has_get_cfg()) {
    clear_resp();
    set_has_get_cfg();
    resp_.get_cfg_ = new ::dspb::GetConfigResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.get_cfg)
  return resp_.get_cfg_;
}
inline ::dspb::GetConfigResponse* AdminResponse::release_get_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.get_cfg)
  if (has_get_cfg()) {
    clear_has_resp();
    ::dspb::GetConfigResponse* temp = resp_.get_cfg_;
    resp_.get_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_get_cfg(::dspb::GetConfigResponse* get_cfg) {
  clear_resp();
  if (get_cfg) {
    set_has_get_cfg();
    resp_.get_cfg_ = get_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.get_cfg)
}

// .dspb.GetInfoResponse get_info = 12;
inline bool AdminResponse::has_get_info() const {
  return resp_case() == kGetInfo;
}
inline void AdminResponse::set_has_get_info() {
  _oneof_case_[0] = kGetInfo;
}
inline void AdminResponse::clear_get_info() {
  if (has_get_info()) {
    delete resp_.get_info_;
    clear_has_resp();
  }
}
inline  const ::dspb::GetInfoResponse& AdminResponse::get_info() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.get_info)
  return has_get_info()
      ? *resp_.get_info_
      : ::dspb::GetInfoResponse::default_instance();
}
inline ::dspb::GetInfoResponse* AdminResponse::mutable_get_info() {
  if (!has_get_info()) {
    clear_resp();
    set_has_get_info();
    resp_.get_info_ = new ::dspb::GetInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.get_info)
  return resp_.get_info_;
}
inline ::dspb::GetInfoResponse* AdminResponse::release_get_info() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.get_info)
  if (has_get_info()) {
    clear_has_resp();
    ::dspb::GetInfoResponse* temp = resp_.get_info_;
    resp_.get_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_get_info(::dspb::GetInfoResponse* get_info) {
  clear_resp();
  if (get_info) {
    set_has_get_info();
    resp_.get_info_ = get_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.get_info)
}

// .dspb.ForceSplitResponse force_split = 13;
inline bool AdminResponse::has_force_split() const {
  return resp_case() == kForceSplit;
}
inline void AdminResponse::set_has_force_split() {
  _oneof_case_[0] = kForceSplit;
}
inline void AdminResponse::clear_force_split() {
  if (has_force_split()) {
    delete resp_.force_split_;
    clear_has_resp();
  }
}
inline  const ::dspb::ForceSplitResponse& AdminResponse::force_split() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.force_split)
  return has_force_split()
      ? *resp_.force_split_
      : ::dspb::ForceSplitResponse::default_instance();
}
inline ::dspb::ForceSplitResponse* AdminResponse::mutable_force_split() {
  if (!has_force_split()) {
    clear_resp();
    set_has_force_split();
    resp_.force_split_ = new ::dspb::ForceSplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.force_split)
  return resp_.force_split_;
}
inline ::dspb::ForceSplitResponse* AdminResponse::release_force_split() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.force_split)
  if (has_force_split()) {
    clear_has_resp();
    ::dspb::ForceSplitResponse* temp = resp_.force_split_;
    resp_.force_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_force_split(::dspb::ForceSplitResponse* force_split) {
  clear_resp();
  if (force_split) {
    set_has_force_split();
    resp_.force_split_ = force_split;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.force_split)
}

// .dspb.CompactionResponse compaction = 14;
inline bool AdminResponse::has_compaction() const {
  return resp_case() == kCompaction;
}
inline void AdminResponse::set_has_compaction() {
  _oneof_case_[0] = kCompaction;
}
inline void AdminResponse::clear_compaction() {
  if (has_compaction()) {
    delete resp_.compaction_;
    clear_has_resp();
  }
}
inline  const ::dspb::CompactionResponse& AdminResponse::compaction() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.compaction)
  return has_compaction()
      ? *resp_.compaction_
      : ::dspb::CompactionResponse::default_instance();
}
inline ::dspb::CompactionResponse* AdminResponse::mutable_compaction() {
  if (!has_compaction()) {
    clear_resp();
    set_has_compaction();
    resp_.compaction_ = new ::dspb::CompactionResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.compaction)
  return resp_.compaction_;
}
inline ::dspb::CompactionResponse* AdminResponse::release_compaction() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.compaction)
  if (has_compaction()) {
    clear_has_resp();
    ::dspb::CompactionResponse* temp = resp_.compaction_;
    resp_.compaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_compaction(::dspb::CompactionResponse* compaction) {
  clear_resp();
  if (compaction) {
    set_has_compaction();
    resp_.compaction_ = compaction;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.compaction)
}

// .dspb.ClearQueueResponse clear_queue = 15;
inline bool AdminResponse::has_clear_queue() const {
  return resp_case() == kClearQueue;
}
inline void AdminResponse::set_has_clear_queue() {
  _oneof_case_[0] = kClearQueue;
}
inline void AdminResponse::clear_clear_queue() {
  if (has_clear_queue()) {
    delete resp_.clear_queue_;
    clear_has_resp();
  }
}
inline  const ::dspb::ClearQueueResponse& AdminResponse::clear_queue() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.clear_queue)
  return has_clear_queue()
      ? *resp_.clear_queue_
      : ::dspb::ClearQueueResponse::default_instance();
}
inline ::dspb::ClearQueueResponse* AdminResponse::mutable_clear_queue() {
  if (!has_clear_queue()) {
    clear_resp();
    set_has_clear_queue();
    resp_.clear_queue_ = new ::dspb::ClearQueueResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.clear_queue)
  return resp_.clear_queue_;
}
inline ::dspb::ClearQueueResponse* AdminResponse::release_clear_queue() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.clear_queue)
  if (has_clear_queue()) {
    clear_has_resp();
    ::dspb::ClearQueueResponse* temp = resp_.clear_queue_;
    resp_.clear_queue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_clear_queue(::dspb::ClearQueueResponse* clear_queue) {
  clear_resp();
  if (clear_queue) {
    set_has_clear_queue();
    resp_.clear_queue_ = clear_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.clear_queue)
}

// .dspb.GetPendingsResponse get_pendings = 16;
inline bool AdminResponse::has_get_pendings() const {
  return resp_case() == kGetPendings;
}
inline void AdminResponse::set_has_get_pendings() {
  _oneof_case_[0] = kGetPendings;
}
inline void AdminResponse::clear_get_pendings() {
  if (has_get_pendings()) {
    delete resp_.get_pendings_;
    clear_has_resp();
  }
}
inline  const ::dspb::GetPendingsResponse& AdminResponse::get_pendings() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.get_pendings)
  return has_get_pendings()
      ? *resp_.get_pendings_
      : ::dspb::GetPendingsResponse::default_instance();
}
inline ::dspb::GetPendingsResponse* AdminResponse::mutable_get_pendings() {
  if (!has_get_pendings()) {
    clear_resp();
    set_has_get_pendings();
    resp_.get_pendings_ = new ::dspb::GetPendingsResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.get_pendings)
  return resp_.get_pendings_;
}
inline ::dspb::GetPendingsResponse* AdminResponse::release_get_pendings() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.get_pendings)
  if (has_get_pendings()) {
    clear_has_resp();
    ::dspb::GetPendingsResponse* temp = resp_.get_pendings_;
    resp_.get_pendings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_get_pendings(::dspb::GetPendingsResponse* get_pendings) {
  clear_resp();
  if (get_pendings) {
    set_has_get_pendings();
    resp_.get_pendings_ = get_pendings;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.get_pendings)
}

// .dspb.FlushDBResponse flush_db = 17;
inline bool AdminResponse::has_flush_db() const {
  return resp_case() == kFlushDb;
}
inline void AdminResponse::set_has_flush_db() {
  _oneof_case_[0] = kFlushDb;
}
inline void AdminResponse::clear_flush_db() {
  if (has_flush_db()) {
    delete resp_.flush_db_;
    clear_has_resp();
  }
}
inline  const ::dspb::FlushDBResponse& AdminResponse::flush_db() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.flush_db)
  return has_flush_db()
      ? *resp_.flush_db_
      : ::dspb::FlushDBResponse::default_instance();
}
inline ::dspb::FlushDBResponse* AdminResponse::mutable_flush_db() {
  if (!has_flush_db()) {
    clear_resp();
    set_has_flush_db();
    resp_.flush_db_ = new ::dspb::FlushDBResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.flush_db)
  return resp_.flush_db_;
}
inline ::dspb::FlushDBResponse* AdminResponse::release_flush_db() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.flush_db)
  if (has_flush_db()) {
    clear_has_resp();
    ::dspb::FlushDBResponse* temp = resp_.flush_db_;
    resp_.flush_db_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_flush_db(::dspb::FlushDBResponse* flush_db) {
  clear_resp();
  if (flush_db) {
    set_has_flush_db();
    resp_.flush_db_ = flush_db;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.flush_db)
}

// .dspb.ProfileResponse profile = 18;
inline bool AdminResponse::has_profile() const {
  return resp_case() == kProfile;
}
inline void AdminResponse::set_has_profile() {
  _oneof_case_[0] = kProfile;
}
inline void AdminResponse::clear_profile() {
  if (has_profile()) {
    delete resp_.profile_;
    clear_has_resp();
  }
}
inline  const ::dspb::ProfileResponse& AdminResponse::profile() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.profile)
  return has_profile()
      ? *resp_.profile_
      : ::dspb::ProfileResponse::default_instance();
}
inline ::dspb::ProfileResponse* AdminResponse::mutable_profile() {
  if (!has_profile()) {
    clear_resp();
    set_has_profile();
    resp_.profile_ = new ::dspb::ProfileResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.profile)
  return resp_.profile_;
}
inline ::dspb::ProfileResponse* AdminResponse::release_profile() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.profile)
  if (has_profile()) {
    clear_has_resp();
    ::dspb::ProfileResponse* temp = resp_.profile_;
    resp_.profile_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_profile(::dspb::ProfileResponse* profile) {
  clear_resp();
  if (profile) {
    set_has_profile();
    resp_.profile_ = profile;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.profile)
}

// .dspb.DumpResponse dump = 19;
inline bool AdminResponse::has_dump() const {
  return resp_case() == kDump;
}
inline void AdminResponse::set_has_dump() {
  _oneof_case_[0] = kDump;
}
inline void AdminResponse::clear_dump() {
  if (has_dump()) {
    delete resp_.dump_;
    clear_has_resp();
  }
}
inline  const ::dspb::DumpResponse& AdminResponse::dump() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.dump)
  return has_dump()
      ? *resp_.dump_
      : ::dspb::DumpResponse::default_instance();
}
inline ::dspb::DumpResponse* AdminResponse::mutable_dump() {
  if (!has_dump()) {
    clear_resp();
    set_has_dump();
    resp_.dump_ = new ::dspb::DumpResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.dump)
  return resp_.dump_;
}
inline ::dspb::DumpResponse* AdminResponse::release_dump() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.dump)
  if (has_dump()) {
    clear_has_resp();
    ::dspb::DumpResponse* temp = resp_.dump_;
    resp_.dump_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AdminResponse::set_allocated_dump(::dspb::DumpResponse* dump) {
  clear_resp();
  if (dump) {
    set_has_dump();
    resp_.dump_ = dump;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.dump)
}

inline bool AdminResponse::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
inline void AdminResponse::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
inline AdminResponse::RespCase AdminResponse::resp_case() const {
  return AdminResponse::RespCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigKey

// string section = 1;
inline void ConfigKey::clear_section() {
  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigKey::section() const {
  // @@protoc_insertion_point(field_get:dspb.ConfigKey.section)
  return section_.GetNoArena();
}
inline void ConfigKey::set_section(const ::std::string& value) {
  
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ConfigKey.section)
}
#if LANG_CXX11
inline void ConfigKey::set_section(::std::string&& value) {
  
  section_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ConfigKey.section)
}
#endif
inline void ConfigKey::set_section(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ConfigKey.section)
}
inline void ConfigKey::set_section(const char* value, size_t size) {
  
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ConfigKey.section)
}
inline ::std::string* ConfigKey::mutable_section() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ConfigKey.section)
  return section_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigKey::release_section() {
  // @@protoc_insertion_point(field_release:dspb.ConfigKey.section)
  
  return section_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigKey::set_allocated_section(::std::string* section) {
  if (section != NULL) {
    
  } else {
    
  }
  section_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section);
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigKey.section)
}

// string name = 2;
inline void ConfigKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigKey::name() const {
  // @@protoc_insertion_point(field_get:dspb.ConfigKey.name)
  return name_.GetNoArena();
}
inline void ConfigKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ConfigKey.name)
}
#if LANG_CXX11
inline void ConfigKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ConfigKey.name)
}
#endif
inline void ConfigKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ConfigKey.name)
}
inline void ConfigKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ConfigKey.name)
}
inline ::std::string* ConfigKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ConfigKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigKey::release_name() {
  // @@protoc_insertion_point(field_release:dspb.ConfigKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigKey.name)
}

// -------------------------------------------------------------------

// ConfigItem

// .dspb.ConfigKey key = 1;
inline bool ConfigItem::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void ConfigItem::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::dspb::ConfigKey& ConfigItem::key() const {
  const ::dspb::ConfigKey* p = key_;
  // @@protoc_insertion_point(field_get:dspb.ConfigItem.key)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ConfigKey*>(
      &::dspb::_ConfigKey_default_instance_);
}
inline ::dspb::ConfigKey* ConfigItem::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::dspb::ConfigKey;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ConfigItem.key)
  return key_;
}
inline ::dspb::ConfigKey* ConfigItem::release_key() {
  // @@protoc_insertion_point(field_release:dspb.ConfigItem.key)
  
  ::dspb::ConfigKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void ConfigItem::set_allocated_key(::dspb::ConfigKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigItem.key)
}

// string value = 2;
inline void ConfigItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigItem::value() const {
  // @@protoc_insertion_point(field_get:dspb.ConfigItem.value)
  return value_.GetNoArena();
}
inline void ConfigItem::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ConfigItem.value)
}
#if LANG_CXX11
inline void ConfigItem::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ConfigItem.value)
}
#endif
inline void ConfigItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ConfigItem.value)
}
inline void ConfigItem::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ConfigItem.value)
}
inline ::std::string* ConfigItem::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ConfigItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigItem::release_value() {
  // @@protoc_insertion_point(field_release:dspb.ConfigItem.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigItem.value)
}

// -------------------------------------------------------------------

// SetConfigRequest

// repeated .dspb.ConfigItem configs = 1;
inline int SetConfigRequest::configs_size() const {
  return configs_.size();
}
inline void SetConfigRequest::clear_configs() {
  configs_.Clear();
}
inline const ::dspb::ConfigItem& SetConfigRequest::configs(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SetConfigRequest.configs)
  return configs_.Get(index);
}
inline ::dspb::ConfigItem* SetConfigRequest::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SetConfigRequest.configs)
  return configs_.Mutable(index);
}
inline ::dspb::ConfigItem* SetConfigRequest::add_configs() {
  // @@protoc_insertion_point(field_add:dspb.SetConfigRequest.configs)
  return configs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >*
SetConfigRequest::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SetConfigRequest.configs)
  return &configs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >&
SetConfigRequest::configs() const {
  // @@protoc_insertion_point(field_list:dspb.SetConfigRequest.configs)
  return configs_;
}

// -------------------------------------------------------------------

// SetConfigResponse

// -------------------------------------------------------------------

// GetConfigRequest

// repeated .dspb.ConfigKey key = 1;
inline int GetConfigRequest::key_size() const {
  return key_.size();
}
inline void GetConfigRequest::clear_key() {
  key_.Clear();
}
inline const ::dspb::ConfigKey& GetConfigRequest::key(int index) const {
  // @@protoc_insertion_point(field_get:dspb.GetConfigRequest.key)
  return key_.Get(index);
}
inline ::dspb::ConfigKey* GetConfigRequest::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.GetConfigRequest.key)
  return key_.Mutable(index);
}
inline ::dspb::ConfigKey* GetConfigRequest::add_key() {
  // @@protoc_insertion_point(field_add:dspb.GetConfigRequest.key)
  return key_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey >*
GetConfigRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:dspb.GetConfigRequest.key)
  return &key_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey >&
GetConfigRequest::key() const {
  // @@protoc_insertion_point(field_list:dspb.GetConfigRequest.key)
  return key_;
}

// -------------------------------------------------------------------

// GetConfigResponse

// repeated .dspb.ConfigItem configs = 1;
inline int GetConfigResponse::configs_size() const {
  return configs_.size();
}
inline void GetConfigResponse::clear_configs() {
  configs_.Clear();
}
inline const ::dspb::ConfigItem& GetConfigResponse::configs(int index) const {
  // @@protoc_insertion_point(field_get:dspb.GetConfigResponse.configs)
  return configs_.Get(index);
}
inline ::dspb::ConfigItem* GetConfigResponse::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.GetConfigResponse.configs)
  return configs_.Mutable(index);
}
inline ::dspb::ConfigItem* GetConfigResponse::add_configs() {
  // @@protoc_insertion_point(field_add:dspb.GetConfigResponse.configs)
  return configs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >*
GetConfigResponse::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:dspb.GetConfigResponse.configs)
  return &configs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >&
GetConfigResponse::configs() const {
  // @@protoc_insertion_point(field_list:dspb.GetConfigResponse.configs)
  return configs_;
}

// -------------------------------------------------------------------

// GetInfoRequest

// string path = 1;
inline void GetInfoRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoRequest::path() const {
  // @@protoc_insertion_point(field_get:dspb.GetInfoRequest.path)
  return path_.GetNoArena();
}
inline void GetInfoRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetInfoRequest.path)
}
#if LANG_CXX11
inline void GetInfoRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetInfoRequest.path)
}
#endif
inline void GetInfoRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetInfoRequest.path)
}
inline void GetInfoRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetInfoRequest.path)
}
inline ::std::string* GetInfoRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetInfoRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoRequest::release_path() {
  // @@protoc_insertion_point(field_release:dspb.GetInfoRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetInfoRequest.path)
}

// -------------------------------------------------------------------

// GetInfoResponse

// string data = 1;
inline void GetInfoResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::data() const {
  // @@protoc_insertion_point(field_get:dspb.GetInfoResponse.data)
  return data_.GetNoArena();
}
inline void GetInfoResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetInfoResponse.data)
}
#if LANG_CXX11
inline void GetInfoResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetInfoResponse.data)
}
#endif
inline void GetInfoResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetInfoResponse.data)
}
inline void GetInfoResponse::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetInfoResponse.data)
}
inline ::std::string* GetInfoResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetInfoResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_data() {
  // @@protoc_insertion_point(field_release:dspb.GetInfoResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetInfoResponse.data)
}

// -------------------------------------------------------------------

// ForceSplitRequest

// uint64 range_id = 1;
inline void ForceSplitRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ForceSplitRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.ForceSplitRequest.range_id)
  return range_id_;
}
inline void ForceSplitRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.ForceSplitRequest.range_id)
}

// uint64 version = 2;
inline void ForceSplitRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ForceSplitRequest::version() const {
  // @@protoc_insertion_point(field_get:dspb.ForceSplitRequest.version)
  return version_;
}
inline void ForceSplitRequest::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dspb.ForceSplitRequest.version)
}

// -------------------------------------------------------------------

// ForceSplitResponse

// bytes split_key = 1;
inline void ForceSplitResponse::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForceSplitResponse::split_key() const {
  // @@protoc_insertion_point(field_get:dspb.ForceSplitResponse.split_key)
  return split_key_.GetNoArena();
}
inline void ForceSplitResponse::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ForceSplitResponse.split_key)
}
#if LANG_CXX11
inline void ForceSplitResponse::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ForceSplitResponse.split_key)
}
#endif
inline void ForceSplitResponse::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ForceSplitResponse.split_key)
}
inline void ForceSplitResponse::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ForceSplitResponse.split_key)
}
inline ::std::string* ForceSplitResponse::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ForceSplitResponse.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForceSplitResponse::release_split_key() {
  // @@protoc_insertion_point(field_release:dspb.ForceSplitResponse.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForceSplitResponse::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ForceSplitResponse.split_key)
}

// -------------------------------------------------------------------

// CompactionRequest

// uint64 range_id = 1;
inline void CompactionRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CompactionRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionRequest.range_id)
  return range_id_;
}
inline void CompactionRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.CompactionRequest.range_id)
}

// int64 transaction_id = 2;
inline void CompactionRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CompactionRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionRequest.transaction_id)
  return transaction_id_;
}
inline void CompactionRequest::set_transaction_id(::google::protobuf::int64 value) {
  
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.CompactionRequest.transaction_id)
}

// -------------------------------------------------------------------

// CompactionResponse

// bytes begin_key = 1;
inline void CompactionResponse::clear_begin_key() {
  begin_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompactionResponse::begin_key() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionResponse.begin_key)
  return begin_key_.GetNoArena();
}
inline void CompactionResponse::set_begin_key(const ::std::string& value) {
  
  begin_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.CompactionResponse.begin_key)
}
#if LANG_CXX11
inline void CompactionResponse::set_begin_key(::std::string&& value) {
  
  begin_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.CompactionResponse.begin_key)
}
#endif
inline void CompactionResponse::set_begin_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  begin_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.CompactionResponse.begin_key)
}
inline void CompactionResponse::set_begin_key(const void* value, size_t size) {
  
  begin_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.CompactionResponse.begin_key)
}
inline ::std::string* CompactionResponse::mutable_begin_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.CompactionResponse.begin_key)
  return begin_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompactionResponse::release_begin_key() {
  // @@protoc_insertion_point(field_release:dspb.CompactionResponse.begin_key)
  
  return begin_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactionResponse::set_allocated_begin_key(::std::string* begin_key) {
  if (begin_key != NULL) {
    
  } else {
    
  }
  begin_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.CompactionResponse.begin_key)
}

// bytes end_key = 2;
inline void CompactionResponse::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompactionResponse::end_key() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionResponse.end_key)
  return end_key_.GetNoArena();
}
inline void CompactionResponse::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.CompactionResponse.end_key)
}
#if LANG_CXX11
inline void CompactionResponse::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.CompactionResponse.end_key)
}
#endif
inline void CompactionResponse::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.CompactionResponse.end_key)
}
inline void CompactionResponse::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.CompactionResponse.end_key)
}
inline ::std::string* CompactionResponse::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.CompactionResponse.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompactionResponse::release_end_key() {
  // @@protoc_insertion_point(field_release:dspb.CompactionResponse.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactionResponse::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.CompactionResponse.end_key)
}

// -------------------------------------------------------------------

// ClearQueueRequest

// .dspb.ClearQueueRequest.QueueType queue_type = 1;
inline void ClearQueueRequest::clear_queue_type() {
  queue_type_ = 0;
}
inline ::dspb::ClearQueueRequest_QueueType ClearQueueRequest::queue_type() const {
  // @@protoc_insertion_point(field_get:dspb.ClearQueueRequest.queue_type)
  return static_cast< ::dspb::ClearQueueRequest_QueueType >(queue_type_);
}
inline void ClearQueueRequest::set_queue_type(::dspb::ClearQueueRequest_QueueType value) {
  
  queue_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.ClearQueueRequest.queue_type)
}

// -------------------------------------------------------------------

// ClearQueueResponse

// uint64 cleared = 1;
inline void ClearQueueResponse::clear_cleared() {
  cleared_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClearQueueResponse::cleared() const {
  // @@protoc_insertion_point(field_get:dspb.ClearQueueResponse.cleared)
  return cleared_;
}
inline void ClearQueueResponse::set_cleared(::google::protobuf::uint64 value) {
  
  cleared_ = value;
  // @@protoc_insertion_point(field_set:dspb.ClearQueueResponse.cleared)
}

// -------------------------------------------------------------------

// GetPendingsRequest

// .dspb.GetPendingsRequest.PendingType ptype = 1;
inline void GetPendingsRequest::clear_ptype() {
  ptype_ = 0;
}
inline ::dspb::GetPendingsRequest_PendingType GetPendingsRequest::ptype() const {
  // @@protoc_insertion_point(field_get:dspb.GetPendingsRequest.ptype)
  return static_cast< ::dspb::GetPendingsRequest_PendingType >(ptype_);
}
inline void GetPendingsRequest::set_ptype(::dspb::GetPendingsRequest_PendingType value) {
  
  ptype_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPendingsRequest.ptype)
}

// uint64 count = 2;
inline void GetPendingsRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetPendingsRequest::count() const {
  // @@protoc_insertion_point(field_get:dspb.GetPendingsRequest.count)
  return count_;
}
inline void GetPendingsRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPendingsRequest.count)
}

// -------------------------------------------------------------------

// GetPendingsResponse

// string desc = 1;
inline void GetPendingsResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPendingsResponse::desc() const {
  // @@protoc_insertion_point(field_get:dspb.GetPendingsResponse.desc)
  return desc_.GetNoArena();
}
inline void GetPendingsResponse::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetPendingsResponse.desc)
}
#if LANG_CXX11
inline void GetPendingsResponse::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetPendingsResponse.desc)
}
#endif
inline void GetPendingsResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetPendingsResponse.desc)
}
inline void GetPendingsResponse::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetPendingsResponse.desc)
}
inline ::std::string* GetPendingsResponse::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetPendingsResponse.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPendingsResponse::release_desc() {
  // @@protoc_insertion_point(field_release:dspb.GetPendingsResponse.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPendingsResponse::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetPendingsResponse.desc)
}

// -------------------------------------------------------------------

// FlushDBRequest

// bool wait = 1;
inline void FlushDBRequest::clear_wait() {
  wait_ = false;
}
inline bool FlushDBRequest::wait() const {
  // @@protoc_insertion_point(field_get:dspb.FlushDBRequest.wait)
  return wait_;
}
inline void FlushDBRequest::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:dspb.FlushDBRequest.wait)
}

// -------------------------------------------------------------------

// FlushDBResponse

// -------------------------------------------------------------------

// ProfileRequest

// .dspb.ProfileRequest.ProfileType ptype = 1;
inline void ProfileRequest::clear_ptype() {
  ptype_ = 0;
}
inline ::dspb::ProfileRequest_ProfileType ProfileRequest::ptype() const {
  // @@protoc_insertion_point(field_get:dspb.ProfileRequest.ptype)
  return static_cast< ::dspb::ProfileRequest_ProfileType >(ptype_);
}
inline void ProfileRequest::set_ptype(::dspb::ProfileRequest_ProfileType value) {
  
  ptype_ = value;
  // @@protoc_insertion_point(field_set:dspb.ProfileRequest.ptype)
}

// string output_path = 2;
inline void ProfileRequest::clear_output_path() {
  output_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::output_path() const {
  // @@protoc_insertion_point(field_get:dspb.ProfileRequest.output_path)
  return output_path_.GetNoArena();
}
inline void ProfileRequest::set_output_path(const ::std::string& value) {
  
  output_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ProfileRequest.output_path)
}
#if LANG_CXX11
inline void ProfileRequest::set_output_path(::std::string&& value) {
  
  output_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ProfileRequest.output_path)
}
#endif
inline void ProfileRequest::set_output_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ProfileRequest.output_path)
}
inline void ProfileRequest::set_output_path(const char* value, size_t size) {
  
  output_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ProfileRequest.output_path)
}
inline ::std::string* ProfileRequest::mutable_output_path() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ProfileRequest.output_path)
  return output_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_output_path() {
  // @@protoc_insertion_point(field_release:dspb.ProfileRequest.output_path)
  
  return output_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_output_path(::std::string* output_path) {
  if (output_path != NULL) {
    
  } else {
    
  }
  output_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_path);
  // @@protoc_insertion_point(field_set_allocated:dspb.ProfileRequest.output_path)
}

// .dspb.ProfileRequest.ProfileOp op = 3;
inline void ProfileRequest::clear_op() {
  op_ = 0;
}
inline ::dspb::ProfileRequest_ProfileOp ProfileRequest::op() const {
  // @@protoc_insertion_point(field_get:dspb.ProfileRequest.op)
  return static_cast< ::dspb::ProfileRequest_ProfileOp >(op_);
}
inline void ProfileRequest::set_op(::dspb::ProfileRequest_ProfileOp value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:dspb.ProfileRequest.op)
}

// -------------------------------------------------------------------

// ProfileResponse

// -------------------------------------------------------------------

// DumpRequest

// -------------------------------------------------------------------

// DumpResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dspb::AdminAuth_AuthMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::AdminAuth_AuthMethod>() {
  return ::dspb::AdminAuth_AuthMethod_descriptor();
}
template <> struct is_proto_enum< ::dspb::ClearQueueRequest_QueueType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::ClearQueueRequest_QueueType>() {
  return ::dspb::ClearQueueRequest_QueueType_descriptor();
}
template <> struct is_proto_enum< ::dspb::GetPendingsRequest_PendingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::GetPendingsRequest_PendingType>() {
  return ::dspb::GetPendingsRequest_PendingType_descriptor();
}
template <> struct is_proto_enum< ::dspb::ProfileRequest_ProfileType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::ProfileRequest_ProfileType>() {
  return ::dspb::ProfileRequest_ProfileType_descriptor();
}
template <> struct is_proto_enum< ::dspb::ProfileRequest_ProfileOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::ProfileRequest_ProfileOp>() {
  return ::dspb::ProfileRequest_ProfileOp_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dspb_2fadmin_2eproto__INCLUDED
