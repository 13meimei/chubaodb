// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class RangeRequest_HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeRequest_Header>
     _instance;
} _RangeRequest_Header_default_instance_;
class RangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeRequest>
     _instance;
  const ::dspb::PrepareRequest* prepare_;
  const ::dspb::DecideRequest* decide_;
  const ::dspb::ClearupRequest* clear_up_;
  const ::dspb::GetLockInfoRequest* get_lock_info_;
  const ::dspb::SelectRequest* select_;
  const ::dspb::ScanRequest* scan_;
  const ::dspb::SelectFlowRequest* select_flow_;
  const ::dspb::KvGetRequest* kv_get_;
  const ::dspb::KvPutRequest* kv_put_;
  const ::dspb::KvDeleteRequest* kv_delete_;
} _RangeRequest_default_instance_;
class RangeResponse_HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeResponse_Header>
     _instance;
} _RangeResponse_Header_default_instance_;
class RangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeResponse>
     _instance;
  const ::dspb::PrepareResponse* prepare_;
  const ::dspb::DecideResponse* decide_;
  const ::dspb::ClearupResponse* clear_up_;
  const ::dspb::GetLockInfoResponse* get_lock_info_;
  const ::dspb::SelectResponse* select_;
  const ::dspb::ScanResponse* scan_;
  const ::dspb::SelectFlowResponse* select_flow_;
  const ::dspb::KvGetResponse* kv_get_;
  const ::dspb::KvPutResponse* kv_put_;
  const ::dspb::KvDeleteResponse* kv_delete_;
} _RangeResponse_default_instance_;

namespace protobuf_dspb_2fapi_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest_Header, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest_Header, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest_Header, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest_Header, range_epoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, header_),
  offsetof(RangeRequestDefaultTypeInternal, prepare_),
  offsetof(RangeRequestDefaultTypeInternal, decide_),
  offsetof(RangeRequestDefaultTypeInternal, clear_up_),
  offsetof(RangeRequestDefaultTypeInternal, get_lock_info_),
  offsetof(RangeRequestDefaultTypeInternal, select_),
  offsetof(RangeRequestDefaultTypeInternal, scan_),
  offsetof(RangeRequestDefaultTypeInternal, select_flow_),
  offsetof(RangeRequestDefaultTypeInternal, kv_get_),
  offsetof(RangeRequestDefaultTypeInternal, kv_put_),
  offsetof(RangeRequestDefaultTypeInternal, kv_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse_Header, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse_Header, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse_Header, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, header_),
  offsetof(RangeResponseDefaultTypeInternal, prepare_),
  offsetof(RangeResponseDefaultTypeInternal, decide_),
  offsetof(RangeResponseDefaultTypeInternal, clear_up_),
  offsetof(RangeResponseDefaultTypeInternal, get_lock_info_),
  offsetof(RangeResponseDefaultTypeInternal, select_),
  offsetof(RangeResponseDefaultTypeInternal, scan_),
  offsetof(RangeResponseDefaultTypeInternal, select_flow_),
  offsetof(RangeResponseDefaultTypeInternal, kv_get_),
  offsetof(RangeResponseDefaultTypeInternal, kv_put_),
  offsetof(RangeResponseDefaultTypeInternal, kv_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeResponse, resp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RangeRequest_Header)},
  { 9, -1, sizeof(RangeRequest)},
  { 26, -1, sizeof(RangeResponse_Header)},
  { 34, -1, sizeof(RangeResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeRequest_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeResponse_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/api.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::basepb::protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2ferror_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2fkv_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2ftxn_2eproto::InitDefaults();
  _RangeRequest_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeRequest_Header_default_instance_);_RangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeRequest_default_instance_);_RangeResponse_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeResponse_Header_default_instance_);_RangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeResponse_default_instance_);_RangeRequest_Header_default_instance_._instance.get_mutable()->range_epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _RangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::dspb::RangeRequest_Header*>(
      ::dspb::RangeRequest_Header::internal_default_instance());
  _RangeRequest_default_instance_.prepare_ = const_cast< ::dspb::PrepareRequest*>(
      ::dspb::PrepareRequest::internal_default_instance());
  _RangeRequest_default_instance_.decide_ = const_cast< ::dspb::DecideRequest*>(
      ::dspb::DecideRequest::internal_default_instance());
  _RangeRequest_default_instance_.clear_up_ = const_cast< ::dspb::ClearupRequest*>(
      ::dspb::ClearupRequest::internal_default_instance());
  _RangeRequest_default_instance_.get_lock_info_ = const_cast< ::dspb::GetLockInfoRequest*>(
      ::dspb::GetLockInfoRequest::internal_default_instance());
  _RangeRequest_default_instance_.select_ = const_cast< ::dspb::SelectRequest*>(
      ::dspb::SelectRequest::internal_default_instance());
  _RangeRequest_default_instance_.scan_ = const_cast< ::dspb::ScanRequest*>(
      ::dspb::ScanRequest::internal_default_instance());
  _RangeRequest_default_instance_.select_flow_ = const_cast< ::dspb::SelectFlowRequest*>(
      ::dspb::SelectFlowRequest::internal_default_instance());
  _RangeRequest_default_instance_.kv_get_ = const_cast< ::dspb::KvGetRequest*>(
      ::dspb::KvGetRequest::internal_default_instance());
  _RangeRequest_default_instance_.kv_put_ = const_cast< ::dspb::KvPutRequest*>(
      ::dspb::KvPutRequest::internal_default_instance());
  _RangeRequest_default_instance_.kv_delete_ = const_cast< ::dspb::KvDeleteRequest*>(
      ::dspb::KvDeleteRequest::internal_default_instance());
  _RangeResponse_Header_default_instance_._instance.get_mutable()->error_ = const_cast< ::dspb::Error*>(
      ::dspb::Error::internal_default_instance());
  _RangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::dspb::RangeResponse_Header*>(
      ::dspb::RangeResponse_Header::internal_default_instance());
  _RangeResponse_default_instance_.prepare_ = const_cast< ::dspb::PrepareResponse*>(
      ::dspb::PrepareResponse::internal_default_instance());
  _RangeResponse_default_instance_.decide_ = const_cast< ::dspb::DecideResponse*>(
      ::dspb::DecideResponse::internal_default_instance());
  _RangeResponse_default_instance_.clear_up_ = const_cast< ::dspb::ClearupResponse*>(
      ::dspb::ClearupResponse::internal_default_instance());
  _RangeResponse_default_instance_.get_lock_info_ = const_cast< ::dspb::GetLockInfoResponse*>(
      ::dspb::GetLockInfoResponse::internal_default_instance());
  _RangeResponse_default_instance_.select_ = const_cast< ::dspb::SelectResponse*>(
      ::dspb::SelectResponse::internal_default_instance());
  _RangeResponse_default_instance_.scan_ = const_cast< ::dspb::ScanResponse*>(
      ::dspb::ScanResponse::internal_default_instance());
  _RangeResponse_default_instance_.select_flow_ = const_cast< ::dspb::SelectFlowResponse*>(
      ::dspb::SelectFlowResponse::internal_default_instance());
  _RangeResponse_default_instance_.kv_get_ = const_cast< ::dspb::KvGetResponse*>(
      ::dspb::KvGetResponse::internal_default_instance());
  _RangeResponse_default_instance_.kv_put_ = const_cast< ::dspb::KvPutResponse*>(
      ::dspb::KvPutResponse::internal_default_instance());
  _RangeResponse_default_instance_.kv_delete_ = const_cast< ::dspb::KvDeleteResponse*>(
      ::dspb::KvDeleteResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016dspb/api.proto\022\004dspb\032\023basepb/basepb.pr"
      "oto\032\020dspb/error.proto\032\rdspb/kv.proto\032\016ds"
      "pb/txn.proto\"\312\004\n\014RangeRequest\022)\n\006header\030"
      "\001 \001(\0132\031.dspb.RangeRequest.Header\022\'\n\007prep"
      "are\030\002 \001(\0132\024.dspb.PrepareRequestH\000\022%\n\006dec"
      "ide\030\003 \001(\0132\023.dspb.DecideRequestH\000\022(\n\010clea"
      "r_up\030\004 \001(\0132\024.dspb.ClearupRequestH\000\0221\n\rge"
      "t_lock_info\030\005 \001(\0132\030.dspb.GetLockInfoRequ"
      "estH\000\022%\n\006select\030\006 \001(\0132\023.dspb.SelectReque"
      "stH\000\022!\n\004scan\030\007 \001(\0132\021.dspb.ScanRequestH\000\022"
      ".\n\013select_flow\030\010 \001(\0132\027.dspb.SelectFlowRe"
      "questH\000\022$\n\006kv_get\030\024 \001(\0132\022.dspb.KvGetRequ"
      "estH\000\022$\n\006kv_put\030\025 \001(\0132\022.dspb.KvPutReques"
      "tH\000\022*\n\tkv_delete\030\026 \001(\0132\025.dspb.KvDeleteRe"
      "questH\000\032i\n\006Header\022\022\n\ncluster_id\030\001 \001(\004\022\020\n"
      "\010trace_id\030\002 \001(\004\022\020\n\010range_id\030\003 \001(\004\022\'\n\013ran"
      "ge_epoch\030\004 \001(\0132\022.basepb.RangeEpochB\005\n\003re"
      "q\"\270\004\n\rRangeResponse\022*\n\006header\030\001 \001(\0132\032.ds"
      "pb.RangeResponse.Header\022(\n\007prepare\030\002 \001(\013"
      "2\025.dspb.PrepareResponseH\000\022&\n\006decide\030\003 \001("
      "\0132\024.dspb.DecideResponseH\000\022)\n\010clear_up\030\004 "
      "\001(\0132\025.dspb.ClearupResponseH\000\0222\n\rget_lock"
      "_info\030\005 \001(\0132\031.dspb.GetLockInfoResponseH\000"
      "\022&\n\006select\030\006 \001(\0132\024.dspb.SelectResponseH\000"
      "\022\"\n\004scan\030\007 \001(\0132\022.dspb.ScanResponseH\000\022/\n\013"
      "select_flow\030\010 \001(\0132\030.dspb.SelectFlowRespo"
      "nseH\000\022%\n\006kv_get\030\024 \001(\0132\023.dspb.KvGetRespon"
      "seH\000\022%\n\006kv_put\030\025 \001(\0132\023.dspb.KvPutRespons"
      "eH\000\022+\n\tkv_delete\030\026 \001(\0132\026.dspb.KvDeleteRe"
      "sponseH\000\032J\n\006Header\022\022\n\ncluster_id\030\001 \001(\004\022\020"
      "\n\010trace_id\030\002 \001(\004\022\032\n\005error\030\003 \001(\0132\013.dspb.E"
      "rrorB\006\n\004respb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/api.proto", &protobuf_RegisterTypes);
  ::basepb::protobuf_basepb_2fbasepb_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2ferror_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2fkv_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2ftxn_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2fapi_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeRequest_Header::kClusterIdFieldNumber;
const int RangeRequest_Header::kTraceIdFieldNumber;
const int RangeRequest_Header::kRangeIdFieldNumber;
const int RangeRequest_Header::kRangeEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeRequest_Header::RangeRequest_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RangeRequest.Header)
}
RangeRequest_Header::RangeRequest_Header(const RangeRequest_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range_epoch()) {
    range_epoch_ = new ::basepb::RangeEpoch(*from.range_epoch_);
  } else {
    range_epoch_ = NULL;
  }
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_id_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(range_id_));
  // @@protoc_insertion_point(copy_constructor:dspb.RangeRequest.Header)
}

void RangeRequest_Header::SharedCtor() {
  ::memset(&range_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&range_epoch_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

RangeRequest_Header::~RangeRequest_Header() {
  // @@protoc_insertion_point(destructor:dspb.RangeRequest.Header)
  SharedDtor();
}

void RangeRequest_Header::SharedDtor() {
  if (this != internal_default_instance()) delete range_epoch_;
}

void RangeRequest_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeRequest_Header::descriptor() {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeRequest_Header& RangeRequest_Header::default_instance() {
  protobuf_dspb_2fapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeRequest_Header* RangeRequest_Header::New(::google::protobuf::Arena* arena) const {
  RangeRequest_Header* n = new RangeRequest_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeRequest_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RangeRequest.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) {
    delete range_epoch_;
  }
  range_epoch_ = NULL;
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(range_id_));
  _internal_metadata_.Clear();
}

bool RangeRequest_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RangeRequest.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trace_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch range_epoch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RangeRequest.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RangeRequest.Header)
  return false;
#undef DO_
}

void RangeRequest_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RangeRequest.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // uint64 trace_id = 2;
  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->trace_id(), output);
  }

  // uint64 range_id = 3;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->range_id(), output);
  }

  // .basepb.RangeEpoch range_epoch = 4;
  if (this->has_range_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->range_epoch_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RangeRequest.Header)
}

::google::protobuf::uint8* RangeRequest_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RangeRequest.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // uint64 trace_id = 2;
  if (this->trace_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->trace_id(), target);
  }

  // uint64 range_id = 3;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->range_id(), target);
  }

  // .basepb.RangeEpoch range_epoch = 4;
  if (this->has_range_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->range_epoch_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RangeRequest.Header)
  return target;
}

size_t RangeRequest_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RangeRequest.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.RangeEpoch range_epoch = 4;
  if (this->has_range_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_epoch_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 trace_id = 2;
  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  // uint64 range_id = 3;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeRequest_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RangeRequest.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeRequest_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeRequest_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RangeRequest.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RangeRequest.Header)
    MergeFrom(*source);
  }
}

void RangeRequest_Header::MergeFrom(const RangeRequest_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RangeRequest.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range_epoch()) {
    mutable_range_epoch()->::basepb::RangeEpoch::MergeFrom(from.range_epoch());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void RangeRequest_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RangeRequest.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeRequest_Header::CopyFrom(const RangeRequest_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RangeRequest.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeRequest_Header::IsInitialized() const {
  return true;
}

void RangeRequest_Header::Swap(RangeRequest_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeRequest_Header::InternalSwap(RangeRequest_Header* other) {
  using std::swap;
  swap(range_epoch_, other->range_epoch_);
  swap(cluster_id_, other->cluster_id_);
  swap(trace_id_, other->trace_id_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeRequest_Header::GetMetadata() const {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeRequest_Header

// uint64 cluster_id = 1;
void RangeRequest_Header::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeRequest_Header::cluster_id() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.Header.cluster_id)
  return cluster_id_;
}
void RangeRequest_Header::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeRequest.Header.cluster_id)
}

// uint64 trace_id = 2;
void RangeRequest_Header::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeRequest_Header::trace_id() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.Header.trace_id)
  return trace_id_;
}
void RangeRequest_Header::set_trace_id(::google::protobuf::uint64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeRequest.Header.trace_id)
}

// uint64 range_id = 3;
void RangeRequest_Header::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeRequest_Header::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.Header.range_id)
  return range_id_;
}
void RangeRequest_Header::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeRequest.Header.range_id)
}

// .basepb.RangeEpoch range_epoch = 4;
bool RangeRequest_Header::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
void RangeRequest_Header::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
const ::basepb::RangeEpoch& RangeRequest_Header::range_epoch() const {
  const ::basepb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.Header.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* RangeRequest_Header::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.Header.range_epoch)
  return range_epoch_;
}
::basepb::RangeEpoch* RangeRequest_Header::release_range_epoch() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.Header.range_epoch)
  
  ::basepb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
void RangeRequest_Header::set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.Header.range_epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeRequest::kHeaderFieldNumber;
const int RangeRequest::kPrepareFieldNumber;
const int RangeRequest::kDecideFieldNumber;
const int RangeRequest::kClearUpFieldNumber;
const int RangeRequest::kGetLockInfoFieldNumber;
const int RangeRequest::kSelectFieldNumber;
const int RangeRequest::kScanFieldNumber;
const int RangeRequest::kSelectFlowFieldNumber;
const int RangeRequest::kKvGetFieldNumber;
const int RangeRequest::kKvPutFieldNumber;
const int RangeRequest::kKvDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeRequest::RangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RangeRequest)
}
RangeRequest::RangeRequest(const RangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::dspb::RangeRequest_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_req();
  switch (from.req_case()) {
    case kPrepare: {
      mutable_prepare()->::dspb::PrepareRequest::MergeFrom(from.prepare());
      break;
    }
    case kDecide: {
      mutable_decide()->::dspb::DecideRequest::MergeFrom(from.decide());
      break;
    }
    case kClearUp: {
      mutable_clear_up()->::dspb::ClearupRequest::MergeFrom(from.clear_up());
      break;
    }
    case kGetLockInfo: {
      mutable_get_lock_info()->::dspb::GetLockInfoRequest::MergeFrom(from.get_lock_info());
      break;
    }
    case kSelect: {
      mutable_select()->::dspb::SelectRequest::MergeFrom(from.select());
      break;
    }
    case kScan: {
      mutable_scan()->::dspb::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kSelectFlow: {
      mutable_select_flow()->::dspb::SelectFlowRequest::MergeFrom(from.select_flow());
      break;
    }
    case kKvGet: {
      mutable_kv_get()->::dspb::KvGetRequest::MergeFrom(from.kv_get());
      break;
    }
    case kKvPut: {
      mutable_kv_put()->::dspb::KvPutRequest::MergeFrom(from.kv_put());
      break;
    }
    case kKvDelete: {
      mutable_kv_delete()->::dspb::KvDeleteRequest::MergeFrom(from.kv_delete());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.RangeRequest)
}

void RangeRequest::SharedCtor() {
  header_ = NULL;
  clear_has_req();
  _cached_size_ = 0;
}

RangeRequest::~RangeRequest() {
  // @@protoc_insertion_point(destructor:dspb.RangeRequest)
  SharedDtor();
}

void RangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_req()) {
    clear_req();
  }
}

void RangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeRequest::descriptor() {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeRequest& RangeRequest::default_instance() {
  protobuf_dspb_2fapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeRequest* RangeRequest::New(::google::protobuf::Arena* arena) const {
  RangeRequest* n = new RangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeRequest::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:dspb.RangeRequest)
  switch (req_case()) {
    case kPrepare: {
      delete req_.prepare_;
      break;
    }
    case kDecide: {
      delete req_.decide_;
      break;
    }
    case kClearUp: {
      delete req_.clear_up_;
      break;
    }
    case kGetLockInfo: {
      delete req_.get_lock_info_;
      break;
    }
    case kSelect: {
      delete req_.select_;
      break;
    }
    case kScan: {
      delete req_.scan_;
      break;
    }
    case kSelectFlow: {
      delete req_.select_flow_;
      break;
    }
    case kKvGet: {
      delete req_.kv_get_;
      break;
    }
    case kKvPut: {
      delete req_.kv_put_;
      break;
    }
    case kKvDelete: {
      delete req_.kv_delete_;
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQ_NOT_SET;
}


void RangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_req();
  _internal_metadata_.Clear();
}

bool RangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.RangeRequest.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.PrepareRequest prepare = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.DecideRequest decide = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decide()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ClearupRequest clear_up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetLockInfoRequest get_lock_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_lock_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SelectRequest select = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ScanRequest scan = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SelectFlowRequest select_flow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_flow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvGetRequest kv_get = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvPutRequest kv_put = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvDeleteRequest kv_delete = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RangeRequest)
  return false;
#undef DO_
}

void RangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.RangeRequest.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .dspb.PrepareRequest prepare = 2;
  if (has_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *req_.prepare_, output);
  }

  // .dspb.DecideRequest decide = 3;
  if (has_decide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *req_.decide_, output);
  }

  // .dspb.ClearupRequest clear_up = 4;
  if (has_clear_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *req_.clear_up_, output);
  }

  // .dspb.GetLockInfoRequest get_lock_info = 5;
  if (has_get_lock_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *req_.get_lock_info_, output);
  }

  // .dspb.SelectRequest select = 6;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *req_.select_, output);
  }

  // .dspb.ScanRequest scan = 7;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *req_.scan_, output);
  }

  // .dspb.SelectFlowRequest select_flow = 8;
  if (has_select_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *req_.select_flow_, output);
  }

  // .dspb.KvGetRequest kv_get = 20;
  if (has_kv_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *req_.kv_get_, output);
  }

  // .dspb.KvPutRequest kv_put = 21;
  if (has_kv_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *req_.kv_put_, output);
  }

  // .dspb.KvDeleteRequest kv_delete = 22;
  if (has_kv_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *req_.kv_delete_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RangeRequest)
}

::google::protobuf::uint8* RangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.RangeRequest.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .dspb.PrepareRequest prepare = 2;
  if (has_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *req_.prepare_, deterministic, target);
  }

  // .dspb.DecideRequest decide = 3;
  if (has_decide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *req_.decide_, deterministic, target);
  }

  // .dspb.ClearupRequest clear_up = 4;
  if (has_clear_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *req_.clear_up_, deterministic, target);
  }

  // .dspb.GetLockInfoRequest get_lock_info = 5;
  if (has_get_lock_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *req_.get_lock_info_, deterministic, target);
  }

  // .dspb.SelectRequest select = 6;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *req_.select_, deterministic, target);
  }

  // .dspb.ScanRequest scan = 7;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *req_.scan_, deterministic, target);
  }

  // .dspb.SelectFlowRequest select_flow = 8;
  if (has_select_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *req_.select_flow_, deterministic, target);
  }

  // .dspb.KvGetRequest kv_get = 20;
  if (has_kv_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *req_.kv_get_, deterministic, target);
  }

  // .dspb.KvPutRequest kv_put = 21;
  if (has_kv_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *req_.kv_put_, deterministic, target);
  }

  // .dspb.KvDeleteRequest kv_delete = 22;
  if (has_kv_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *req_.kv_delete_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RangeRequest)
  return target;
}

size_t RangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.RangeRequest.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  switch (req_case()) {
    // .dspb.PrepareRequest prepare = 2;
    case kPrepare: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.prepare_);
      break;
    }
    // .dspb.DecideRequest decide = 3;
    case kDecide: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.decide_);
      break;
    }
    // .dspb.ClearupRequest clear_up = 4;
    case kClearUp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.clear_up_);
      break;
    }
    // .dspb.GetLockInfoRequest get_lock_info = 5;
    case kGetLockInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.get_lock_info_);
      break;
    }
    // .dspb.SelectRequest select = 6;
    case kSelect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.select_);
      break;
    }
    // .dspb.ScanRequest scan = 7;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.scan_);
      break;
    }
    // .dspb.SelectFlowRequest select_flow = 8;
    case kSelectFlow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.select_flow_);
      break;
    }
    // .dspb.KvGetRequest kv_get = 20;
    case kKvGet: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.kv_get_);
      break;
    }
    // .dspb.KvPutRequest kv_put = 21;
    case kKvPut: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.kv_put_);
      break;
    }
    // .dspb.KvDeleteRequest kv_delete = 22;
    case kKvDelete: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.kv_delete_);
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RangeRequest)
    MergeFrom(*source);
  }
}

void RangeRequest::MergeFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::dspb::RangeRequest_Header::MergeFrom(from.header());
  }
  switch (from.req_case()) {
    case kPrepare: {
      mutable_prepare()->::dspb::PrepareRequest::MergeFrom(from.prepare());
      break;
    }
    case kDecide: {
      mutable_decide()->::dspb::DecideRequest::MergeFrom(from.decide());
      break;
    }
    case kClearUp: {
      mutable_clear_up()->::dspb::ClearupRequest::MergeFrom(from.clear_up());
      break;
    }
    case kGetLockInfo: {
      mutable_get_lock_info()->::dspb::GetLockInfoRequest::MergeFrom(from.get_lock_info());
      break;
    }
    case kSelect: {
      mutable_select()->::dspb::SelectRequest::MergeFrom(from.select());
      break;
    }
    case kScan: {
      mutable_scan()->::dspb::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kSelectFlow: {
      mutable_select_flow()->::dspb::SelectFlowRequest::MergeFrom(from.select_flow());
      break;
    }
    case kKvGet: {
      mutable_kv_get()->::dspb::KvGetRequest::MergeFrom(from.kv_get());
      break;
    }
    case kKvPut: {
      mutable_kv_put()->::dspb::KvPutRequest::MergeFrom(from.kv_put());
      break;
    }
    case kKvDelete: {
      mutable_kv_delete()->::dspb::KvDeleteRequest::MergeFrom(from.kv_delete());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
}

void RangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeRequest::CopyFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeRequest::IsInitialized() const {
  return true;
}

void RangeRequest::Swap(RangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeRequest::InternalSwap(RangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeRequest::GetMetadata() const {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeRequest

// .dspb.RangeRequest.Header header = 1;
bool RangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::dspb::RangeRequest_Header& RangeRequest::header() const {
  const ::dspb::RangeRequest_Header* p = header_;
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RangeRequest_Header*>(
      &::dspb::_RangeRequest_Header_default_instance_);
}
::dspb::RangeRequest_Header* RangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::dspb::RangeRequest_Header;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.header)
  return header_;
}
::dspb::RangeRequest_Header* RangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.header)
  
  ::dspb::RangeRequest_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeRequest::set_allocated_header(::dspb::RangeRequest_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.header)
}

// .dspb.PrepareRequest prepare = 2;
bool RangeRequest::has_prepare() const {
  return req_case() == kPrepare;
}
void RangeRequest::set_has_prepare() {
  _oneof_case_[0] = kPrepare;
}
void RangeRequest::clear_prepare() {
  if (has_prepare()) {
    delete req_.prepare_;
    clear_has_req();
  }
}
 const ::dspb::PrepareRequest& RangeRequest::prepare() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.prepare)
  return has_prepare()
      ? *req_.prepare_
      : ::dspb::PrepareRequest::default_instance();
}
::dspb::PrepareRequest* RangeRequest::mutable_prepare() {
  if (!has_prepare()) {
    clear_req();
    set_has_prepare();
    req_.prepare_ = new ::dspb::PrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.prepare)
  return req_.prepare_;
}
::dspb::PrepareRequest* RangeRequest::release_prepare() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.prepare)
  if (has_prepare()) {
    clear_has_req();
    ::dspb::PrepareRequest* temp = req_.prepare_;
    req_.prepare_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_prepare(::dspb::PrepareRequest* prepare) {
  clear_req();
  if (prepare) {
    set_has_prepare();
    req_.prepare_ = prepare;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.prepare)
}

// .dspb.DecideRequest decide = 3;
bool RangeRequest::has_decide() const {
  return req_case() == kDecide;
}
void RangeRequest::set_has_decide() {
  _oneof_case_[0] = kDecide;
}
void RangeRequest::clear_decide() {
  if (has_decide()) {
    delete req_.decide_;
    clear_has_req();
  }
}
 const ::dspb::DecideRequest& RangeRequest::decide() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.decide)
  return has_decide()
      ? *req_.decide_
      : ::dspb::DecideRequest::default_instance();
}
::dspb::DecideRequest* RangeRequest::mutable_decide() {
  if (!has_decide()) {
    clear_req();
    set_has_decide();
    req_.decide_ = new ::dspb::DecideRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.decide)
  return req_.decide_;
}
::dspb::DecideRequest* RangeRequest::release_decide() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.decide)
  if (has_decide()) {
    clear_has_req();
    ::dspb::DecideRequest* temp = req_.decide_;
    req_.decide_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_decide(::dspb::DecideRequest* decide) {
  clear_req();
  if (decide) {
    set_has_decide();
    req_.decide_ = decide;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.decide)
}

// .dspb.ClearupRequest clear_up = 4;
bool RangeRequest::has_clear_up() const {
  return req_case() == kClearUp;
}
void RangeRequest::set_has_clear_up() {
  _oneof_case_[0] = kClearUp;
}
void RangeRequest::clear_clear_up() {
  if (has_clear_up()) {
    delete req_.clear_up_;
    clear_has_req();
  }
}
 const ::dspb::ClearupRequest& RangeRequest::clear_up() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.clear_up)
  return has_clear_up()
      ? *req_.clear_up_
      : ::dspb::ClearupRequest::default_instance();
}
::dspb::ClearupRequest* RangeRequest::mutable_clear_up() {
  if (!has_clear_up()) {
    clear_req();
    set_has_clear_up();
    req_.clear_up_ = new ::dspb::ClearupRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.clear_up)
  return req_.clear_up_;
}
::dspb::ClearupRequest* RangeRequest::release_clear_up() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.clear_up)
  if (has_clear_up()) {
    clear_has_req();
    ::dspb::ClearupRequest* temp = req_.clear_up_;
    req_.clear_up_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_clear_up(::dspb::ClearupRequest* clear_up) {
  clear_req();
  if (clear_up) {
    set_has_clear_up();
    req_.clear_up_ = clear_up;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.clear_up)
}

// .dspb.GetLockInfoRequest get_lock_info = 5;
bool RangeRequest::has_get_lock_info() const {
  return req_case() == kGetLockInfo;
}
void RangeRequest::set_has_get_lock_info() {
  _oneof_case_[0] = kGetLockInfo;
}
void RangeRequest::clear_get_lock_info() {
  if (has_get_lock_info()) {
    delete req_.get_lock_info_;
    clear_has_req();
  }
}
 const ::dspb::GetLockInfoRequest& RangeRequest::get_lock_info() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.get_lock_info)
  return has_get_lock_info()
      ? *req_.get_lock_info_
      : ::dspb::GetLockInfoRequest::default_instance();
}
::dspb::GetLockInfoRequest* RangeRequest::mutable_get_lock_info() {
  if (!has_get_lock_info()) {
    clear_req();
    set_has_get_lock_info();
    req_.get_lock_info_ = new ::dspb::GetLockInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.get_lock_info)
  return req_.get_lock_info_;
}
::dspb::GetLockInfoRequest* RangeRequest::release_get_lock_info() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.get_lock_info)
  if (has_get_lock_info()) {
    clear_has_req();
    ::dspb::GetLockInfoRequest* temp = req_.get_lock_info_;
    req_.get_lock_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_get_lock_info(::dspb::GetLockInfoRequest* get_lock_info) {
  clear_req();
  if (get_lock_info) {
    set_has_get_lock_info();
    req_.get_lock_info_ = get_lock_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.get_lock_info)
}

// .dspb.SelectRequest select = 6;
bool RangeRequest::has_select() const {
  return req_case() == kSelect;
}
void RangeRequest::set_has_select() {
  _oneof_case_[0] = kSelect;
}
void RangeRequest::clear_select() {
  if (has_select()) {
    delete req_.select_;
    clear_has_req();
  }
}
 const ::dspb::SelectRequest& RangeRequest::select() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.select)
  return has_select()
      ? *req_.select_
      : ::dspb::SelectRequest::default_instance();
}
::dspb::SelectRequest* RangeRequest::mutable_select() {
  if (!has_select()) {
    clear_req();
    set_has_select();
    req_.select_ = new ::dspb::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.select)
  return req_.select_;
}
::dspb::SelectRequest* RangeRequest::release_select() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.select)
  if (has_select()) {
    clear_has_req();
    ::dspb::SelectRequest* temp = req_.select_;
    req_.select_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_select(::dspb::SelectRequest* select) {
  clear_req();
  if (select) {
    set_has_select();
    req_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.select)
}

// .dspb.ScanRequest scan = 7;
bool RangeRequest::has_scan() const {
  return req_case() == kScan;
}
void RangeRequest::set_has_scan() {
  _oneof_case_[0] = kScan;
}
void RangeRequest::clear_scan() {
  if (has_scan()) {
    delete req_.scan_;
    clear_has_req();
  }
}
 const ::dspb::ScanRequest& RangeRequest::scan() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.scan)
  return has_scan()
      ? *req_.scan_
      : ::dspb::ScanRequest::default_instance();
}
::dspb::ScanRequest* RangeRequest::mutable_scan() {
  if (!has_scan()) {
    clear_req();
    set_has_scan();
    req_.scan_ = new ::dspb::ScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.scan)
  return req_.scan_;
}
::dspb::ScanRequest* RangeRequest::release_scan() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.scan)
  if (has_scan()) {
    clear_has_req();
    ::dspb::ScanRequest* temp = req_.scan_;
    req_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_scan(::dspb::ScanRequest* scan) {
  clear_req();
  if (scan) {
    set_has_scan();
    req_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.scan)
}

// .dspb.SelectFlowRequest select_flow = 8;
bool RangeRequest::has_select_flow() const {
  return req_case() == kSelectFlow;
}
void RangeRequest::set_has_select_flow() {
  _oneof_case_[0] = kSelectFlow;
}
void RangeRequest::clear_select_flow() {
  if (has_select_flow()) {
    delete req_.select_flow_;
    clear_has_req();
  }
}
 const ::dspb::SelectFlowRequest& RangeRequest::select_flow() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.select_flow)
  return has_select_flow()
      ? *req_.select_flow_
      : ::dspb::SelectFlowRequest::default_instance();
}
::dspb::SelectFlowRequest* RangeRequest::mutable_select_flow() {
  if (!has_select_flow()) {
    clear_req();
    set_has_select_flow();
    req_.select_flow_ = new ::dspb::SelectFlowRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.select_flow)
  return req_.select_flow_;
}
::dspb::SelectFlowRequest* RangeRequest::release_select_flow() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.select_flow)
  if (has_select_flow()) {
    clear_has_req();
    ::dspb::SelectFlowRequest* temp = req_.select_flow_;
    req_.select_flow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_select_flow(::dspb::SelectFlowRequest* select_flow) {
  clear_req();
  if (select_flow) {
    set_has_select_flow();
    req_.select_flow_ = select_flow;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.select_flow)
}

// .dspb.KvGetRequest kv_get = 20;
bool RangeRequest::has_kv_get() const {
  return req_case() == kKvGet;
}
void RangeRequest::set_has_kv_get() {
  _oneof_case_[0] = kKvGet;
}
void RangeRequest::clear_kv_get() {
  if (has_kv_get()) {
    delete req_.kv_get_;
    clear_has_req();
  }
}
 const ::dspb::KvGetRequest& RangeRequest::kv_get() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.kv_get)
  return has_kv_get()
      ? *req_.kv_get_
      : ::dspb::KvGetRequest::default_instance();
}
::dspb::KvGetRequest* RangeRequest::mutable_kv_get() {
  if (!has_kv_get()) {
    clear_req();
    set_has_kv_get();
    req_.kv_get_ = new ::dspb::KvGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.kv_get)
  return req_.kv_get_;
}
::dspb::KvGetRequest* RangeRequest::release_kv_get() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.kv_get)
  if (has_kv_get()) {
    clear_has_req();
    ::dspb::KvGetRequest* temp = req_.kv_get_;
    req_.kv_get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_kv_get(::dspb::KvGetRequest* kv_get) {
  clear_req();
  if (kv_get) {
    set_has_kv_get();
    req_.kv_get_ = kv_get;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.kv_get)
}

// .dspb.KvPutRequest kv_put = 21;
bool RangeRequest::has_kv_put() const {
  return req_case() == kKvPut;
}
void RangeRequest::set_has_kv_put() {
  _oneof_case_[0] = kKvPut;
}
void RangeRequest::clear_kv_put() {
  if (has_kv_put()) {
    delete req_.kv_put_;
    clear_has_req();
  }
}
 const ::dspb::KvPutRequest& RangeRequest::kv_put() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.kv_put)
  return has_kv_put()
      ? *req_.kv_put_
      : ::dspb::KvPutRequest::default_instance();
}
::dspb::KvPutRequest* RangeRequest::mutable_kv_put() {
  if (!has_kv_put()) {
    clear_req();
    set_has_kv_put();
    req_.kv_put_ = new ::dspb::KvPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.kv_put)
  return req_.kv_put_;
}
::dspb::KvPutRequest* RangeRequest::release_kv_put() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.kv_put)
  if (has_kv_put()) {
    clear_has_req();
    ::dspb::KvPutRequest* temp = req_.kv_put_;
    req_.kv_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_kv_put(::dspb::KvPutRequest* kv_put) {
  clear_req();
  if (kv_put) {
    set_has_kv_put();
    req_.kv_put_ = kv_put;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.kv_put)
}

// .dspb.KvDeleteRequest kv_delete = 22;
bool RangeRequest::has_kv_delete() const {
  return req_case() == kKvDelete;
}
void RangeRequest::set_has_kv_delete() {
  _oneof_case_[0] = kKvDelete;
}
void RangeRequest::clear_kv_delete() {
  if (has_kv_delete()) {
    delete req_.kv_delete_;
    clear_has_req();
  }
}
 const ::dspb::KvDeleteRequest& RangeRequest::kv_delete() const {
  // @@protoc_insertion_point(field_get:dspb.RangeRequest.kv_delete)
  return has_kv_delete()
      ? *req_.kv_delete_
      : ::dspb::KvDeleteRequest::default_instance();
}
::dspb::KvDeleteRequest* RangeRequest::mutable_kv_delete() {
  if (!has_kv_delete()) {
    clear_req();
    set_has_kv_delete();
    req_.kv_delete_ = new ::dspb::KvDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeRequest.kv_delete)
  return req_.kv_delete_;
}
::dspb::KvDeleteRequest* RangeRequest::release_kv_delete() {
  // @@protoc_insertion_point(field_release:dspb.RangeRequest.kv_delete)
  if (has_kv_delete()) {
    clear_has_req();
    ::dspb::KvDeleteRequest* temp = req_.kv_delete_;
    req_.kv_delete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeRequest::set_allocated_kv_delete(::dspb::KvDeleteRequest* kv_delete) {
  clear_req();
  if (kv_delete) {
    set_has_kv_delete();
    req_.kv_delete_ = kv_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeRequest.kv_delete)
}

bool RangeRequest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
void RangeRequest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
RangeRequest::ReqCase RangeRequest::req_case() const {
  return RangeRequest::ReqCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeResponse_Header::kClusterIdFieldNumber;
const int RangeResponse_Header::kTraceIdFieldNumber;
const int RangeResponse_Header::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeResponse_Header::RangeResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RangeResponse.Header)
}
RangeResponse_Header::RangeResponse_Header(const RangeResponse_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::dspb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_id_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(trace_id_));
  // @@protoc_insertion_point(copy_constructor:dspb.RangeResponse.Header)
}

void RangeResponse_Header::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(trace_id_));
  _cached_size_ = 0;
}

RangeResponse_Header::~RangeResponse_Header() {
  // @@protoc_insertion_point(destructor:dspb.RangeResponse.Header)
  SharedDtor();
}

void RangeResponse_Header::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void RangeResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeResponse_Header::descriptor() {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeResponse_Header& RangeResponse_Header::default_instance() {
  protobuf_dspb_2fapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeResponse_Header* RangeResponse_Header::New(::google::protobuf::Arena* arena) const {
  RangeResponse_Header* n = new RangeResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RangeResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_id_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(trace_id_));
  _internal_metadata_.Clear();
}

bool RangeResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RangeResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trace_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RangeResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RangeResponse.Header)
  return false;
#undef DO_
}

void RangeResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RangeResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // uint64 trace_id = 2;
  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->trace_id(), output);
  }

  // .dspb.Error error = 3;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RangeResponse.Header)
}

::google::protobuf::uint8* RangeResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RangeResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // uint64 trace_id = 2;
  if (this->trace_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->trace_id(), target);
  }

  // .dspb.Error error = 3;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RangeResponse.Header)
  return target;
}

size_t RangeResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RangeResponse.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.Error error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 trace_id = 2;
  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RangeResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RangeResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RangeResponse.Header)
    MergeFrom(*source);
  }
}

void RangeResponse_Header::MergeFrom(const RangeResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RangeResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::dspb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
}

void RangeResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RangeResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeResponse_Header::CopyFrom(const RangeResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RangeResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeResponse_Header::IsInitialized() const {
  return true;
}

void RangeResponse_Header::Swap(RangeResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeResponse_Header::InternalSwap(RangeResponse_Header* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
  swap(trace_id_, other->trace_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeResponse_Header::GetMetadata() const {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeResponse_Header

// uint64 cluster_id = 1;
void RangeResponse_Header::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeResponse_Header::cluster_id() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.Header.cluster_id)
  return cluster_id_;
}
void RangeResponse_Header::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeResponse.Header.cluster_id)
}

// uint64 trace_id = 2;
void RangeResponse_Header::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeResponse_Header::trace_id() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.Header.trace_id)
  return trace_id_;
}
void RangeResponse_Header::set_trace_id(::google::protobuf::uint64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeResponse.Header.trace_id)
}

// .dspb.Error error = 3;
bool RangeResponse_Header::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void RangeResponse_Header::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::dspb::Error& RangeResponse_Header::error() const {
  const ::dspb::Error* p = error_;
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.Header.error)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Error*>(
      &::dspb::_Error_default_instance_);
}
::dspb::Error* RangeResponse_Header::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::dspb::Error;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.Header.error)
  return error_;
}
::dspb::Error* RangeResponse_Header::release_error() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.Header.error)
  
  ::dspb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void RangeResponse_Header::set_allocated_error(::dspb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.Header.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeResponse::kHeaderFieldNumber;
const int RangeResponse::kPrepareFieldNumber;
const int RangeResponse::kDecideFieldNumber;
const int RangeResponse::kClearUpFieldNumber;
const int RangeResponse::kGetLockInfoFieldNumber;
const int RangeResponse::kSelectFieldNumber;
const int RangeResponse::kScanFieldNumber;
const int RangeResponse::kSelectFlowFieldNumber;
const int RangeResponse::kKvGetFieldNumber;
const int RangeResponse::kKvPutFieldNumber;
const int RangeResponse::kKvDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeResponse::RangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RangeResponse)
}
RangeResponse::RangeResponse(const RangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::dspb::RangeResponse_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_resp();
  switch (from.resp_case()) {
    case kPrepare: {
      mutable_prepare()->::dspb::PrepareResponse::MergeFrom(from.prepare());
      break;
    }
    case kDecide: {
      mutable_decide()->::dspb::DecideResponse::MergeFrom(from.decide());
      break;
    }
    case kClearUp: {
      mutable_clear_up()->::dspb::ClearupResponse::MergeFrom(from.clear_up());
      break;
    }
    case kGetLockInfo: {
      mutable_get_lock_info()->::dspb::GetLockInfoResponse::MergeFrom(from.get_lock_info());
      break;
    }
    case kSelect: {
      mutable_select()->::dspb::SelectResponse::MergeFrom(from.select());
      break;
    }
    case kScan: {
      mutable_scan()->::dspb::ScanResponse::MergeFrom(from.scan());
      break;
    }
    case kSelectFlow: {
      mutable_select_flow()->::dspb::SelectFlowResponse::MergeFrom(from.select_flow());
      break;
    }
    case kKvGet: {
      mutable_kv_get()->::dspb::KvGetResponse::MergeFrom(from.kv_get());
      break;
    }
    case kKvPut: {
      mutable_kv_put()->::dspb::KvPutResponse::MergeFrom(from.kv_put());
      break;
    }
    case kKvDelete: {
      mutable_kv_delete()->::dspb::KvDeleteResponse::MergeFrom(from.kv_delete());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.RangeResponse)
}

void RangeResponse::SharedCtor() {
  header_ = NULL;
  clear_has_resp();
  _cached_size_ = 0;
}

RangeResponse::~RangeResponse() {
  // @@protoc_insertion_point(destructor:dspb.RangeResponse)
  SharedDtor();
}

void RangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_resp()) {
    clear_resp();
  }
}

void RangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeResponse::descriptor() {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeResponse& RangeResponse::default_instance() {
  protobuf_dspb_2fapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeResponse* RangeResponse::New(::google::protobuf::Arena* arena) const {
  RangeResponse* n = new RangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeResponse::clear_resp() {
// @@protoc_insertion_point(one_of_clear_start:dspb.RangeResponse)
  switch (resp_case()) {
    case kPrepare: {
      delete resp_.prepare_;
      break;
    }
    case kDecide: {
      delete resp_.decide_;
      break;
    }
    case kClearUp: {
      delete resp_.clear_up_;
      break;
    }
    case kGetLockInfo: {
      delete resp_.get_lock_info_;
      break;
    }
    case kSelect: {
      delete resp_.select_;
      break;
    }
    case kScan: {
      delete resp_.scan_;
      break;
    }
    case kSelectFlow: {
      delete resp_.select_flow_;
      break;
    }
    case kKvGet: {
      delete resp_.kv_get_;
      break;
    }
    case kKvPut: {
      delete resp_.kv_put_;
      break;
    }
    case kKvDelete: {
      delete resp_.kv_delete_;
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESP_NOT_SET;
}


void RangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_resp();
  _internal_metadata_.Clear();
}

bool RangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.RangeResponse.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.PrepareResponse prepare = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.DecideResponse decide = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decide()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ClearupResponse clear_up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetLockInfoResponse get_lock_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_lock_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SelectResponse select = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ScanResponse scan = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SelectFlowResponse select_flow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_flow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvGetResponse kv_get = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvPutResponse kv_put = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KvDeleteResponse kv_delete = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RangeResponse)
  return false;
#undef DO_
}

void RangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.RangeResponse.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .dspb.PrepareResponse prepare = 2;
  if (has_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *resp_.prepare_, output);
  }

  // .dspb.DecideResponse decide = 3;
  if (has_decide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *resp_.decide_, output);
  }

  // .dspb.ClearupResponse clear_up = 4;
  if (has_clear_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *resp_.clear_up_, output);
  }

  // .dspb.GetLockInfoResponse get_lock_info = 5;
  if (has_get_lock_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *resp_.get_lock_info_, output);
  }

  // .dspb.SelectResponse select = 6;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *resp_.select_, output);
  }

  // .dspb.ScanResponse scan = 7;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *resp_.scan_, output);
  }

  // .dspb.SelectFlowResponse select_flow = 8;
  if (has_select_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *resp_.select_flow_, output);
  }

  // .dspb.KvGetResponse kv_get = 20;
  if (has_kv_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *resp_.kv_get_, output);
  }

  // .dspb.KvPutResponse kv_put = 21;
  if (has_kv_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *resp_.kv_put_, output);
  }

  // .dspb.KvDeleteResponse kv_delete = 22;
  if (has_kv_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *resp_.kv_delete_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RangeResponse)
}

::google::protobuf::uint8* RangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.RangeResponse.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .dspb.PrepareResponse prepare = 2;
  if (has_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *resp_.prepare_, deterministic, target);
  }

  // .dspb.DecideResponse decide = 3;
  if (has_decide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *resp_.decide_, deterministic, target);
  }

  // .dspb.ClearupResponse clear_up = 4;
  if (has_clear_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *resp_.clear_up_, deterministic, target);
  }

  // .dspb.GetLockInfoResponse get_lock_info = 5;
  if (has_get_lock_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *resp_.get_lock_info_, deterministic, target);
  }

  // .dspb.SelectResponse select = 6;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *resp_.select_, deterministic, target);
  }

  // .dspb.ScanResponse scan = 7;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *resp_.scan_, deterministic, target);
  }

  // .dspb.SelectFlowResponse select_flow = 8;
  if (has_select_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *resp_.select_flow_, deterministic, target);
  }

  // .dspb.KvGetResponse kv_get = 20;
  if (has_kv_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *resp_.kv_get_, deterministic, target);
  }

  // .dspb.KvPutResponse kv_put = 21;
  if (has_kv_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *resp_.kv_put_, deterministic, target);
  }

  // .dspb.KvDeleteResponse kv_delete = 22;
  if (has_kv_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *resp_.kv_delete_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RangeResponse)
  return target;
}

size_t RangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.RangeResponse.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  switch (resp_case()) {
    // .dspb.PrepareResponse prepare = 2;
    case kPrepare: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.prepare_);
      break;
    }
    // .dspb.DecideResponse decide = 3;
    case kDecide: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.decide_);
      break;
    }
    // .dspb.ClearupResponse clear_up = 4;
    case kClearUp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.clear_up_);
      break;
    }
    // .dspb.GetLockInfoResponse get_lock_info = 5;
    case kGetLockInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.get_lock_info_);
      break;
    }
    // .dspb.SelectResponse select = 6;
    case kSelect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.select_);
      break;
    }
    // .dspb.ScanResponse scan = 7;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.scan_);
      break;
    }
    // .dspb.SelectFlowResponse select_flow = 8;
    case kSelectFlow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.select_flow_);
      break;
    }
    // .dspb.KvGetResponse kv_get = 20;
    case kKvGet: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.kv_get_);
      break;
    }
    // .dspb.KvPutResponse kv_put = 21;
    case kKvPut: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.kv_put_);
      break;
    }
    // .dspb.KvDeleteResponse kv_delete = 22;
    case kKvDelete: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.kv_delete_);
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RangeResponse)
    MergeFrom(*source);
  }
}

void RangeResponse::MergeFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::dspb::RangeResponse_Header::MergeFrom(from.header());
  }
  switch (from.resp_case()) {
    case kPrepare: {
      mutable_prepare()->::dspb::PrepareResponse::MergeFrom(from.prepare());
      break;
    }
    case kDecide: {
      mutable_decide()->::dspb::DecideResponse::MergeFrom(from.decide());
      break;
    }
    case kClearUp: {
      mutable_clear_up()->::dspb::ClearupResponse::MergeFrom(from.clear_up());
      break;
    }
    case kGetLockInfo: {
      mutable_get_lock_info()->::dspb::GetLockInfoResponse::MergeFrom(from.get_lock_info());
      break;
    }
    case kSelect: {
      mutable_select()->::dspb::SelectResponse::MergeFrom(from.select());
      break;
    }
    case kScan: {
      mutable_scan()->::dspb::ScanResponse::MergeFrom(from.scan());
      break;
    }
    case kSelectFlow: {
      mutable_select_flow()->::dspb::SelectFlowResponse::MergeFrom(from.select_flow());
      break;
    }
    case kKvGet: {
      mutable_kv_get()->::dspb::KvGetResponse::MergeFrom(from.kv_get());
      break;
    }
    case kKvPut: {
      mutable_kv_put()->::dspb::KvPutResponse::MergeFrom(from.kv_put());
      break;
    }
    case kKvDelete: {
      mutable_kv_delete()->::dspb::KvDeleteResponse::MergeFrom(from.kv_delete());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
}

void RangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeResponse::CopyFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeResponse::IsInitialized() const {
  return true;
}

void RangeResponse::Swap(RangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeResponse::InternalSwap(RangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeResponse::GetMetadata() const {
  protobuf_dspb_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeResponse

// .dspb.RangeResponse.Header header = 1;
bool RangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::dspb::RangeResponse_Header& RangeResponse::header() const {
  const ::dspb::RangeResponse_Header* p = header_;
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RangeResponse_Header*>(
      &::dspb::_RangeResponse_Header_default_instance_);
}
::dspb::RangeResponse_Header* RangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::dspb::RangeResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.header)
  return header_;
}
::dspb::RangeResponse_Header* RangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.header)
  
  ::dspb::RangeResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeResponse::set_allocated_header(::dspb::RangeResponse_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.header)
}

// .dspb.PrepareResponse prepare = 2;
bool RangeResponse::has_prepare() const {
  return resp_case() == kPrepare;
}
void RangeResponse::set_has_prepare() {
  _oneof_case_[0] = kPrepare;
}
void RangeResponse::clear_prepare() {
  if (has_prepare()) {
    delete resp_.prepare_;
    clear_has_resp();
  }
}
 const ::dspb::PrepareResponse& RangeResponse::prepare() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.prepare)
  return has_prepare()
      ? *resp_.prepare_
      : ::dspb::PrepareResponse::default_instance();
}
::dspb::PrepareResponse* RangeResponse::mutable_prepare() {
  if (!has_prepare()) {
    clear_resp();
    set_has_prepare();
    resp_.prepare_ = new ::dspb::PrepareResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.prepare)
  return resp_.prepare_;
}
::dspb::PrepareResponse* RangeResponse::release_prepare() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.prepare)
  if (has_prepare()) {
    clear_has_resp();
    ::dspb::PrepareResponse* temp = resp_.prepare_;
    resp_.prepare_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_prepare(::dspb::PrepareResponse* prepare) {
  clear_resp();
  if (prepare) {
    set_has_prepare();
    resp_.prepare_ = prepare;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.prepare)
}

// .dspb.DecideResponse decide = 3;
bool RangeResponse::has_decide() const {
  return resp_case() == kDecide;
}
void RangeResponse::set_has_decide() {
  _oneof_case_[0] = kDecide;
}
void RangeResponse::clear_decide() {
  if (has_decide()) {
    delete resp_.decide_;
    clear_has_resp();
  }
}
 const ::dspb::DecideResponse& RangeResponse::decide() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.decide)
  return has_decide()
      ? *resp_.decide_
      : ::dspb::DecideResponse::default_instance();
}
::dspb::DecideResponse* RangeResponse::mutable_decide() {
  if (!has_decide()) {
    clear_resp();
    set_has_decide();
    resp_.decide_ = new ::dspb::DecideResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.decide)
  return resp_.decide_;
}
::dspb::DecideResponse* RangeResponse::release_decide() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.decide)
  if (has_decide()) {
    clear_has_resp();
    ::dspb::DecideResponse* temp = resp_.decide_;
    resp_.decide_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_decide(::dspb::DecideResponse* decide) {
  clear_resp();
  if (decide) {
    set_has_decide();
    resp_.decide_ = decide;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.decide)
}

// .dspb.ClearupResponse clear_up = 4;
bool RangeResponse::has_clear_up() const {
  return resp_case() == kClearUp;
}
void RangeResponse::set_has_clear_up() {
  _oneof_case_[0] = kClearUp;
}
void RangeResponse::clear_clear_up() {
  if (has_clear_up()) {
    delete resp_.clear_up_;
    clear_has_resp();
  }
}
 const ::dspb::ClearupResponse& RangeResponse::clear_up() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.clear_up)
  return has_clear_up()
      ? *resp_.clear_up_
      : ::dspb::ClearupResponse::default_instance();
}
::dspb::ClearupResponse* RangeResponse::mutable_clear_up() {
  if (!has_clear_up()) {
    clear_resp();
    set_has_clear_up();
    resp_.clear_up_ = new ::dspb::ClearupResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.clear_up)
  return resp_.clear_up_;
}
::dspb::ClearupResponse* RangeResponse::release_clear_up() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.clear_up)
  if (has_clear_up()) {
    clear_has_resp();
    ::dspb::ClearupResponse* temp = resp_.clear_up_;
    resp_.clear_up_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_clear_up(::dspb::ClearupResponse* clear_up) {
  clear_resp();
  if (clear_up) {
    set_has_clear_up();
    resp_.clear_up_ = clear_up;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.clear_up)
}

// .dspb.GetLockInfoResponse get_lock_info = 5;
bool RangeResponse::has_get_lock_info() const {
  return resp_case() == kGetLockInfo;
}
void RangeResponse::set_has_get_lock_info() {
  _oneof_case_[0] = kGetLockInfo;
}
void RangeResponse::clear_get_lock_info() {
  if (has_get_lock_info()) {
    delete resp_.get_lock_info_;
    clear_has_resp();
  }
}
 const ::dspb::GetLockInfoResponse& RangeResponse::get_lock_info() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.get_lock_info)
  return has_get_lock_info()
      ? *resp_.get_lock_info_
      : ::dspb::GetLockInfoResponse::default_instance();
}
::dspb::GetLockInfoResponse* RangeResponse::mutable_get_lock_info() {
  if (!has_get_lock_info()) {
    clear_resp();
    set_has_get_lock_info();
    resp_.get_lock_info_ = new ::dspb::GetLockInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.get_lock_info)
  return resp_.get_lock_info_;
}
::dspb::GetLockInfoResponse* RangeResponse::release_get_lock_info() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.get_lock_info)
  if (has_get_lock_info()) {
    clear_has_resp();
    ::dspb::GetLockInfoResponse* temp = resp_.get_lock_info_;
    resp_.get_lock_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_get_lock_info(::dspb::GetLockInfoResponse* get_lock_info) {
  clear_resp();
  if (get_lock_info) {
    set_has_get_lock_info();
    resp_.get_lock_info_ = get_lock_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.get_lock_info)
}

// .dspb.SelectResponse select = 6;
bool RangeResponse::has_select() const {
  return resp_case() == kSelect;
}
void RangeResponse::set_has_select() {
  _oneof_case_[0] = kSelect;
}
void RangeResponse::clear_select() {
  if (has_select()) {
    delete resp_.select_;
    clear_has_resp();
  }
}
 const ::dspb::SelectResponse& RangeResponse::select() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.select)
  return has_select()
      ? *resp_.select_
      : ::dspb::SelectResponse::default_instance();
}
::dspb::SelectResponse* RangeResponse::mutable_select() {
  if (!has_select()) {
    clear_resp();
    set_has_select();
    resp_.select_ = new ::dspb::SelectResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.select)
  return resp_.select_;
}
::dspb::SelectResponse* RangeResponse::release_select() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.select)
  if (has_select()) {
    clear_has_resp();
    ::dspb::SelectResponse* temp = resp_.select_;
    resp_.select_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_select(::dspb::SelectResponse* select) {
  clear_resp();
  if (select) {
    set_has_select();
    resp_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.select)
}

// .dspb.ScanResponse scan = 7;
bool RangeResponse::has_scan() const {
  return resp_case() == kScan;
}
void RangeResponse::set_has_scan() {
  _oneof_case_[0] = kScan;
}
void RangeResponse::clear_scan() {
  if (has_scan()) {
    delete resp_.scan_;
    clear_has_resp();
  }
}
 const ::dspb::ScanResponse& RangeResponse::scan() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.scan)
  return has_scan()
      ? *resp_.scan_
      : ::dspb::ScanResponse::default_instance();
}
::dspb::ScanResponse* RangeResponse::mutable_scan() {
  if (!has_scan()) {
    clear_resp();
    set_has_scan();
    resp_.scan_ = new ::dspb::ScanResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.scan)
  return resp_.scan_;
}
::dspb::ScanResponse* RangeResponse::release_scan() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.scan)
  if (has_scan()) {
    clear_has_resp();
    ::dspb::ScanResponse* temp = resp_.scan_;
    resp_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_scan(::dspb::ScanResponse* scan) {
  clear_resp();
  if (scan) {
    set_has_scan();
    resp_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.scan)
}

// .dspb.SelectFlowResponse select_flow = 8;
bool RangeResponse::has_select_flow() const {
  return resp_case() == kSelectFlow;
}
void RangeResponse::set_has_select_flow() {
  _oneof_case_[0] = kSelectFlow;
}
void RangeResponse::clear_select_flow() {
  if (has_select_flow()) {
    delete resp_.select_flow_;
    clear_has_resp();
  }
}
 const ::dspb::SelectFlowResponse& RangeResponse::select_flow() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.select_flow)
  return has_select_flow()
      ? *resp_.select_flow_
      : ::dspb::SelectFlowResponse::default_instance();
}
::dspb::SelectFlowResponse* RangeResponse::mutable_select_flow() {
  if (!has_select_flow()) {
    clear_resp();
    set_has_select_flow();
    resp_.select_flow_ = new ::dspb::SelectFlowResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.select_flow)
  return resp_.select_flow_;
}
::dspb::SelectFlowResponse* RangeResponse::release_select_flow() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.select_flow)
  if (has_select_flow()) {
    clear_has_resp();
    ::dspb::SelectFlowResponse* temp = resp_.select_flow_;
    resp_.select_flow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_select_flow(::dspb::SelectFlowResponse* select_flow) {
  clear_resp();
  if (select_flow) {
    set_has_select_flow();
    resp_.select_flow_ = select_flow;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.select_flow)
}

// .dspb.KvGetResponse kv_get = 20;
bool RangeResponse::has_kv_get() const {
  return resp_case() == kKvGet;
}
void RangeResponse::set_has_kv_get() {
  _oneof_case_[0] = kKvGet;
}
void RangeResponse::clear_kv_get() {
  if (has_kv_get()) {
    delete resp_.kv_get_;
    clear_has_resp();
  }
}
 const ::dspb::KvGetResponse& RangeResponse::kv_get() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.kv_get)
  return has_kv_get()
      ? *resp_.kv_get_
      : ::dspb::KvGetResponse::default_instance();
}
::dspb::KvGetResponse* RangeResponse::mutable_kv_get() {
  if (!has_kv_get()) {
    clear_resp();
    set_has_kv_get();
    resp_.kv_get_ = new ::dspb::KvGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.kv_get)
  return resp_.kv_get_;
}
::dspb::KvGetResponse* RangeResponse::release_kv_get() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.kv_get)
  if (has_kv_get()) {
    clear_has_resp();
    ::dspb::KvGetResponse* temp = resp_.kv_get_;
    resp_.kv_get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_kv_get(::dspb::KvGetResponse* kv_get) {
  clear_resp();
  if (kv_get) {
    set_has_kv_get();
    resp_.kv_get_ = kv_get;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.kv_get)
}

// .dspb.KvPutResponse kv_put = 21;
bool RangeResponse::has_kv_put() const {
  return resp_case() == kKvPut;
}
void RangeResponse::set_has_kv_put() {
  _oneof_case_[0] = kKvPut;
}
void RangeResponse::clear_kv_put() {
  if (has_kv_put()) {
    delete resp_.kv_put_;
    clear_has_resp();
  }
}
 const ::dspb::KvPutResponse& RangeResponse::kv_put() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.kv_put)
  return has_kv_put()
      ? *resp_.kv_put_
      : ::dspb::KvPutResponse::default_instance();
}
::dspb::KvPutResponse* RangeResponse::mutable_kv_put() {
  if (!has_kv_put()) {
    clear_resp();
    set_has_kv_put();
    resp_.kv_put_ = new ::dspb::KvPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.kv_put)
  return resp_.kv_put_;
}
::dspb::KvPutResponse* RangeResponse::release_kv_put() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.kv_put)
  if (has_kv_put()) {
    clear_has_resp();
    ::dspb::KvPutResponse* temp = resp_.kv_put_;
    resp_.kv_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_kv_put(::dspb::KvPutResponse* kv_put) {
  clear_resp();
  if (kv_put) {
    set_has_kv_put();
    resp_.kv_put_ = kv_put;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.kv_put)
}

// .dspb.KvDeleteResponse kv_delete = 22;
bool RangeResponse::has_kv_delete() const {
  return resp_case() == kKvDelete;
}
void RangeResponse::set_has_kv_delete() {
  _oneof_case_[0] = kKvDelete;
}
void RangeResponse::clear_kv_delete() {
  if (has_kv_delete()) {
    delete resp_.kv_delete_;
    clear_has_resp();
  }
}
 const ::dspb::KvDeleteResponse& RangeResponse::kv_delete() const {
  // @@protoc_insertion_point(field_get:dspb.RangeResponse.kv_delete)
  return has_kv_delete()
      ? *resp_.kv_delete_
      : ::dspb::KvDeleteResponse::default_instance();
}
::dspb::KvDeleteResponse* RangeResponse::mutable_kv_delete() {
  if (!has_kv_delete()) {
    clear_resp();
    set_has_kv_delete();
    resp_.kv_delete_ = new ::dspb::KvDeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeResponse.kv_delete)
  return resp_.kv_delete_;
}
::dspb::KvDeleteResponse* RangeResponse::release_kv_delete() {
  // @@protoc_insertion_point(field_release:dspb.RangeResponse.kv_delete)
  if (has_kv_delete()) {
    clear_has_resp();
    ::dspb::KvDeleteResponse* temp = resp_.kv_delete_;
    resp_.kv_delete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RangeResponse::set_allocated_kv_delete(::dspb::KvDeleteResponse* kv_delete) {
  clear_resp();
  if (kv_delete) {
    set_has_kv_delete();
    resp_.kv_delete_ = kv_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeResponse.kv_delete)
}

bool RangeResponse::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
void RangeResponse::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
RangeResponse::RespCase RangeResponse::resp_case() const {
  return RangeResponse::RespCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
