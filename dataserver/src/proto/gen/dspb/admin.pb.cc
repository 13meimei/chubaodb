// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class AdminAuthDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AdminAuth>
     _instance;
} _AdminAuth_default_instance_;
class AdminRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AdminRequest>
     _instance;
  const ::dspb::SetConfigRequest* set_cfg_;
  const ::dspb::GetConfigRequest* get_cfg_;
  const ::dspb::GetInfoRequest* get_info_;
  const ::dspb::ForceSplitRequest* force_split_;
  const ::dspb::CompactionRequest* compaction_;
  const ::dspb::ClearQueueRequest* clear_queue_;
  const ::dspb::GetPendingsRequest* get_pendings_;
  const ::dspb::FlushDBRequest* flush_db_;
  const ::dspb::ProfileRequest* profile_;
} _AdminRequest_default_instance_;
class AdminResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AdminResponse>
     _instance;
  const ::dspb::SetConfigResponse* set_cfg_;
  const ::dspb::GetConfigResponse* get_cfg_;
  const ::dspb::GetInfoResponse* get_info_;
  const ::dspb::ForceSplitResponse* force_split_;
  const ::dspb::CompactionResponse* compaction_;
  const ::dspb::ClearQueueResponse* clear_queue_;
  const ::dspb::GetPendingsResponse* get_pendings_;
  const ::dspb::FlushDBResponse* flush_db_;
  const ::dspb::ProfileResponse* profile_;
} _AdminResponse_default_instance_;
class ConfigKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConfigKey>
     _instance;
} _ConfigKey_default_instance_;
class ConfigItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConfigItem>
     _instance;
} _ConfigItem_default_instance_;
class SetConfigRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetConfigRequest>
     _instance;
} _SetConfigRequest_default_instance_;
class SetConfigResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetConfigResponse>
     _instance;
} _SetConfigResponse_default_instance_;
class GetConfigRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetConfigRequest>
     _instance;
} _GetConfigRequest_default_instance_;
class GetConfigResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetConfigResponse>
     _instance;
} _GetConfigResponse_default_instance_;
class GetInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetInfoRequest>
     _instance;
} _GetInfoRequest_default_instance_;
class GetInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetInfoResponse>
     _instance;
} _GetInfoResponse_default_instance_;
class ForceSplitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ForceSplitRequest>
     _instance;
} _ForceSplitRequest_default_instance_;
class ForceSplitResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ForceSplitResponse>
     _instance;
} _ForceSplitResponse_default_instance_;
class CompactionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompactionRequest>
     _instance;
} _CompactionRequest_default_instance_;
class CompactionResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompactionResponse>
     _instance;
} _CompactionResponse_default_instance_;
class ClearQueueRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearQueueRequest>
     _instance;
} _ClearQueueRequest_default_instance_;
class ClearQueueResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearQueueResponse>
     _instance;
} _ClearQueueResponse_default_instance_;
class GetPendingsRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPendingsRequest>
     _instance;
} _GetPendingsRequest_default_instance_;
class GetPendingsResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPendingsResponse>
     _instance;
} _GetPendingsResponse_default_instance_;
class FlushDBRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FlushDBRequest>
     _instance;
} _FlushDBRequest_default_instance_;
class FlushDBResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FlushDBResponse>
     _instance;
} _FlushDBResponse_default_instance_;
class ProfileRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileRequest>
     _instance;
} _ProfileRequest_default_instance_;
class ProfileResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileResponse>
     _instance;
} _ProfileResponse_default_instance_;

namespace protobuf_dspb_2fadmin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminAuth, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminAuth, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminAuth, sign_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, auth_),
  offsetof(AdminRequestDefaultTypeInternal, set_cfg_),
  offsetof(AdminRequestDefaultTypeInternal, get_cfg_),
  offsetof(AdminRequestDefaultTypeInternal, get_info_),
  offsetof(AdminRequestDefaultTypeInternal, force_split_),
  offsetof(AdminRequestDefaultTypeInternal, compaction_),
  offsetof(AdminRequestDefaultTypeInternal, clear_queue_),
  offsetof(AdminRequestDefaultTypeInternal, get_pendings_),
  offsetof(AdminRequestDefaultTypeInternal, flush_db_),
  offsetof(AdminRequestDefaultTypeInternal, profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, error_msg_),
  offsetof(AdminResponseDefaultTypeInternal, set_cfg_),
  offsetof(AdminResponseDefaultTypeInternal, get_cfg_),
  offsetof(AdminResponseDefaultTypeInternal, get_info_),
  offsetof(AdminResponseDefaultTypeInternal, force_split_),
  offsetof(AdminResponseDefaultTypeInternal, compaction_),
  offsetof(AdminResponseDefaultTypeInternal, clear_queue_),
  offsetof(AdminResponseDefaultTypeInternal, get_pendings_),
  offsetof(AdminResponseDefaultTypeInternal, flush_db_),
  offsetof(AdminResponseDefaultTypeInternal, profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigKey, section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigKey, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigItem, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigItem, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigRequest, configs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigResponse, configs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoRequest, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceSplitRequest, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceSplitRequest, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceSplitResponse, split_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionRequest, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionRequest, transaction_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionResponse, begin_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionResponse, end_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearQueueRequest, queue_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearQueueResponse, cleared_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPendingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPendingsRequest, ptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPendingsRequest, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPendingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPendingsResponse, desc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDBRequest, wait_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileRequest, ptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileRequest, output_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileRequest, seconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AdminAuth)},
  { 8, -1, sizeof(AdminRequest)},
  { 24, -1, sizeof(AdminResponse)},
  { 41, -1, sizeof(ConfigKey)},
  { 48, -1, sizeof(ConfigItem)},
  { 55, -1, sizeof(SetConfigRequest)},
  { 61, -1, sizeof(SetConfigResponse)},
  { 66, -1, sizeof(GetConfigRequest)},
  { 72, -1, sizeof(GetConfigResponse)},
  { 78, -1, sizeof(GetInfoRequest)},
  { 84, -1, sizeof(GetInfoResponse)},
  { 90, -1, sizeof(ForceSplitRequest)},
  { 97, -1, sizeof(ForceSplitResponse)},
  { 103, -1, sizeof(CompactionRequest)},
  { 110, -1, sizeof(CompactionResponse)},
  { 117, -1, sizeof(ClearQueueRequest)},
  { 123, -1, sizeof(ClearQueueResponse)},
  { 129, -1, sizeof(GetPendingsRequest)},
  { 136, -1, sizeof(GetPendingsResponse)},
  { 142, -1, sizeof(FlushDBRequest)},
  { 148, -1, sizeof(FlushDBResponse)},
  { 153, -1, sizeof(ProfileRequest)},
  { 161, -1, sizeof(ProfileResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdminAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdminRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdminResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForceSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForceSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearQueueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearQueueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPendingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPendingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlushDBRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlushDBResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/admin.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AdminAuth_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AdminAuth_default_instance_);_AdminRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AdminRequest_default_instance_);_AdminResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AdminResponse_default_instance_);_ConfigKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConfigKey_default_instance_);_ConfigItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConfigItem_default_instance_);_SetConfigRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetConfigRequest_default_instance_);_SetConfigResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetConfigResponse_default_instance_);_GetConfigRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetConfigRequest_default_instance_);_GetConfigResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetConfigResponse_default_instance_);_GetInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetInfoRequest_default_instance_);_GetInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetInfoResponse_default_instance_);_ForceSplitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ForceSplitRequest_default_instance_);_ForceSplitResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ForceSplitResponse_default_instance_);_CompactionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompactionRequest_default_instance_);_CompactionResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompactionResponse_default_instance_);_ClearQueueRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearQueueRequest_default_instance_);_ClearQueueResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearQueueResponse_default_instance_);_GetPendingsRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPendingsRequest_default_instance_);_GetPendingsResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPendingsResponse_default_instance_);_FlushDBRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FlushDBRequest_default_instance_);_FlushDBResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FlushDBResponse_default_instance_);_ProfileRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileRequest_default_instance_);_ProfileResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileResponse_default_instance_);_AdminRequest_default_instance_._instance.get_mutable()->auth_ = const_cast< ::dspb::AdminAuth*>(
      ::dspb::AdminAuth::internal_default_instance());
  _AdminRequest_default_instance_.set_cfg_ = const_cast< ::dspb::SetConfigRequest*>(
      ::dspb::SetConfigRequest::internal_default_instance());
  _AdminRequest_default_instance_.get_cfg_ = const_cast< ::dspb::GetConfigRequest*>(
      ::dspb::GetConfigRequest::internal_default_instance());
  _AdminRequest_default_instance_.get_info_ = const_cast< ::dspb::GetInfoRequest*>(
      ::dspb::GetInfoRequest::internal_default_instance());
  _AdminRequest_default_instance_.force_split_ = const_cast< ::dspb::ForceSplitRequest*>(
      ::dspb::ForceSplitRequest::internal_default_instance());
  _AdminRequest_default_instance_.compaction_ = const_cast< ::dspb::CompactionRequest*>(
      ::dspb::CompactionRequest::internal_default_instance());
  _AdminRequest_default_instance_.clear_queue_ = const_cast< ::dspb::ClearQueueRequest*>(
      ::dspb::ClearQueueRequest::internal_default_instance());
  _AdminRequest_default_instance_.get_pendings_ = const_cast< ::dspb::GetPendingsRequest*>(
      ::dspb::GetPendingsRequest::internal_default_instance());
  _AdminRequest_default_instance_.flush_db_ = const_cast< ::dspb::FlushDBRequest*>(
      ::dspb::FlushDBRequest::internal_default_instance());
  _AdminRequest_default_instance_.profile_ = const_cast< ::dspb::ProfileRequest*>(
      ::dspb::ProfileRequest::internal_default_instance());
  _AdminResponse_default_instance_.set_cfg_ = const_cast< ::dspb::SetConfigResponse*>(
      ::dspb::SetConfigResponse::internal_default_instance());
  _AdminResponse_default_instance_.get_cfg_ = const_cast< ::dspb::GetConfigResponse*>(
      ::dspb::GetConfigResponse::internal_default_instance());
  _AdminResponse_default_instance_.get_info_ = const_cast< ::dspb::GetInfoResponse*>(
      ::dspb::GetInfoResponse::internal_default_instance());
  _AdminResponse_default_instance_.force_split_ = const_cast< ::dspb::ForceSplitResponse*>(
      ::dspb::ForceSplitResponse::internal_default_instance());
  _AdminResponse_default_instance_.compaction_ = const_cast< ::dspb::CompactionResponse*>(
      ::dspb::CompactionResponse::internal_default_instance());
  _AdminResponse_default_instance_.clear_queue_ = const_cast< ::dspb::ClearQueueResponse*>(
      ::dspb::ClearQueueResponse::internal_default_instance());
  _AdminResponse_default_instance_.get_pendings_ = const_cast< ::dspb::GetPendingsResponse*>(
      ::dspb::GetPendingsResponse::internal_default_instance());
  _AdminResponse_default_instance_.flush_db_ = const_cast< ::dspb::FlushDBResponse*>(
      ::dspb::FlushDBResponse::internal_default_instance());
  _AdminResponse_default_instance_.profile_ = const_cast< ::dspb::ProfileResponse*>(
      ::dspb::ProfileResponse::internal_default_instance());
  _ConfigItem_default_instance_._instance.get_mutable()->key_ = const_cast< ::dspb::ConfigKey*>(
      ::dspb::ConfigKey::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020dspb/admin.proto\022\004dspb\"r\n\tAdminAuth\022*\n"
      "\006method\030\001 \001(\0162\032.dspb.AdminAuth.AuthMetho"
      "d\022\r\n\005epoch\030\002 \001(\003\022\014\n\004sign\030\003 \001(\t\"\034\n\nAuthMe"
      "thod\022\016\n\nMD5_DIGEST\020\000\"\310\003\n\014AdminRequest\022\035\n"
      "\004auth\030\001 \001(\0132\017.dspb.AdminAuth\022)\n\007set_cfg\030"
      "\n \001(\0132\026.dspb.SetConfigRequestH\000\022)\n\007get_c"
      "fg\030\013 \001(\0132\026.dspb.GetConfigRequestH\000\022(\n\010ge"
      "t_info\030\014 \001(\0132\024.dspb.GetInfoRequestH\000\022.\n\013"
      "force_split\030\r \001(\0132\027.dspb.ForceSplitReque"
      "stH\000\022-\n\ncompaction\030\016 \001(\0132\027.dspb.Compacti"
      "onRequestH\000\022.\n\013clear_queue\030\017 \001(\0132\027.dspb."
      "ClearQueueRequestH\000\0220\n\014get_pendings\030\020 \001("
      "\0132\030.dspb.GetPendingsRequestH\000\022(\n\010flush_d"
      "b\030\021 \001(\0132\024.dspb.FlushDBRequestH\000\022\'\n\007profi"
      "le\030\022 \001(\0132\024.dspb.ProfileRequestH\000B\005\n\003req\""
      "\325\003\n\rAdminResponse\022\014\n\004code\030\001 \001(\r\022\021\n\terror"
      "_msg\030\002 \001(\t\022*\n\007set_cfg\030\n \001(\0132\027.dspb.SetCo"
      "nfigResponseH\000\022*\n\007get_cfg\030\013 \001(\0132\027.dspb.G"
      "etConfigResponseH\000\022)\n\010get_info\030\014 \001(\0132\025.d"
      "spb.GetInfoResponseH\000\022/\n\013force_split\030\r \001"
      "(\0132\030.dspb.ForceSplitResponseH\000\022.\n\ncompac"
      "tion\030\016 \001(\0132\030.dspb.CompactionResponseH\000\022/"
      "\n\013clear_queue\030\017 \001(\0132\030.dspb.ClearQueueRes"
      "ponseH\000\0221\n\014get_pendings\030\020 \001(\0132\031.dspb.Get"
      "PendingsResponseH\000\022)\n\010flush_db\030\021 \001(\0132\025.d"
      "spb.FlushDBResponseH\000\022(\n\007profile\030\022 \001(\0132\025"
      ".dspb.ProfileResponseH\000B\006\n\004resp\"*\n\tConfi"
      "gKey\022\017\n\007section\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"9\n\nC"
      "onfigItem\022\034\n\003key\030\001 \001(\0132\017.dspb.ConfigKey\022"
      "\r\n\005value\030\002 \001(\t\"5\n\020SetConfigRequest\022!\n\007co"
      "nfigs\030\001 \003(\0132\020.dspb.ConfigItem\"\023\n\021SetConf"
      "igResponse\"0\n\020GetConfigRequest\022\034\n\003key\030\001 "
      "\003(\0132\017.dspb.ConfigKey\"6\n\021GetConfigRespons"
      "e\022!\n\007configs\030\001 \003(\0132\020.dspb.ConfigItem\"\036\n\016"
      "GetInfoRequest\022\014\n\004path\030\001 \001(\t\"\037\n\017GetInfoR"
      "esponse\022\014\n\004data\030\001 \001(\t\"6\n\021ForceSplitReque"
      "st\022\020\n\010range_id\030\001 \001(\004\022\017\n\007version\030\002 \001(\004\"\'\n"
      "\022ForceSplitResponse\022\021\n\tsplit_key\030\001 \001(\014\"="
      "\n\021CompactionRequest\022\020\n\010range_id\030\001 \001(\004\022\026\n"
      "\016transaction_id\030\002 \001(\003\"8\n\022CompactionRespo"
      "nse\022\021\n\tbegin_key\030\001 \001(\014\022\017\n\007end_key\030\002 \001(\014\""
      "\202\001\n\021ClearQueueRequest\0225\n\nqueue_type\030\001 \001("
      "\0162!.dspb.ClearQueueRequest.QueueType\"6\n\t"
      "QueueType\022\007\n\003ALL\020\000\022\017\n\013FAST_WORKER\020\001\022\017\n\013S"
      "LOW_WORKER\020\002\"%\n\022ClearQueueResponse\022\017\n\007cl"
      "eared\030\001 \001(\004\"\254\001\n\022GetPendingsRequest\0223\n\005pt"
      "ype\030\001 \001(\0162$.dspb.GetPendingsRequest.Pend"
      "ingType\022\r\n\005count\030\002 \001(\004\"R\n\013PendingType\022\007\n"
      "\003ALL\020\000\022\n\n\006INSERT\020\001\022\n\n\006SELECT\020\002\022\020\n\014PONIT_"
      "SELECT\020\003\022\020\n\014RANGE_SELECT\020\004\"#\n\023GetPending"
      "sResponse\022\014\n\004desc\030\001 \001(\t\"\036\n\016FlushDBReques"
      "t\022\014\n\004wait\030\001 \001(\010\"\021\n\017FlushDBResponse\"\211\001\n\016P"
      "rofileRequest\022/\n\005ptype\030\001 \001(\0162 .dspb.Prof"
      "ileRequest.ProfileType\022\023\n\013output_path\030\002 "
      "\001(\t\022\017\n\007seconds\030\003 \001(\004\" \n\013ProfileType\022\007\n\003C"
      "PU\020\000\022\010\n\004HEAP\020\001\"\021\n\017ProfileResponseb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/admin.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2fadmin_2eproto

const ::google::protobuf::EnumDescriptor* AdminAuth_AuthMethod_descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_enum_descriptors[0];
}
bool AdminAuth_AuthMethod_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdminAuth_AuthMethod AdminAuth::MD5_DIGEST;
const AdminAuth_AuthMethod AdminAuth::AuthMethod_MIN;
const AdminAuth_AuthMethod AdminAuth::AuthMethod_MAX;
const int AdminAuth::AuthMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ClearQueueRequest_QueueType_descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_enum_descriptors[1];
}
bool ClearQueueRequest_QueueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClearQueueRequest_QueueType ClearQueueRequest::ALL;
const ClearQueueRequest_QueueType ClearQueueRequest::FAST_WORKER;
const ClearQueueRequest_QueueType ClearQueueRequest::SLOW_WORKER;
const ClearQueueRequest_QueueType ClearQueueRequest::QueueType_MIN;
const ClearQueueRequest_QueueType ClearQueueRequest::QueueType_MAX;
const int ClearQueueRequest::QueueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetPendingsRequest_PendingType_descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_enum_descriptors[2];
}
bool GetPendingsRequest_PendingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetPendingsRequest_PendingType GetPendingsRequest::ALL;
const GetPendingsRequest_PendingType GetPendingsRequest::INSERT;
const GetPendingsRequest_PendingType GetPendingsRequest::SELECT;
const GetPendingsRequest_PendingType GetPendingsRequest::PONIT_SELECT;
const GetPendingsRequest_PendingType GetPendingsRequest::RANGE_SELECT;
const GetPendingsRequest_PendingType GetPendingsRequest::PendingType_MIN;
const GetPendingsRequest_PendingType GetPendingsRequest::PendingType_MAX;
const int GetPendingsRequest::PendingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProfileRequest_ProfileType_descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_enum_descriptors[3];
}
bool ProfileRequest_ProfileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfileRequest_ProfileType ProfileRequest::CPU;
const ProfileRequest_ProfileType ProfileRequest::HEAP;
const ProfileRequest_ProfileType ProfileRequest::ProfileType_MIN;
const ProfileRequest_ProfileType ProfileRequest::ProfileType_MAX;
const int ProfileRequest::ProfileType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminAuth::kMethodFieldNumber;
const int AdminAuth::kEpochFieldNumber;
const int AdminAuth::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminAuth::AdminAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.AdminAuth)
}
AdminAuth::AdminAuth(const AdminAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:dspb.AdminAuth)
}

void AdminAuth::SharedCtor() {
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(method_));
  _cached_size_ = 0;
}

AdminAuth::~AdminAuth() {
  // @@protoc_insertion_point(destructor:dspb.AdminAuth)
  SharedDtor();
}

void AdminAuth::SharedDtor() {
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AdminAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminAuth::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdminAuth& AdminAuth::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdminAuth* AdminAuth::New(::google::protobuf::Arena* arena) const {
  AdminAuth* n = new AdminAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.AdminAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(method_));
  _internal_metadata_.Clear();
}

bool AdminAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.AdminAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.AdminAuth.AuthMethod method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::dspb::AdminAuth_AuthMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), static_cast<int>(this->sign().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.AdminAuth.sign"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.AdminAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.AdminAuth)
  return false;
#undef DO_
}

void AdminAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.AdminAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.AdminAuth.AuthMethod method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // int64 epoch = 2;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->epoch(), output);
  }

  // string sign = 3;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.AdminAuth.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.AdminAuth)
}

::google::protobuf::uint8* AdminAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.AdminAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.AdminAuth.AuthMethod method = 1;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // int64 epoch = 2;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->epoch(), target);
  }

  // string sign = 3;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.AdminAuth.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.AdminAuth)
  return target;
}

size_t AdminAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.AdminAuth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sign = 3;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // int64 epoch = 2;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());
  }

  // .dspb.AdminAuth.AuthMethod method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.AdminAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminAuth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.AdminAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.AdminAuth)
    MergeFrom(*source);
  }
}

void AdminAuth::MergeFrom(const AdminAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.AdminAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void AdminAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.AdminAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminAuth::CopyFrom(const AdminAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.AdminAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminAuth::IsInitialized() const {
  return true;
}

void AdminAuth::Swap(AdminAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminAuth::InternalSwap(AdminAuth* other) {
  using std::swap;
  sign_.Swap(&other->sign_);
  swap(epoch_, other->epoch_);
  swap(method_, other->method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminAuth::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminAuth

// .dspb.AdminAuth.AuthMethod method = 1;
void AdminAuth::clear_method() {
  method_ = 0;
}
::dspb::AdminAuth_AuthMethod AdminAuth::method() const {
  // @@protoc_insertion_point(field_get:dspb.AdminAuth.method)
  return static_cast< ::dspb::AdminAuth_AuthMethod >(method_);
}
void AdminAuth::set_method(::dspb::AdminAuth_AuthMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:dspb.AdminAuth.method)
}

// int64 epoch = 2;
void AdminAuth::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AdminAuth::epoch() const {
  // @@protoc_insertion_point(field_get:dspb.AdminAuth.epoch)
  return epoch_;
}
void AdminAuth::set_epoch(::google::protobuf::int64 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dspb.AdminAuth.epoch)
}

// string sign = 3;
void AdminAuth::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AdminAuth::sign() const {
  // @@protoc_insertion_point(field_get:dspb.AdminAuth.sign)
  return sign_.GetNoArena();
}
void AdminAuth::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.AdminAuth.sign)
}
#if LANG_CXX11
void AdminAuth::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.AdminAuth.sign)
}
#endif
void AdminAuth::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.AdminAuth.sign)
}
void AdminAuth::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.AdminAuth.sign)
}
::std::string* AdminAuth::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:dspb.AdminAuth.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AdminAuth::release_sign() {
  // @@protoc_insertion_point(field_release:dspb.AdminAuth.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AdminAuth::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminAuth.sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRequest::kAuthFieldNumber;
const int AdminRequest::kSetCfgFieldNumber;
const int AdminRequest::kGetCfgFieldNumber;
const int AdminRequest::kGetInfoFieldNumber;
const int AdminRequest::kForceSplitFieldNumber;
const int AdminRequest::kCompactionFieldNumber;
const int AdminRequest::kClearQueueFieldNumber;
const int AdminRequest::kGetPendingsFieldNumber;
const int AdminRequest::kFlushDbFieldNumber;
const int AdminRequest::kProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRequest::AdminRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.AdminRequest)
}
AdminRequest::AdminRequest(const AdminRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth()) {
    auth_ = new ::dspb::AdminAuth(*from.auth_);
  } else {
    auth_ = NULL;
  }
  clear_has_req();
  switch (from.req_case()) {
    case kSetCfg: {
      mutable_set_cfg()->::dspb::SetConfigRequest::MergeFrom(from.set_cfg());
      break;
    }
    case kGetCfg: {
      mutable_get_cfg()->::dspb::GetConfigRequest::MergeFrom(from.get_cfg());
      break;
    }
    case kGetInfo: {
      mutable_get_info()->::dspb::GetInfoRequest::MergeFrom(from.get_info());
      break;
    }
    case kForceSplit: {
      mutable_force_split()->::dspb::ForceSplitRequest::MergeFrom(from.force_split());
      break;
    }
    case kCompaction: {
      mutable_compaction()->::dspb::CompactionRequest::MergeFrom(from.compaction());
      break;
    }
    case kClearQueue: {
      mutable_clear_queue()->::dspb::ClearQueueRequest::MergeFrom(from.clear_queue());
      break;
    }
    case kGetPendings: {
      mutable_get_pendings()->::dspb::GetPendingsRequest::MergeFrom(from.get_pendings());
      break;
    }
    case kFlushDb: {
      mutable_flush_db()->::dspb::FlushDBRequest::MergeFrom(from.flush_db());
      break;
    }
    case kProfile: {
      mutable_profile()->::dspb::ProfileRequest::MergeFrom(from.profile());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.AdminRequest)
}

void AdminRequest::SharedCtor() {
  auth_ = NULL;
  clear_has_req();
  _cached_size_ = 0;
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:dspb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != internal_default_instance()) delete auth_;
  if (has_req()) {
    clear_req();
  }
}

void AdminRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdminRequest& AdminRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdminRequest* AdminRequest::New(::google::protobuf::Arena* arena) const {
  AdminRequest* n = new AdminRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminRequest::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:dspb.AdminRequest)
  switch (req_case()) {
    case kSetCfg: {
      delete req_.set_cfg_;
      break;
    }
    case kGetCfg: {
      delete req_.get_cfg_;
      break;
    }
    case kGetInfo: {
      delete req_.get_info_;
      break;
    }
    case kForceSplit: {
      delete req_.force_split_;
      break;
    }
    case kCompaction: {
      delete req_.compaction_;
      break;
    }
    case kClearQueue: {
      delete req_.clear_queue_;
      break;
    }
    case kGetPendings: {
      delete req_.get_pendings_;
      break;
    }
    case kFlushDb: {
      delete req_.flush_db_;
      break;
    }
    case kProfile: {
      delete req_.profile_;
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQ_NOT_SET;
}


void AdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.AdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && auth_ != NULL) {
    delete auth_;
  }
  auth_ = NULL;
  clear_req();
  _internal_metadata_.Clear();
}

bool AdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.AdminRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.AdminAuth auth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SetConfigRequest set_cfg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetConfigRequest get_cfg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetInfoRequest get_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ForceSplitRequest force_split = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.CompactionRequest compaction = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ClearQueueRequest clear_queue = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetPendingsRequest get_pendings = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_pendings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.FlushDBRequest flush_db = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ProfileRequest profile = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.AdminRequest)
  return false;
#undef DO_
}

void AdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.AdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.AdminAuth auth = 1;
  if (this->has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->auth_, output);
  }

  // .dspb.SetConfigRequest set_cfg = 10;
  if (has_set_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *req_.set_cfg_, output);
  }

  // .dspb.GetConfigRequest get_cfg = 11;
  if (has_get_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *req_.get_cfg_, output);
  }

  // .dspb.GetInfoRequest get_info = 12;
  if (has_get_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *req_.get_info_, output);
  }

  // .dspb.ForceSplitRequest force_split = 13;
  if (has_force_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *req_.force_split_, output);
  }

  // .dspb.CompactionRequest compaction = 14;
  if (has_compaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *req_.compaction_, output);
  }

  // .dspb.ClearQueueRequest clear_queue = 15;
  if (has_clear_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *req_.clear_queue_, output);
  }

  // .dspb.GetPendingsRequest get_pendings = 16;
  if (has_get_pendings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *req_.get_pendings_, output);
  }

  // .dspb.FlushDBRequest flush_db = 17;
  if (has_flush_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *req_.flush_db_, output);
  }

  // .dspb.ProfileRequest profile = 18;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *req_.profile_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.AdminRequest)
}

::google::protobuf::uint8* AdminRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.AdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.AdminAuth auth = 1;
  if (this->has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->auth_, deterministic, target);
  }

  // .dspb.SetConfigRequest set_cfg = 10;
  if (has_set_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *req_.set_cfg_, deterministic, target);
  }

  // .dspb.GetConfigRequest get_cfg = 11;
  if (has_get_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *req_.get_cfg_, deterministic, target);
  }

  // .dspb.GetInfoRequest get_info = 12;
  if (has_get_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *req_.get_info_, deterministic, target);
  }

  // .dspb.ForceSplitRequest force_split = 13;
  if (has_force_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *req_.force_split_, deterministic, target);
  }

  // .dspb.CompactionRequest compaction = 14;
  if (has_compaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *req_.compaction_, deterministic, target);
  }

  // .dspb.ClearQueueRequest clear_queue = 15;
  if (has_clear_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *req_.clear_queue_, deterministic, target);
  }

  // .dspb.GetPendingsRequest get_pendings = 16;
  if (has_get_pendings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *req_.get_pendings_, deterministic, target);
  }

  // .dspb.FlushDBRequest flush_db = 17;
  if (has_flush_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *req_.flush_db_, deterministic, target);
  }

  // .dspb.ProfileRequest profile = 18;
  if (has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *req_.profile_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.AdminRequest)
  return target;
}

size_t AdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.AdminRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.AdminAuth auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auth_);
  }

  switch (req_case()) {
    // .dspb.SetConfigRequest set_cfg = 10;
    case kSetCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.set_cfg_);
      break;
    }
    // .dspb.GetConfigRequest get_cfg = 11;
    case kGetCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.get_cfg_);
      break;
    }
    // .dspb.GetInfoRequest get_info = 12;
    case kGetInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.get_info_);
      break;
    }
    // .dspb.ForceSplitRequest force_split = 13;
    case kForceSplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.force_split_);
      break;
    }
    // .dspb.CompactionRequest compaction = 14;
    case kCompaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.compaction_);
      break;
    }
    // .dspb.ClearQueueRequest clear_queue = 15;
    case kClearQueue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.clear_queue_);
      break;
    }
    // .dspb.GetPendingsRequest get_pendings = 16;
    case kGetPendings: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.get_pendings_);
      break;
    }
    // .dspb.FlushDBRequest flush_db = 17;
    case kFlushDb: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.flush_db_);
      break;
    }
    // .dspb.ProfileRequest profile = 18;
    case kProfile: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.profile_);
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.AdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.AdminRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.AdminRequest)
    MergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.AdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth()) {
    mutable_auth()->::dspb::AdminAuth::MergeFrom(from.auth());
  }
  switch (from.req_case()) {
    case kSetCfg: {
      mutable_set_cfg()->::dspb::SetConfigRequest::MergeFrom(from.set_cfg());
      break;
    }
    case kGetCfg: {
      mutable_get_cfg()->::dspb::GetConfigRequest::MergeFrom(from.get_cfg());
      break;
    }
    case kGetInfo: {
      mutable_get_info()->::dspb::GetInfoRequest::MergeFrom(from.get_info());
      break;
    }
    case kForceSplit: {
      mutable_force_split()->::dspb::ForceSplitRequest::MergeFrom(from.force_split());
      break;
    }
    case kCompaction: {
      mutable_compaction()->::dspb::CompactionRequest::MergeFrom(from.compaction());
      break;
    }
    case kClearQueue: {
      mutable_clear_queue()->::dspb::ClearQueueRequest::MergeFrom(from.clear_queue());
      break;
    }
    case kGetPendings: {
      mutable_get_pendings()->::dspb::GetPendingsRequest::MergeFrom(from.get_pendings());
      break;
    }
    case kFlushDb: {
      mutable_flush_db()->::dspb::FlushDBRequest::MergeFrom(from.flush_db());
      break;
    }
    case kProfile: {
      mutable_profile()->::dspb::ProfileRequest::MergeFrom(from.profile());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
}

void AdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRequest::IsInitialized() const {
  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRequest::InternalSwap(AdminRequest* other) {
  using std::swap;
  swap(auth_, other->auth_);
  swap(req_, other->req_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminRequest

// .dspb.AdminAuth auth = 1;
bool AdminRequest::has_auth() const {
  return this != internal_default_instance() && auth_ != NULL;
}
void AdminRequest::clear_auth() {
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) delete auth_;
  auth_ = NULL;
}
const ::dspb::AdminAuth& AdminRequest::auth() const {
  const ::dspb::AdminAuth* p = auth_;
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.auth)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::AdminAuth*>(
      &::dspb::_AdminAuth_default_instance_);
}
::dspb::AdminAuth* AdminRequest::mutable_auth() {
  
  if (auth_ == NULL) {
    auth_ = new ::dspb::AdminAuth;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.auth)
  return auth_;
}
::dspb::AdminAuth* AdminRequest::release_auth() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.auth)
  
  ::dspb::AdminAuth* temp = auth_;
  auth_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_auth(::dspb::AdminAuth* auth) {
  delete auth_;
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.auth)
}

// .dspb.SetConfigRequest set_cfg = 10;
bool AdminRequest::has_set_cfg() const {
  return req_case() == kSetCfg;
}
void AdminRequest::set_has_set_cfg() {
  _oneof_case_[0] = kSetCfg;
}
void AdminRequest::clear_set_cfg() {
  if (has_set_cfg()) {
    delete req_.set_cfg_;
    clear_has_req();
  }
}
 const ::dspb::SetConfigRequest& AdminRequest::set_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.set_cfg)
  return has_set_cfg()
      ? *req_.set_cfg_
      : ::dspb::SetConfigRequest::default_instance();
}
::dspb::SetConfigRequest* AdminRequest::mutable_set_cfg() {
  if (!has_set_cfg()) {
    clear_req();
    set_has_set_cfg();
    req_.set_cfg_ = new ::dspb::SetConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.set_cfg)
  return req_.set_cfg_;
}
::dspb::SetConfigRequest* AdminRequest::release_set_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.set_cfg)
  if (has_set_cfg()) {
    clear_has_req();
    ::dspb::SetConfigRequest* temp = req_.set_cfg_;
    req_.set_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_set_cfg(::dspb::SetConfigRequest* set_cfg) {
  clear_req();
  if (set_cfg) {
    set_has_set_cfg();
    req_.set_cfg_ = set_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.set_cfg)
}

// .dspb.GetConfigRequest get_cfg = 11;
bool AdminRequest::has_get_cfg() const {
  return req_case() == kGetCfg;
}
void AdminRequest::set_has_get_cfg() {
  _oneof_case_[0] = kGetCfg;
}
void AdminRequest::clear_get_cfg() {
  if (has_get_cfg()) {
    delete req_.get_cfg_;
    clear_has_req();
  }
}
 const ::dspb::GetConfigRequest& AdminRequest::get_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.get_cfg)
  return has_get_cfg()
      ? *req_.get_cfg_
      : ::dspb::GetConfigRequest::default_instance();
}
::dspb::GetConfigRequest* AdminRequest::mutable_get_cfg() {
  if (!has_get_cfg()) {
    clear_req();
    set_has_get_cfg();
    req_.get_cfg_ = new ::dspb::GetConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.get_cfg)
  return req_.get_cfg_;
}
::dspb::GetConfigRequest* AdminRequest::release_get_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.get_cfg)
  if (has_get_cfg()) {
    clear_has_req();
    ::dspb::GetConfigRequest* temp = req_.get_cfg_;
    req_.get_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_get_cfg(::dspb::GetConfigRequest* get_cfg) {
  clear_req();
  if (get_cfg) {
    set_has_get_cfg();
    req_.get_cfg_ = get_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.get_cfg)
}

// .dspb.GetInfoRequest get_info = 12;
bool AdminRequest::has_get_info() const {
  return req_case() == kGetInfo;
}
void AdminRequest::set_has_get_info() {
  _oneof_case_[0] = kGetInfo;
}
void AdminRequest::clear_get_info() {
  if (has_get_info()) {
    delete req_.get_info_;
    clear_has_req();
  }
}
 const ::dspb::GetInfoRequest& AdminRequest::get_info() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.get_info)
  return has_get_info()
      ? *req_.get_info_
      : ::dspb::GetInfoRequest::default_instance();
}
::dspb::GetInfoRequest* AdminRequest::mutable_get_info() {
  if (!has_get_info()) {
    clear_req();
    set_has_get_info();
    req_.get_info_ = new ::dspb::GetInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.get_info)
  return req_.get_info_;
}
::dspb::GetInfoRequest* AdminRequest::release_get_info() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.get_info)
  if (has_get_info()) {
    clear_has_req();
    ::dspb::GetInfoRequest* temp = req_.get_info_;
    req_.get_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_get_info(::dspb::GetInfoRequest* get_info) {
  clear_req();
  if (get_info) {
    set_has_get_info();
    req_.get_info_ = get_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.get_info)
}

// .dspb.ForceSplitRequest force_split = 13;
bool AdminRequest::has_force_split() const {
  return req_case() == kForceSplit;
}
void AdminRequest::set_has_force_split() {
  _oneof_case_[0] = kForceSplit;
}
void AdminRequest::clear_force_split() {
  if (has_force_split()) {
    delete req_.force_split_;
    clear_has_req();
  }
}
 const ::dspb::ForceSplitRequest& AdminRequest::force_split() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.force_split)
  return has_force_split()
      ? *req_.force_split_
      : ::dspb::ForceSplitRequest::default_instance();
}
::dspb::ForceSplitRequest* AdminRequest::mutable_force_split() {
  if (!has_force_split()) {
    clear_req();
    set_has_force_split();
    req_.force_split_ = new ::dspb::ForceSplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.force_split)
  return req_.force_split_;
}
::dspb::ForceSplitRequest* AdminRequest::release_force_split() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.force_split)
  if (has_force_split()) {
    clear_has_req();
    ::dspb::ForceSplitRequest* temp = req_.force_split_;
    req_.force_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_force_split(::dspb::ForceSplitRequest* force_split) {
  clear_req();
  if (force_split) {
    set_has_force_split();
    req_.force_split_ = force_split;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.force_split)
}

// .dspb.CompactionRequest compaction = 14;
bool AdminRequest::has_compaction() const {
  return req_case() == kCompaction;
}
void AdminRequest::set_has_compaction() {
  _oneof_case_[0] = kCompaction;
}
void AdminRequest::clear_compaction() {
  if (has_compaction()) {
    delete req_.compaction_;
    clear_has_req();
  }
}
 const ::dspb::CompactionRequest& AdminRequest::compaction() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.compaction)
  return has_compaction()
      ? *req_.compaction_
      : ::dspb::CompactionRequest::default_instance();
}
::dspb::CompactionRequest* AdminRequest::mutable_compaction() {
  if (!has_compaction()) {
    clear_req();
    set_has_compaction();
    req_.compaction_ = new ::dspb::CompactionRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.compaction)
  return req_.compaction_;
}
::dspb::CompactionRequest* AdminRequest::release_compaction() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.compaction)
  if (has_compaction()) {
    clear_has_req();
    ::dspb::CompactionRequest* temp = req_.compaction_;
    req_.compaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_compaction(::dspb::CompactionRequest* compaction) {
  clear_req();
  if (compaction) {
    set_has_compaction();
    req_.compaction_ = compaction;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.compaction)
}

// .dspb.ClearQueueRequest clear_queue = 15;
bool AdminRequest::has_clear_queue() const {
  return req_case() == kClearQueue;
}
void AdminRequest::set_has_clear_queue() {
  _oneof_case_[0] = kClearQueue;
}
void AdminRequest::clear_clear_queue() {
  if (has_clear_queue()) {
    delete req_.clear_queue_;
    clear_has_req();
  }
}
 const ::dspb::ClearQueueRequest& AdminRequest::clear_queue() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.clear_queue)
  return has_clear_queue()
      ? *req_.clear_queue_
      : ::dspb::ClearQueueRequest::default_instance();
}
::dspb::ClearQueueRequest* AdminRequest::mutable_clear_queue() {
  if (!has_clear_queue()) {
    clear_req();
    set_has_clear_queue();
    req_.clear_queue_ = new ::dspb::ClearQueueRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.clear_queue)
  return req_.clear_queue_;
}
::dspb::ClearQueueRequest* AdminRequest::release_clear_queue() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.clear_queue)
  if (has_clear_queue()) {
    clear_has_req();
    ::dspb::ClearQueueRequest* temp = req_.clear_queue_;
    req_.clear_queue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_clear_queue(::dspb::ClearQueueRequest* clear_queue) {
  clear_req();
  if (clear_queue) {
    set_has_clear_queue();
    req_.clear_queue_ = clear_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.clear_queue)
}

// .dspb.GetPendingsRequest get_pendings = 16;
bool AdminRequest::has_get_pendings() const {
  return req_case() == kGetPendings;
}
void AdminRequest::set_has_get_pendings() {
  _oneof_case_[0] = kGetPendings;
}
void AdminRequest::clear_get_pendings() {
  if (has_get_pendings()) {
    delete req_.get_pendings_;
    clear_has_req();
  }
}
 const ::dspb::GetPendingsRequest& AdminRequest::get_pendings() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.get_pendings)
  return has_get_pendings()
      ? *req_.get_pendings_
      : ::dspb::GetPendingsRequest::default_instance();
}
::dspb::GetPendingsRequest* AdminRequest::mutable_get_pendings() {
  if (!has_get_pendings()) {
    clear_req();
    set_has_get_pendings();
    req_.get_pendings_ = new ::dspb::GetPendingsRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.get_pendings)
  return req_.get_pendings_;
}
::dspb::GetPendingsRequest* AdminRequest::release_get_pendings() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.get_pendings)
  if (has_get_pendings()) {
    clear_has_req();
    ::dspb::GetPendingsRequest* temp = req_.get_pendings_;
    req_.get_pendings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_get_pendings(::dspb::GetPendingsRequest* get_pendings) {
  clear_req();
  if (get_pendings) {
    set_has_get_pendings();
    req_.get_pendings_ = get_pendings;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.get_pendings)
}

// .dspb.FlushDBRequest flush_db = 17;
bool AdminRequest::has_flush_db() const {
  return req_case() == kFlushDb;
}
void AdminRequest::set_has_flush_db() {
  _oneof_case_[0] = kFlushDb;
}
void AdminRequest::clear_flush_db() {
  if (has_flush_db()) {
    delete req_.flush_db_;
    clear_has_req();
  }
}
 const ::dspb::FlushDBRequest& AdminRequest::flush_db() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.flush_db)
  return has_flush_db()
      ? *req_.flush_db_
      : ::dspb::FlushDBRequest::default_instance();
}
::dspb::FlushDBRequest* AdminRequest::mutable_flush_db() {
  if (!has_flush_db()) {
    clear_req();
    set_has_flush_db();
    req_.flush_db_ = new ::dspb::FlushDBRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.flush_db)
  return req_.flush_db_;
}
::dspb::FlushDBRequest* AdminRequest::release_flush_db() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.flush_db)
  if (has_flush_db()) {
    clear_has_req();
    ::dspb::FlushDBRequest* temp = req_.flush_db_;
    req_.flush_db_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_flush_db(::dspb::FlushDBRequest* flush_db) {
  clear_req();
  if (flush_db) {
    set_has_flush_db();
    req_.flush_db_ = flush_db;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.flush_db)
}

// .dspb.ProfileRequest profile = 18;
bool AdminRequest::has_profile() const {
  return req_case() == kProfile;
}
void AdminRequest::set_has_profile() {
  _oneof_case_[0] = kProfile;
}
void AdminRequest::clear_profile() {
  if (has_profile()) {
    delete req_.profile_;
    clear_has_req();
  }
}
 const ::dspb::ProfileRequest& AdminRequest::profile() const {
  // @@protoc_insertion_point(field_get:dspb.AdminRequest.profile)
  return has_profile()
      ? *req_.profile_
      : ::dspb::ProfileRequest::default_instance();
}
::dspb::ProfileRequest* AdminRequest::mutable_profile() {
  if (!has_profile()) {
    clear_req();
    set_has_profile();
    req_.profile_ = new ::dspb::ProfileRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminRequest.profile)
  return req_.profile_;
}
::dspb::ProfileRequest* AdminRequest::release_profile() {
  // @@protoc_insertion_point(field_release:dspb.AdminRequest.profile)
  if (has_profile()) {
    clear_has_req();
    ::dspb::ProfileRequest* temp = req_.profile_;
    req_.profile_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminRequest::set_allocated_profile(::dspb::ProfileRequest* profile) {
  clear_req();
  if (profile) {
    set_has_profile();
    req_.profile_ = profile;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminRequest.profile)
}

bool AdminRequest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
void AdminRequest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
AdminRequest::ReqCase AdminRequest::req_case() const {
  return AdminRequest::ReqCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminResponse::kCodeFieldNumber;
const int AdminResponse::kErrorMsgFieldNumber;
const int AdminResponse::kSetCfgFieldNumber;
const int AdminResponse::kGetCfgFieldNumber;
const int AdminResponse::kGetInfoFieldNumber;
const int AdminResponse::kForceSplitFieldNumber;
const int AdminResponse::kCompactionFieldNumber;
const int AdminResponse::kClearQueueFieldNumber;
const int AdminResponse::kGetPendingsFieldNumber;
const int AdminResponse::kFlushDbFieldNumber;
const int AdminResponse::kProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminResponse::AdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.AdminResponse)
}
AdminResponse::AdminResponse(const AdminResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  code_ = from.code_;
  clear_has_resp();
  switch (from.resp_case()) {
    case kSetCfg: {
      mutable_set_cfg()->::dspb::SetConfigResponse::MergeFrom(from.set_cfg());
      break;
    }
    case kGetCfg: {
      mutable_get_cfg()->::dspb::GetConfigResponse::MergeFrom(from.get_cfg());
      break;
    }
    case kGetInfo: {
      mutable_get_info()->::dspb::GetInfoResponse::MergeFrom(from.get_info());
      break;
    }
    case kForceSplit: {
      mutable_force_split()->::dspb::ForceSplitResponse::MergeFrom(from.force_split());
      break;
    }
    case kCompaction: {
      mutable_compaction()->::dspb::CompactionResponse::MergeFrom(from.compaction());
      break;
    }
    case kClearQueue: {
      mutable_clear_queue()->::dspb::ClearQueueResponse::MergeFrom(from.clear_queue());
      break;
    }
    case kGetPendings: {
      mutable_get_pendings()->::dspb::GetPendingsResponse::MergeFrom(from.get_pendings());
      break;
    }
    case kFlushDb: {
      mutable_flush_db()->::dspb::FlushDBResponse::MergeFrom(from.flush_db());
      break;
    }
    case kProfile: {
      mutable_profile()->::dspb::ProfileResponse::MergeFrom(from.profile());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.AdminResponse)
}

void AdminResponse::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  clear_has_resp();
  _cached_size_ = 0;
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:dspb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_resp()) {
    clear_resp();
  }
}

void AdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdminResponse& AdminResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdminResponse* AdminResponse::New(::google::protobuf::Arena* arena) const {
  AdminResponse* n = new AdminResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminResponse::clear_resp() {
// @@protoc_insertion_point(one_of_clear_start:dspb.AdminResponse)
  switch (resp_case()) {
    case kSetCfg: {
      delete resp_.set_cfg_;
      break;
    }
    case kGetCfg: {
      delete resp_.get_cfg_;
      break;
    }
    case kGetInfo: {
      delete resp_.get_info_;
      break;
    }
    case kForceSplit: {
      delete resp_.force_split_;
      break;
    }
    case kCompaction: {
      delete resp_.compaction_;
      break;
    }
    case kClearQueue: {
      delete resp_.clear_queue_;
      break;
    }
    case kGetPendings: {
      delete resp_.get_pendings_;
      break;
    }
    case kFlushDb: {
      delete resp_.flush_db_;
      break;
    }
    case kProfile: {
      delete resp_.profile_;
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESP_NOT_SET;
}


void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.AdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  clear_resp();
  _internal_metadata_.Clear();
}

bool AdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.AdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.AdminResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.SetConfigResponse set_cfg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetConfigResponse get_cfg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetInfoResponse get_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ForceSplitResponse force_split = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.CompactionResponse compaction = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ClearQueueResponse clear_queue = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetPendingsResponse get_pendings = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_pendings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.FlushDBResponse flush_db = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ProfileResponse profile = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.AdminResponse)
  return false;
#undef DO_
}

void AdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.AdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.AdminResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // .dspb.SetConfigResponse set_cfg = 10;
  if (has_set_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *resp_.set_cfg_, output);
  }

  // .dspb.GetConfigResponse get_cfg = 11;
  if (has_get_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *resp_.get_cfg_, output);
  }

  // .dspb.GetInfoResponse get_info = 12;
  if (has_get_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *resp_.get_info_, output);
  }

  // .dspb.ForceSplitResponse force_split = 13;
  if (has_force_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *resp_.force_split_, output);
  }

  // .dspb.CompactionResponse compaction = 14;
  if (has_compaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *resp_.compaction_, output);
  }

  // .dspb.ClearQueueResponse clear_queue = 15;
  if (has_clear_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *resp_.clear_queue_, output);
  }

  // .dspb.GetPendingsResponse get_pendings = 16;
  if (has_get_pendings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *resp_.get_pendings_, output);
  }

  // .dspb.FlushDBResponse flush_db = 17;
  if (has_flush_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *resp_.flush_db_, output);
  }

  // .dspb.ProfileResponse profile = 18;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *resp_.profile_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.AdminResponse)
}

::google::protobuf::uint8* AdminResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.AdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.AdminResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // .dspb.SetConfigResponse set_cfg = 10;
  if (has_set_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *resp_.set_cfg_, deterministic, target);
  }

  // .dspb.GetConfigResponse get_cfg = 11;
  if (has_get_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *resp_.get_cfg_, deterministic, target);
  }

  // .dspb.GetInfoResponse get_info = 12;
  if (has_get_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *resp_.get_info_, deterministic, target);
  }

  // .dspb.ForceSplitResponse force_split = 13;
  if (has_force_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *resp_.force_split_, deterministic, target);
  }

  // .dspb.CompactionResponse compaction = 14;
  if (has_compaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *resp_.compaction_, deterministic, target);
  }

  // .dspb.ClearQueueResponse clear_queue = 15;
  if (has_clear_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *resp_.clear_queue_, deterministic, target);
  }

  // .dspb.GetPendingsResponse get_pendings = 16;
  if (has_get_pendings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *resp_.get_pendings_, deterministic, target);
  }

  // .dspb.FlushDBResponse flush_db = 17;
  if (has_flush_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *resp_.flush_db_, deterministic, target);
  }

  // .dspb.ProfileResponse profile = 18;
  if (has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *resp_.profile_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.AdminResponse)
  return target;
}

size_t AdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.AdminResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  switch (resp_case()) {
    // .dspb.SetConfigResponse set_cfg = 10;
    case kSetCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.set_cfg_);
      break;
    }
    // .dspb.GetConfigResponse get_cfg = 11;
    case kGetCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.get_cfg_);
      break;
    }
    // .dspb.GetInfoResponse get_info = 12;
    case kGetInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.get_info_);
      break;
    }
    // .dspb.ForceSplitResponse force_split = 13;
    case kForceSplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.force_split_);
      break;
    }
    // .dspb.CompactionResponse compaction = 14;
    case kCompaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.compaction_);
      break;
    }
    // .dspb.ClearQueueResponse clear_queue = 15;
    case kClearQueue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.clear_queue_);
      break;
    }
    // .dspb.GetPendingsResponse get_pendings = 16;
    case kGetPendings: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.get_pendings_);
      break;
    }
    // .dspb.FlushDBResponse flush_db = 17;
    case kFlushDb: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.flush_db_);
      break;
    }
    // .dspb.ProfileResponse profile = 18;
    case kProfile: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.profile_);
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.AdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.AdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.AdminResponse)
    MergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.AdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  switch (from.resp_case()) {
    case kSetCfg: {
      mutable_set_cfg()->::dspb::SetConfigResponse::MergeFrom(from.set_cfg());
      break;
    }
    case kGetCfg: {
      mutable_get_cfg()->::dspb::GetConfigResponse::MergeFrom(from.get_cfg());
      break;
    }
    case kGetInfo: {
      mutable_get_info()->::dspb::GetInfoResponse::MergeFrom(from.get_info());
      break;
    }
    case kForceSplit: {
      mutable_force_split()->::dspb::ForceSplitResponse::MergeFrom(from.force_split());
      break;
    }
    case kCompaction: {
      mutable_compaction()->::dspb::CompactionResponse::MergeFrom(from.compaction());
      break;
    }
    case kClearQueue: {
      mutable_clear_queue()->::dspb::ClearQueueResponse::MergeFrom(from.clear_queue());
      break;
    }
    case kGetPendings: {
      mutable_get_pendings()->::dspb::GetPendingsResponse::MergeFrom(from.get_pendings());
      break;
    }
    case kFlushDb: {
      mutable_flush_db()->::dspb::FlushDBResponse::MergeFrom(from.flush_db());
      break;
    }
    case kProfile: {
      mutable_profile()->::dspb::ProfileResponse::MergeFrom(from.profile());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
}

void AdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResponse::IsInitialized() const {
  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminResponse::InternalSwap(AdminResponse* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_);
  swap(code_, other->code_);
  swap(resp_, other->resp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminResponse

// uint32 code = 1;
void AdminResponse::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 AdminResponse::code() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.code)
  return code_;
}
void AdminResponse::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:dspb.AdminResponse.code)
}

// string error_msg = 2;
void AdminResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AdminResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.error_msg)
  return error_msg_.GetNoArena();
}
void AdminResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.AdminResponse.error_msg)
}
#if LANG_CXX11
void AdminResponse::set_error_msg(::std::string&& value) {
  
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.AdminResponse.error_msg)
}
#endif
void AdminResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.AdminResponse.error_msg)
}
void AdminResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.AdminResponse.error_msg)
}
::std::string* AdminResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AdminResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AdminResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.error_msg)
}

// .dspb.SetConfigResponse set_cfg = 10;
bool AdminResponse::has_set_cfg() const {
  return resp_case() == kSetCfg;
}
void AdminResponse::set_has_set_cfg() {
  _oneof_case_[0] = kSetCfg;
}
void AdminResponse::clear_set_cfg() {
  if (has_set_cfg()) {
    delete resp_.set_cfg_;
    clear_has_resp();
  }
}
 const ::dspb::SetConfigResponse& AdminResponse::set_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.set_cfg)
  return has_set_cfg()
      ? *resp_.set_cfg_
      : ::dspb::SetConfigResponse::default_instance();
}
::dspb::SetConfigResponse* AdminResponse::mutable_set_cfg() {
  if (!has_set_cfg()) {
    clear_resp();
    set_has_set_cfg();
    resp_.set_cfg_ = new ::dspb::SetConfigResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.set_cfg)
  return resp_.set_cfg_;
}
::dspb::SetConfigResponse* AdminResponse::release_set_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.set_cfg)
  if (has_set_cfg()) {
    clear_has_resp();
    ::dspb::SetConfigResponse* temp = resp_.set_cfg_;
    resp_.set_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_set_cfg(::dspb::SetConfigResponse* set_cfg) {
  clear_resp();
  if (set_cfg) {
    set_has_set_cfg();
    resp_.set_cfg_ = set_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.set_cfg)
}

// .dspb.GetConfigResponse get_cfg = 11;
bool AdminResponse::has_get_cfg() const {
  return resp_case() == kGetCfg;
}
void AdminResponse::set_has_get_cfg() {
  _oneof_case_[0] = kGetCfg;
}
void AdminResponse::clear_get_cfg() {
  if (has_get_cfg()) {
    delete resp_.get_cfg_;
    clear_has_resp();
  }
}
 const ::dspb::GetConfigResponse& AdminResponse::get_cfg() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.get_cfg)
  return has_get_cfg()
      ? *resp_.get_cfg_
      : ::dspb::GetConfigResponse::default_instance();
}
::dspb::GetConfigResponse* AdminResponse::mutable_get_cfg() {
  if (!has_get_cfg()) {
    clear_resp();
    set_has_get_cfg();
    resp_.get_cfg_ = new ::dspb::GetConfigResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.get_cfg)
  return resp_.get_cfg_;
}
::dspb::GetConfigResponse* AdminResponse::release_get_cfg() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.get_cfg)
  if (has_get_cfg()) {
    clear_has_resp();
    ::dspb::GetConfigResponse* temp = resp_.get_cfg_;
    resp_.get_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_get_cfg(::dspb::GetConfigResponse* get_cfg) {
  clear_resp();
  if (get_cfg) {
    set_has_get_cfg();
    resp_.get_cfg_ = get_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.get_cfg)
}

// .dspb.GetInfoResponse get_info = 12;
bool AdminResponse::has_get_info() const {
  return resp_case() == kGetInfo;
}
void AdminResponse::set_has_get_info() {
  _oneof_case_[0] = kGetInfo;
}
void AdminResponse::clear_get_info() {
  if (has_get_info()) {
    delete resp_.get_info_;
    clear_has_resp();
  }
}
 const ::dspb::GetInfoResponse& AdminResponse::get_info() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.get_info)
  return has_get_info()
      ? *resp_.get_info_
      : ::dspb::GetInfoResponse::default_instance();
}
::dspb::GetInfoResponse* AdminResponse::mutable_get_info() {
  if (!has_get_info()) {
    clear_resp();
    set_has_get_info();
    resp_.get_info_ = new ::dspb::GetInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.get_info)
  return resp_.get_info_;
}
::dspb::GetInfoResponse* AdminResponse::release_get_info() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.get_info)
  if (has_get_info()) {
    clear_has_resp();
    ::dspb::GetInfoResponse* temp = resp_.get_info_;
    resp_.get_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_get_info(::dspb::GetInfoResponse* get_info) {
  clear_resp();
  if (get_info) {
    set_has_get_info();
    resp_.get_info_ = get_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.get_info)
}

// .dspb.ForceSplitResponse force_split = 13;
bool AdminResponse::has_force_split() const {
  return resp_case() == kForceSplit;
}
void AdminResponse::set_has_force_split() {
  _oneof_case_[0] = kForceSplit;
}
void AdminResponse::clear_force_split() {
  if (has_force_split()) {
    delete resp_.force_split_;
    clear_has_resp();
  }
}
 const ::dspb::ForceSplitResponse& AdminResponse::force_split() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.force_split)
  return has_force_split()
      ? *resp_.force_split_
      : ::dspb::ForceSplitResponse::default_instance();
}
::dspb::ForceSplitResponse* AdminResponse::mutable_force_split() {
  if (!has_force_split()) {
    clear_resp();
    set_has_force_split();
    resp_.force_split_ = new ::dspb::ForceSplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.force_split)
  return resp_.force_split_;
}
::dspb::ForceSplitResponse* AdminResponse::release_force_split() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.force_split)
  if (has_force_split()) {
    clear_has_resp();
    ::dspb::ForceSplitResponse* temp = resp_.force_split_;
    resp_.force_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_force_split(::dspb::ForceSplitResponse* force_split) {
  clear_resp();
  if (force_split) {
    set_has_force_split();
    resp_.force_split_ = force_split;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.force_split)
}

// .dspb.CompactionResponse compaction = 14;
bool AdminResponse::has_compaction() const {
  return resp_case() == kCompaction;
}
void AdminResponse::set_has_compaction() {
  _oneof_case_[0] = kCompaction;
}
void AdminResponse::clear_compaction() {
  if (has_compaction()) {
    delete resp_.compaction_;
    clear_has_resp();
  }
}
 const ::dspb::CompactionResponse& AdminResponse::compaction() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.compaction)
  return has_compaction()
      ? *resp_.compaction_
      : ::dspb::CompactionResponse::default_instance();
}
::dspb::CompactionResponse* AdminResponse::mutable_compaction() {
  if (!has_compaction()) {
    clear_resp();
    set_has_compaction();
    resp_.compaction_ = new ::dspb::CompactionResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.compaction)
  return resp_.compaction_;
}
::dspb::CompactionResponse* AdminResponse::release_compaction() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.compaction)
  if (has_compaction()) {
    clear_has_resp();
    ::dspb::CompactionResponse* temp = resp_.compaction_;
    resp_.compaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_compaction(::dspb::CompactionResponse* compaction) {
  clear_resp();
  if (compaction) {
    set_has_compaction();
    resp_.compaction_ = compaction;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.compaction)
}

// .dspb.ClearQueueResponse clear_queue = 15;
bool AdminResponse::has_clear_queue() const {
  return resp_case() == kClearQueue;
}
void AdminResponse::set_has_clear_queue() {
  _oneof_case_[0] = kClearQueue;
}
void AdminResponse::clear_clear_queue() {
  if (has_clear_queue()) {
    delete resp_.clear_queue_;
    clear_has_resp();
  }
}
 const ::dspb::ClearQueueResponse& AdminResponse::clear_queue() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.clear_queue)
  return has_clear_queue()
      ? *resp_.clear_queue_
      : ::dspb::ClearQueueResponse::default_instance();
}
::dspb::ClearQueueResponse* AdminResponse::mutable_clear_queue() {
  if (!has_clear_queue()) {
    clear_resp();
    set_has_clear_queue();
    resp_.clear_queue_ = new ::dspb::ClearQueueResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.clear_queue)
  return resp_.clear_queue_;
}
::dspb::ClearQueueResponse* AdminResponse::release_clear_queue() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.clear_queue)
  if (has_clear_queue()) {
    clear_has_resp();
    ::dspb::ClearQueueResponse* temp = resp_.clear_queue_;
    resp_.clear_queue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_clear_queue(::dspb::ClearQueueResponse* clear_queue) {
  clear_resp();
  if (clear_queue) {
    set_has_clear_queue();
    resp_.clear_queue_ = clear_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.clear_queue)
}

// .dspb.GetPendingsResponse get_pendings = 16;
bool AdminResponse::has_get_pendings() const {
  return resp_case() == kGetPendings;
}
void AdminResponse::set_has_get_pendings() {
  _oneof_case_[0] = kGetPendings;
}
void AdminResponse::clear_get_pendings() {
  if (has_get_pendings()) {
    delete resp_.get_pendings_;
    clear_has_resp();
  }
}
 const ::dspb::GetPendingsResponse& AdminResponse::get_pendings() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.get_pendings)
  return has_get_pendings()
      ? *resp_.get_pendings_
      : ::dspb::GetPendingsResponse::default_instance();
}
::dspb::GetPendingsResponse* AdminResponse::mutable_get_pendings() {
  if (!has_get_pendings()) {
    clear_resp();
    set_has_get_pendings();
    resp_.get_pendings_ = new ::dspb::GetPendingsResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.get_pendings)
  return resp_.get_pendings_;
}
::dspb::GetPendingsResponse* AdminResponse::release_get_pendings() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.get_pendings)
  if (has_get_pendings()) {
    clear_has_resp();
    ::dspb::GetPendingsResponse* temp = resp_.get_pendings_;
    resp_.get_pendings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_get_pendings(::dspb::GetPendingsResponse* get_pendings) {
  clear_resp();
  if (get_pendings) {
    set_has_get_pendings();
    resp_.get_pendings_ = get_pendings;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.get_pendings)
}

// .dspb.FlushDBResponse flush_db = 17;
bool AdminResponse::has_flush_db() const {
  return resp_case() == kFlushDb;
}
void AdminResponse::set_has_flush_db() {
  _oneof_case_[0] = kFlushDb;
}
void AdminResponse::clear_flush_db() {
  if (has_flush_db()) {
    delete resp_.flush_db_;
    clear_has_resp();
  }
}
 const ::dspb::FlushDBResponse& AdminResponse::flush_db() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.flush_db)
  return has_flush_db()
      ? *resp_.flush_db_
      : ::dspb::FlushDBResponse::default_instance();
}
::dspb::FlushDBResponse* AdminResponse::mutable_flush_db() {
  if (!has_flush_db()) {
    clear_resp();
    set_has_flush_db();
    resp_.flush_db_ = new ::dspb::FlushDBResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.flush_db)
  return resp_.flush_db_;
}
::dspb::FlushDBResponse* AdminResponse::release_flush_db() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.flush_db)
  if (has_flush_db()) {
    clear_has_resp();
    ::dspb::FlushDBResponse* temp = resp_.flush_db_;
    resp_.flush_db_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_flush_db(::dspb::FlushDBResponse* flush_db) {
  clear_resp();
  if (flush_db) {
    set_has_flush_db();
    resp_.flush_db_ = flush_db;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.flush_db)
}

// .dspb.ProfileResponse profile = 18;
bool AdminResponse::has_profile() const {
  return resp_case() == kProfile;
}
void AdminResponse::set_has_profile() {
  _oneof_case_[0] = kProfile;
}
void AdminResponse::clear_profile() {
  if (has_profile()) {
    delete resp_.profile_;
    clear_has_resp();
  }
}
 const ::dspb::ProfileResponse& AdminResponse::profile() const {
  // @@protoc_insertion_point(field_get:dspb.AdminResponse.profile)
  return has_profile()
      ? *resp_.profile_
      : ::dspb::ProfileResponse::default_instance();
}
::dspb::ProfileResponse* AdminResponse::mutable_profile() {
  if (!has_profile()) {
    clear_resp();
    set_has_profile();
    resp_.profile_ = new ::dspb::ProfileResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.AdminResponse.profile)
  return resp_.profile_;
}
::dspb::ProfileResponse* AdminResponse::release_profile() {
  // @@protoc_insertion_point(field_release:dspb.AdminResponse.profile)
  if (has_profile()) {
    clear_has_resp();
    ::dspb::ProfileResponse* temp = resp_.profile_;
    resp_.profile_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AdminResponse::set_allocated_profile(::dspb::ProfileResponse* profile) {
  clear_resp();
  if (profile) {
    set_has_profile();
    resp_.profile_ = profile;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.AdminResponse.profile)
}

bool AdminResponse::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
void AdminResponse::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
AdminResponse::RespCase AdminResponse::resp_case() const {
  return AdminResponse::RespCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigKey::kSectionFieldNumber;
const int ConfigKey::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigKey::ConfigKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ConfigKey)
}
ConfigKey::ConfigKey(const ConfigKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.section().size() > 0) {
    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.ConfigKey)
}

void ConfigKey::SharedCtor() {
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigKey::~ConfigKey() {
  // @@protoc_insertion_point(destructor:dspb.ConfigKey)
  SharedDtor();
}

void ConfigKey::SharedDtor() {
  section_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigKey::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigKey& ConfigKey::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigKey* ConfigKey::New(::google::protobuf::Arena* arena) const {
  ConfigKey* n = new ConfigKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigKey::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ConfigKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ConfigKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ConfigKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string section = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->section().data(), static_cast<int>(this->section().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ConfigKey.section"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ConfigKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ConfigKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ConfigKey)
  return false;
#undef DO_
}

void ConfigKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ConfigKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string section = 1;
  if (this->section().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->section().data(), static_cast<int>(this->section().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ConfigKey.section");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->section(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ConfigKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ConfigKey)
}

::google::protobuf::uint8* ConfigKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ConfigKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string section = 1;
  if (this->section().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->section().data(), static_cast<int>(this->section().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ConfigKey.section");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->section(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ConfigKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ConfigKey)
  return target;
}

size_t ConfigKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ConfigKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string section = 1;
  if (this->section().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->section());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ConfigKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ConfigKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ConfigKey)
    MergeFrom(*source);
  }
}

void ConfigKey::MergeFrom(const ConfigKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ConfigKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.section().size() > 0) {

    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ConfigKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ConfigKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigKey::CopyFrom(const ConfigKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ConfigKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigKey::IsInitialized() const {
  return true;
}

void ConfigKey::Swap(ConfigKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigKey::InternalSwap(ConfigKey* other) {
  using std::swap;
  section_.Swap(&other->section_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigKey::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigKey

// string section = 1;
void ConfigKey::clear_section() {
  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigKey::section() const {
  // @@protoc_insertion_point(field_get:dspb.ConfigKey.section)
  return section_.GetNoArena();
}
void ConfigKey::set_section(const ::std::string& value) {
  
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ConfigKey.section)
}
#if LANG_CXX11
void ConfigKey::set_section(::std::string&& value) {
  
  section_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ConfigKey.section)
}
#endif
void ConfigKey::set_section(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ConfigKey.section)
}
void ConfigKey::set_section(const char* value, size_t size) {
  
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ConfigKey.section)
}
::std::string* ConfigKey::mutable_section() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ConfigKey.section)
  return section_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigKey::release_section() {
  // @@protoc_insertion_point(field_release:dspb.ConfigKey.section)
  
  return section_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigKey::set_allocated_section(::std::string* section) {
  if (section != NULL) {
    
  } else {
    
  }
  section_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section);
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigKey.section)
}

// string name = 2;
void ConfigKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigKey::name() const {
  // @@protoc_insertion_point(field_get:dspb.ConfigKey.name)
  return name_.GetNoArena();
}
void ConfigKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ConfigKey.name)
}
#if LANG_CXX11
void ConfigKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ConfigKey.name)
}
#endif
void ConfigKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ConfigKey.name)
}
void ConfigKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ConfigKey.name)
}
::std::string* ConfigKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ConfigKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigKey::release_name() {
  // @@protoc_insertion_point(field_release:dspb.ConfigKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigKey.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigItem::kKeyFieldNumber;
const int ConfigItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigItem::ConfigItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ConfigItem)
}
ConfigItem::ConfigItem(const ConfigItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_key()) {
    key_ = new ::dspb::ConfigKey(*from.key_);
  } else {
    key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.ConfigItem)
}

void ConfigItem::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = NULL;
  _cached_size_ = 0;
}

ConfigItem::~ConfigItem() {
  // @@protoc_insertion_point(destructor:dspb.ConfigItem)
  SharedDtor();
}

void ConfigItem::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
}

void ConfigItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigItem::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigItem& ConfigItem::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigItem* ConfigItem::New(::google::protobuf::Arena* arena) const {
  ConfigItem* n = new ConfigItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ConfigItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  _internal_metadata_.Clear();
}

bool ConfigItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ConfigItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.ConfigKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ConfigItem.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ConfigItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ConfigItem)
  return false;
#undef DO_
}

void ConfigItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ConfigItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ConfigKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ConfigItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ConfigItem)
}

::google::protobuf::uint8* ConfigItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ConfigItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ConfigKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ConfigItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ConfigItem)
  return target;
}

size_t ConfigItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ConfigItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .dspb.ConfigKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ConfigItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ConfigItem)
    MergeFrom(*source);
  }
}

void ConfigItem::MergeFrom(const ConfigItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_key()) {
    mutable_key()->::dspb::ConfigKey::MergeFrom(from.key());
  }
}

void ConfigItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigItem::CopyFrom(const ConfigItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigItem::IsInitialized() const {
  return true;
}

void ConfigItem::Swap(ConfigItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigItem::InternalSwap(ConfigItem* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigItem::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigItem

// .dspb.ConfigKey key = 1;
bool ConfigItem::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void ConfigItem::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::dspb::ConfigKey& ConfigItem::key() const {
  const ::dspb::ConfigKey* p = key_;
  // @@protoc_insertion_point(field_get:dspb.ConfigItem.key)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ConfigKey*>(
      &::dspb::_ConfigKey_default_instance_);
}
::dspb::ConfigKey* ConfigItem::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::dspb::ConfigKey;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ConfigItem.key)
  return key_;
}
::dspb::ConfigKey* ConfigItem::release_key() {
  // @@protoc_insertion_point(field_release:dspb.ConfigItem.key)
  
  ::dspb::ConfigKey* temp = key_;
  key_ = NULL;
  return temp;
}
void ConfigItem::set_allocated_key(::dspb::ConfigKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigItem.key)
}

// string value = 2;
void ConfigItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigItem::value() const {
  // @@protoc_insertion_point(field_get:dspb.ConfigItem.value)
  return value_.GetNoArena();
}
void ConfigItem::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ConfigItem.value)
}
#if LANG_CXX11
void ConfigItem::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ConfigItem.value)
}
#endif
void ConfigItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ConfigItem.value)
}
void ConfigItem::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ConfigItem.value)
}
::std::string* ConfigItem::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ConfigItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigItem::release_value() {
  // @@protoc_insertion_point(field_release:dspb.ConfigItem.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.ConfigItem.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetConfigRequest::kConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetConfigRequest::SetConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SetConfigRequest)
}
SetConfigRequest::SetConfigRequest(const SetConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      configs_(from.configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.SetConfigRequest)
}

void SetConfigRequest::SharedCtor() {
  _cached_size_ = 0;
}

SetConfigRequest::~SetConfigRequest() {
  // @@protoc_insertion_point(destructor:dspb.SetConfigRequest)
  SharedDtor();
}

void SetConfigRequest::SharedDtor() {
}

void SetConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfigRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetConfigRequest& SetConfigRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetConfigRequest* SetConfigRequest::New(::google::protobuf::Arena* arena) const {
  SetConfigRequest* n = new SetConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SetConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  _internal_metadata_.Clear();
}

bool SetConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SetConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.ConfigItem configs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SetConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SetConfigRequest)
  return false;
#undef DO_
}

void SetConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SetConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ConfigItem configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->configs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SetConfigRequest)
}

::google::protobuf::uint8* SetConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SetConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ConfigItem configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->configs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SetConfigRequest)
  return target;
}

size_t SetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SetConfigRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.ConfigItem configs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SetConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SetConfigRequest)
    MergeFrom(*source);
  }
}

void SetConfigRequest::MergeFrom(const SetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void SetConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfigRequest::CopyFrom(const SetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfigRequest::IsInitialized() const {
  return true;
}

void SetConfigRequest::Swap(SetConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetConfigRequest::InternalSwap(SetConfigRequest* other) {
  using std::swap;
  configs_.InternalSwap(&other->configs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetConfigRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetConfigRequest

// repeated .dspb.ConfigItem configs = 1;
int SetConfigRequest::configs_size() const {
  return configs_.size();
}
void SetConfigRequest::clear_configs() {
  configs_.Clear();
}
const ::dspb::ConfigItem& SetConfigRequest::configs(int index) const {
  // @@protoc_insertion_point(field_get:dspb.SetConfigRequest.configs)
  return configs_.Get(index);
}
::dspb::ConfigItem* SetConfigRequest::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.SetConfigRequest.configs)
  return configs_.Mutable(index);
}
::dspb::ConfigItem* SetConfigRequest::add_configs() {
  // @@protoc_insertion_point(field_add:dspb.SetConfigRequest.configs)
  return configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >*
SetConfigRequest::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:dspb.SetConfigRequest.configs)
  return &configs_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >&
SetConfigRequest::configs() const {
  // @@protoc_insertion_point(field_list:dspb.SetConfigRequest.configs)
  return configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetConfigResponse::SetConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SetConfigResponse)
}
SetConfigResponse::SetConfigResponse(const SetConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.SetConfigResponse)
}

void SetConfigResponse::SharedCtor() {
  _cached_size_ = 0;
}

SetConfigResponse::~SetConfigResponse() {
  // @@protoc_insertion_point(destructor:dspb.SetConfigResponse)
  SharedDtor();
}

void SetConfigResponse::SharedDtor() {
}

void SetConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfigResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetConfigResponse& SetConfigResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetConfigResponse* SetConfigResponse::New(::google::protobuf::Arena* arena) const {
  SetConfigResponse* n = new SetConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SetConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SetConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SetConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SetConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SetConfigResponse)
  return false;
#undef DO_
}

void SetConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SetConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SetConfigResponse)
}

::google::protobuf::uint8* SetConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SetConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SetConfigResponse)
  return target;
}

size_t SetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SetConfigResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SetConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SetConfigResponse)
    MergeFrom(*source);
  }
}

void SetConfigResponse::MergeFrom(const SetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfigResponse::CopyFrom(const SetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfigResponse::IsInitialized() const {
  return true;
}

void SetConfigResponse::Swap(SetConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetConfigResponse::InternalSwap(SetConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetConfigResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetConfigResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConfigRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConfigRequest::GetConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetConfigRequest)
}
GetConfigRequest::GetConfigRequest(const GetConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_(from.key_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.GetConfigRequest)
}

void GetConfigRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetConfigRequest::~GetConfigRequest() {
  // @@protoc_insertion_point(destructor:dspb.GetConfigRequest)
  SharedDtor();
}

void GetConfigRequest::SharedDtor() {
}

void GetConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetConfigRequest& GetConfigRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConfigRequest* GetConfigRequest::New(::google::protobuf::Arena* arena) const {
  GetConfigRequest* n = new GetConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  _internal_metadata_.Clear();
}

bool GetConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.ConfigKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetConfigRequest)
  return false;
#undef DO_
}

void GetConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ConfigKey key = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetConfigRequest)
}

::google::protobuf::uint8* GetConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ConfigKey key = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->key(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetConfigRequest)
  return target;
}

size_t GetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetConfigRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.ConfigKey key = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->key_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetConfigRequest)
    MergeFrom(*source);
  }
}

void GetConfigRequest::MergeFrom(const GetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
}

void GetConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigRequest::CopyFrom(const GetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigRequest::IsInitialized() const {
  return true;
}

void GetConfigRequest::Swap(GetConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConfigRequest::InternalSwap(GetConfigRequest* other) {
  using std::swap;
  key_.InternalSwap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConfigRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConfigRequest

// repeated .dspb.ConfigKey key = 1;
int GetConfigRequest::key_size() const {
  return key_.size();
}
void GetConfigRequest::clear_key() {
  key_.Clear();
}
const ::dspb::ConfigKey& GetConfigRequest::key(int index) const {
  // @@protoc_insertion_point(field_get:dspb.GetConfigRequest.key)
  return key_.Get(index);
}
::dspb::ConfigKey* GetConfigRequest::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.GetConfigRequest.key)
  return key_.Mutable(index);
}
::dspb::ConfigKey* GetConfigRequest::add_key() {
  // @@protoc_insertion_point(field_add:dspb.GetConfigRequest.key)
  return key_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey >*
GetConfigRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:dspb.GetConfigRequest.key)
  return &key_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigKey >&
GetConfigRequest::key() const {
  // @@protoc_insertion_point(field_list:dspb.GetConfigRequest.key)
  return key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConfigResponse::kConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConfigResponse::GetConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetConfigResponse)
}
GetConfigResponse::GetConfigResponse(const GetConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      configs_(from.configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.GetConfigResponse)
}

void GetConfigResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetConfigResponse::~GetConfigResponse() {
  // @@protoc_insertion_point(destructor:dspb.GetConfigResponse)
  SharedDtor();
}

void GetConfigResponse::SharedDtor() {
}

void GetConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetConfigResponse& GetConfigResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConfigResponse* GetConfigResponse::New(::google::protobuf::Arena* arena) const {
  GetConfigResponse* n = new GetConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  _internal_metadata_.Clear();
}

bool GetConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.ConfigItem configs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetConfigResponse)
  return false;
#undef DO_
}

void GetConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ConfigItem configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->configs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetConfigResponse)
}

::google::protobuf::uint8* GetConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ConfigItem configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->configs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetConfigResponse)
  return target;
}

size_t GetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetConfigResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.ConfigItem configs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetConfigResponse)
    MergeFrom(*source);
  }
}

void GetConfigResponse::MergeFrom(const GetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void GetConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigResponse::CopyFrom(const GetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigResponse::IsInitialized() const {
  return true;
}

void GetConfigResponse::Swap(GetConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConfigResponse::InternalSwap(GetConfigResponse* other) {
  using std::swap;
  configs_.InternalSwap(&other->configs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConfigResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConfigResponse

// repeated .dspb.ConfigItem configs = 1;
int GetConfigResponse::configs_size() const {
  return configs_.size();
}
void GetConfigResponse::clear_configs() {
  configs_.Clear();
}
const ::dspb::ConfigItem& GetConfigResponse::configs(int index) const {
  // @@protoc_insertion_point(field_get:dspb.GetConfigResponse.configs)
  return configs_.Get(index);
}
::dspb::ConfigItem* GetConfigResponse::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.GetConfigResponse.configs)
  return configs_.Mutable(index);
}
::dspb::ConfigItem* GetConfigResponse::add_configs() {
  // @@protoc_insertion_point(field_add:dspb.GetConfigResponse.configs)
  return configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >*
GetConfigResponse::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:dspb.GetConfigResponse.configs)
  return &configs_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ConfigItem >&
GetConfigResponse::configs() const {
  // @@protoc_insertion_point(field_list:dspb.GetConfigResponse.configs)
  return configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoRequest::GetInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.GetInfoRequest)
}

void GetInfoRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetInfoRequest::~GetInfoRequest() {
  // @@protoc_insertion_point(destructor:dspb.GetInfoRequest)
  SharedDtor();
}

void GetInfoRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetInfoRequest& GetInfoRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoRequest* GetInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetInfoRequest* n = new GetInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.GetInfoRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetInfoRequest)
  return false;
#undef DO_
}

void GetInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetInfoRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetInfoRequest)
}

::google::protobuf::uint8* GetInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetInfoRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetInfoRequest)
  return target;
}

size_t GetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetInfoRequest)
    MergeFrom(*source);
  }
}

void GetInfoRequest::MergeFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void GetInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoRequest::CopyFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoRequest::IsInitialized() const {
  return true;
}

void GetInfoRequest::Swap(GetInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoRequest::InternalSwap(GetInfoRequest* other) {
  using std::swap;
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoRequest

// string path = 1;
void GetInfoRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoRequest::path() const {
  // @@protoc_insertion_point(field_get:dspb.GetInfoRequest.path)
  return path_.GetNoArena();
}
void GetInfoRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetInfoRequest.path)
}
#if LANG_CXX11
void GetInfoRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetInfoRequest.path)
}
#endif
void GetInfoRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetInfoRequest.path)
}
void GetInfoRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetInfoRequest.path)
}
::std::string* GetInfoRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetInfoRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoRequest::release_path() {
  // @@protoc_insertion_point(field_release:dspb.GetInfoRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetInfoRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoResponse::GetInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:dspb.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetInfoResponse& GetInfoResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoResponse* GetInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetInfoResponse* n = new GetInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.GetInfoResponse.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetInfoResponse)
  return false;
#undef DO_
}

void GetInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetInfoResponse.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetInfoResponse)
}

::google::protobuf::uint8* GetInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetInfoResponse.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GetInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::Swap(GetInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  using std::swap;
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoResponse

// string data = 1;
void GetInfoResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoResponse::data() const {
  // @@protoc_insertion_point(field_get:dspb.GetInfoResponse.data)
  return data_.GetNoArena();
}
void GetInfoResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetInfoResponse.data)
}
#if LANG_CXX11
void GetInfoResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetInfoResponse.data)
}
#endif
void GetInfoResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetInfoResponse.data)
}
void GetInfoResponse::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetInfoResponse.data)
}
::std::string* GetInfoResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetInfoResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResponse::release_data() {
  // @@protoc_insertion_point(field_release:dspb.GetInfoResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetInfoResponse.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForceSplitRequest::kRangeIdFieldNumber;
const int ForceSplitRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceSplitRequest::ForceSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ForceSplitRequest)
}
ForceSplitRequest::ForceSplitRequest(const ForceSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:dspb.ForceSplitRequest)
}

void ForceSplitRequest::SharedCtor() {
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(version_));
  _cached_size_ = 0;
}

ForceSplitRequest::~ForceSplitRequest() {
  // @@protoc_insertion_point(destructor:dspb.ForceSplitRequest)
  SharedDtor();
}

void ForceSplitRequest::SharedDtor() {
}

void ForceSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceSplitRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForceSplitRequest& ForceSplitRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForceSplitRequest* ForceSplitRequest::New(::google::protobuf::Arena* arena) const {
  ForceSplitRequest* n = new ForceSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ForceSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool ForceSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ForceSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ForceSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ForceSplitRequest)
  return false;
#undef DO_
}

void ForceSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ForceSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ForceSplitRequest)
}

::google::protobuf::uint8* ForceSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ForceSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ForceSplitRequest)
  return target;
}

size_t ForceSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ForceSplitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ForceSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForceSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ForceSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ForceSplitRequest)
    MergeFrom(*source);
  }
}

void ForceSplitRequest::MergeFrom(const ForceSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ForceSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void ForceSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ForceSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceSplitRequest::CopyFrom(const ForceSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ForceSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceSplitRequest::IsInitialized() const {
  return true;
}

void ForceSplitRequest::Swap(ForceSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceSplitRequest::InternalSwap(ForceSplitRequest* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceSplitRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceSplitRequest

// uint64 range_id = 1;
void ForceSplitRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ForceSplitRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.ForceSplitRequest.range_id)
  return range_id_;
}
void ForceSplitRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.ForceSplitRequest.range_id)
}

// uint64 version = 2;
void ForceSplitRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ForceSplitRequest::version() const {
  // @@protoc_insertion_point(field_get:dspb.ForceSplitRequest.version)
  return version_;
}
void ForceSplitRequest::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:dspb.ForceSplitRequest.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForceSplitResponse::kSplitKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceSplitResponse::ForceSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ForceSplitResponse)
}
ForceSplitResponse::ForceSplitResponse(const ForceSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.ForceSplitResponse)
}

void ForceSplitResponse::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForceSplitResponse::~ForceSplitResponse() {
  // @@protoc_insertion_point(destructor:dspb.ForceSplitResponse)
  SharedDtor();
}

void ForceSplitResponse::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForceSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceSplitResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForceSplitResponse& ForceSplitResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForceSplitResponse* ForceSplitResponse::New(::google::protobuf::Arena* arena) const {
  ForceSplitResponse* n = new ForceSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ForceSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ForceSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ForceSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes split_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ForceSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ForceSplitResponse)
  return false;
#undef DO_
}

void ForceSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ForceSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ForceSplitResponse)
}

::google::protobuf::uint8* ForceSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ForceSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ForceSplitResponse)
  return target;
}

size_t ForceSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ForceSplitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ForceSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ForceSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ForceSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ForceSplitResponse)
    MergeFrom(*source);
  }
}

void ForceSplitResponse::MergeFrom(const ForceSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ForceSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
}

void ForceSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ForceSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceSplitResponse::CopyFrom(const ForceSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ForceSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceSplitResponse::IsInitialized() const {
  return true;
}

void ForceSplitResponse::Swap(ForceSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceSplitResponse::InternalSwap(ForceSplitResponse* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceSplitResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceSplitResponse

// bytes split_key = 1;
void ForceSplitResponse::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForceSplitResponse::split_key() const {
  // @@protoc_insertion_point(field_get:dspb.ForceSplitResponse.split_key)
  return split_key_.GetNoArena();
}
void ForceSplitResponse::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ForceSplitResponse.split_key)
}
#if LANG_CXX11
void ForceSplitResponse::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ForceSplitResponse.split_key)
}
#endif
void ForceSplitResponse::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ForceSplitResponse.split_key)
}
void ForceSplitResponse::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ForceSplitResponse.split_key)
}
::std::string* ForceSplitResponse::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ForceSplitResponse.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForceSplitResponse::release_split_key() {
  // @@protoc_insertion_point(field_release:dspb.ForceSplitResponse.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForceSplitResponse::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.ForceSplitResponse.split_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactionRequest::kRangeIdFieldNumber;
const int CompactionRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactionRequest::CompactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.CompactionRequest)
}
CompactionRequest::CompactionRequest(const CompactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(transaction_id_));
  // @@protoc_insertion_point(copy_constructor:dspb.CompactionRequest)
}

void CompactionRequest::SharedCtor() {
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(transaction_id_));
  _cached_size_ = 0;
}

CompactionRequest::~CompactionRequest() {
  // @@protoc_insertion_point(destructor:dspb.CompactionRequest)
  SharedDtor();
}

void CompactionRequest::SharedDtor() {
}

void CompactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompactionRequest& CompactionRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompactionRequest* CompactionRequest::New(::google::protobuf::Arena* arena) const {
  CompactionRequest* n = new CompactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.CompactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(transaction_id_));
  _internal_metadata_.Clear();
}

bool CompactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.CompactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.CompactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.CompactionRequest)
  return false;
#undef DO_
}

void CompactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.CompactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // int64 transaction_id = 2;
  if (this->transaction_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.CompactionRequest)
}

::google::protobuf::uint8* CompactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.CompactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // int64 transaction_id = 2;
  if (this->transaction_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.CompactionRequest)
  return target;
}

size_t CompactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.CompactionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // int64 transaction_id = 2;
  if (this->transaction_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.CompactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.CompactionRequest)
    MergeFrom(*source);
  }
}

void CompactionRequest::MergeFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.transaction_id() != 0) {
    set_transaction_id(from.transaction_id());
  }
}

void CompactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionRequest::CopyFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionRequest::IsInitialized() const {
  return true;
}

void CompactionRequest::Swap(CompactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactionRequest::InternalSwap(CompactionRequest* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  swap(transaction_id_, other->transaction_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactionRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactionRequest

// uint64 range_id = 1;
void CompactionRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CompactionRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionRequest.range_id)
  return range_id_;
}
void CompactionRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.CompactionRequest.range_id)
}

// int64 transaction_id = 2;
void CompactionRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CompactionRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionRequest.transaction_id)
  return transaction_id_;
}
void CompactionRequest::set_transaction_id(::google::protobuf::int64 value) {
  
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.CompactionRequest.transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactionResponse::kBeginKeyFieldNumber;
const int CompactionResponse::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactionResponse::CompactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.CompactionResponse)
}
CompactionResponse::CompactionResponse(const CompactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  begin_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.begin_key().size() > 0) {
    begin_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.CompactionResponse)
}

void CompactionResponse::SharedCtor() {
  begin_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CompactionResponse::~CompactionResponse() {
  // @@protoc_insertion_point(destructor:dspb.CompactionResponse)
  SharedDtor();
}

void CompactionResponse::SharedDtor() {
  begin_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompactionResponse& CompactionResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompactionResponse* CompactionResponse::New(::google::protobuf::Arena* arena) const {
  CompactionResponse* n = new CompactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.CompactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CompactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.CompactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes begin_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_begin_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.CompactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.CompactionResponse)
  return false;
#undef DO_
}

void CompactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.CompactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes begin_key = 1;
  if (this->begin_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->begin_key(), output);
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.CompactionResponse)
}

::google::protobuf::uint8* CompactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.CompactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes begin_key = 1;
  if (this->begin_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->begin_key(), target);
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.CompactionResponse)
  return target;
}

size_t CompactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.CompactionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes begin_key = 1;
  if (this->begin_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->begin_key());
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.CompactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.CompactionResponse)
    MergeFrom(*source);
  }
}

void CompactionResponse::MergeFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin_key().size() > 0) {

    begin_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void CompactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionResponse::CopyFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionResponse::IsInitialized() const {
  return true;
}

void CompactionResponse::Swap(CompactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactionResponse::InternalSwap(CompactionResponse* other) {
  using std::swap;
  begin_key_.Swap(&other->begin_key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactionResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactionResponse

// bytes begin_key = 1;
void CompactionResponse::clear_begin_key() {
  begin_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompactionResponse::begin_key() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionResponse.begin_key)
  return begin_key_.GetNoArena();
}
void CompactionResponse::set_begin_key(const ::std::string& value) {
  
  begin_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.CompactionResponse.begin_key)
}
#if LANG_CXX11
void CompactionResponse::set_begin_key(::std::string&& value) {
  
  begin_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.CompactionResponse.begin_key)
}
#endif
void CompactionResponse::set_begin_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  begin_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.CompactionResponse.begin_key)
}
void CompactionResponse::set_begin_key(const void* value, size_t size) {
  
  begin_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.CompactionResponse.begin_key)
}
::std::string* CompactionResponse::mutable_begin_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.CompactionResponse.begin_key)
  return begin_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompactionResponse::release_begin_key() {
  // @@protoc_insertion_point(field_release:dspb.CompactionResponse.begin_key)
  
  return begin_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompactionResponse::set_allocated_begin_key(::std::string* begin_key) {
  if (begin_key != NULL) {
    
  } else {
    
  }
  begin_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.CompactionResponse.begin_key)
}

// bytes end_key = 2;
void CompactionResponse::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompactionResponse::end_key() const {
  // @@protoc_insertion_point(field_get:dspb.CompactionResponse.end_key)
  return end_key_.GetNoArena();
}
void CompactionResponse::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.CompactionResponse.end_key)
}
#if LANG_CXX11
void CompactionResponse::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.CompactionResponse.end_key)
}
#endif
void CompactionResponse::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.CompactionResponse.end_key)
}
void CompactionResponse::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.CompactionResponse.end_key)
}
::std::string* CompactionResponse::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.CompactionResponse.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompactionResponse::release_end_key() {
  // @@protoc_insertion_point(field_release:dspb.CompactionResponse.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompactionResponse::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.CompactionResponse.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearQueueRequest::kQueueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearQueueRequest::ClearQueueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ClearQueueRequest)
}
ClearQueueRequest::ClearQueueRequest(const ClearQueueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_type_ = from.queue_type_;
  // @@protoc_insertion_point(copy_constructor:dspb.ClearQueueRequest)
}

void ClearQueueRequest::SharedCtor() {
  queue_type_ = 0;
  _cached_size_ = 0;
}

ClearQueueRequest::~ClearQueueRequest() {
  // @@protoc_insertion_point(destructor:dspb.ClearQueueRequest)
  SharedDtor();
}

void ClearQueueRequest::SharedDtor() {
}

void ClearQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearQueueRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearQueueRequest& ClearQueueRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearQueueRequest* ClearQueueRequest::New(::google::protobuf::Arena* arena) const {
  ClearQueueRequest* n = new ClearQueueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ClearQueueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_type_ = 0;
  _internal_metadata_.Clear();
}

bool ClearQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ClearQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.ClearQueueRequest.QueueType queue_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_queue_type(static_cast< ::dspb::ClearQueueRequest_QueueType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ClearQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ClearQueueRequest)
  return false;
#undef DO_
}

void ClearQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ClearQueueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ClearQueueRequest.QueueType queue_type = 1;
  if (this->queue_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->queue_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ClearQueueRequest)
}

::google::protobuf::uint8* ClearQueueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ClearQueueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ClearQueueRequest.QueueType queue_type = 1;
  if (this->queue_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->queue_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ClearQueueRequest)
  return target;
}

size_t ClearQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ClearQueueRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.ClearQueueRequest.QueueType queue_type = 1;
  if (this->queue_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->queue_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ClearQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearQueueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearQueueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ClearQueueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ClearQueueRequest)
    MergeFrom(*source);
  }
}

void ClearQueueRequest::MergeFrom(const ClearQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ClearQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_type() != 0) {
    set_queue_type(from.queue_type());
  }
}

void ClearQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ClearQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearQueueRequest::CopyFrom(const ClearQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ClearQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearQueueRequest::IsInitialized() const {
  return true;
}

void ClearQueueRequest::Swap(ClearQueueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearQueueRequest::InternalSwap(ClearQueueRequest* other) {
  using std::swap;
  swap(queue_type_, other->queue_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearQueueRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearQueueRequest

// .dspb.ClearQueueRequest.QueueType queue_type = 1;
void ClearQueueRequest::clear_queue_type() {
  queue_type_ = 0;
}
::dspb::ClearQueueRequest_QueueType ClearQueueRequest::queue_type() const {
  // @@protoc_insertion_point(field_get:dspb.ClearQueueRequest.queue_type)
  return static_cast< ::dspb::ClearQueueRequest_QueueType >(queue_type_);
}
void ClearQueueRequest::set_queue_type(::dspb::ClearQueueRequest_QueueType value) {
  
  queue_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.ClearQueueRequest.queue_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearQueueResponse::kClearedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearQueueResponse::ClearQueueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ClearQueueResponse)
}
ClearQueueResponse::ClearQueueResponse(const ClearQueueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cleared_ = from.cleared_;
  // @@protoc_insertion_point(copy_constructor:dspb.ClearQueueResponse)
}

void ClearQueueResponse::SharedCtor() {
  cleared_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ClearQueueResponse::~ClearQueueResponse() {
  // @@protoc_insertion_point(destructor:dspb.ClearQueueResponse)
  SharedDtor();
}

void ClearQueueResponse::SharedDtor() {
}

void ClearQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearQueueResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearQueueResponse& ClearQueueResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearQueueResponse* ClearQueueResponse::New(::google::protobuf::Arena* arena) const {
  ClearQueueResponse* n = new ClearQueueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ClearQueueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cleared_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ClearQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ClearQueueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cleared = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cleared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ClearQueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ClearQueueResponse)
  return false;
#undef DO_
}

void ClearQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ClearQueueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cleared = 1;
  if (this->cleared() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cleared(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ClearQueueResponse)
}

::google::protobuf::uint8* ClearQueueResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ClearQueueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cleared = 1;
  if (this->cleared() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cleared(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ClearQueueResponse)
  return target;
}

size_t ClearQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ClearQueueResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cleared = 1;
  if (this->cleared() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cleared());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ClearQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearQueueResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearQueueResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ClearQueueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ClearQueueResponse)
    MergeFrom(*source);
  }
}

void ClearQueueResponse::MergeFrom(const ClearQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ClearQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cleared() != 0) {
    set_cleared(from.cleared());
  }
}

void ClearQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ClearQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearQueueResponse::CopyFrom(const ClearQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ClearQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearQueueResponse::IsInitialized() const {
  return true;
}

void ClearQueueResponse::Swap(ClearQueueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearQueueResponse::InternalSwap(ClearQueueResponse* other) {
  using std::swap;
  swap(cleared_, other->cleared_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearQueueResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearQueueResponse

// uint64 cleared = 1;
void ClearQueueResponse::clear_cleared() {
  cleared_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClearQueueResponse::cleared() const {
  // @@protoc_insertion_point(field_get:dspb.ClearQueueResponse.cleared)
  return cleared_;
}
void ClearQueueResponse::set_cleared(::google::protobuf::uint64 value) {
  
  cleared_ = value;
  // @@protoc_insertion_point(field_set:dspb.ClearQueueResponse.cleared)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPendingsRequest::kPtypeFieldNumber;
const int GetPendingsRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPendingsRequest::GetPendingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetPendingsRequest)
}
GetPendingsRequest::GetPendingsRequest(const GetPendingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptype_) -
    reinterpret_cast<char*>(&count_)) + sizeof(ptype_));
  // @@protoc_insertion_point(copy_constructor:dspb.GetPendingsRequest)
}

void GetPendingsRequest::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptype_) -
      reinterpret_cast<char*>(&count_)) + sizeof(ptype_));
  _cached_size_ = 0;
}

GetPendingsRequest::~GetPendingsRequest() {
  // @@protoc_insertion_point(destructor:dspb.GetPendingsRequest)
  SharedDtor();
}

void GetPendingsRequest::SharedDtor() {
}

void GetPendingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPendingsRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPendingsRequest& GetPendingsRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPendingsRequest* GetPendingsRequest::New(::google::protobuf::Arena* arena) const {
  GetPendingsRequest* n = new GetPendingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPendingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetPendingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptype_) -
      reinterpret_cast<char*>(&count_)) + sizeof(ptype_));
  _internal_metadata_.Clear();
}

bool GetPendingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetPendingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.GetPendingsRequest.PendingType ptype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ptype(static_cast< ::dspb::GetPendingsRequest_PendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetPendingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetPendingsRequest)
  return false;
#undef DO_
}

void GetPendingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetPendingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.GetPendingsRequest.PendingType ptype = 1;
  if (this->ptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ptype(), output);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetPendingsRequest)
}

::google::protobuf::uint8* GetPendingsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetPendingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.GetPendingsRequest.PendingType ptype = 1;
  if (this->ptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptype(), target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetPendingsRequest)
  return target;
}

size_t GetPendingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetPendingsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // .dspb.GetPendingsRequest.PendingType ptype = 1;
  if (this->ptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPendingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetPendingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPendingsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPendingsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetPendingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetPendingsRequest)
    MergeFrom(*source);
  }
}

void GetPendingsRequest::MergeFrom(const GetPendingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetPendingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.ptype() != 0) {
    set_ptype(from.ptype());
  }
}

void GetPendingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetPendingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPendingsRequest::CopyFrom(const GetPendingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetPendingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingsRequest::IsInitialized() const {
  return true;
}

void GetPendingsRequest::Swap(GetPendingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPendingsRequest::InternalSwap(GetPendingsRequest* other) {
  using std::swap;
  swap(count_, other->count_);
  swap(ptype_, other->ptype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPendingsRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPendingsRequest

// .dspb.GetPendingsRequest.PendingType ptype = 1;
void GetPendingsRequest::clear_ptype() {
  ptype_ = 0;
}
::dspb::GetPendingsRequest_PendingType GetPendingsRequest::ptype() const {
  // @@protoc_insertion_point(field_get:dspb.GetPendingsRequest.ptype)
  return static_cast< ::dspb::GetPendingsRequest_PendingType >(ptype_);
}
void GetPendingsRequest::set_ptype(::dspb::GetPendingsRequest_PendingType value) {
  
  ptype_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPendingsRequest.ptype)
}

// uint64 count = 2;
void GetPendingsRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPendingsRequest::count() const {
  // @@protoc_insertion_point(field_get:dspb.GetPendingsRequest.count)
  return count_;
}
void GetPendingsRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPendingsRequest.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPendingsResponse::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPendingsResponse::GetPendingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetPendingsResponse)
}
GetPendingsResponse::GetPendingsResponse(const GetPendingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.GetPendingsResponse)
}

void GetPendingsResponse::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetPendingsResponse::~GetPendingsResponse() {
  // @@protoc_insertion_point(destructor:dspb.GetPendingsResponse)
  SharedDtor();
}

void GetPendingsResponse::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPendingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPendingsResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPendingsResponse& GetPendingsResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPendingsResponse* GetPendingsResponse::New(::google::protobuf::Arena* arena) const {
  GetPendingsResponse* n = new GetPendingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPendingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetPendingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetPendingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetPendingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string desc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.GetPendingsResponse.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetPendingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetPendingsResponse)
  return false;
#undef DO_
}

void GetPendingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetPendingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string desc = 1;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetPendingsResponse.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->desc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetPendingsResponse)
}

::google::protobuf::uint8* GetPendingsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetPendingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string desc = 1;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.GetPendingsResponse.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetPendingsResponse)
  return target;
}

size_t GetPendingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetPendingsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string desc = 1;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPendingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetPendingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPendingsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPendingsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetPendingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetPendingsResponse)
    MergeFrom(*source);
  }
}

void GetPendingsResponse::MergeFrom(const GetPendingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetPendingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
}

void GetPendingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetPendingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPendingsResponse::CopyFrom(const GetPendingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetPendingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingsResponse::IsInitialized() const {
  return true;
}

void GetPendingsResponse::Swap(GetPendingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPendingsResponse::InternalSwap(GetPendingsResponse* other) {
  using std::swap;
  desc_.Swap(&other->desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPendingsResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPendingsResponse

// string desc = 1;
void GetPendingsResponse::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPendingsResponse::desc() const {
  // @@protoc_insertion_point(field_get:dspb.GetPendingsResponse.desc)
  return desc_.GetNoArena();
}
void GetPendingsResponse::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.GetPendingsResponse.desc)
}
#if LANG_CXX11
void GetPendingsResponse::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.GetPendingsResponse.desc)
}
#endif
void GetPendingsResponse::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.GetPendingsResponse.desc)
}
void GetPendingsResponse::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.GetPendingsResponse.desc)
}
::std::string* GetPendingsResponse::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:dspb.GetPendingsResponse.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPendingsResponse::release_desc() {
  // @@protoc_insertion_point(field_release:dspb.GetPendingsResponse.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPendingsResponse::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:dspb.GetPendingsResponse.desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushDBRequest::kWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushDBRequest::FlushDBRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.FlushDBRequest)
}
FlushDBRequest::FlushDBRequest(const FlushDBRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wait_ = from.wait_;
  // @@protoc_insertion_point(copy_constructor:dspb.FlushDBRequest)
}

void FlushDBRequest::SharedCtor() {
  wait_ = false;
  _cached_size_ = 0;
}

FlushDBRequest::~FlushDBRequest() {
  // @@protoc_insertion_point(destructor:dspb.FlushDBRequest)
  SharedDtor();
}

void FlushDBRequest::SharedDtor() {
}

void FlushDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushDBRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlushDBRequest& FlushDBRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlushDBRequest* FlushDBRequest::New(::google::protobuf::Arena* arena) const {
  FlushDBRequest* n = new FlushDBRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlushDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.FlushDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wait_ = false;
  _internal_metadata_.Clear();
}

bool FlushDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.FlushDBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool wait = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.FlushDBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.FlushDBRequest)
  return false;
#undef DO_
}

void FlushDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.FlushDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool wait = 1;
  if (this->wait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wait(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.FlushDBRequest)
}

::google::protobuf::uint8* FlushDBRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.FlushDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool wait = 1;
  if (this->wait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wait(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.FlushDBRequest)
  return target;
}

size_t FlushDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.FlushDBRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool wait = 1;
  if (this->wait() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.FlushDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushDBRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlushDBRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.FlushDBRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.FlushDBRequest)
    MergeFrom(*source);
  }
}

void FlushDBRequest::MergeFrom(const FlushDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.FlushDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wait() != 0) {
    set_wait(from.wait());
  }
}

void FlushDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.FlushDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDBRequest::CopyFrom(const FlushDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.FlushDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDBRequest::IsInitialized() const {
  return true;
}

void FlushDBRequest::Swap(FlushDBRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushDBRequest::InternalSwap(FlushDBRequest* other) {
  using std::swap;
  swap(wait_, other->wait_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlushDBRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlushDBRequest

// bool wait = 1;
void FlushDBRequest::clear_wait() {
  wait_ = false;
}
bool FlushDBRequest::wait() const {
  // @@protoc_insertion_point(field_get:dspb.FlushDBRequest.wait)
  return wait_;
}
void FlushDBRequest::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:dspb.FlushDBRequest.wait)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushDBResponse::FlushDBResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.FlushDBResponse)
}
FlushDBResponse::FlushDBResponse(const FlushDBResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.FlushDBResponse)
}

void FlushDBResponse::SharedCtor() {
  _cached_size_ = 0;
}

FlushDBResponse::~FlushDBResponse() {
  // @@protoc_insertion_point(destructor:dspb.FlushDBResponse)
  SharedDtor();
}

void FlushDBResponse::SharedDtor() {
}

void FlushDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushDBResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlushDBResponse& FlushDBResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlushDBResponse* FlushDBResponse::New(::google::protobuf::Arena* arena) const {
  FlushDBResponse* n = new FlushDBResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlushDBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.FlushDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FlushDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.FlushDBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.FlushDBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.FlushDBResponse)
  return false;
#undef DO_
}

void FlushDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.FlushDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.FlushDBResponse)
}

::google::protobuf::uint8* FlushDBResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.FlushDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.FlushDBResponse)
  return target;
}

size_t FlushDBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.FlushDBResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.FlushDBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushDBResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlushDBResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.FlushDBResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.FlushDBResponse)
    MergeFrom(*source);
  }
}

void FlushDBResponse::MergeFrom(const FlushDBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.FlushDBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.FlushDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDBResponse::CopyFrom(const FlushDBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.FlushDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDBResponse::IsInitialized() const {
  return true;
}

void FlushDBResponse::Swap(FlushDBResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushDBResponse::InternalSwap(FlushDBResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlushDBResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlushDBResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileRequest::kPtypeFieldNumber;
const int ProfileRequest::kOutputPathFieldNumber;
const int ProfileRequest::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileRequest::ProfileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ProfileRequest)
}
ProfileRequest::ProfileRequest(const ProfileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_path().size() > 0) {
    output_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptype_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(ptype_));
  // @@protoc_insertion_point(copy_constructor:dspb.ProfileRequest)
}

void ProfileRequest::SharedCtor() {
  output_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptype_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(ptype_));
  _cached_size_ = 0;
}

ProfileRequest::~ProfileRequest() {
  // @@protoc_insertion_point(destructor:dspb.ProfileRequest)
  SharedDtor();
}

void ProfileRequest::SharedDtor() {
  output_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileRequest::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileRequest& ProfileRequest::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileRequest* ProfileRequest::New(::google::protobuf::Arena* arena) const {
  ProfileRequest* n = new ProfileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ProfileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptype_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(ptype_));
  _internal_metadata_.Clear();
}

bool ProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ProfileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.ProfileRequest.ProfileType ptype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ptype(static_cast< ::dspb::ProfileRequest_ProfileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_path().data(), static_cast<int>(this->output_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.ProfileRequest.output_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ProfileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ProfileRequest)
  return false;
#undef DO_
}

void ProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ProfileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ProfileRequest.ProfileType ptype = 1;
  if (this->ptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ptype(), output);
  }

  // string output_path = 2;
  if (this->output_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_path().data(), static_cast<int>(this->output_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ProfileRequest.output_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output_path(), output);
  }

  // uint64 seconds = 3;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ProfileRequest)
}

::google::protobuf::uint8* ProfileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ProfileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ProfileRequest.ProfileType ptype = 1;
  if (this->ptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptype(), target);
  }

  // string output_path = 2;
  if (this->output_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_path().data(), static_cast<int>(this->output_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.ProfileRequest.output_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output_path(), target);
  }

  // uint64 seconds = 3;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ProfileRequest)
  return target;
}

size_t ProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ProfileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string output_path = 2;
  if (this->output_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_path());
  }

  // uint64 seconds = 3;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seconds());
  }

  // .dspb.ProfileRequest.ProfileType ptype = 1;
  if (this->ptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ProfileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ProfileRequest)
    MergeFrom(*source);
  }
}

void ProfileRequest::MergeFrom(const ProfileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_path().size() > 0) {

    output_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
  if (from.ptype() != 0) {
    set_ptype(from.ptype());
  }
}

void ProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileRequest::CopyFrom(const ProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileRequest::IsInitialized() const {
  return true;
}

void ProfileRequest::Swap(ProfileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileRequest::InternalSwap(ProfileRequest* other) {
  using std::swap;
  output_path_.Swap(&other->output_path_);
  swap(seconds_, other->seconds_);
  swap(ptype_, other->ptype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileRequest::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileRequest

// .dspb.ProfileRequest.ProfileType ptype = 1;
void ProfileRequest::clear_ptype() {
  ptype_ = 0;
}
::dspb::ProfileRequest_ProfileType ProfileRequest::ptype() const {
  // @@protoc_insertion_point(field_get:dspb.ProfileRequest.ptype)
  return static_cast< ::dspb::ProfileRequest_ProfileType >(ptype_);
}
void ProfileRequest::set_ptype(::dspb::ProfileRequest_ProfileType value) {
  
  ptype_ = value;
  // @@protoc_insertion_point(field_set:dspb.ProfileRequest.ptype)
}

// string output_path = 2;
void ProfileRequest::clear_output_path() {
  output_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileRequest::output_path() const {
  // @@protoc_insertion_point(field_get:dspb.ProfileRequest.output_path)
  return output_path_.GetNoArena();
}
void ProfileRequest::set_output_path(const ::std::string& value) {
  
  output_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.ProfileRequest.output_path)
}
#if LANG_CXX11
void ProfileRequest::set_output_path(::std::string&& value) {
  
  output_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.ProfileRequest.output_path)
}
#endif
void ProfileRequest::set_output_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.ProfileRequest.output_path)
}
void ProfileRequest::set_output_path(const char* value, size_t size) {
  
  output_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.ProfileRequest.output_path)
}
::std::string* ProfileRequest::mutable_output_path() {
  
  // @@protoc_insertion_point(field_mutable:dspb.ProfileRequest.output_path)
  return output_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileRequest::release_output_path() {
  // @@protoc_insertion_point(field_release:dspb.ProfileRequest.output_path)
  
  return output_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileRequest::set_allocated_output_path(::std::string* output_path) {
  if (output_path != NULL) {
    
  } else {
    
  }
  output_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_path);
  // @@protoc_insertion_point(field_set_allocated:dspb.ProfileRequest.output_path)
}

// uint64 seconds = 3;
void ProfileRequest::clear_seconds() {
  seconds_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ProfileRequest::seconds() const {
  // @@protoc_insertion_point(field_get:dspb.ProfileRequest.seconds)
  return seconds_;
}
void ProfileRequest::set_seconds(::google::protobuf::uint64 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:dspb.ProfileRequest.seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileResponse::ProfileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ProfileResponse)
}
ProfileResponse::ProfileResponse(const ProfileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.ProfileResponse)
}

void ProfileResponse::SharedCtor() {
  _cached_size_ = 0;
}

ProfileResponse::~ProfileResponse() {
  // @@protoc_insertion_point(destructor:dspb.ProfileResponse)
  SharedDtor();
}

void ProfileResponse::SharedDtor() {
}

void ProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileResponse::descriptor() {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileResponse& ProfileResponse::default_instance() {
  protobuf_dspb_2fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileResponse* ProfileResponse::New(::google::protobuf::Arena* arena) const {
  ProfileResponse* n = new ProfileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ProfileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ProfileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ProfileResponse)
  return false;
#undef DO_
}

void ProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ProfileResponse)
}

::google::protobuf::uint8* ProfileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ProfileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ProfileResponse)
  return target;
}

size_t ProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ProfileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ProfileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ProfileResponse)
    MergeFrom(*source);
  }
}

void ProfileResponse::MergeFrom(const ProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileResponse::CopyFrom(const ProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileResponse::IsInitialized() const {
  return true;
}

void ProfileResponse::Swap(ProfileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileResponse::InternalSwap(ProfileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileResponse::GetMetadata() const {
  protobuf_dspb_2fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
