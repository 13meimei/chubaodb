// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/error.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/error.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class Error_ClusterMismatchedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_ClusterMismatched>
     _instance;
} _Error_ClusterMismatched_default_instance_;
class Error_NotLeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_NotLeader>
     _instance;
} _Error_NotLeader_default_instance_;
class Error_RaftFailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_RaftFail>
     _instance;
} _Error_RaftFail_default_instance_;
class Error_RangeNotFoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_RangeNotFound>
     _instance;
} _Error_RangeNotFound_default_instance_;
class Error_OutOfBoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_OutOfBound>
     _instance;
} _Error_OutOfBound_default_instance_;
class Error_StaleEpochDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_StaleEpoch>
     _instance;
} _Error_StaleEpoch_default_instance_;
class Error_NoLeftSpaceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_NoLeftSpace>
     _instance;
} _Error_NoLeftSpace_default_instance_;
class Error_ServerErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error_ServerError>
     _instance;
} _Error_ServerError_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
  const ::dspb::Error_ClusterMismatched* cluster_mismatch_;
  const ::dspb::Error_NotLeader* not_leader_;
  const ::dspb::Error_RaftFail* raft_fail_;
  const ::dspb::Error_RangeNotFound* range_not_found_;
  const ::dspb::Error_OutOfBound* out_of_bound_;
  const ::dspb::Error_StaleEpoch* stale_epoch_;
  const ::dspb::Error_NoLeftSpace* no_left_space_;
  const ::dspb::Error_ServerError* server_error_;
} _Error_default_instance_;

namespace protobuf_dspb_2ferror_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ClusterMismatched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ClusterMismatched, request_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ClusterMismatched, actual_cluster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_NotLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_NotLeader, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_NotLeader, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_NotLeader, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_NotLeader, epoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_RaftFail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_RaftFail, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_RangeNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_RangeNotFound, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_OutOfBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_OutOfBound, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_OutOfBound, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_OutOfBound, range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_OutOfBound, range_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_StaleEpoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_StaleEpoch, old_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_StaleEpoch, new_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_NoLeftSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ServerError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ServerError, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ErrorDefaultTypeInternal, cluster_mismatch_),
  offsetof(ErrorDefaultTypeInternal, not_leader_),
  offsetof(ErrorDefaultTypeInternal, raft_fail_),
  offsetof(ErrorDefaultTypeInternal, range_not_found_),
  offsetof(ErrorDefaultTypeInternal, out_of_bound_),
  offsetof(ErrorDefaultTypeInternal, stale_epoch_),
  offsetof(ErrorDefaultTypeInternal, no_left_space_),
  offsetof(ErrorDefaultTypeInternal, server_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, err_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Error_ClusterMismatched)},
  { 7, -1, sizeof(Error_NotLeader)},
  { 16, -1, sizeof(Error_RaftFail)},
  { 22, -1, sizeof(Error_RangeNotFound)},
  { 28, -1, sizeof(Error_OutOfBound)},
  { 37, -1, sizeof(Error_StaleEpoch)},
  { 44, -1, sizeof(Error_NoLeftSpace)},
  { 49, -1, sizeof(Error_ServerError)},
  { 55, -1, sizeof(Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_ClusterMismatched_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_NotLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_RaftFail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_RangeNotFound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_OutOfBound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_StaleEpoch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_NoLeftSpace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_ServerError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/error.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::basepb::protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  _Error_ClusterMismatched_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_ClusterMismatched_default_instance_);_Error_NotLeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_NotLeader_default_instance_);_Error_RaftFail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_RaftFail_default_instance_);_Error_RangeNotFound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_RangeNotFound_default_instance_);_Error_OutOfBound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_OutOfBound_default_instance_);_Error_StaleEpoch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_StaleEpoch_default_instance_);_Error_NoLeftSpace_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_NoLeftSpace_default_instance_);_Error_ServerError_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_ServerError_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_Error_NotLeader_default_instance_._instance.get_mutable()->leader_ = const_cast< ::basepb::Peer*>(
      ::basepb::Peer::internal_default_instance());
  _Error_NotLeader_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _Error_StaleEpoch_default_instance_._instance.get_mutable()->old_range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _Error_StaleEpoch_default_instance_._instance.get_mutable()->new_range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _Error_default_instance_.cluster_mismatch_ = const_cast< ::dspb::Error_ClusterMismatched*>(
      ::dspb::Error_ClusterMismatched::internal_default_instance());
  _Error_default_instance_.not_leader_ = const_cast< ::dspb::Error_NotLeader*>(
      ::dspb::Error_NotLeader::internal_default_instance());
  _Error_default_instance_.raft_fail_ = const_cast< ::dspb::Error_RaftFail*>(
      ::dspb::Error_RaftFail::internal_default_instance());
  _Error_default_instance_.range_not_found_ = const_cast< ::dspb::Error_RangeNotFound*>(
      ::dspb::Error_RangeNotFound::internal_default_instance());
  _Error_default_instance_.out_of_bound_ = const_cast< ::dspb::Error_OutOfBound*>(
      ::dspb::Error_OutOfBound::internal_default_instance());
  _Error_default_instance_.stale_epoch_ = const_cast< ::dspb::Error_StaleEpoch*>(
      ::dspb::Error_StaleEpoch::internal_default_instance());
  _Error_default_instance_.no_left_space_ = const_cast< ::dspb::Error_NoLeftSpace*>(
      ::dspb::Error_NoLeftSpace::internal_default_instance());
  _Error_default_instance_.server_error_ = const_cast< ::dspb::Error_ServerError*>(
      ::dspb::Error_ServerError::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020dspb/error.proto\022\004dspb\032\023basepb/basepb."
      "proto\"\360\006\n\005Error\0229\n\020cluster_mismatch\030\001 \001("
      "\0132\035.dspb.Error.ClusterMismatchedH\000\022+\n\nno"
      "t_leader\030\002 \001(\0132\025.dspb.Error.NotLeaderH\000\022"
      ")\n\traft_fail\030\003 \001(\0132\024.dspb.Error.RaftFail"
      "H\000\0224\n\017range_not_found\030\004 \001(\0132\031.dspb.Error"
      ".RangeNotFoundH\000\022.\n\014out_of_bound\030\005 \001(\0132\026"
      ".dspb.Error.OutOfBoundH\000\022-\n\013stale_epoch\030"
      "\006 \001(\0132\026.dspb.Error.StaleEpochH\000\0220\n\rno_le"
      "ft_space\030\007 \001(\0132\027.dspb.Error.NoLeftSpaceH"
      "\000\022/\n\014server_error\030\010 \001(\0132\027.dspb.Error.Ser"
      "verErrorH\000\022\016\n\006detail\030d \001(\t\032D\n\021ClusterMis"
      "matched\022\027\n\017request_cluster\030\001 \001(\004\022\026\n\016actu"
      "al_cluster\030\002 \001(\004\032l\n\tNotLeader\022\020\n\010range_i"
      "d\030\001 \001(\004\022\034\n\006leader\030\002 \001(\0132\014.basepb.Peer\022\014\n"
      "\004term\030\003 \001(\004\022!\n\005epoch\030\004 \001(\0132\022.basepb.Rang"
      "eEpoch\032\032\n\010RaftFail\022\016\n\006reason\030\001 \001(\t\032!\n\rRa"
      "ngeNotFound\022\020\n\010range_id\030\001 \001(\004\032U\n\nOutOfBo"
      "und\022\013\n\003key\030\001 \001(\014\022\020\n\010range_id\030\002 \001(\004\022\023\n\013ra"
      "nge_start\030\003 \001(\014\022\023\n\013range_limit\030\004 \001(\014\032P\n\n"
      "StaleEpoch\022 \n\told_range\030\001 \001(\0132\r.basepb.R"
      "ange\022 \n\tnew_range\030\002 \001(\0132\r.basepb.Range\032\r"
      "\n\013NoLeftSpace\032\032\n\013ServerError\022\013\n\003msg\030\001 \001("
      "\tB\005\n\003errb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 936);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/error.proto", &protobuf_RegisterTypes);
  ::basepb::protobuf_basepb_2fbasepb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2ferror_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_ClusterMismatched::kRequestClusterFieldNumber;
const int Error_ClusterMismatched::kActualClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_ClusterMismatched::Error_ClusterMismatched()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.ClusterMismatched)
}
Error_ClusterMismatched::Error_ClusterMismatched(const Error_ClusterMismatched& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_cluster_, &from.request_cluster_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_cluster_) -
    reinterpret_cast<char*>(&request_cluster_)) + sizeof(actual_cluster_));
  // @@protoc_insertion_point(copy_constructor:dspb.Error.ClusterMismatched)
}

void Error_ClusterMismatched::SharedCtor() {
  ::memset(&request_cluster_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_cluster_) -
      reinterpret_cast<char*>(&request_cluster_)) + sizeof(actual_cluster_));
  _cached_size_ = 0;
}

Error_ClusterMismatched::~Error_ClusterMismatched() {
  // @@protoc_insertion_point(destructor:dspb.Error.ClusterMismatched)
  SharedDtor();
}

void Error_ClusterMismatched::SharedDtor() {
}

void Error_ClusterMismatched::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_ClusterMismatched::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_ClusterMismatched& Error_ClusterMismatched::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_ClusterMismatched* Error_ClusterMismatched::New(::google::protobuf::Arena* arena) const {
  Error_ClusterMismatched* n = new Error_ClusterMismatched;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_ClusterMismatched::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.ClusterMismatched)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_cluster_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_cluster_) -
      reinterpret_cast<char*>(&request_cluster_)) + sizeof(actual_cluster_));
  _internal_metadata_.Clear();
}

bool Error_ClusterMismatched::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.ClusterMismatched)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 request_cluster = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 actual_cluster = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actual_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.ClusterMismatched)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.ClusterMismatched)
  return false;
#undef DO_
}

void Error_ClusterMismatched::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.ClusterMismatched)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_cluster = 1;
  if (this->request_cluster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_cluster(), output);
  }

  // uint64 actual_cluster = 2;
  if (this->actual_cluster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->actual_cluster(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.ClusterMismatched)
}

::google::protobuf::uint8* Error_ClusterMismatched::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.ClusterMismatched)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_cluster = 1;
  if (this->request_cluster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_cluster(), target);
  }

  // uint64 actual_cluster = 2;
  if (this->actual_cluster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->actual_cluster(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.ClusterMismatched)
  return target;
}

size_t Error_ClusterMismatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.ClusterMismatched)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 request_cluster = 1;
  if (this->request_cluster() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_cluster());
  }

  // uint64 actual_cluster = 2;
  if (this->actual_cluster() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actual_cluster());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_ClusterMismatched::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.ClusterMismatched)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_ClusterMismatched* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_ClusterMismatched>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.ClusterMismatched)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.ClusterMismatched)
    MergeFrom(*source);
  }
}

void Error_ClusterMismatched::MergeFrom(const Error_ClusterMismatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.ClusterMismatched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_cluster() != 0) {
    set_request_cluster(from.request_cluster());
  }
  if (from.actual_cluster() != 0) {
    set_actual_cluster(from.actual_cluster());
  }
}

void Error_ClusterMismatched::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.ClusterMismatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_ClusterMismatched::CopyFrom(const Error_ClusterMismatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.ClusterMismatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_ClusterMismatched::IsInitialized() const {
  return true;
}

void Error_ClusterMismatched::Swap(Error_ClusterMismatched* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_ClusterMismatched::InternalSwap(Error_ClusterMismatched* other) {
  using std::swap;
  swap(request_cluster_, other->request_cluster_);
  swap(actual_cluster_, other->actual_cluster_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_ClusterMismatched::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_ClusterMismatched

// uint64 request_cluster = 1;
void Error_ClusterMismatched::clear_request_cluster() {
  request_cluster_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Error_ClusterMismatched::request_cluster() const {
  // @@protoc_insertion_point(field_get:dspb.Error.ClusterMismatched.request_cluster)
  return request_cluster_;
}
void Error_ClusterMismatched::set_request_cluster(::google::protobuf::uint64 value) {
  
  request_cluster_ = value;
  // @@protoc_insertion_point(field_set:dspb.Error.ClusterMismatched.request_cluster)
}

// uint64 actual_cluster = 2;
void Error_ClusterMismatched::clear_actual_cluster() {
  actual_cluster_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Error_ClusterMismatched::actual_cluster() const {
  // @@protoc_insertion_point(field_get:dspb.Error.ClusterMismatched.actual_cluster)
  return actual_cluster_;
}
void Error_ClusterMismatched::set_actual_cluster(::google::protobuf::uint64 value) {
  
  actual_cluster_ = value;
  // @@protoc_insertion_point(field_set:dspb.Error.ClusterMismatched.actual_cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_NotLeader::kRangeIdFieldNumber;
const int Error_NotLeader::kLeaderFieldNumber;
const int Error_NotLeader::kTermFieldNumber;
const int Error_NotLeader::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_NotLeader::Error_NotLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.NotLeader)
}
Error_NotLeader::Error_NotLeader(const Error_NotLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leader()) {
    leader_ = new ::basepb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  if (from.has_epoch()) {
    epoch_ = new ::basepb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:dspb.Error.NotLeader)
}

void Error_NotLeader::SharedCtor() {
  ::memset(&leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&leader_)) + sizeof(term_));
  _cached_size_ = 0;
}

Error_NotLeader::~Error_NotLeader() {
  // @@protoc_insertion_point(destructor:dspb.Error.NotLeader)
  SharedDtor();
}

void Error_NotLeader::SharedDtor() {
  if (this != internal_default_instance()) delete leader_;
  if (this != internal_default_instance()) delete epoch_;
}

void Error_NotLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_NotLeader::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_NotLeader& Error_NotLeader::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_NotLeader* Error_NotLeader::New(::google::protobuf::Arena* arena) const {
  Error_NotLeader* n = new Error_NotLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_NotLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.NotLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

bool Error_NotLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.NotLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Peer leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch epoch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.NotLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.NotLeader)
  return false;
#undef DO_
}

void Error_NotLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.NotLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // .basepb.Peer leader = 2;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // .basepb.RangeEpoch epoch = 4;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->epoch_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.NotLeader)
}

::google::protobuf::uint8* Error_NotLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.NotLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // .basepb.Peer leader = 2;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leader_, deterministic, target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // .basepb.RangeEpoch epoch = 4;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->epoch_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.NotLeader)
  return target;
}

size_t Error_NotLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.NotLeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.Peer leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  // .basepb.RangeEpoch epoch = 4;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_NotLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.NotLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_NotLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_NotLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.NotLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.NotLeader)
    MergeFrom(*source);
  }
}

void Error_NotLeader::MergeFrom(const Error_NotLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.NotLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader()) {
    mutable_leader()->::basepb::Peer::MergeFrom(from.leader());
  }
  if (from.has_epoch()) {
    mutable_epoch()->::basepb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void Error_NotLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_NotLeader::CopyFrom(const Error_NotLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_NotLeader::IsInitialized() const {
  return true;
}

void Error_NotLeader::Swap(Error_NotLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_NotLeader::InternalSwap(Error_NotLeader* other) {
  using std::swap;
  swap(leader_, other->leader_);
  swap(epoch_, other->epoch_);
  swap(range_id_, other->range_id_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_NotLeader::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_NotLeader

// uint64 range_id = 1;
void Error_NotLeader::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Error_NotLeader::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.Error.NotLeader.range_id)
  return range_id_;
}
void Error_NotLeader::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.Error.NotLeader.range_id)
}

// .basepb.Peer leader = 2;
bool Error_NotLeader::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void Error_NotLeader::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::basepb::Peer& Error_NotLeader::leader() const {
  const ::basepb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:dspb.Error.NotLeader.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
::basepb::Peer* Error_NotLeader::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.NotLeader.leader)
  return leader_;
}
::basepb::Peer* Error_NotLeader::release_leader() {
  // @@protoc_insertion_point(field_release:dspb.Error.NotLeader.leader)
  
  ::basepb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void Error_NotLeader::set_allocated_leader(::basepb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.NotLeader.leader)
}

// uint64 term = 3;
void Error_NotLeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Error_NotLeader::term() const {
  // @@protoc_insertion_point(field_get:dspb.Error.NotLeader.term)
  return term_;
}
void Error_NotLeader::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:dspb.Error.NotLeader.term)
}

// .basepb.RangeEpoch epoch = 4;
bool Error_NotLeader::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void Error_NotLeader::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::basepb::RangeEpoch& Error_NotLeader::epoch() const {
  const ::basepb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:dspb.Error.NotLeader.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* Error_NotLeader::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.NotLeader.epoch)
  return epoch_;
}
::basepb::RangeEpoch* Error_NotLeader::release_epoch() {
  // @@protoc_insertion_point(field_release:dspb.Error.NotLeader.epoch)
  
  ::basepb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void Error_NotLeader::set_allocated_epoch(::basepb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.NotLeader.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_RaftFail::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_RaftFail::Error_RaftFail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.RaftFail)
}
Error_RaftFail::Error_RaftFail(const Error_RaftFail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.Error.RaftFail)
}

void Error_RaftFail::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Error_RaftFail::~Error_RaftFail() {
  // @@protoc_insertion_point(destructor:dspb.Error.RaftFail)
  SharedDtor();
}

void Error_RaftFail::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error_RaftFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_RaftFail::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_RaftFail& Error_RaftFail::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_RaftFail* Error_RaftFail::New(::google::protobuf::Arena* arena) const {
  Error_RaftFail* n = new Error_RaftFail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_RaftFail::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.RaftFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Error_RaftFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.RaftFail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.Error.RaftFail.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.RaftFail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.RaftFail)
  return false;
#undef DO_
}

void Error_RaftFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.RaftFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.Error.RaftFail.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.RaftFail)
}

::google::protobuf::uint8* Error_RaftFail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.RaftFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.Error.RaftFail.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.RaftFail)
  return target;
}

size_t Error_RaftFail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.RaftFail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_RaftFail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.RaftFail)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_RaftFail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_RaftFail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.RaftFail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.RaftFail)
    MergeFrom(*source);
  }
}

void Error_RaftFail::MergeFrom(const Error_RaftFail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.RaftFail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void Error_RaftFail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.RaftFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_RaftFail::CopyFrom(const Error_RaftFail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.RaftFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_RaftFail::IsInitialized() const {
  return true;
}

void Error_RaftFail::Swap(Error_RaftFail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_RaftFail::InternalSwap(Error_RaftFail* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_RaftFail::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_RaftFail

// string reason = 1;
void Error_RaftFail::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error_RaftFail::reason() const {
  // @@protoc_insertion_point(field_get:dspb.Error.RaftFail.reason)
  return reason_.GetNoArena();
}
void Error_RaftFail::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Error.RaftFail.reason)
}
#if LANG_CXX11
void Error_RaftFail::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Error.RaftFail.reason)
}
#endif
void Error_RaftFail::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Error.RaftFail.reason)
}
void Error_RaftFail::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Error.RaftFail.reason)
}
::std::string* Error_RaftFail::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Error.RaftFail.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error_RaftFail::release_reason() {
  // @@protoc_insertion_point(field_release:dspb.Error.RaftFail.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error_RaftFail::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.RaftFail.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_RangeNotFound::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_RangeNotFound::Error_RangeNotFound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.RangeNotFound)
}
Error_RangeNotFound::Error_RangeNotFound(const Error_RangeNotFound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.Error.RangeNotFound)
}

void Error_RangeNotFound::SharedCtor() {
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Error_RangeNotFound::~Error_RangeNotFound() {
  // @@protoc_insertion_point(destructor:dspb.Error.RangeNotFound)
  SharedDtor();
}

void Error_RangeNotFound::SharedDtor() {
}

void Error_RangeNotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_RangeNotFound::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_RangeNotFound& Error_RangeNotFound::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_RangeNotFound* Error_RangeNotFound::New(::google::protobuf::Arena* arena) const {
  Error_RangeNotFound* n = new Error_RangeNotFound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_RangeNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.RangeNotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Error_RangeNotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.RangeNotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.RangeNotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.RangeNotFound)
  return false;
#undef DO_
}

void Error_RangeNotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.RangeNotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.RangeNotFound)
}

::google::protobuf::uint8* Error_RangeNotFound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.RangeNotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.RangeNotFound)
  return target;
}

size_t Error_RangeNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.RangeNotFound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_RangeNotFound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.RangeNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_RangeNotFound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_RangeNotFound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.RangeNotFound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.RangeNotFound)
    MergeFrom(*source);
  }
}

void Error_RangeNotFound::MergeFrom(const Error_RangeNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.RangeNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void Error_RangeNotFound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.RangeNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_RangeNotFound::CopyFrom(const Error_RangeNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.RangeNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_RangeNotFound::IsInitialized() const {
  return true;
}

void Error_RangeNotFound::Swap(Error_RangeNotFound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_RangeNotFound::InternalSwap(Error_RangeNotFound* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_RangeNotFound::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_RangeNotFound

// uint64 range_id = 1;
void Error_RangeNotFound::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Error_RangeNotFound::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.Error.RangeNotFound.range_id)
  return range_id_;
}
void Error_RangeNotFound::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.Error.RangeNotFound.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_OutOfBound::kKeyFieldNumber;
const int Error_OutOfBound::kRangeIdFieldNumber;
const int Error_OutOfBound::kRangeStartFieldNumber;
const int Error_OutOfBound::kRangeLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_OutOfBound::Error_OutOfBound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.OutOfBound)
}
Error_OutOfBound::Error_OutOfBound(const Error_OutOfBound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.range_start().size() > 0) {
    range_start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_start_);
  }
  range_limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.range_limit().size() > 0) {
    range_limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_limit_);
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.Error.OutOfBound)
}

void Error_OutOfBound::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Error_OutOfBound::~Error_OutOfBound() {
  // @@protoc_insertion_point(destructor:dspb.Error.OutOfBound)
  SharedDtor();
}

void Error_OutOfBound::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error_OutOfBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_OutOfBound::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_OutOfBound& Error_OutOfBound::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_OutOfBound* Error_OutOfBound::New(::google::protobuf::Arena* arena) const {
  Error_OutOfBound* n = new Error_OutOfBound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_OutOfBound::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.OutOfBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Error_OutOfBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.OutOfBound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes range_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes range_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.OutOfBound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.OutOfBound)
  return false;
#undef DO_
}

void Error_OutOfBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.OutOfBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // bytes range_start = 3;
  if (this->range_start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->range_start(), output);
  }

  // bytes range_limit = 4;
  if (this->range_limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->range_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.OutOfBound)
}

::google::protobuf::uint8* Error_OutOfBound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.OutOfBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // bytes range_start = 3;
  if (this->range_start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->range_start(), target);
  }

  // bytes range_limit = 4;
  if (this->range_limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->range_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.OutOfBound)
  return target;
}

size_t Error_OutOfBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.OutOfBound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes range_start = 3;
  if (this->range_start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->range_start());
  }

  // bytes range_limit = 4;
  if (this->range_limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->range_limit());
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_OutOfBound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.OutOfBound)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_OutOfBound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_OutOfBound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.OutOfBound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.OutOfBound)
    MergeFrom(*source);
  }
}

void Error_OutOfBound::MergeFrom(const Error_OutOfBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.OutOfBound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_start().size() > 0) {

    range_start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_start_);
  }
  if (from.range_limit().size() > 0) {

    range_limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_limit_);
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void Error_OutOfBound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.OutOfBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_OutOfBound::CopyFrom(const Error_OutOfBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.OutOfBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_OutOfBound::IsInitialized() const {
  return true;
}

void Error_OutOfBound::Swap(Error_OutOfBound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_OutOfBound::InternalSwap(Error_OutOfBound* other) {
  using std::swap;
  key_.Swap(&other->key_);
  range_start_.Swap(&other->range_start_);
  range_limit_.Swap(&other->range_limit_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_OutOfBound::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_OutOfBound

// bytes key = 1;
void Error_OutOfBound::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error_OutOfBound::key() const {
  // @@protoc_insertion_point(field_get:dspb.Error.OutOfBound.key)
  return key_.GetNoArena();
}
void Error_OutOfBound::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Error.OutOfBound.key)
}
#if LANG_CXX11
void Error_OutOfBound::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Error.OutOfBound.key)
}
#endif
void Error_OutOfBound::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Error.OutOfBound.key)
}
void Error_OutOfBound::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Error.OutOfBound.key)
}
::std::string* Error_OutOfBound::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Error.OutOfBound.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error_OutOfBound::release_key() {
  // @@protoc_insertion_point(field_release:dspb.Error.OutOfBound.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error_OutOfBound::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.OutOfBound.key)
}

// uint64 range_id = 2;
void Error_OutOfBound::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Error_OutOfBound::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.Error.OutOfBound.range_id)
  return range_id_;
}
void Error_OutOfBound::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.Error.OutOfBound.range_id)
}

// bytes range_start = 3;
void Error_OutOfBound::clear_range_start() {
  range_start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error_OutOfBound::range_start() const {
  // @@protoc_insertion_point(field_get:dspb.Error.OutOfBound.range_start)
  return range_start_.GetNoArena();
}
void Error_OutOfBound::set_range_start(const ::std::string& value) {
  
  range_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Error.OutOfBound.range_start)
}
#if LANG_CXX11
void Error_OutOfBound::set_range_start(::std::string&& value) {
  
  range_start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Error.OutOfBound.range_start)
}
#endif
void Error_OutOfBound::set_range_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  range_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Error.OutOfBound.range_start)
}
void Error_OutOfBound::set_range_start(const void* value, size_t size) {
  
  range_start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Error.OutOfBound.range_start)
}
::std::string* Error_OutOfBound::mutable_range_start() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Error.OutOfBound.range_start)
  return range_start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error_OutOfBound::release_range_start() {
  // @@protoc_insertion_point(field_release:dspb.Error.OutOfBound.range_start)
  
  return range_start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error_OutOfBound::set_allocated_range_start(::std::string* range_start) {
  if (range_start != NULL) {
    
  } else {
    
  }
  range_start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_start);
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.OutOfBound.range_start)
}

// bytes range_limit = 4;
void Error_OutOfBound::clear_range_limit() {
  range_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error_OutOfBound::range_limit() const {
  // @@protoc_insertion_point(field_get:dspb.Error.OutOfBound.range_limit)
  return range_limit_.GetNoArena();
}
void Error_OutOfBound::set_range_limit(const ::std::string& value) {
  
  range_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Error.OutOfBound.range_limit)
}
#if LANG_CXX11
void Error_OutOfBound::set_range_limit(::std::string&& value) {
  
  range_limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Error.OutOfBound.range_limit)
}
#endif
void Error_OutOfBound::set_range_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  range_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Error.OutOfBound.range_limit)
}
void Error_OutOfBound::set_range_limit(const void* value, size_t size) {
  
  range_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Error.OutOfBound.range_limit)
}
::std::string* Error_OutOfBound::mutable_range_limit() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Error.OutOfBound.range_limit)
  return range_limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error_OutOfBound::release_range_limit() {
  // @@protoc_insertion_point(field_release:dspb.Error.OutOfBound.range_limit)
  
  return range_limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error_OutOfBound::set_allocated_range_limit(::std::string* range_limit) {
  if (range_limit != NULL) {
    
  } else {
    
  }
  range_limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_limit);
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.OutOfBound.range_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_StaleEpoch::kOldRangeFieldNumber;
const int Error_StaleEpoch::kNewRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_StaleEpoch::Error_StaleEpoch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.StaleEpoch)
}
Error_StaleEpoch::Error_StaleEpoch(const Error_StaleEpoch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_range()) {
    old_range_ = new ::basepb::Range(*from.old_range_);
  } else {
    old_range_ = NULL;
  }
  if (from.has_new_range()) {
    new_range_ = new ::basepb::Range(*from.new_range_);
  } else {
    new_range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dspb.Error.StaleEpoch)
}

void Error_StaleEpoch::SharedCtor() {
  ::memset(&old_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_range_) -
      reinterpret_cast<char*>(&old_range_)) + sizeof(new_range_));
  _cached_size_ = 0;
}

Error_StaleEpoch::~Error_StaleEpoch() {
  // @@protoc_insertion_point(destructor:dspb.Error.StaleEpoch)
  SharedDtor();
}

void Error_StaleEpoch::SharedDtor() {
  if (this != internal_default_instance()) delete old_range_;
  if (this != internal_default_instance()) delete new_range_;
}

void Error_StaleEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_StaleEpoch::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_StaleEpoch& Error_StaleEpoch::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_StaleEpoch* Error_StaleEpoch::New(::google::protobuf::Arena* arena) const {
  Error_StaleEpoch* n = new Error_StaleEpoch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_StaleEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.StaleEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && old_range_ != NULL) {
    delete old_range_;
  }
  old_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) {
    delete new_range_;
  }
  new_range_ = NULL;
  _internal_metadata_.Clear();
}

bool Error_StaleEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.StaleEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.Range old_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Range new_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.StaleEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.StaleEpoch)
  return false;
#undef DO_
}

void Error_StaleEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.StaleEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range old_range = 1;
  if (this->has_old_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->old_range_, output);
  }

  // .basepb.Range new_range = 2;
  if (this->has_new_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.StaleEpoch)
}

::google::protobuf::uint8* Error_StaleEpoch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.StaleEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range old_range = 1;
  if (this->has_old_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->old_range_, deterministic, target);
  }

  // .basepb.Range new_range = 2;
  if (this->has_new_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new_range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.StaleEpoch)
  return target;
}

size_t Error_StaleEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.StaleEpoch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.Range old_range = 1;
  if (this->has_old_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_range_);
  }

  // .basepb.Range new_range = 2;
  if (this->has_new_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_StaleEpoch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.StaleEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_StaleEpoch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_StaleEpoch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.StaleEpoch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.StaleEpoch)
    MergeFrom(*source);
  }
}

void Error_StaleEpoch::MergeFrom(const Error_StaleEpoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.StaleEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_old_range()) {
    mutable_old_range()->::basepb::Range::MergeFrom(from.old_range());
  }
  if (from.has_new_range()) {
    mutable_new_range()->::basepb::Range::MergeFrom(from.new_range());
  }
}

void Error_StaleEpoch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.StaleEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_StaleEpoch::CopyFrom(const Error_StaleEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.StaleEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_StaleEpoch::IsInitialized() const {
  return true;
}

void Error_StaleEpoch::Swap(Error_StaleEpoch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_StaleEpoch::InternalSwap(Error_StaleEpoch* other) {
  using std::swap;
  swap(old_range_, other->old_range_);
  swap(new_range_, other->new_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_StaleEpoch::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_StaleEpoch

// .basepb.Range old_range = 1;
bool Error_StaleEpoch::has_old_range() const {
  return this != internal_default_instance() && old_range_ != NULL;
}
void Error_StaleEpoch::clear_old_range() {
  if (GetArenaNoVirtual() == NULL && old_range_ != NULL) delete old_range_;
  old_range_ = NULL;
}
const ::basepb::Range& Error_StaleEpoch::old_range() const {
  const ::basepb::Range* p = old_range_;
  // @@protoc_insertion_point(field_get:dspb.Error.StaleEpoch.old_range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* Error_StaleEpoch::mutable_old_range() {
  
  if (old_range_ == NULL) {
    old_range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.StaleEpoch.old_range)
  return old_range_;
}
::basepb::Range* Error_StaleEpoch::release_old_range() {
  // @@protoc_insertion_point(field_release:dspb.Error.StaleEpoch.old_range)
  
  ::basepb::Range* temp = old_range_;
  old_range_ = NULL;
  return temp;
}
void Error_StaleEpoch::set_allocated_old_range(::basepb::Range* old_range) {
  delete old_range_;
  old_range_ = old_range;
  if (old_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.StaleEpoch.old_range)
}

// .basepb.Range new_range = 2;
bool Error_StaleEpoch::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
void Error_StaleEpoch::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
const ::basepb::Range& Error_StaleEpoch::new_range() const {
  const ::basepb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:dspb.Error.StaleEpoch.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* Error_StaleEpoch::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.StaleEpoch.new_range)
  return new_range_;
}
::basepb::Range* Error_StaleEpoch::release_new_range() {
  // @@protoc_insertion_point(field_release:dspb.Error.StaleEpoch.new_range)
  
  ::basepb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
void Error_StaleEpoch::set_allocated_new_range(::basepb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.StaleEpoch.new_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_NoLeftSpace::Error_NoLeftSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.NoLeftSpace)
}
Error_NoLeftSpace::Error_NoLeftSpace(const Error_NoLeftSpace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.Error.NoLeftSpace)
}

void Error_NoLeftSpace::SharedCtor() {
  _cached_size_ = 0;
}

Error_NoLeftSpace::~Error_NoLeftSpace() {
  // @@protoc_insertion_point(destructor:dspb.Error.NoLeftSpace)
  SharedDtor();
}

void Error_NoLeftSpace::SharedDtor() {
}

void Error_NoLeftSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_NoLeftSpace::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_NoLeftSpace& Error_NoLeftSpace::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_NoLeftSpace* Error_NoLeftSpace::New(::google::protobuf::Arena* arena) const {
  Error_NoLeftSpace* n = new Error_NoLeftSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_NoLeftSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.NoLeftSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Error_NoLeftSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.NoLeftSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.NoLeftSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.NoLeftSpace)
  return false;
#undef DO_
}

void Error_NoLeftSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.NoLeftSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.NoLeftSpace)
}

::google::protobuf::uint8* Error_NoLeftSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.NoLeftSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.NoLeftSpace)
  return target;
}

size_t Error_NoLeftSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.NoLeftSpace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_NoLeftSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.NoLeftSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_NoLeftSpace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_NoLeftSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.NoLeftSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.NoLeftSpace)
    MergeFrom(*source);
  }
}

void Error_NoLeftSpace::MergeFrom(const Error_NoLeftSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.NoLeftSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Error_NoLeftSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.NoLeftSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_NoLeftSpace::CopyFrom(const Error_NoLeftSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.NoLeftSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_NoLeftSpace::IsInitialized() const {
  return true;
}

void Error_NoLeftSpace::Swap(Error_NoLeftSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_NoLeftSpace::InternalSwap(Error_NoLeftSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_NoLeftSpace::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_NoLeftSpace

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error_ServerError::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error_ServerError::Error_ServerError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error.ServerError)
}
Error_ServerError::Error_ServerError(const Error_ServerError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.Error.ServerError)
}

void Error_ServerError::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Error_ServerError::~Error_ServerError() {
  // @@protoc_insertion_point(destructor:dspb.Error.ServerError)
  SharedDtor();
}

void Error_ServerError::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error_ServerError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_ServerError::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error_ServerError& Error_ServerError::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error_ServerError* Error_ServerError::New(::google::protobuf::Arena* arena) const {
  Error_ServerError* n = new Error_ServerError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error_ServerError::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error.ServerError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Error_ServerError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error.ServerError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.Error.ServerError.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error.ServerError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error.ServerError)
  return false;
#undef DO_
}

void Error_ServerError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error.ServerError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.Error.ServerError.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error.ServerError)
}

::google::protobuf::uint8* Error_ServerError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error.ServerError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.Error.ServerError.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error.ServerError)
  return target;
}

size_t Error_ServerError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error.ServerError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_ServerError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error.ServerError)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_ServerError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error_ServerError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error.ServerError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error.ServerError)
    MergeFrom(*source);
  }
}

void Error_ServerError::MergeFrom(const Error_ServerError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error.ServerError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Error_ServerError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error.ServerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_ServerError::CopyFrom(const Error_ServerError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error.ServerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_ServerError::IsInitialized() const {
  return true;
}

void Error_ServerError::Swap(Error_ServerError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error_ServerError::InternalSwap(Error_ServerError* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error_ServerError::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error_ServerError

// string msg = 1;
void Error_ServerError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error_ServerError::msg() const {
  // @@protoc_insertion_point(field_get:dspb.Error.ServerError.msg)
  return msg_.GetNoArena();
}
void Error_ServerError::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Error.ServerError.msg)
}
#if LANG_CXX11
void Error_ServerError::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Error.ServerError.msg)
}
#endif
void Error_ServerError::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Error.ServerError.msg)
}
void Error_ServerError::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Error.ServerError.msg)
}
::std::string* Error_ServerError::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Error.ServerError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error_ServerError::release_msg() {
  // @@protoc_insertion_point(field_release:dspb.Error.ServerError.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error_ServerError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.ServerError.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kClusterMismatchFieldNumber;
const int Error::kNotLeaderFieldNumber;
const int Error::kRaftFailFieldNumber;
const int Error::kRangeNotFoundFieldNumber;
const int Error::kOutOfBoundFieldNumber;
const int Error::kStaleEpochFieldNumber;
const int Error::kNoLeftSpaceFieldNumber;
const int Error::kServerErrorFieldNumber;
const int Error::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2ferror_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail().size() > 0) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  clear_has_err();
  switch (from.err_case()) {
    case kClusterMismatch: {
      mutable_cluster_mismatch()->::dspb::Error_ClusterMismatched::MergeFrom(from.cluster_mismatch());
      break;
    }
    case kNotLeader: {
      mutable_not_leader()->::dspb::Error_NotLeader::MergeFrom(from.not_leader());
      break;
    }
    case kRaftFail: {
      mutable_raft_fail()->::dspb::Error_RaftFail::MergeFrom(from.raft_fail());
      break;
    }
    case kRangeNotFound: {
      mutable_range_not_found()->::dspb::Error_RangeNotFound::MergeFrom(from.range_not_found());
      break;
    }
    case kOutOfBound: {
      mutable_out_of_bound()->::dspb::Error_OutOfBound::MergeFrom(from.out_of_bound());
      break;
    }
    case kStaleEpoch: {
      mutable_stale_epoch()->::dspb::Error_StaleEpoch::MergeFrom(from.stale_epoch());
      break;
    }
    case kNoLeftSpace: {
      mutable_no_left_space()->::dspb::Error_NoLeftSpace::MergeFrom(from.no_left_space());
      break;
    }
    case kServerError: {
      mutable_server_error()->::dspb::Error_ServerError::MergeFrom(from.server_error());
      break;
    }
    case ERR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.Error)
}

void Error::SharedCtor() {
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:dspb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_err()) {
    clear_err();
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_dspb_2ferror_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::clear_err() {
// @@protoc_insertion_point(one_of_clear_start:dspb.Error)
  switch (err_case()) {
    case kClusterMismatch: {
      delete err_.cluster_mismatch_;
      break;
    }
    case kNotLeader: {
      delete err_.not_leader_;
      break;
    }
    case kRaftFail: {
      delete err_.raft_fail_;
      break;
    }
    case kRangeNotFound: {
      delete err_.range_not_found_;
      break;
    }
    case kOutOfBound: {
      delete err_.out_of_bound_;
      break;
    }
    case kStaleEpoch: {
      delete err_.stale_epoch_;
      break;
    }
    case kNoLeftSpace: {
      delete err_.no_left_space_;
      break;
    }
    case kServerError: {
      delete err_.server_error_;
      break;
    }
    case ERR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ERR_NOT_SET;
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_err();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.Error.ClusterMismatched cluster_mismatch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_mismatch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.NotLeader not_leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.RaftFail raft_fail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft_fail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.RangeNotFound range_not_found = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_not_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.OutOfBound out_of_bound = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out_of_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.StaleEpoch stale_epoch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.NoLeftSpace no_left_space = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no_left_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error.ServerError server_error = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), static_cast<int>(this->detail().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dspb.Error.detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.Error.ClusterMismatched cluster_mismatch = 1;
  if (has_cluster_mismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *err_.cluster_mismatch_, output);
  }

  // .dspb.Error.NotLeader not_leader = 2;
  if (has_not_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *err_.not_leader_, output);
  }

  // .dspb.Error.RaftFail raft_fail = 3;
  if (has_raft_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *err_.raft_fail_, output);
  }

  // .dspb.Error.RangeNotFound range_not_found = 4;
  if (has_range_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *err_.range_not_found_, output);
  }

  // .dspb.Error.OutOfBound out_of_bound = 5;
  if (has_out_of_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *err_.out_of_bound_, output);
  }

  // .dspb.Error.StaleEpoch stale_epoch = 6;
  if (has_stale_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *err_.stale_epoch_, output);
  }

  // .dspb.Error.NoLeftSpace no_left_space = 7;
  if (has_no_left_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *err_.no_left_space_, output);
  }

  // .dspb.Error.ServerError server_error = 8;
  if (has_server_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *err_.server_error_, output);
  }

  // string detail = 100;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.Error.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->detail(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.Error.ClusterMismatched cluster_mismatch = 1;
  if (has_cluster_mismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *err_.cluster_mismatch_, deterministic, target);
  }

  // .dspb.Error.NotLeader not_leader = 2;
  if (has_not_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *err_.not_leader_, deterministic, target);
  }

  // .dspb.Error.RaftFail raft_fail = 3;
  if (has_raft_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *err_.raft_fail_, deterministic, target);
  }

  // .dspb.Error.RangeNotFound range_not_found = 4;
  if (has_range_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *err_.range_not_found_, deterministic, target);
  }

  // .dspb.Error.OutOfBound out_of_bound = 5;
  if (has_out_of_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *err_.out_of_bound_, deterministic, target);
  }

  // .dspb.Error.StaleEpoch stale_epoch = 6;
  if (has_stale_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *err_.stale_epoch_, deterministic, target);
  }

  // .dspb.Error.NoLeftSpace no_left_space = 7;
  if (has_no_left_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *err_.no_left_space_, deterministic, target);
  }

  // .dspb.Error.ServerError server_error = 8;
  if (has_server_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *err_.server_error_, deterministic, target);
  }

  // string detail = 100;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), static_cast<int>(this->detail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dspb.Error.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->detail(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string detail = 100;
  if (this->detail().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  switch (err_case()) {
    // .dspb.Error.ClusterMismatched cluster_mismatch = 1;
    case kClusterMismatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.cluster_mismatch_);
      break;
    }
    // .dspb.Error.NotLeader not_leader = 2;
    case kNotLeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.not_leader_);
      break;
    }
    // .dspb.Error.RaftFail raft_fail = 3;
    case kRaftFail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.raft_fail_);
      break;
    }
    // .dspb.Error.RangeNotFound range_not_found = 4;
    case kRangeNotFound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.range_not_found_);
      break;
    }
    // .dspb.Error.OutOfBound out_of_bound = 5;
    case kOutOfBound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.out_of_bound_);
      break;
    }
    // .dspb.Error.StaleEpoch stale_epoch = 6;
    case kStaleEpoch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.stale_epoch_);
      break;
    }
    // .dspb.Error.NoLeftSpace no_left_space = 7;
    case kNoLeftSpace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.no_left_space_);
      break;
    }
    // .dspb.Error.ServerError server_error = 8;
    case kServerError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *err_.server_error_);
      break;
    }
    case ERR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  switch (from.err_case()) {
    case kClusterMismatch: {
      mutable_cluster_mismatch()->::dspb::Error_ClusterMismatched::MergeFrom(from.cluster_mismatch());
      break;
    }
    case kNotLeader: {
      mutable_not_leader()->::dspb::Error_NotLeader::MergeFrom(from.not_leader());
      break;
    }
    case kRaftFail: {
      mutable_raft_fail()->::dspb::Error_RaftFail::MergeFrom(from.raft_fail());
      break;
    }
    case kRangeNotFound: {
      mutable_range_not_found()->::dspb::Error_RangeNotFound::MergeFrom(from.range_not_found());
      break;
    }
    case kOutOfBound: {
      mutable_out_of_bound()->::dspb::Error_OutOfBound::MergeFrom(from.out_of_bound());
      break;
    }
    case kStaleEpoch: {
      mutable_stale_epoch()->::dspb::Error_StaleEpoch::MergeFrom(from.stale_epoch());
      break;
    }
    case kNoLeftSpace: {
      mutable_no_left_space()->::dspb::Error_NoLeftSpace::MergeFrom(from.no_left_space());
      break;
    }
    case kServerError: {
      mutable_server_error()->::dspb::Error_ServerError::MergeFrom(from.server_error());
      break;
    }
    case ERR_NOT_SET: {
      break;
    }
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  detail_.Swap(&other->detail_);
  swap(err_, other->err_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_dspb_2ferror_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2ferror_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// .dspb.Error.ClusterMismatched cluster_mismatch = 1;
bool Error::has_cluster_mismatch() const {
  return err_case() == kClusterMismatch;
}
void Error::set_has_cluster_mismatch() {
  _oneof_case_[0] = kClusterMismatch;
}
void Error::clear_cluster_mismatch() {
  if (has_cluster_mismatch()) {
    delete err_.cluster_mismatch_;
    clear_has_err();
  }
}
 const ::dspb::Error_ClusterMismatched& Error::cluster_mismatch() const {
  // @@protoc_insertion_point(field_get:dspb.Error.cluster_mismatch)
  return has_cluster_mismatch()
      ? *err_.cluster_mismatch_
      : ::dspb::Error_ClusterMismatched::default_instance();
}
::dspb::Error_ClusterMismatched* Error::mutable_cluster_mismatch() {
  if (!has_cluster_mismatch()) {
    clear_err();
    set_has_cluster_mismatch();
    err_.cluster_mismatch_ = new ::dspb::Error_ClusterMismatched;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.cluster_mismatch)
  return err_.cluster_mismatch_;
}
::dspb::Error_ClusterMismatched* Error::release_cluster_mismatch() {
  // @@protoc_insertion_point(field_release:dspb.Error.cluster_mismatch)
  if (has_cluster_mismatch()) {
    clear_has_err();
    ::dspb::Error_ClusterMismatched* temp = err_.cluster_mismatch_;
    err_.cluster_mismatch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_cluster_mismatch(::dspb::Error_ClusterMismatched* cluster_mismatch) {
  clear_err();
  if (cluster_mismatch) {
    set_has_cluster_mismatch();
    err_.cluster_mismatch_ = cluster_mismatch;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.cluster_mismatch)
}

// .dspb.Error.NotLeader not_leader = 2;
bool Error::has_not_leader() const {
  return err_case() == kNotLeader;
}
void Error::set_has_not_leader() {
  _oneof_case_[0] = kNotLeader;
}
void Error::clear_not_leader() {
  if (has_not_leader()) {
    delete err_.not_leader_;
    clear_has_err();
  }
}
 const ::dspb::Error_NotLeader& Error::not_leader() const {
  // @@protoc_insertion_point(field_get:dspb.Error.not_leader)
  return has_not_leader()
      ? *err_.not_leader_
      : ::dspb::Error_NotLeader::default_instance();
}
::dspb::Error_NotLeader* Error::mutable_not_leader() {
  if (!has_not_leader()) {
    clear_err();
    set_has_not_leader();
    err_.not_leader_ = new ::dspb::Error_NotLeader;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.not_leader)
  return err_.not_leader_;
}
::dspb::Error_NotLeader* Error::release_not_leader() {
  // @@protoc_insertion_point(field_release:dspb.Error.not_leader)
  if (has_not_leader()) {
    clear_has_err();
    ::dspb::Error_NotLeader* temp = err_.not_leader_;
    err_.not_leader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_not_leader(::dspb::Error_NotLeader* not_leader) {
  clear_err();
  if (not_leader) {
    set_has_not_leader();
    err_.not_leader_ = not_leader;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.not_leader)
}

// .dspb.Error.RaftFail raft_fail = 3;
bool Error::has_raft_fail() const {
  return err_case() == kRaftFail;
}
void Error::set_has_raft_fail() {
  _oneof_case_[0] = kRaftFail;
}
void Error::clear_raft_fail() {
  if (has_raft_fail()) {
    delete err_.raft_fail_;
    clear_has_err();
  }
}
 const ::dspb::Error_RaftFail& Error::raft_fail() const {
  // @@protoc_insertion_point(field_get:dspb.Error.raft_fail)
  return has_raft_fail()
      ? *err_.raft_fail_
      : ::dspb::Error_RaftFail::default_instance();
}
::dspb::Error_RaftFail* Error::mutable_raft_fail() {
  if (!has_raft_fail()) {
    clear_err();
    set_has_raft_fail();
    err_.raft_fail_ = new ::dspb::Error_RaftFail;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.raft_fail)
  return err_.raft_fail_;
}
::dspb::Error_RaftFail* Error::release_raft_fail() {
  // @@protoc_insertion_point(field_release:dspb.Error.raft_fail)
  if (has_raft_fail()) {
    clear_has_err();
    ::dspb::Error_RaftFail* temp = err_.raft_fail_;
    err_.raft_fail_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_raft_fail(::dspb::Error_RaftFail* raft_fail) {
  clear_err();
  if (raft_fail) {
    set_has_raft_fail();
    err_.raft_fail_ = raft_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.raft_fail)
}

// .dspb.Error.RangeNotFound range_not_found = 4;
bool Error::has_range_not_found() const {
  return err_case() == kRangeNotFound;
}
void Error::set_has_range_not_found() {
  _oneof_case_[0] = kRangeNotFound;
}
void Error::clear_range_not_found() {
  if (has_range_not_found()) {
    delete err_.range_not_found_;
    clear_has_err();
  }
}
 const ::dspb::Error_RangeNotFound& Error::range_not_found() const {
  // @@protoc_insertion_point(field_get:dspb.Error.range_not_found)
  return has_range_not_found()
      ? *err_.range_not_found_
      : ::dspb::Error_RangeNotFound::default_instance();
}
::dspb::Error_RangeNotFound* Error::mutable_range_not_found() {
  if (!has_range_not_found()) {
    clear_err();
    set_has_range_not_found();
    err_.range_not_found_ = new ::dspb::Error_RangeNotFound;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.range_not_found)
  return err_.range_not_found_;
}
::dspb::Error_RangeNotFound* Error::release_range_not_found() {
  // @@protoc_insertion_point(field_release:dspb.Error.range_not_found)
  if (has_range_not_found()) {
    clear_has_err();
    ::dspb::Error_RangeNotFound* temp = err_.range_not_found_;
    err_.range_not_found_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_range_not_found(::dspb::Error_RangeNotFound* range_not_found) {
  clear_err();
  if (range_not_found) {
    set_has_range_not_found();
    err_.range_not_found_ = range_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.range_not_found)
}

// .dspb.Error.OutOfBound out_of_bound = 5;
bool Error::has_out_of_bound() const {
  return err_case() == kOutOfBound;
}
void Error::set_has_out_of_bound() {
  _oneof_case_[0] = kOutOfBound;
}
void Error::clear_out_of_bound() {
  if (has_out_of_bound()) {
    delete err_.out_of_bound_;
    clear_has_err();
  }
}
 const ::dspb::Error_OutOfBound& Error::out_of_bound() const {
  // @@protoc_insertion_point(field_get:dspb.Error.out_of_bound)
  return has_out_of_bound()
      ? *err_.out_of_bound_
      : ::dspb::Error_OutOfBound::default_instance();
}
::dspb::Error_OutOfBound* Error::mutable_out_of_bound() {
  if (!has_out_of_bound()) {
    clear_err();
    set_has_out_of_bound();
    err_.out_of_bound_ = new ::dspb::Error_OutOfBound;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.out_of_bound)
  return err_.out_of_bound_;
}
::dspb::Error_OutOfBound* Error::release_out_of_bound() {
  // @@protoc_insertion_point(field_release:dspb.Error.out_of_bound)
  if (has_out_of_bound()) {
    clear_has_err();
    ::dspb::Error_OutOfBound* temp = err_.out_of_bound_;
    err_.out_of_bound_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_out_of_bound(::dspb::Error_OutOfBound* out_of_bound) {
  clear_err();
  if (out_of_bound) {
    set_has_out_of_bound();
    err_.out_of_bound_ = out_of_bound;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.out_of_bound)
}

// .dspb.Error.StaleEpoch stale_epoch = 6;
bool Error::has_stale_epoch() const {
  return err_case() == kStaleEpoch;
}
void Error::set_has_stale_epoch() {
  _oneof_case_[0] = kStaleEpoch;
}
void Error::clear_stale_epoch() {
  if (has_stale_epoch()) {
    delete err_.stale_epoch_;
    clear_has_err();
  }
}
 const ::dspb::Error_StaleEpoch& Error::stale_epoch() const {
  // @@protoc_insertion_point(field_get:dspb.Error.stale_epoch)
  return has_stale_epoch()
      ? *err_.stale_epoch_
      : ::dspb::Error_StaleEpoch::default_instance();
}
::dspb::Error_StaleEpoch* Error::mutable_stale_epoch() {
  if (!has_stale_epoch()) {
    clear_err();
    set_has_stale_epoch();
    err_.stale_epoch_ = new ::dspb::Error_StaleEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.stale_epoch)
  return err_.stale_epoch_;
}
::dspb::Error_StaleEpoch* Error::release_stale_epoch() {
  // @@protoc_insertion_point(field_release:dspb.Error.stale_epoch)
  if (has_stale_epoch()) {
    clear_has_err();
    ::dspb::Error_StaleEpoch* temp = err_.stale_epoch_;
    err_.stale_epoch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_stale_epoch(::dspb::Error_StaleEpoch* stale_epoch) {
  clear_err();
  if (stale_epoch) {
    set_has_stale_epoch();
    err_.stale_epoch_ = stale_epoch;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.stale_epoch)
}

// .dspb.Error.NoLeftSpace no_left_space = 7;
bool Error::has_no_left_space() const {
  return err_case() == kNoLeftSpace;
}
void Error::set_has_no_left_space() {
  _oneof_case_[0] = kNoLeftSpace;
}
void Error::clear_no_left_space() {
  if (has_no_left_space()) {
    delete err_.no_left_space_;
    clear_has_err();
  }
}
 const ::dspb::Error_NoLeftSpace& Error::no_left_space() const {
  // @@protoc_insertion_point(field_get:dspb.Error.no_left_space)
  return has_no_left_space()
      ? *err_.no_left_space_
      : ::dspb::Error_NoLeftSpace::default_instance();
}
::dspb::Error_NoLeftSpace* Error::mutable_no_left_space() {
  if (!has_no_left_space()) {
    clear_err();
    set_has_no_left_space();
    err_.no_left_space_ = new ::dspb::Error_NoLeftSpace;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.no_left_space)
  return err_.no_left_space_;
}
::dspb::Error_NoLeftSpace* Error::release_no_left_space() {
  // @@protoc_insertion_point(field_release:dspb.Error.no_left_space)
  if (has_no_left_space()) {
    clear_has_err();
    ::dspb::Error_NoLeftSpace* temp = err_.no_left_space_;
    err_.no_left_space_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_no_left_space(::dspb::Error_NoLeftSpace* no_left_space) {
  clear_err();
  if (no_left_space) {
    set_has_no_left_space();
    err_.no_left_space_ = no_left_space;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.no_left_space)
}

// .dspb.Error.ServerError server_error = 8;
bool Error::has_server_error() const {
  return err_case() == kServerError;
}
void Error::set_has_server_error() {
  _oneof_case_[0] = kServerError;
}
void Error::clear_server_error() {
  if (has_server_error()) {
    delete err_.server_error_;
    clear_has_err();
  }
}
 const ::dspb::Error_ServerError& Error::server_error() const {
  // @@protoc_insertion_point(field_get:dspb.Error.server_error)
  return has_server_error()
      ? *err_.server_error_
      : ::dspb::Error_ServerError::default_instance();
}
::dspb::Error_ServerError* Error::mutable_server_error() {
  if (!has_server_error()) {
    clear_err();
    set_has_server_error();
    err_.server_error_ = new ::dspb::Error_ServerError;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Error.server_error)
  return err_.server_error_;
}
::dspb::Error_ServerError* Error::release_server_error() {
  // @@protoc_insertion_point(field_release:dspb.Error.server_error)
  if (has_server_error()) {
    clear_has_err();
    ::dspb::Error_ServerError* temp = err_.server_error_;
    err_.server_error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Error::set_allocated_server_error(::dspb::Error_ServerError* server_error) {
  clear_err();
  if (server_error) {
    set_has_server_error();
    err_.server_error_ = server_error;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.server_error)
}

// string detail = 100;
void Error::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::detail() const {
  // @@protoc_insertion_point(field_get:dspb.Error.detail)
  return detail_.GetNoArena();
}
void Error::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.Error.detail)
}
#if LANG_CXX11
void Error::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.Error.detail)
}
#endif
void Error::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.Error.detail)
}
void Error::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.Error.detail)
}
::std::string* Error::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:dspb.Error.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_detail() {
  // @@protoc_insertion_point(field_release:dspb.Error.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:dspb.Error.detail)
}

bool Error::has_err() const {
  return err_case() != ERR_NOT_SET;
}
void Error::clear_has_err() {
  _oneof_case_[0] = ERR_NOT_SET;
}
Error::ErrCase Error::err_case() const {
  return Error::ErrCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
