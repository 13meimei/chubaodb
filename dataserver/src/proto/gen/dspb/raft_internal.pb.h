// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/raft_internal.proto

#ifndef PROTOBUF_dspb_2fraft_5finternal_2eproto__INCLUDED
#define PROTOBUF_dspb_2fraft_5finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basepb/basepb.pb.h"
#include "dspb/kv.pb.h"
#include "dspb/txn.pb.h"
// @@protoc_insertion_point(includes)
namespace dspb {
class CmdID;
class CmdIDDefaultTypeInternal;
extern CmdIDDefaultTypeInternal _CmdID_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class PeerTask;
class PeerTaskDefaultTypeInternal;
extern PeerTaskDefaultTypeInternal _PeerTask_default_instance_;
class SnapshotContext;
class SnapshotContextDefaultTypeInternal;
extern SnapshotContextDefaultTypeInternal _SnapshotContext_default_instance_;
class SnapshotKVPair;
class SnapshotKVPairDefaultTypeInternal;
extern SnapshotKVPairDefaultTypeInternal _SnapshotKVPair_default_instance_;
class SplitCommand;
class SplitCommandDefaultTypeInternal;
extern SplitCommandDefaultTypeInternal _SplitCommand_default_instance_;
}  // namespace dspb

namespace dspb {

namespace protobuf_dspb_2fraft_5finternal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dspb_2fraft_5finternal_2eproto

enum CmdType {
  Invalid_Cmd = 0,
  TxnPrepare = 1,
  TxnDecide = 2,
  TxnClearup = 3,
  TxnSelect = 4,
  TxnScan = 5,
  TxnSelectFlow = 6,
  KvGet = 20,
  KvPut = 21,
  KvDelete = 22,
  AdminSplit = 100,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = Invalid_Cmd;
const CmdType CmdType_MAX = AdminSplit;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum CFType {
  CF_DEFAULT = 0,
  CF_TXN = 1,
  CFType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CFType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CFType_IsValid(int value);
const CFType CFType_MIN = CF_DEFAULT;
const CFType CFType_MAX = CF_TXN;
const int CFType_ARRAYSIZE = CFType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CFType_descriptor();
inline const ::std::string& CFType_Name(CFType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CFType_descriptor(), value);
}
inline bool CFType_Parse(
    const ::std::string& name, CFType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CFType>(
    CFType_descriptor(), name, value);
}
// ===================================================================

class SplitCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SplitCommand) */ {
 public:
  SplitCommand();
  virtual ~SplitCommand();

  SplitCommand(const SplitCommand& from);

  inline SplitCommand& operator=(const SplitCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitCommand(SplitCommand&& from) noexcept
    : SplitCommand() {
    *this = ::std::move(from);
  }

  inline SplitCommand& operator=(SplitCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitCommand& default_instance();

  static inline const SplitCommand* internal_default_instance() {
    return reinterpret_cast<const SplitCommand*>(
               &_SplitCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SplitCommand* other);
  friend void swap(SplitCommand& a, SplitCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  SplitCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SplitCommand& from);
  void MergeFrom(const SplitCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SplitCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes split_key = 2;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 2;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // .basepb.RangeEpoch epoch = 3;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 3;
  const ::basepb::RangeEpoch& epoch() const;
  ::basepb::RangeEpoch* mutable_epoch();
  ::basepb::RangeEpoch* release_epoch();
  void set_allocated_epoch(::basepb::RangeEpoch* epoch);

  // .basepb.Range new_range = 4;
  bool has_new_range() const;
  void clear_new_range();
  static const int kNewRangeFieldNumber = 4;
  const ::basepb::Range& new_range() const;
  ::basepb::Range* mutable_new_range();
  ::basepb::Range* release_new_range();
  void set_allocated_new_range(::basepb::Range* new_range);

  // uint64 leader = 1;
  void clear_leader();
  static const int kLeaderFieldNumber = 1;
  ::google::protobuf::uint64 leader() const;
  void set_leader(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.SplitCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  ::basepb::RangeEpoch* epoch_;
  ::basepb::Range* new_range_;
  ::google::protobuf::uint64 leader_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fraft_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.CmdID) */ {
 public:
  CmdID();
  virtual ~CmdID();

  CmdID(const CmdID& from);

  inline CmdID& operator=(const CmdID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdID(CmdID&& from) noexcept
    : CmdID() {
    *this = ::std::move(from);
  }

  inline CmdID& operator=(CmdID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdID& default_instance();

  static inline const CmdID* internal_default_instance() {
    return reinterpret_cast<const CmdID*>(
               &_CmdID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CmdID* other);
  friend void swap(CmdID& a, CmdID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdID* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdID& from);
  void MergeFrom(const CmdID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // uint64 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint64 seq() const;
  void set_seq(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.CmdID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 seq_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fraft_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dspb.CmdID cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  const ::dspb::CmdID& cmd_id() const;
  ::dspb::CmdID* mutable_cmd_id();
  ::dspb::CmdID* release_cmd_id();
  void set_allocated_cmd_id(::dspb::CmdID* cmd_id);

  // .basepb.RangeEpoch verify_epoch = 3;
  bool has_verify_epoch() const;
  void clear_verify_epoch();
  static const int kVerifyEpochFieldNumber = 3;
  const ::basepb::RangeEpoch& verify_epoch() const;
  ::basepb::RangeEpoch* mutable_verify_epoch();
  ::basepb::RangeEpoch* release_verify_epoch();
  void set_allocated_verify_epoch(::basepb::RangeEpoch* verify_epoch);

  // .dspb.PrepareRequest txn_prepare_req = 4;
  bool has_txn_prepare_req() const;
  void clear_txn_prepare_req();
  static const int kTxnPrepareReqFieldNumber = 4;
  const ::dspb::PrepareRequest& txn_prepare_req() const;
  ::dspb::PrepareRequest* mutable_txn_prepare_req();
  ::dspb::PrepareRequest* release_txn_prepare_req();
  void set_allocated_txn_prepare_req(::dspb::PrepareRequest* txn_prepare_req);

  // .dspb.DecideRequest txn_decide_req = 5;
  bool has_txn_decide_req() const;
  void clear_txn_decide_req();
  static const int kTxnDecideReqFieldNumber = 5;
  const ::dspb::DecideRequest& txn_decide_req() const;
  ::dspb::DecideRequest* mutable_txn_decide_req();
  ::dspb::DecideRequest* release_txn_decide_req();
  void set_allocated_txn_decide_req(::dspb::DecideRequest* txn_decide_req);

  // .dspb.ClearupRequest txn_clearup_req = 6;
  bool has_txn_clearup_req() const;
  void clear_txn_clearup_req();
  static const int kTxnClearupReqFieldNumber = 6;
  const ::dspb::ClearupRequest& txn_clearup_req() const;
  ::dspb::ClearupRequest* mutable_txn_clearup_req();
  ::dspb::ClearupRequest* release_txn_clearup_req();
  void set_allocated_txn_clearup_req(::dspb::ClearupRequest* txn_clearup_req);

  // .dspb.SelectRequest txn_select_req = 7;
  bool has_txn_select_req() const;
  void clear_txn_select_req();
  static const int kTxnSelectReqFieldNumber = 7;
  const ::dspb::SelectRequest& txn_select_req() const;
  ::dspb::SelectRequest* mutable_txn_select_req();
  ::dspb::SelectRequest* release_txn_select_req();
  void set_allocated_txn_select_req(::dspb::SelectRequest* txn_select_req);

  // .dspb.ScanRequest txn_scan_req = 8;
  bool has_txn_scan_req() const;
  void clear_txn_scan_req();
  static const int kTxnScanReqFieldNumber = 8;
  const ::dspb::ScanRequest& txn_scan_req() const;
  ::dspb::ScanRequest* mutable_txn_scan_req();
  ::dspb::ScanRequest* release_txn_scan_req();
  void set_allocated_txn_scan_req(::dspb::ScanRequest* txn_scan_req);

  // .dspb.SelectFlowRequest txn_select_flow_req = 9;
  bool has_txn_select_flow_req() const;
  void clear_txn_select_flow_req();
  static const int kTxnSelectFlowReqFieldNumber = 9;
  const ::dspb::SelectFlowRequest& txn_select_flow_req() const;
  ::dspb::SelectFlowRequest* mutable_txn_select_flow_req();
  ::dspb::SelectFlowRequest* release_txn_select_flow_req();
  void set_allocated_txn_select_flow_req(::dspb::SelectFlowRequest* txn_select_flow_req);

  // .dspb.KvGetRequest kv_get_req = 20;
  bool has_kv_get_req() const;
  void clear_kv_get_req();
  static const int kKvGetReqFieldNumber = 20;
  const ::dspb::KvGetRequest& kv_get_req() const;
  ::dspb::KvGetRequest* mutable_kv_get_req();
  ::dspb::KvGetRequest* release_kv_get_req();
  void set_allocated_kv_get_req(::dspb::KvGetRequest* kv_get_req);

  // .dspb.KvPutRequest kv_put_req = 21;
  bool has_kv_put_req() const;
  void clear_kv_put_req();
  static const int kKvPutReqFieldNumber = 21;
  const ::dspb::KvPutRequest& kv_put_req() const;
  ::dspb::KvPutRequest* mutable_kv_put_req();
  ::dspb::KvPutRequest* release_kv_put_req();
  void set_allocated_kv_put_req(::dspb::KvPutRequest* kv_put_req);

  // .dspb.KvDeleteRequest kv_delete_req = 22;
  bool has_kv_delete_req() const;
  void clear_kv_delete_req();
  static const int kKvDeleteReqFieldNumber = 22;
  const ::dspb::KvDeleteRequest& kv_delete_req() const;
  ::dspb::KvDeleteRequest* mutable_kv_delete_req();
  ::dspb::KvDeleteRequest* release_kv_delete_req();
  void set_allocated_kv_delete_req(::dspb::KvDeleteRequest* kv_delete_req);

  // .dspb.SplitCommand split_cmd = 100;
  bool has_split_cmd() const;
  void clear_split_cmd();
  static const int kSplitCmdFieldNumber = 100;
  const ::dspb::SplitCommand& split_cmd() const;
  ::dspb::SplitCommand* mutable_split_cmd();
  ::dspb::SplitCommand* release_split_cmd();
  void set_allocated_split_cmd(::dspb::SplitCommand* split_cmd);

  // .dspb.CmdType cmd_type = 2;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  ::dspb::CmdType cmd_type() const;
  void set_cmd_type(::dspb::CmdType value);

  // @@protoc_insertion_point(class_scope:dspb.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::CmdID* cmd_id_;
  ::basepb::RangeEpoch* verify_epoch_;
  ::dspb::PrepareRequest* txn_prepare_req_;
  ::dspb::DecideRequest* txn_decide_req_;
  ::dspb::ClearupRequest* txn_clearup_req_;
  ::dspb::SelectRequest* txn_select_req_;
  ::dspb::ScanRequest* txn_scan_req_;
  ::dspb::SelectFlowRequest* txn_select_flow_req_;
  ::dspb::KvGetRequest* kv_get_req_;
  ::dspb::KvPutRequest* kv_put_req_;
  ::dspb::KvDeleteRequest* kv_delete_req_;
  ::dspb::SplitCommand* split_cmd_;
  int cmd_type_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fraft_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.PeerTask) */ {
 public:
  PeerTask();
  virtual ~PeerTask();

  PeerTask(const PeerTask& from);

  inline PeerTask& operator=(const PeerTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerTask(PeerTask&& from) noexcept
    : PeerTask() {
    *this = ::std::move(from);
  }

  inline PeerTask& operator=(PeerTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerTask& default_instance();

  static inline const PeerTask* internal_default_instance() {
    return reinterpret_cast<const PeerTask*>(
               &_PeerTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PeerTask* other);
  friend void swap(PeerTask& a, PeerTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerTask* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerTask& from);
  void MergeFrom(const PeerTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .basepb.RangeEpoch verify_epoch = 1;
  bool has_verify_epoch() const;
  void clear_verify_epoch();
  static const int kVerifyEpochFieldNumber = 1;
  const ::basepb::RangeEpoch& verify_epoch() const;
  ::basepb::RangeEpoch* mutable_verify_epoch();
  ::basepb::RangeEpoch* release_verify_epoch();
  void set_allocated_verify_epoch(::basepb::RangeEpoch* verify_epoch);

  // .basepb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::basepb::Peer& peer() const;
  ::basepb::Peer* mutable_peer();
  ::basepb::Peer* release_peer();
  void set_allocated_peer(::basepb::Peer* peer);

  // @@protoc_insertion_point(class_scope:dspb.PeerTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::basepb::RangeEpoch* verify_epoch_;
  ::basepb::Peer* peer_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fraft_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotKVPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SnapshotKVPair) */ {
 public:
  SnapshotKVPair();
  virtual ~SnapshotKVPair();

  SnapshotKVPair(const SnapshotKVPair& from);

  inline SnapshotKVPair& operator=(const SnapshotKVPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotKVPair(SnapshotKVPair&& from) noexcept
    : SnapshotKVPair() {
    *this = ::std::move(from);
  }

  inline SnapshotKVPair& operator=(SnapshotKVPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotKVPair& default_instance();

  static inline const SnapshotKVPair* internal_default_instance() {
    return reinterpret_cast<const SnapshotKVPair*>(
               &_SnapshotKVPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SnapshotKVPair* other);
  friend void swap(SnapshotKVPair& a, SnapshotKVPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotKVPair* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotKVPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotKVPair& from);
  void MergeFrom(const SnapshotKVPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotKVPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .dspb.CFType cf_type = 3;
  void clear_cf_type();
  static const int kCfTypeFieldNumber = 3;
  ::dspb::CFType cf_type() const;
  void set_cf_type(::dspb::CFType value);

  // @@protoc_insertion_point(class_scope:dspb.SnapshotKVPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int cf_type_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fraft_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SnapshotContext) */ {
 public:
  SnapshotContext();
  virtual ~SnapshotContext();

  SnapshotContext(const SnapshotContext& from);

  inline SnapshotContext& operator=(const SnapshotContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotContext(SnapshotContext&& from) noexcept
    : SnapshotContext() {
    *this = ::std::move(from);
  }

  inline SnapshotContext& operator=(SnapshotContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotContext& default_instance();

  static inline const SnapshotContext* internal_default_instance() {
    return reinterpret_cast<const SnapshotContext*>(
               &_SnapshotContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SnapshotContext* other);
  friend void swap(SnapshotContext& a, SnapshotContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotContext* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotContext& from);
  void MergeFrom(const SnapshotContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .basepb.Range meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::basepb::Range& meta() const;
  ::basepb::Range* mutable_meta();
  ::basepb::Range* release_meta();
  void set_allocated_meta(::basepb::Range* meta);

  // @@protoc_insertion_point(class_scope:dspb.SnapshotContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::basepb::Range* meta_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fraft_5finternal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SplitCommand

// uint64 leader = 1;
inline void SplitCommand::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SplitCommand::leader() const {
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.leader)
  return leader_;
}
inline void SplitCommand::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:dspb.SplitCommand.leader)
}

// bytes split_key = 2;
inline void SplitCommand::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SplitCommand::split_key() const {
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.split_key)
  return split_key_.GetNoArena();
}
inline void SplitCommand::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SplitCommand.split_key)
}
#if LANG_CXX11
inline void SplitCommand::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SplitCommand.split_key)
}
#endif
inline void SplitCommand::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SplitCommand.split_key)
}
inline void SplitCommand::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SplitCommand.split_key)
}
inline ::std::string* SplitCommand::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SplitCommand.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SplitCommand::release_split_key() {
  // @@protoc_insertion_point(field_release:dspb.SplitCommand.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplitCommand::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SplitCommand.split_key)
}

// .basepb.RangeEpoch epoch = 3;
inline bool SplitCommand::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
inline void SplitCommand::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
inline const ::basepb::RangeEpoch& SplitCommand::epoch() const {
  const ::basepb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
inline ::basepb::RangeEpoch* SplitCommand::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SplitCommand.epoch)
  return epoch_;
}
inline ::basepb::RangeEpoch* SplitCommand::release_epoch() {
  // @@protoc_insertion_point(field_release:dspb.SplitCommand.epoch)
  
  ::basepb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
inline void SplitCommand::set_allocated_epoch(::basepb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SplitCommand.epoch)
}

// .basepb.Range new_range = 4;
inline bool SplitCommand::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
inline void SplitCommand::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
inline const ::basepb::Range& SplitCommand::new_range() const {
  const ::basepb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:dspb.SplitCommand.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
inline ::basepb::Range* SplitCommand::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SplitCommand.new_range)
  return new_range_;
}
inline ::basepb::Range* SplitCommand::release_new_range() {
  // @@protoc_insertion_point(field_release:dspb.SplitCommand.new_range)
  
  ::basepb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
inline void SplitCommand::set_allocated_new_range(::basepb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SplitCommand.new_range)
}

// -------------------------------------------------------------------

// CmdID

// uint64 node_id = 1;
inline void CmdID::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CmdID::node_id() const {
  // @@protoc_insertion_point(field_get:dspb.CmdID.node_id)
  return node_id_;
}
inline void CmdID::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.CmdID.node_id)
}

// uint64 seq = 2;
inline void CmdID::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CmdID::seq() const {
  // @@protoc_insertion_point(field_get:dspb.CmdID.seq)
  return seq_;
}
inline void CmdID::set_seq(::google::protobuf::uint64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:dspb.CmdID.seq)
}

// -------------------------------------------------------------------

// Command

// .dspb.CmdID cmd_id = 1;
inline bool Command::has_cmd_id() const {
  return this != internal_default_instance() && cmd_id_ != NULL;
}
inline void Command::clear_cmd_id() {
  if (GetArenaNoVirtual() == NULL && cmd_id_ != NULL) delete cmd_id_;
  cmd_id_ = NULL;
}
inline const ::dspb::CmdID& Command::cmd_id() const {
  const ::dspb::CmdID* p = cmd_id_;
  // @@protoc_insertion_point(field_get:dspb.Command.cmd_id)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::CmdID*>(
      &::dspb::_CmdID_default_instance_);
}
inline ::dspb::CmdID* Command::mutable_cmd_id() {
  
  if (cmd_id_ == NULL) {
    cmd_id_ = new ::dspb::CmdID;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.cmd_id)
  return cmd_id_;
}
inline ::dspb::CmdID* Command::release_cmd_id() {
  // @@protoc_insertion_point(field_release:dspb.Command.cmd_id)
  
  ::dspb::CmdID* temp = cmd_id_;
  cmd_id_ = NULL;
  return temp;
}
inline void Command::set_allocated_cmd_id(::dspb::CmdID* cmd_id) {
  delete cmd_id_;
  cmd_id_ = cmd_id;
  if (cmd_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.cmd_id)
}

// .dspb.CmdType cmd_type = 2;
inline void Command::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::dspb::CmdType Command::cmd_type() const {
  // @@protoc_insertion_point(field_get:dspb.Command.cmd_type)
  return static_cast< ::dspb::CmdType >(cmd_type_);
}
inline void Command::set_cmd_type(::dspb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.Command.cmd_type)
}

// .basepb.RangeEpoch verify_epoch = 3;
inline bool Command::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
inline void Command::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
inline const ::basepb::RangeEpoch& Command::verify_epoch() const {
  const ::basepb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:dspb.Command.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
inline ::basepb::RangeEpoch* Command::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.verify_epoch)
  return verify_epoch_;
}
inline ::basepb::RangeEpoch* Command::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:dspb.Command.verify_epoch)
  
  ::basepb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
inline void Command::set_allocated_verify_epoch(::basepb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.verify_epoch)
}

// .dspb.PrepareRequest txn_prepare_req = 4;
inline bool Command::has_txn_prepare_req() const {
  return this != internal_default_instance() && txn_prepare_req_ != NULL;
}
inline void Command::clear_txn_prepare_req() {
  if (GetArenaNoVirtual() == NULL && txn_prepare_req_ != NULL) delete txn_prepare_req_;
  txn_prepare_req_ = NULL;
}
inline const ::dspb::PrepareRequest& Command::txn_prepare_req() const {
  const ::dspb::PrepareRequest* p = txn_prepare_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_prepare_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::PrepareRequest*>(
      &::dspb::_PrepareRequest_default_instance_);
}
inline ::dspb::PrepareRequest* Command::mutable_txn_prepare_req() {
  
  if (txn_prepare_req_ == NULL) {
    txn_prepare_req_ = new ::dspb::PrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_prepare_req)
  return txn_prepare_req_;
}
inline ::dspb::PrepareRequest* Command::release_txn_prepare_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_prepare_req)
  
  ::dspb::PrepareRequest* temp = txn_prepare_req_;
  txn_prepare_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_txn_prepare_req(::dspb::PrepareRequest* txn_prepare_req) {
  delete txn_prepare_req_;
  txn_prepare_req_ = txn_prepare_req;
  if (txn_prepare_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_prepare_req)
}

// .dspb.DecideRequest txn_decide_req = 5;
inline bool Command::has_txn_decide_req() const {
  return this != internal_default_instance() && txn_decide_req_ != NULL;
}
inline void Command::clear_txn_decide_req() {
  if (GetArenaNoVirtual() == NULL && txn_decide_req_ != NULL) delete txn_decide_req_;
  txn_decide_req_ = NULL;
}
inline const ::dspb::DecideRequest& Command::txn_decide_req() const {
  const ::dspb::DecideRequest* p = txn_decide_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_decide_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::DecideRequest*>(
      &::dspb::_DecideRequest_default_instance_);
}
inline ::dspb::DecideRequest* Command::mutable_txn_decide_req() {
  
  if (txn_decide_req_ == NULL) {
    txn_decide_req_ = new ::dspb::DecideRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_decide_req)
  return txn_decide_req_;
}
inline ::dspb::DecideRequest* Command::release_txn_decide_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_decide_req)
  
  ::dspb::DecideRequest* temp = txn_decide_req_;
  txn_decide_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_txn_decide_req(::dspb::DecideRequest* txn_decide_req) {
  delete txn_decide_req_;
  txn_decide_req_ = txn_decide_req;
  if (txn_decide_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_decide_req)
}

// .dspb.ClearupRequest txn_clearup_req = 6;
inline bool Command::has_txn_clearup_req() const {
  return this != internal_default_instance() && txn_clearup_req_ != NULL;
}
inline void Command::clear_txn_clearup_req() {
  if (GetArenaNoVirtual() == NULL && txn_clearup_req_ != NULL) delete txn_clearup_req_;
  txn_clearup_req_ = NULL;
}
inline const ::dspb::ClearupRequest& Command::txn_clearup_req() const {
  const ::dspb::ClearupRequest* p = txn_clearup_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_clearup_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ClearupRequest*>(
      &::dspb::_ClearupRequest_default_instance_);
}
inline ::dspb::ClearupRequest* Command::mutable_txn_clearup_req() {
  
  if (txn_clearup_req_ == NULL) {
    txn_clearup_req_ = new ::dspb::ClearupRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_clearup_req)
  return txn_clearup_req_;
}
inline ::dspb::ClearupRequest* Command::release_txn_clearup_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_clearup_req)
  
  ::dspb::ClearupRequest* temp = txn_clearup_req_;
  txn_clearup_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_txn_clearup_req(::dspb::ClearupRequest* txn_clearup_req) {
  delete txn_clearup_req_;
  txn_clearup_req_ = txn_clearup_req;
  if (txn_clearup_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_clearup_req)
}

// .dspb.SelectRequest txn_select_req = 7;
inline bool Command::has_txn_select_req() const {
  return this != internal_default_instance() && txn_select_req_ != NULL;
}
inline void Command::clear_txn_select_req() {
  if (GetArenaNoVirtual() == NULL && txn_select_req_ != NULL) delete txn_select_req_;
  txn_select_req_ = NULL;
}
inline const ::dspb::SelectRequest& Command::txn_select_req() const {
  const ::dspb::SelectRequest* p = txn_select_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_select_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SelectRequest*>(
      &::dspb::_SelectRequest_default_instance_);
}
inline ::dspb::SelectRequest* Command::mutable_txn_select_req() {
  
  if (txn_select_req_ == NULL) {
    txn_select_req_ = new ::dspb::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_select_req)
  return txn_select_req_;
}
inline ::dspb::SelectRequest* Command::release_txn_select_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_select_req)
  
  ::dspb::SelectRequest* temp = txn_select_req_;
  txn_select_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_txn_select_req(::dspb::SelectRequest* txn_select_req) {
  delete txn_select_req_;
  txn_select_req_ = txn_select_req;
  if (txn_select_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_select_req)
}

// .dspb.ScanRequest txn_scan_req = 8;
inline bool Command::has_txn_scan_req() const {
  return this != internal_default_instance() && txn_scan_req_ != NULL;
}
inline void Command::clear_txn_scan_req() {
  if (GetArenaNoVirtual() == NULL && txn_scan_req_ != NULL) delete txn_scan_req_;
  txn_scan_req_ = NULL;
}
inline const ::dspb::ScanRequest& Command::txn_scan_req() const {
  const ::dspb::ScanRequest* p = txn_scan_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_scan_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::ScanRequest*>(
      &::dspb::_ScanRequest_default_instance_);
}
inline ::dspb::ScanRequest* Command::mutable_txn_scan_req() {
  
  if (txn_scan_req_ == NULL) {
    txn_scan_req_ = new ::dspb::ScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_scan_req)
  return txn_scan_req_;
}
inline ::dspb::ScanRequest* Command::release_txn_scan_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_scan_req)
  
  ::dspb::ScanRequest* temp = txn_scan_req_;
  txn_scan_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_txn_scan_req(::dspb::ScanRequest* txn_scan_req) {
  delete txn_scan_req_;
  txn_scan_req_ = txn_scan_req;
  if (txn_scan_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_scan_req)
}

// .dspb.SelectFlowRequest txn_select_flow_req = 9;
inline bool Command::has_txn_select_flow_req() const {
  return this != internal_default_instance() && txn_select_flow_req_ != NULL;
}
inline void Command::clear_txn_select_flow_req() {
  if (GetArenaNoVirtual() == NULL && txn_select_flow_req_ != NULL) delete txn_select_flow_req_;
  txn_select_flow_req_ = NULL;
}
inline const ::dspb::SelectFlowRequest& Command::txn_select_flow_req() const {
  const ::dspb::SelectFlowRequest* p = txn_select_flow_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.txn_select_flow_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SelectFlowRequest*>(
      &::dspb::_SelectFlowRequest_default_instance_);
}
inline ::dspb::SelectFlowRequest* Command::mutable_txn_select_flow_req() {
  
  if (txn_select_flow_req_ == NULL) {
    txn_select_flow_req_ = new ::dspb::SelectFlowRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.txn_select_flow_req)
  return txn_select_flow_req_;
}
inline ::dspb::SelectFlowRequest* Command::release_txn_select_flow_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.txn_select_flow_req)
  
  ::dspb::SelectFlowRequest* temp = txn_select_flow_req_;
  txn_select_flow_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_txn_select_flow_req(::dspb::SelectFlowRequest* txn_select_flow_req) {
  delete txn_select_flow_req_;
  txn_select_flow_req_ = txn_select_flow_req;
  if (txn_select_flow_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.txn_select_flow_req)
}

// .dspb.KvGetRequest kv_get_req = 20;
inline bool Command::has_kv_get_req() const {
  return this != internal_default_instance() && kv_get_req_ != NULL;
}
inline void Command::clear_kv_get_req() {
  if (GetArenaNoVirtual() == NULL && kv_get_req_ != NULL) delete kv_get_req_;
  kv_get_req_ = NULL;
}
inline const ::dspb::KvGetRequest& Command::kv_get_req() const {
  const ::dspb::KvGetRequest* p = kv_get_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.kv_get_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KvGetRequest*>(
      &::dspb::_KvGetRequest_default_instance_);
}
inline ::dspb::KvGetRequest* Command::mutable_kv_get_req() {
  
  if (kv_get_req_ == NULL) {
    kv_get_req_ = new ::dspb::KvGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.kv_get_req)
  return kv_get_req_;
}
inline ::dspb::KvGetRequest* Command::release_kv_get_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.kv_get_req)
  
  ::dspb::KvGetRequest* temp = kv_get_req_;
  kv_get_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_get_req(::dspb::KvGetRequest* kv_get_req) {
  delete kv_get_req_;
  kv_get_req_ = kv_get_req;
  if (kv_get_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.kv_get_req)
}

// .dspb.KvPutRequest kv_put_req = 21;
inline bool Command::has_kv_put_req() const {
  return this != internal_default_instance() && kv_put_req_ != NULL;
}
inline void Command::clear_kv_put_req() {
  if (GetArenaNoVirtual() == NULL && kv_put_req_ != NULL) delete kv_put_req_;
  kv_put_req_ = NULL;
}
inline const ::dspb::KvPutRequest& Command::kv_put_req() const {
  const ::dspb::KvPutRequest* p = kv_put_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.kv_put_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KvPutRequest*>(
      &::dspb::_KvPutRequest_default_instance_);
}
inline ::dspb::KvPutRequest* Command::mutable_kv_put_req() {
  
  if (kv_put_req_ == NULL) {
    kv_put_req_ = new ::dspb::KvPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.kv_put_req)
  return kv_put_req_;
}
inline ::dspb::KvPutRequest* Command::release_kv_put_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.kv_put_req)
  
  ::dspb::KvPutRequest* temp = kv_put_req_;
  kv_put_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_put_req(::dspb::KvPutRequest* kv_put_req) {
  delete kv_put_req_;
  kv_put_req_ = kv_put_req;
  if (kv_put_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.kv_put_req)
}

// .dspb.KvDeleteRequest kv_delete_req = 22;
inline bool Command::has_kv_delete_req() const {
  return this != internal_default_instance() && kv_delete_req_ != NULL;
}
inline void Command::clear_kv_delete_req() {
  if (GetArenaNoVirtual() == NULL && kv_delete_req_ != NULL) delete kv_delete_req_;
  kv_delete_req_ = NULL;
}
inline const ::dspb::KvDeleteRequest& Command::kv_delete_req() const {
  const ::dspb::KvDeleteRequest* p = kv_delete_req_;
  // @@protoc_insertion_point(field_get:dspb.Command.kv_delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KvDeleteRequest*>(
      &::dspb::_KvDeleteRequest_default_instance_);
}
inline ::dspb::KvDeleteRequest* Command::mutable_kv_delete_req() {
  
  if (kv_delete_req_ == NULL) {
    kv_delete_req_ = new ::dspb::KvDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.kv_delete_req)
  return kv_delete_req_;
}
inline ::dspb::KvDeleteRequest* Command::release_kv_delete_req() {
  // @@protoc_insertion_point(field_release:dspb.Command.kv_delete_req)
  
  ::dspb::KvDeleteRequest* temp = kv_delete_req_;
  kv_delete_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_delete_req(::dspb::KvDeleteRequest* kv_delete_req) {
  delete kv_delete_req_;
  kv_delete_req_ = kv_delete_req;
  if (kv_delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.kv_delete_req)
}

// .dspb.SplitCommand split_cmd = 100;
inline bool Command::has_split_cmd() const {
  return this != internal_default_instance() && split_cmd_ != NULL;
}
inline void Command::clear_split_cmd() {
  if (GetArenaNoVirtual() == NULL && split_cmd_ != NULL) delete split_cmd_;
  split_cmd_ = NULL;
}
inline const ::dspb::SplitCommand& Command::split_cmd() const {
  const ::dspb::SplitCommand* p = split_cmd_;
  // @@protoc_insertion_point(field_get:dspb.Command.split_cmd)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SplitCommand*>(
      &::dspb::_SplitCommand_default_instance_);
}
inline ::dspb::SplitCommand* Command::mutable_split_cmd() {
  
  if (split_cmd_ == NULL) {
    split_cmd_ = new ::dspb::SplitCommand;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Command.split_cmd)
  return split_cmd_;
}
inline ::dspb::SplitCommand* Command::release_split_cmd() {
  // @@protoc_insertion_point(field_release:dspb.Command.split_cmd)
  
  ::dspb::SplitCommand* temp = split_cmd_;
  split_cmd_ = NULL;
  return temp;
}
inline void Command::set_allocated_split_cmd(::dspb::SplitCommand* split_cmd) {
  delete split_cmd_;
  split_cmd_ = split_cmd;
  if (split_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Command.split_cmd)
}

// -------------------------------------------------------------------

// PeerTask

// .basepb.RangeEpoch verify_epoch = 1;
inline bool PeerTask::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
inline void PeerTask::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
inline const ::basepb::RangeEpoch& PeerTask::verify_epoch() const {
  const ::basepb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:dspb.PeerTask.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
inline ::basepb::RangeEpoch* PeerTask::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.PeerTask.verify_epoch)
  return verify_epoch_;
}
inline ::basepb::RangeEpoch* PeerTask::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:dspb.PeerTask.verify_epoch)
  
  ::basepb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
inline void PeerTask::set_allocated_verify_epoch(::basepb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.PeerTask.verify_epoch)
}

// .basepb.Peer peer = 2;
inline bool PeerTask::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void PeerTask::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::basepb::Peer& PeerTask::peer() const {
  const ::basepb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:dspb.PeerTask.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
inline ::basepb::Peer* PeerTask::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.PeerTask.peer)
  return peer_;
}
inline ::basepb::Peer* PeerTask::release_peer() {
  // @@protoc_insertion_point(field_release:dspb.PeerTask.peer)
  
  ::basepb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void PeerTask::set_allocated_peer(::basepb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.PeerTask.peer)
}

// -------------------------------------------------------------------

// SnapshotKVPair

// bytes key = 1;
inline void SnapshotKVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotKVPair::key() const {
  // @@protoc_insertion_point(field_get:dspb.SnapshotKVPair.key)
  return key_.GetNoArena();
}
inline void SnapshotKVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SnapshotKVPair.key)
}
#if LANG_CXX11
inline void SnapshotKVPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SnapshotKVPair.key)
}
#endif
inline void SnapshotKVPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SnapshotKVPair.key)
}
inline void SnapshotKVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SnapshotKVPair.key)
}
inline ::std::string* SnapshotKVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SnapshotKVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotKVPair::release_key() {
  // @@protoc_insertion_point(field_release:dspb.SnapshotKVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotKVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dspb.SnapshotKVPair.key)
}

// bytes value = 2;
inline void SnapshotKVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotKVPair::value() const {
  // @@protoc_insertion_point(field_get:dspb.SnapshotKVPair.value)
  return value_.GetNoArena();
}
inline void SnapshotKVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.SnapshotKVPair.value)
}
#if LANG_CXX11
inline void SnapshotKVPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.SnapshotKVPair.value)
}
#endif
inline void SnapshotKVPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.SnapshotKVPair.value)
}
inline void SnapshotKVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.SnapshotKVPair.value)
}
inline ::std::string* SnapshotKVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:dspb.SnapshotKVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotKVPair::release_value() {
  // @@protoc_insertion_point(field_release:dspb.SnapshotKVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotKVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dspb.SnapshotKVPair.value)
}

// .dspb.CFType cf_type = 3;
inline void SnapshotKVPair::clear_cf_type() {
  cf_type_ = 0;
}
inline ::dspb::CFType SnapshotKVPair::cf_type() const {
  // @@protoc_insertion_point(field_get:dspb.SnapshotKVPair.cf_type)
  return static_cast< ::dspb::CFType >(cf_type_);
}
inline void SnapshotKVPair::set_cf_type(::dspb::CFType value) {
  
  cf_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.SnapshotKVPair.cf_type)
}

// -------------------------------------------------------------------

// SnapshotContext

// .basepb.Range meta = 1;
inline bool SnapshotContext::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void SnapshotContext::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::basepb::Range& SnapshotContext::meta() const {
  const ::basepb::Range* p = meta_;
  // @@protoc_insertion_point(field_get:dspb.SnapshotContext.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
inline ::basepb::Range* SnapshotContext::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SnapshotContext.meta)
  return meta_;
}
inline ::basepb::Range* SnapshotContext::release_meta() {
  // @@protoc_insertion_point(field_release:dspb.SnapshotContext.meta)
  
  ::basepb::Range* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void SnapshotContext::set_allocated_meta(::basepb::Range* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SnapshotContext.meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dspb::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::CmdType>() {
  return ::dspb::CmdType_descriptor();
}
template <> struct is_proto_enum< ::dspb::CFType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::CFType>() {
  return ::dspb::CFType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dspb_2fraft_5finternal_2eproto__INCLUDED
