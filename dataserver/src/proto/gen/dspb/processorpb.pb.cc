// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/processorpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/processorpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class ProcessorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Processor>
     _instance;
} _Processor_default_instance_;
class TableReadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TableRead>
     _instance;
} _TableRead_default_instance_;
class KeyRangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyRange>
     _instance;
} _KeyRange_default_instance_;
class IndexReadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexRead>
     _instance;
} _IndexRead_default_instance_;
class SelectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Selection>
     _instance;
} _Selection_default_instance_;
class ProjectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Projection>
     _instance;
} _Projection_default_instance_;
class OrderingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ordering>
     _instance;
} _Ordering_default_instance_;
class AggregationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Aggregation>
     _instance;
} _Aggregation_default_instance_;
class LimitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Limit>
     _instance;
} _Limit_default_instance_;
class DataSampleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DataSample>
     _instance;
} _DataSample_default_instance_;
class OrderByColumnDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OrderByColumn>
     _instance;
} _OrderByColumn_default_instance_;
class ProcessorTraceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProcessorTrace>
     _instance;
} _ProcessorTrace_default_instance_;

namespace protobuf_dspb_2fprocessorpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, table_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, index_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, projection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, aggregation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, stream_aggregation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, ordering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, data_sample_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRead, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRead, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRead, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRead, pk_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRead, desc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, start_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, end_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, index_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRead, unique_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selection, filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projection, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordering, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordering, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, func_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, group_by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSample, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSample, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSample, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSample, ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderByColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderByColumn, expr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderByColumn, asc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorTrace, processed_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorTrace, elapse_time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Processor)},
  { 15, -1, sizeof(TableRead)},
  { 25, -1, sizeof(KeyRange)},
  { 32, -1, sizeof(IndexRead)},
  { 43, -1, sizeof(Selection)},
  { 49, -1, sizeof(Projection)},
  { 55, -1, sizeof(Ordering)},
  { 62, -1, sizeof(Aggregation)},
  { 69, -1, sizeof(Limit)},
  { 76, -1, sizeof(DataSample)},
  { 85, -1, sizeof(OrderByColumn)},
  { 92, -1, sizeof(ProcessorTrace)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Processor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableRead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexRead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Selection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Projection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ordering_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Aggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Limit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataSample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OrderByColumn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessorTrace_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/processorpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::dspb::protobuf_dspb_2fexpr_2eproto::InitDefaults();
  _Processor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Processor_default_instance_);_TableRead_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TableRead_default_instance_);_KeyRange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyRange_default_instance_);_IndexRead_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexRead_default_instance_);_Selection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Selection_default_instance_);_Projection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Projection_default_instance_);_Ordering_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ordering_default_instance_);_Aggregation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Aggregation_default_instance_);_Limit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Limit_default_instance_);_DataSample_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DataSample_default_instance_);_OrderByColumn_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OrderByColumn_default_instance_);_ProcessorTrace_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProcessorTrace_default_instance_);_Processor_default_instance_._instance.get_mutable()->table_read_ = const_cast< ::dspb::TableRead*>(
      ::dspb::TableRead::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->index_read_ = const_cast< ::dspb::IndexRead*>(
      ::dspb::IndexRead::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->selection_ = const_cast< ::dspb::Selection*>(
      ::dspb::Selection::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->projection_ = const_cast< ::dspb::Projection*>(
      ::dspb::Projection::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->aggregation_ = const_cast< ::dspb::Aggregation*>(
      ::dspb::Aggregation::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->stream_aggregation_ = const_cast< ::dspb::Aggregation*>(
      ::dspb::Aggregation::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->ordering_ = const_cast< ::dspb::Ordering*>(
      ::dspb::Ordering::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->limit_ = const_cast< ::dspb::Limit*>(
      ::dspb::Limit::internal_default_instance());
  _Processor_default_instance_._instance.get_mutable()->data_sample_ = const_cast< ::dspb::DataSample*>(
      ::dspb::DataSample::internal_default_instance());
  _TableRead_default_instance_._instance.get_mutable()->range_ = const_cast< ::dspb::KeyRange*>(
      ::dspb::KeyRange::internal_default_instance());
  _IndexRead_default_instance_._instance.get_mutable()->range_ = const_cast< ::dspb::KeyRange*>(
      ::dspb::KeyRange::internal_default_instance());
  _DataSample_default_instance_._instance.get_mutable()->range_ = const_cast< ::dspb::KeyRange*>(
      ::dspb::KeyRange::internal_default_instance());
  _OrderByColumn_default_instance_._instance.get_mutable()->expr_ = const_cast< ::dspb::Expr*>(
      ::dspb::Expr::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026dspb/processorpb.proto\022\004dspb\032\017dspb/exp"
      "r.proto\"\376\002\n\tProcessor\022!\n\004type\030\001 \001(\0162\023.ds"
      "pb.ProcessorType\022#\n\ntable_read\030\002 \001(\0132\017.d"
      "spb.TableRead\022#\n\nindex_read\030\003 \001(\0132\017.dspb"
      ".IndexRead\022\"\n\tselection\030\004 \001(\0132\017.dspb.Sel"
      "ection\022$\n\nprojection\030\005 \001(\0132\020.dspb.Projec"
      "tion\022&\n\013aggregation\030\006 \001(\0132\021.dspb.Aggrega"
      "tion\022-\n\022stream_aggregation\030\007 \001(\0132\021.dspb."
      "Aggregation\022 \n\010ordering\030\010 \001(\0132\016.dspb.Ord"
      "ering\022\032\n\005limit\030\t \001(\0132\013.dspb.Limit\022%\n\013dat"
      "a_sample\030\n \001(\0132\020.dspb.DataSample\"\211\001\n\tTab"
      "leRead\022!\n\007columns\030\001 \003(\0132\020.dspb.ColumnInf"
      "o\022\033\n\004type\030\002 \001(\0162\r.dspb.KeyType\022\035\n\005range\030"
      "\003 \001(\0132\016.dspb.KeyRange\022\017\n\007pk_keys\030\004 \003(\014\022\014"
      "\n\004desc\030\005 \001(\010\".\n\010KeyRange\022\021\n\tstart_key\030\001 "
      "\001(\014\022\017\n\007end_key\030\002 \001(\014\"\234\001\n\tIndexRead\022!\n\007co"
      "lumns\030\001 \003(\0132\020.dspb.ColumnInfo\022\033\n\004type\030\002 "
      "\001(\0162\r.dspb.KeyType\022\035\n\005range\030\003 \001(\0132\016.dspb"
      ".KeyRange\022\022\n\nindex_keys\030\004 \003(\014\022\014\n\004desc\030\005 "
      "\001(\010\022\016\n\006unique\030\006 \001(\010\"\'\n\tSelection\022\032\n\006filt"
      "er\030\001 \003(\0132\n.dspb.Expr\")\n\nProjection\022\033\n\007co"
      "lumns\030\001 \003(\0132\n.dspb.Expr\"\?\n\010Ordering\022$\n\007c"
      "olumns\030\001 \003(\0132\023.dspb.OrderByColumn\022\r\n\005cou"
      "nt\030\002 \001(\004\"E\n\013Aggregation\022\030\n\004func\030\001 \003(\0132\n."
      "dspb.Expr\022\034\n\010group_by\030\002 \003(\0132\n.dspb.Expr\""
      "&\n\005Limit\022\016\n\006offset\030\001 \001(\004\022\r\n\005count\030\002 \001(\004\""
      "\264\001\n\nDataSample\022-\n\006method\030\001 \001(\0162\035.dspb.Da"
      "taSample.SampleMethod\022!\n\007columns\030\002 \003(\0132\020"
      ".dspb.ColumnInfo\022\035\n\005range\030\003 \001(\0132\016.dspb.K"
      "eyRange\022\r\n\005ratio\030\004 \001(\001\"&\n\014SampleMethod\022\026"
      "\n\022RESERVIOR_SAMPLING\020\000\"6\n\rOrderByColumn\022"
      "\030\n\004expr\030\001 \001(\0132\n.dspb.Expr\022\013\n\003asc\030\002 \001(\010\"="
      "\n\016ProcessorTrace\022\026\n\016processed_rows\030\001 \001(\004"
      "\022\023\n\013elapse_time\030\002 \001(\004*\316\001\n\rProcessorType\022"
      "\023\n\017TABLE_READ_TYPE\020\000\022\023\n\017INDEX_READ_TYPE\020"
      "\001\022\022\n\016SELECTION_TYPE\020\002\022\023\n\017PROJECTION_TYPE"
      "\020\003\022\024\n\020AGGREGATION_TYPE\020\004\022\033\n\027STREAM_AGGRE"
      "GATION_TYPE\020\005\022\021\n\rORDER_BY_TYPE\020\006\022\016\n\nLIMI"
      "T_TYPE\020\007\022\024\n\020DATA_SAMPLE_TYPE\020\010*L\n\007KeyTyp"
      "e\022\026\n\022DEFAULT_RANGE_TYPE\020\000\022\024\n\020PRIMARY_KEY"
      "_TYPE\020\001\022\023\n\017KEYS_RANGE_TYPE\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/processorpb.proto", &protobuf_RegisterTypes);
  ::dspb::protobuf_dspb_2fexpr_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2fprocessorpb_2eproto

const ::google::protobuf::EnumDescriptor* DataSample_SampleMethod_descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_enum_descriptors[0];
}
bool DataSample_SampleMethod_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataSample_SampleMethod DataSample::RESERVIOR_SAMPLING;
const DataSample_SampleMethod DataSample::SampleMethod_MIN;
const DataSample_SampleMethod DataSample::SampleMethod_MAX;
const int DataSample::SampleMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProcessorType_descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_enum_descriptors[1];
}
bool ProcessorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeyType_descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_enum_descriptors[2];
}
bool KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Processor::kTypeFieldNumber;
const int Processor::kTableReadFieldNumber;
const int Processor::kIndexReadFieldNumber;
const int Processor::kSelectionFieldNumber;
const int Processor::kProjectionFieldNumber;
const int Processor::kAggregationFieldNumber;
const int Processor::kStreamAggregationFieldNumber;
const int Processor::kOrderingFieldNumber;
const int Processor::kLimitFieldNumber;
const int Processor::kDataSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Processor::Processor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Processor)
}
Processor::Processor(const Processor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_read()) {
    table_read_ = new ::dspb::TableRead(*from.table_read_);
  } else {
    table_read_ = NULL;
  }
  if (from.has_index_read()) {
    index_read_ = new ::dspb::IndexRead(*from.index_read_);
  } else {
    index_read_ = NULL;
  }
  if (from.has_selection()) {
    selection_ = new ::dspb::Selection(*from.selection_);
  } else {
    selection_ = NULL;
  }
  if (from.has_projection()) {
    projection_ = new ::dspb::Projection(*from.projection_);
  } else {
    projection_ = NULL;
  }
  if (from.has_aggregation()) {
    aggregation_ = new ::dspb::Aggregation(*from.aggregation_);
  } else {
    aggregation_ = NULL;
  }
  if (from.has_stream_aggregation()) {
    stream_aggregation_ = new ::dspb::Aggregation(*from.stream_aggregation_);
  } else {
    stream_aggregation_ = NULL;
  }
  if (from.has_ordering()) {
    ordering_ = new ::dspb::Ordering(*from.ordering_);
  } else {
    ordering_ = NULL;
  }
  if (from.has_limit()) {
    limit_ = new ::dspb::Limit(*from.limit_);
  } else {
    limit_ = NULL;
  }
  if (from.has_data_sample()) {
    data_sample_ = new ::dspb::DataSample(*from.data_sample_);
  } else {
    data_sample_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:dspb.Processor)
}

void Processor::SharedCtor() {
  ::memset(&table_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&table_read_)) + sizeof(type_));
  _cached_size_ = 0;
}

Processor::~Processor() {
  // @@protoc_insertion_point(destructor:dspb.Processor)
  SharedDtor();
}

void Processor::SharedDtor() {
  if (this != internal_default_instance()) delete table_read_;
  if (this != internal_default_instance()) delete index_read_;
  if (this != internal_default_instance()) delete selection_;
  if (this != internal_default_instance()) delete projection_;
  if (this != internal_default_instance()) delete aggregation_;
  if (this != internal_default_instance()) delete stream_aggregation_;
  if (this != internal_default_instance()) delete ordering_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete data_sample_;
}

void Processor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Processor::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Processor& Processor::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Processor* Processor::New(::google::protobuf::Arena* arena) const {
  Processor* n = new Processor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Processor::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Processor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && table_read_ != NULL) {
    delete table_read_;
  }
  table_read_ = NULL;
  if (GetArenaNoVirtual() == NULL && index_read_ != NULL) {
    delete index_read_;
  }
  index_read_ = NULL;
  if (GetArenaNoVirtual() == NULL && selection_ != NULL) {
    delete selection_;
  }
  selection_ = NULL;
  if (GetArenaNoVirtual() == NULL && projection_ != NULL) {
    delete projection_;
  }
  projection_ = NULL;
  if (GetArenaNoVirtual() == NULL && aggregation_ != NULL) {
    delete aggregation_;
  }
  aggregation_ = NULL;
  if (GetArenaNoVirtual() == NULL && stream_aggregation_ != NULL) {
    delete stream_aggregation_;
  }
  stream_aggregation_ = NULL;
  if (GetArenaNoVirtual() == NULL && ordering_ != NULL) {
    delete ordering_;
  }
  ordering_ = NULL;
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_sample_ != NULL) {
    delete data_sample_;
  }
  data_sample_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Processor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Processor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.ProcessorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dspb::ProcessorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TableRead table_read = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.IndexRead index_read = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Selection selection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Projection projection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Aggregation aggregation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Aggregation stream_aggregation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_aggregation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Ordering ordering = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ordering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Limit limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.DataSample data_sample = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Processor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Processor)
  return false;
#undef DO_
}

void Processor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Processor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ProcessorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .dspb.TableRead table_read = 2;
  if (this->has_table_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->table_read_, output);
  }

  // .dspb.IndexRead index_read = 3;
  if (this->has_index_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->index_read_, output);
  }

  // .dspb.Selection selection = 4;
  if (this->has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->selection_, output);
  }

  // .dspb.Projection projection = 5;
  if (this->has_projection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->projection_, output);
  }

  // .dspb.Aggregation aggregation = 6;
  if (this->has_aggregation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->aggregation_, output);
  }

  // .dspb.Aggregation stream_aggregation = 7;
  if (this->has_stream_aggregation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stream_aggregation_, output);
  }

  // .dspb.Ordering ordering = 8;
  if (this->has_ordering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ordering_, output);
  }

  // .dspb.Limit limit = 9;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->limit_, output);
  }

  // .dspb.DataSample data_sample = 10;
  if (this->has_data_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->data_sample_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Processor)
}

::google::protobuf::uint8* Processor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Processor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.ProcessorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .dspb.TableRead table_read = 2;
  if (this->has_table_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->table_read_, deterministic, target);
  }

  // .dspb.IndexRead index_read = 3;
  if (this->has_index_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->index_read_, deterministic, target);
  }

  // .dspb.Selection selection = 4;
  if (this->has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->selection_, deterministic, target);
  }

  // .dspb.Projection projection = 5;
  if (this->has_projection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->projection_, deterministic, target);
  }

  // .dspb.Aggregation aggregation = 6;
  if (this->has_aggregation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->aggregation_, deterministic, target);
  }

  // .dspb.Aggregation stream_aggregation = 7;
  if (this->has_stream_aggregation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stream_aggregation_, deterministic, target);
  }

  // .dspb.Ordering ordering = 8;
  if (this->has_ordering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ordering_, deterministic, target);
  }

  // .dspb.Limit limit = 9;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->limit_, deterministic, target);
  }

  // .dspb.DataSample data_sample = 10;
  if (this->has_data_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->data_sample_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Processor)
  return target;
}

size_t Processor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Processor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.TableRead table_read = 2;
  if (this->has_table_read()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_read_);
  }

  // .dspb.IndexRead index_read = 3;
  if (this->has_index_read()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_read_);
  }

  // .dspb.Selection selection = 4;
  if (this->has_selection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selection_);
  }

  // .dspb.Projection projection = 5;
  if (this->has_projection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->projection_);
  }

  // .dspb.Aggregation aggregation = 6;
  if (this->has_aggregation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aggregation_);
  }

  // .dspb.Aggregation stream_aggregation = 7;
  if (this->has_stream_aggregation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stream_aggregation_);
  }

  // .dspb.Ordering ordering = 8;
  if (this->has_ordering()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ordering_);
  }

  // .dspb.Limit limit = 9;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->limit_);
  }

  // .dspb.DataSample data_sample = 10;
  if (this->has_data_sample()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_sample_);
  }

  // .dspb.ProcessorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Processor)
  GOOGLE_DCHECK_NE(&from, this);
  const Processor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Processor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Processor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Processor)
    MergeFrom(*source);
  }
}

void Processor::MergeFrom(const Processor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Processor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table_read()) {
    mutable_table_read()->::dspb::TableRead::MergeFrom(from.table_read());
  }
  if (from.has_index_read()) {
    mutable_index_read()->::dspb::IndexRead::MergeFrom(from.index_read());
  }
  if (from.has_selection()) {
    mutable_selection()->::dspb::Selection::MergeFrom(from.selection());
  }
  if (from.has_projection()) {
    mutable_projection()->::dspb::Projection::MergeFrom(from.projection());
  }
  if (from.has_aggregation()) {
    mutable_aggregation()->::dspb::Aggregation::MergeFrom(from.aggregation());
  }
  if (from.has_stream_aggregation()) {
    mutable_stream_aggregation()->::dspb::Aggregation::MergeFrom(from.stream_aggregation());
  }
  if (from.has_ordering()) {
    mutable_ordering()->::dspb::Ordering::MergeFrom(from.ordering());
  }
  if (from.has_limit()) {
    mutable_limit()->::dspb::Limit::MergeFrom(from.limit());
  }
  if (from.has_data_sample()) {
    mutable_data_sample()->::dspb::DataSample::MergeFrom(from.data_sample());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Processor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Processor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor::CopyFrom(const Processor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Processor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor::IsInitialized() const {
  return true;
}

void Processor::Swap(Processor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Processor::InternalSwap(Processor* other) {
  using std::swap;
  swap(table_read_, other->table_read_);
  swap(index_read_, other->index_read_);
  swap(selection_, other->selection_);
  swap(projection_, other->projection_);
  swap(aggregation_, other->aggregation_);
  swap(stream_aggregation_, other->stream_aggregation_);
  swap(ordering_, other->ordering_);
  swap(limit_, other->limit_);
  swap(data_sample_, other->data_sample_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Processor::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Processor

// .dspb.ProcessorType type = 1;
void Processor::clear_type() {
  type_ = 0;
}
::dspb::ProcessorType Processor::type() const {
  // @@protoc_insertion_point(field_get:dspb.Processor.type)
  return static_cast< ::dspb::ProcessorType >(type_);
}
void Processor::set_type(::dspb::ProcessorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dspb.Processor.type)
}

// .dspb.TableRead table_read = 2;
bool Processor::has_table_read() const {
  return this != internal_default_instance() && table_read_ != NULL;
}
void Processor::clear_table_read() {
  if (GetArenaNoVirtual() == NULL && table_read_ != NULL) delete table_read_;
  table_read_ = NULL;
}
const ::dspb::TableRead& Processor::table_read() const {
  const ::dspb::TableRead* p = table_read_;
  // @@protoc_insertion_point(field_get:dspb.Processor.table_read)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::TableRead*>(
      &::dspb::_TableRead_default_instance_);
}
::dspb::TableRead* Processor::mutable_table_read() {
  
  if (table_read_ == NULL) {
    table_read_ = new ::dspb::TableRead;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.table_read)
  return table_read_;
}
::dspb::TableRead* Processor::release_table_read() {
  // @@protoc_insertion_point(field_release:dspb.Processor.table_read)
  
  ::dspb::TableRead* temp = table_read_;
  table_read_ = NULL;
  return temp;
}
void Processor::set_allocated_table_read(::dspb::TableRead* table_read) {
  delete table_read_;
  table_read_ = table_read;
  if (table_read) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.table_read)
}

// .dspb.IndexRead index_read = 3;
bool Processor::has_index_read() const {
  return this != internal_default_instance() && index_read_ != NULL;
}
void Processor::clear_index_read() {
  if (GetArenaNoVirtual() == NULL && index_read_ != NULL) delete index_read_;
  index_read_ = NULL;
}
const ::dspb::IndexRead& Processor::index_read() const {
  const ::dspb::IndexRead* p = index_read_;
  // @@protoc_insertion_point(field_get:dspb.Processor.index_read)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::IndexRead*>(
      &::dspb::_IndexRead_default_instance_);
}
::dspb::IndexRead* Processor::mutable_index_read() {
  
  if (index_read_ == NULL) {
    index_read_ = new ::dspb::IndexRead;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.index_read)
  return index_read_;
}
::dspb::IndexRead* Processor::release_index_read() {
  // @@protoc_insertion_point(field_release:dspb.Processor.index_read)
  
  ::dspb::IndexRead* temp = index_read_;
  index_read_ = NULL;
  return temp;
}
void Processor::set_allocated_index_read(::dspb::IndexRead* index_read) {
  delete index_read_;
  index_read_ = index_read;
  if (index_read) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.index_read)
}

// .dspb.Selection selection = 4;
bool Processor::has_selection() const {
  return this != internal_default_instance() && selection_ != NULL;
}
void Processor::clear_selection() {
  if (GetArenaNoVirtual() == NULL && selection_ != NULL) delete selection_;
  selection_ = NULL;
}
const ::dspb::Selection& Processor::selection() const {
  const ::dspb::Selection* p = selection_;
  // @@protoc_insertion_point(field_get:dspb.Processor.selection)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Selection*>(
      &::dspb::_Selection_default_instance_);
}
::dspb::Selection* Processor::mutable_selection() {
  
  if (selection_ == NULL) {
    selection_ = new ::dspb::Selection;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.selection)
  return selection_;
}
::dspb::Selection* Processor::release_selection() {
  // @@protoc_insertion_point(field_release:dspb.Processor.selection)
  
  ::dspb::Selection* temp = selection_;
  selection_ = NULL;
  return temp;
}
void Processor::set_allocated_selection(::dspb::Selection* selection) {
  delete selection_;
  selection_ = selection;
  if (selection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.selection)
}

// .dspb.Projection projection = 5;
bool Processor::has_projection() const {
  return this != internal_default_instance() && projection_ != NULL;
}
void Processor::clear_projection() {
  if (GetArenaNoVirtual() == NULL && projection_ != NULL) delete projection_;
  projection_ = NULL;
}
const ::dspb::Projection& Processor::projection() const {
  const ::dspb::Projection* p = projection_;
  // @@protoc_insertion_point(field_get:dspb.Processor.projection)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Projection*>(
      &::dspb::_Projection_default_instance_);
}
::dspb::Projection* Processor::mutable_projection() {
  
  if (projection_ == NULL) {
    projection_ = new ::dspb::Projection;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.projection)
  return projection_;
}
::dspb::Projection* Processor::release_projection() {
  // @@protoc_insertion_point(field_release:dspb.Processor.projection)
  
  ::dspb::Projection* temp = projection_;
  projection_ = NULL;
  return temp;
}
void Processor::set_allocated_projection(::dspb::Projection* projection) {
  delete projection_;
  projection_ = projection;
  if (projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.projection)
}

// .dspb.Aggregation aggregation = 6;
bool Processor::has_aggregation() const {
  return this != internal_default_instance() && aggregation_ != NULL;
}
void Processor::clear_aggregation() {
  if (GetArenaNoVirtual() == NULL && aggregation_ != NULL) delete aggregation_;
  aggregation_ = NULL;
}
const ::dspb::Aggregation& Processor::aggregation() const {
  const ::dspb::Aggregation* p = aggregation_;
  // @@protoc_insertion_point(field_get:dspb.Processor.aggregation)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Aggregation*>(
      &::dspb::_Aggregation_default_instance_);
}
::dspb::Aggregation* Processor::mutable_aggregation() {
  
  if (aggregation_ == NULL) {
    aggregation_ = new ::dspb::Aggregation;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.aggregation)
  return aggregation_;
}
::dspb::Aggregation* Processor::release_aggregation() {
  // @@protoc_insertion_point(field_release:dspb.Processor.aggregation)
  
  ::dspb::Aggregation* temp = aggregation_;
  aggregation_ = NULL;
  return temp;
}
void Processor::set_allocated_aggregation(::dspb::Aggregation* aggregation) {
  delete aggregation_;
  aggregation_ = aggregation;
  if (aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.aggregation)
}

// .dspb.Aggregation stream_aggregation = 7;
bool Processor::has_stream_aggregation() const {
  return this != internal_default_instance() && stream_aggregation_ != NULL;
}
void Processor::clear_stream_aggregation() {
  if (GetArenaNoVirtual() == NULL && stream_aggregation_ != NULL) delete stream_aggregation_;
  stream_aggregation_ = NULL;
}
const ::dspb::Aggregation& Processor::stream_aggregation() const {
  const ::dspb::Aggregation* p = stream_aggregation_;
  // @@protoc_insertion_point(field_get:dspb.Processor.stream_aggregation)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Aggregation*>(
      &::dspb::_Aggregation_default_instance_);
}
::dspb::Aggregation* Processor::mutable_stream_aggregation() {
  
  if (stream_aggregation_ == NULL) {
    stream_aggregation_ = new ::dspb::Aggregation;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.stream_aggregation)
  return stream_aggregation_;
}
::dspb::Aggregation* Processor::release_stream_aggregation() {
  // @@protoc_insertion_point(field_release:dspb.Processor.stream_aggregation)
  
  ::dspb::Aggregation* temp = stream_aggregation_;
  stream_aggregation_ = NULL;
  return temp;
}
void Processor::set_allocated_stream_aggregation(::dspb::Aggregation* stream_aggregation) {
  delete stream_aggregation_;
  stream_aggregation_ = stream_aggregation;
  if (stream_aggregation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.stream_aggregation)
}

// .dspb.Ordering ordering = 8;
bool Processor::has_ordering() const {
  return this != internal_default_instance() && ordering_ != NULL;
}
void Processor::clear_ordering() {
  if (GetArenaNoVirtual() == NULL && ordering_ != NULL) delete ordering_;
  ordering_ = NULL;
}
const ::dspb::Ordering& Processor::ordering() const {
  const ::dspb::Ordering* p = ordering_;
  // @@protoc_insertion_point(field_get:dspb.Processor.ordering)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Ordering*>(
      &::dspb::_Ordering_default_instance_);
}
::dspb::Ordering* Processor::mutable_ordering() {
  
  if (ordering_ == NULL) {
    ordering_ = new ::dspb::Ordering;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.ordering)
  return ordering_;
}
::dspb::Ordering* Processor::release_ordering() {
  // @@protoc_insertion_point(field_release:dspb.Processor.ordering)
  
  ::dspb::Ordering* temp = ordering_;
  ordering_ = NULL;
  return temp;
}
void Processor::set_allocated_ordering(::dspb::Ordering* ordering) {
  delete ordering_;
  ordering_ = ordering;
  if (ordering) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.ordering)
}

// .dspb.Limit limit = 9;
bool Processor::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
void Processor::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) delete limit_;
  limit_ = NULL;
}
const ::dspb::Limit& Processor::limit() const {
  const ::dspb::Limit* p = limit_;
  // @@protoc_insertion_point(field_get:dspb.Processor.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Limit*>(
      &::dspb::_Limit_default_instance_);
}
::dspb::Limit* Processor::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::dspb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.limit)
  return limit_;
}
::dspb::Limit* Processor::release_limit() {
  // @@protoc_insertion_point(field_release:dspb.Processor.limit)
  
  ::dspb::Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
void Processor::set_allocated_limit(::dspb::Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.limit)
}

// .dspb.DataSample data_sample = 10;
bool Processor::has_data_sample() const {
  return this != internal_default_instance() && data_sample_ != NULL;
}
void Processor::clear_data_sample() {
  if (GetArenaNoVirtual() == NULL && data_sample_ != NULL) delete data_sample_;
  data_sample_ = NULL;
}
const ::dspb::DataSample& Processor::data_sample() const {
  const ::dspb::DataSample* p = data_sample_;
  // @@protoc_insertion_point(field_get:dspb.Processor.data_sample)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::DataSample*>(
      &::dspb::_DataSample_default_instance_);
}
::dspb::DataSample* Processor::mutable_data_sample() {
  
  if (data_sample_ == NULL) {
    data_sample_ = new ::dspb::DataSample;
  }
  // @@protoc_insertion_point(field_mutable:dspb.Processor.data_sample)
  return data_sample_;
}
::dspb::DataSample* Processor::release_data_sample() {
  // @@protoc_insertion_point(field_release:dspb.Processor.data_sample)
  
  ::dspb::DataSample* temp = data_sample_;
  data_sample_ = NULL;
  return temp;
}
void Processor::set_allocated_data_sample(::dspb::DataSample* data_sample) {
  delete data_sample_;
  data_sample_ = data_sample;
  if (data_sample) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.Processor.data_sample)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableRead::kColumnsFieldNumber;
const int TableRead::kTypeFieldNumber;
const int TableRead::kRangeFieldNumber;
const int TableRead::kPkKeysFieldNumber;
const int TableRead::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableRead::TableRead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TableRead)
}
TableRead::TableRead(const TableRead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      pk_keys_(from.pk_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::dspb::KeyRange(*from.range_);
  } else {
    range_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&desc_) -
    reinterpret_cast<char*>(&type_)) + sizeof(desc_));
  // @@protoc_insertion_point(copy_constructor:dspb.TableRead)
}

void TableRead::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desc_) -
      reinterpret_cast<char*>(&range_)) + sizeof(desc_));
  _cached_size_ = 0;
}

TableRead::~TableRead() {
  // @@protoc_insertion_point(destructor:dspb.TableRead)
  SharedDtor();
}

void TableRead::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void TableRead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableRead::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableRead& TableRead::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableRead* TableRead::New(::google::protobuf::Arena* arena) const {
  TableRead* n = new TableRead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableRead::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TableRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  pk_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(desc_));
  _internal_metadata_.Clear();
}

bool TableRead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TableRead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.ColumnInfo columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KeyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dspb::KeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KeyRange range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes pk_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pk_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool desc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TableRead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TableRead)
  return false;
#undef DO_
}

void TableRead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TableRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ColumnInfo columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(static_cast<int>(i)), output);
  }

  // .dspb.KeyType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_, output);
  }

  // repeated bytes pk_keys = 4;
  for (int i = 0, n = this->pk_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->pk_keys(i), output);
  }

  // bool desc = 5;
  if (this->desc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->desc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TableRead)
}

::google::protobuf::uint8* TableRead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TableRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ColumnInfo columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // .dspb.KeyType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_, deterministic, target);
  }

  // repeated bytes pk_keys = 4;
  for (int i = 0, n = this->pk_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->pk_keys(i), target);
  }

  // bool desc = 5;
  if (this->desc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->desc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TableRead)
  return target;
}

size_t TableRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TableRead)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.ColumnInfo columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // repeated bytes pk_keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pk_keys_size());
  for (int i = 0, n = this->pk_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pk_keys(i));
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // .dspb.KeyType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool desc = 5;
  if (this->desc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TableRead)
  GOOGLE_DCHECK_NE(&from, this);
  const TableRead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableRead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TableRead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TableRead)
    MergeFrom(*source);
  }
}

void TableRead::MergeFrom(const TableRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TableRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  pk_keys_.MergeFrom(from.pk_keys_);
  if (from.has_range()) {
    mutable_range()->::dspb::KeyRange::MergeFrom(from.range());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.desc() != 0) {
    set_desc(from.desc());
  }
}

void TableRead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TableRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRead::CopyFrom(const TableRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TableRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRead::IsInitialized() const {
  return true;
}

void TableRead::Swap(TableRead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableRead::InternalSwap(TableRead* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  pk_keys_.InternalSwap(&other->pk_keys_);
  swap(range_, other->range_);
  swap(type_, other->type_);
  swap(desc_, other->desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableRead::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableRead

// repeated .dspb.ColumnInfo columns = 1;
int TableRead::columns_size() const {
  return columns_.size();
}
void TableRead::clear_columns() {
  columns_.Clear();
}
const ::dspb::ColumnInfo& TableRead::columns(int index) const {
  // @@protoc_insertion_point(field_get:dspb.TableRead.columns)
  return columns_.Get(index);
}
::dspb::ColumnInfo* TableRead::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.TableRead.columns)
  return columns_.Mutable(index);
}
::dspb::ColumnInfo* TableRead::add_columns() {
  // @@protoc_insertion_point(field_add:dspb.TableRead.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ColumnInfo >*
TableRead::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:dspb.TableRead.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ColumnInfo >&
TableRead::columns() const {
  // @@protoc_insertion_point(field_list:dspb.TableRead.columns)
  return columns_;
}

// .dspb.KeyType type = 2;
void TableRead::clear_type() {
  type_ = 0;
}
::dspb::KeyType TableRead::type() const {
  // @@protoc_insertion_point(field_get:dspb.TableRead.type)
  return static_cast< ::dspb::KeyType >(type_);
}
void TableRead::set_type(::dspb::KeyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dspb.TableRead.type)
}

// .dspb.KeyRange range = 3;
bool TableRead::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void TableRead::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::dspb::KeyRange& TableRead::range() const {
  const ::dspb::KeyRange* p = range_;
  // @@protoc_insertion_point(field_get:dspb.TableRead.range)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KeyRange*>(
      &::dspb::_KeyRange_default_instance_);
}
::dspb::KeyRange* TableRead::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::dspb::KeyRange;
  }
  // @@protoc_insertion_point(field_mutable:dspb.TableRead.range)
  return range_;
}
::dspb::KeyRange* TableRead::release_range() {
  // @@protoc_insertion_point(field_release:dspb.TableRead.range)
  
  ::dspb::KeyRange* temp = range_;
  range_ = NULL;
  return temp;
}
void TableRead::set_allocated_range(::dspb::KeyRange* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.TableRead.range)
}

// repeated bytes pk_keys = 4;
int TableRead::pk_keys_size() const {
  return pk_keys_.size();
}
void TableRead::clear_pk_keys() {
  pk_keys_.Clear();
}
const ::std::string& TableRead::pk_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.TableRead.pk_keys)
  return pk_keys_.Get(index);
}
::std::string* TableRead::mutable_pk_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.TableRead.pk_keys)
  return pk_keys_.Mutable(index);
}
void TableRead::set_pk_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.TableRead.pk_keys)
  pk_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TableRead::set_pk_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.TableRead.pk_keys)
  pk_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void TableRead::set_pk_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pk_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.TableRead.pk_keys)
}
void TableRead::set_pk_keys(int index, const void* value, size_t size) {
  pk_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.TableRead.pk_keys)
}
::std::string* TableRead::add_pk_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.TableRead.pk_keys)
  return pk_keys_.Add();
}
void TableRead::add_pk_keys(const ::std::string& value) {
  pk_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.TableRead.pk_keys)
}
#if LANG_CXX11
void TableRead::add_pk_keys(::std::string&& value) {
  pk_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.TableRead.pk_keys)
}
#endif
void TableRead::add_pk_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pk_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.TableRead.pk_keys)
}
void TableRead::add_pk_keys(const void* value, size_t size) {
  pk_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.TableRead.pk_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableRead::pk_keys() const {
  // @@protoc_insertion_point(field_list:dspb.TableRead.pk_keys)
  return pk_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TableRead::mutable_pk_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.TableRead.pk_keys)
  return &pk_keys_;
}

// bool desc = 5;
void TableRead::clear_desc() {
  desc_ = false;
}
bool TableRead::desc() const {
  // @@protoc_insertion_point(field_get:dspb.TableRead.desc)
  return desc_;
}
void TableRead::set_desc(bool value) {
  
  desc_ = value;
  // @@protoc_insertion_point(field_set:dspb.TableRead.desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyRange::kStartKeyFieldNumber;
const int KeyRange::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyRange::KeyRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.KeyRange)
}
KeyRange::KeyRange(const KeyRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  // @@protoc_insertion_point(copy_constructor:dspb.KeyRange)
}

void KeyRange::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KeyRange::~KeyRange() {
  // @@protoc_insertion_point(destructor:dspb.KeyRange)
  SharedDtor();
}

void KeyRange::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyRange::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyRange& KeyRange::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyRange* KeyRange::New(::google::protobuf::Arena* arena) const {
  KeyRange* n = new KeyRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.KeyRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KeyRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.KeyRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.KeyRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.KeyRange)
  return false;
#undef DO_
}

void KeyRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.KeyRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_key = 1;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.KeyRange)
}

::google::protobuf::uint8* KeyRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.KeyRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_key = 1;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.KeyRange)
  return target;
}

size_t KeyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.KeyRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start_key = 1;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 2;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.KeyRange)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.KeyRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.KeyRange)
    MergeFrom(*source);
  }
}

void KeyRange::MergeFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.KeyRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void KeyRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.KeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyRange::CopyFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.KeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyRange::IsInitialized() const {
  return true;
}

void KeyRange::Swap(KeyRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyRange::InternalSwap(KeyRange* other) {
  using std::swap;
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyRange::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyRange

// bytes start_key = 1;
void KeyRange::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyRange::start_key() const {
  // @@protoc_insertion_point(field_get:dspb.KeyRange.start_key)
  return start_key_.GetNoArena();
}
void KeyRange::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.KeyRange.start_key)
}
#if LANG_CXX11
void KeyRange::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.KeyRange.start_key)
}
#endif
void KeyRange::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.KeyRange.start_key)
}
void KeyRange::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.KeyRange.start_key)
}
::std::string* KeyRange::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.KeyRange.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyRange::release_start_key() {
  // @@protoc_insertion_point(field_release:dspb.KeyRange.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyRange.start_key)
}

// bytes end_key = 2;
void KeyRange::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyRange::end_key() const {
  // @@protoc_insertion_point(field_get:dspb.KeyRange.end_key)
  return end_key_.GetNoArena();
}
void KeyRange::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dspb.KeyRange.end_key)
}
#if LANG_CXX11
void KeyRange::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dspb.KeyRange.end_key)
}
#endif
void KeyRange::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dspb.KeyRange.end_key)
}
void KeyRange::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dspb.KeyRange.end_key)
}
::std::string* KeyRange::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:dspb.KeyRange.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyRange::release_end_key() {
  // @@protoc_insertion_point(field_release:dspb.KeyRange.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:dspb.KeyRange.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexRead::kColumnsFieldNumber;
const int IndexRead::kTypeFieldNumber;
const int IndexRead::kRangeFieldNumber;
const int IndexRead::kIndexKeysFieldNumber;
const int IndexRead::kDescFieldNumber;
const int IndexRead::kUniqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexRead::IndexRead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.IndexRead)
}
IndexRead::IndexRead(const IndexRead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      index_keys_(from.index_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::dspb::KeyRange(*from.range_);
  } else {
    range_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&type_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:dspb.IndexRead)
}

void IndexRead::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&range_)) + sizeof(unique_));
  _cached_size_ = 0;
}

IndexRead::~IndexRead() {
  // @@protoc_insertion_point(destructor:dspb.IndexRead)
  SharedDtor();
}

void IndexRead::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void IndexRead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexRead::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexRead& IndexRead::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexRead* IndexRead::New(::google::protobuf::Arena* arena) const {
  IndexRead* n = new IndexRead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexRead::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.IndexRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  index_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&type_)) + sizeof(unique_));
  _internal_metadata_.Clear();
}

bool IndexRead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.IndexRead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.ColumnInfo columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KeyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dspb::KeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KeyRange range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes index_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_index_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool desc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.IndexRead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.IndexRead)
  return false;
#undef DO_
}

void IndexRead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.IndexRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ColumnInfo columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(static_cast<int>(i)), output);
  }

  // .dspb.KeyType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_, output);
  }

  // repeated bytes index_keys = 4;
  for (int i = 0, n = this->index_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->index_keys(i), output);
  }

  // bool desc = 5;
  if (this->desc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->desc(), output);
  }

  // bool unique = 6;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->unique(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.IndexRead)
}

::google::protobuf::uint8* IndexRead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.IndexRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.ColumnInfo columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // .dspb.KeyType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_, deterministic, target);
  }

  // repeated bytes index_keys = 4;
  for (int i = 0, n = this->index_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->index_keys(i), target);
  }

  // bool desc = 5;
  if (this->desc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->desc(), target);
  }

  // bool unique = 6;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->unique(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.IndexRead)
  return target;
}

size_t IndexRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.IndexRead)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.ColumnInfo columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // repeated bytes index_keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->index_keys_size());
  for (int i = 0, n = this->index_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->index_keys(i));
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // .dspb.KeyType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool desc = 5;
  if (this->desc() != 0) {
    total_size += 1 + 1;
  }

  // bool unique = 6;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexRead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.IndexRead)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexRead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexRead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.IndexRead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.IndexRead)
    MergeFrom(*source);
  }
}

void IndexRead::MergeFrom(const IndexRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.IndexRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  index_keys_.MergeFrom(from.index_keys_);
  if (from.has_range()) {
    mutable_range()->::dspb::KeyRange::MergeFrom(from.range());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.desc() != 0) {
    set_desc(from.desc());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
}

void IndexRead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.IndexRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRead::CopyFrom(const IndexRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.IndexRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRead::IsInitialized() const {
  return true;
}

void IndexRead::Swap(IndexRead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexRead::InternalSwap(IndexRead* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  index_keys_.InternalSwap(&other->index_keys_);
  swap(range_, other->range_);
  swap(type_, other->type_);
  swap(desc_, other->desc_);
  swap(unique_, other->unique_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexRead::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexRead

// repeated .dspb.ColumnInfo columns = 1;
int IndexRead::columns_size() const {
  return columns_.size();
}
void IndexRead::clear_columns() {
  columns_.Clear();
}
const ::dspb::ColumnInfo& IndexRead::columns(int index) const {
  // @@protoc_insertion_point(field_get:dspb.IndexRead.columns)
  return columns_.Get(index);
}
::dspb::ColumnInfo* IndexRead::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.IndexRead.columns)
  return columns_.Mutable(index);
}
::dspb::ColumnInfo* IndexRead::add_columns() {
  // @@protoc_insertion_point(field_add:dspb.IndexRead.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ColumnInfo >*
IndexRead::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:dspb.IndexRead.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ColumnInfo >&
IndexRead::columns() const {
  // @@protoc_insertion_point(field_list:dspb.IndexRead.columns)
  return columns_;
}

// .dspb.KeyType type = 2;
void IndexRead::clear_type() {
  type_ = 0;
}
::dspb::KeyType IndexRead::type() const {
  // @@protoc_insertion_point(field_get:dspb.IndexRead.type)
  return static_cast< ::dspb::KeyType >(type_);
}
void IndexRead::set_type(::dspb::KeyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dspb.IndexRead.type)
}

// .dspb.KeyRange range = 3;
bool IndexRead::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void IndexRead::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::dspb::KeyRange& IndexRead::range() const {
  const ::dspb::KeyRange* p = range_;
  // @@protoc_insertion_point(field_get:dspb.IndexRead.range)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KeyRange*>(
      &::dspb::_KeyRange_default_instance_);
}
::dspb::KeyRange* IndexRead::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::dspb::KeyRange;
  }
  // @@protoc_insertion_point(field_mutable:dspb.IndexRead.range)
  return range_;
}
::dspb::KeyRange* IndexRead::release_range() {
  // @@protoc_insertion_point(field_release:dspb.IndexRead.range)
  
  ::dspb::KeyRange* temp = range_;
  range_ = NULL;
  return temp;
}
void IndexRead::set_allocated_range(::dspb::KeyRange* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.IndexRead.range)
}

// repeated bytes index_keys = 4;
int IndexRead::index_keys_size() const {
  return index_keys_.size();
}
void IndexRead::clear_index_keys() {
  index_keys_.Clear();
}
const ::std::string& IndexRead::index_keys(int index) const {
  // @@protoc_insertion_point(field_get:dspb.IndexRead.index_keys)
  return index_keys_.Get(index);
}
::std::string* IndexRead::mutable_index_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.IndexRead.index_keys)
  return index_keys_.Mutable(index);
}
void IndexRead::set_index_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dspb.IndexRead.index_keys)
  index_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void IndexRead::set_index_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dspb.IndexRead.index_keys)
  index_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void IndexRead::set_index_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  index_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dspb.IndexRead.index_keys)
}
void IndexRead::set_index_keys(int index, const void* value, size_t size) {
  index_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dspb.IndexRead.index_keys)
}
::std::string* IndexRead::add_index_keys() {
  // @@protoc_insertion_point(field_add_mutable:dspb.IndexRead.index_keys)
  return index_keys_.Add();
}
void IndexRead::add_index_keys(const ::std::string& value) {
  index_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dspb.IndexRead.index_keys)
}
#if LANG_CXX11
void IndexRead::add_index_keys(::std::string&& value) {
  index_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dspb.IndexRead.index_keys)
}
#endif
void IndexRead::add_index_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  index_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dspb.IndexRead.index_keys)
}
void IndexRead::add_index_keys(const void* value, size_t size) {
  index_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dspb.IndexRead.index_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
IndexRead::index_keys() const {
  // @@protoc_insertion_point(field_list:dspb.IndexRead.index_keys)
  return index_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
IndexRead::mutable_index_keys() {
  // @@protoc_insertion_point(field_mutable_list:dspb.IndexRead.index_keys)
  return &index_keys_;
}

// bool desc = 5;
void IndexRead::clear_desc() {
  desc_ = false;
}
bool IndexRead::desc() const {
  // @@protoc_insertion_point(field_get:dspb.IndexRead.desc)
  return desc_;
}
void IndexRead::set_desc(bool value) {
  
  desc_ = value;
  // @@protoc_insertion_point(field_set:dspb.IndexRead.desc)
}

// bool unique = 6;
void IndexRead::clear_unique() {
  unique_ = false;
}
bool IndexRead::unique() const {
  // @@protoc_insertion_point(field_get:dspb.IndexRead.unique)
  return unique_;
}
void IndexRead::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:dspb.IndexRead.unique)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Selection::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Selection::Selection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Selection)
}
Selection::Selection(const Selection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filter_(from.filter_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.Selection)
}

void Selection::SharedCtor() {
  _cached_size_ = 0;
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:dspb.Selection)
  SharedDtor();
}

void Selection::SharedDtor() {
}

void Selection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Selection::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Selection& Selection::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Selection* Selection::New(::google::protobuf::Arena* arena) const {
  Selection* n = new Selection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Selection::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Selection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  _internal_metadata_.Clear();
}

bool Selection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Selection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.Expr filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Selection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Selection)
  return false;
#undef DO_
}

void Selection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Selection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Expr filter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filter_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Selection)
}

::google::protobuf::uint8* Selection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Selection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Expr filter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filter_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->filter(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Selection)
  return target;
}

size_t Selection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Selection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.Expr filter = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->filter_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Selection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  const Selection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Selection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Selection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Selection)
    MergeFrom(*source);
  }
}

void Selection::MergeFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
}

void Selection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selection::CopyFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {
  return true;
}

void Selection::Swap(Selection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selection::InternalSwap(Selection* other) {
  using std::swap;
  filter_.InternalSwap(&other->filter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Selection::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Selection

// repeated .dspb.Expr filter = 1;
int Selection::filter_size() const {
  return filter_.size();
}
void Selection::clear_filter() {
  filter_.Clear();
}
const ::dspb::Expr& Selection::filter(int index) const {
  // @@protoc_insertion_point(field_get:dspb.Selection.filter)
  return filter_.Get(index);
}
::dspb::Expr* Selection::mutable_filter(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.Selection.filter)
  return filter_.Mutable(index);
}
::dspb::Expr* Selection::add_filter() {
  // @@protoc_insertion_point(field_add:dspb.Selection.filter)
  return filter_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Expr >*
Selection::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:dspb.Selection.filter)
  return &filter_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Expr >&
Selection::filter() const {
  // @@protoc_insertion_point(field_list:dspb.Selection.filter)
  return filter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Projection::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Projection::Projection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Projection)
}
Projection::Projection(const Projection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.Projection)
}

void Projection::SharedCtor() {
  _cached_size_ = 0;
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:dspb.Projection)
  SharedDtor();
}

void Projection::SharedDtor() {
}

void Projection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Projection::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Projection& Projection::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Projection* Projection::New(::google::protobuf::Arena* arena) const {
  Projection* n = new Projection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _internal_metadata_.Clear();
}

bool Projection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Projection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.Expr columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Projection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Projection)
  return false;
#undef DO_
}

void Projection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Expr columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Projection)
}

::google::protobuf::uint8* Projection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Expr columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Projection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.Expr columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Projection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const Projection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Projection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Projection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Projection)
    MergeFrom(*source);
  }
}

void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Projection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::Swap(Projection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projection::InternalSwap(Projection* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Projection::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Projection

// repeated .dspb.Expr columns = 1;
int Projection::columns_size() const {
  return columns_.size();
}
void Projection::clear_columns() {
  columns_.Clear();
}
const ::dspb::Expr& Projection::columns(int index) const {
  // @@protoc_insertion_point(field_get:dspb.Projection.columns)
  return columns_.Get(index);
}
::dspb::Expr* Projection::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.Projection.columns)
  return columns_.Mutable(index);
}
::dspb::Expr* Projection::add_columns() {
  // @@protoc_insertion_point(field_add:dspb.Projection.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Expr >*
Projection::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:dspb.Projection.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Expr >&
Projection::columns() const {
  // @@protoc_insertion_point(field_list:dspb.Projection.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ordering::kColumnsFieldNumber;
const int Ordering::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ordering::Ordering()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Ordering)
}
Ordering::Ordering(const Ordering& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:dspb.Ordering)
}

void Ordering::SharedCtor() {
  count_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Ordering::~Ordering() {
  // @@protoc_insertion_point(destructor:dspb.Ordering)
  SharedDtor();
}

void Ordering::SharedDtor() {
}

void Ordering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ordering::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ordering& Ordering::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ordering* Ordering::New(::google::protobuf::Arena* arena) const {
  Ordering* n = new Ordering;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ordering::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Ordering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  count_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Ordering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Ordering)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.OrderByColumn columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Ordering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Ordering)
  return false;
#undef DO_
}

void Ordering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Ordering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.OrderByColumn columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(static_cast<int>(i)), output);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Ordering)
}

::google::protobuf::uint8* Ordering::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Ordering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.OrderByColumn columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Ordering)
  return target;
}

size_t Ordering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Ordering)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.OrderByColumn columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ordering::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Ordering)
  GOOGLE_DCHECK_NE(&from, this);
  const Ordering* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ordering>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Ordering)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Ordering)
    MergeFrom(*source);
  }
}

void Ordering::MergeFrom(const Ordering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Ordering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Ordering::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Ordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ordering::CopyFrom(const Ordering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Ordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordering::IsInitialized() const {
  return true;
}

void Ordering::Swap(Ordering* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ordering::InternalSwap(Ordering* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ordering::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ordering

// repeated .dspb.OrderByColumn columns = 1;
int Ordering::columns_size() const {
  return columns_.size();
}
void Ordering::clear_columns() {
  columns_.Clear();
}
const ::dspb::OrderByColumn& Ordering::columns(int index) const {
  // @@protoc_insertion_point(field_get:dspb.Ordering.columns)
  return columns_.Get(index);
}
::dspb::OrderByColumn* Ordering::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.Ordering.columns)
  return columns_.Mutable(index);
}
::dspb::OrderByColumn* Ordering::add_columns() {
  // @@protoc_insertion_point(field_add:dspb.Ordering.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::OrderByColumn >*
Ordering::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:dspb.Ordering.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::OrderByColumn >&
Ordering::columns() const {
  // @@protoc_insertion_point(field_list:dspb.Ordering.columns)
  return columns_;
}

// uint64 count = 2;
void Ordering::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Ordering::count() const {
  // @@protoc_insertion_point(field_get:dspb.Ordering.count)
  return count_;
}
void Ordering::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dspb.Ordering.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aggregation::kFuncFieldNumber;
const int Aggregation::kGroupByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aggregation::Aggregation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Aggregation)
}
Aggregation::Aggregation(const Aggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      func_(from.func_),
      group_by_(from.group_by_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.Aggregation)
}

void Aggregation::SharedCtor() {
  _cached_size_ = 0;
}

Aggregation::~Aggregation() {
  // @@protoc_insertion_point(destructor:dspb.Aggregation)
  SharedDtor();
}

void Aggregation::SharedDtor() {
}

void Aggregation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aggregation::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Aggregation& Aggregation::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Aggregation* Aggregation::New(::google::protobuf::Arena* arena) const {
  Aggregation* n = new Aggregation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Aggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.Clear();
  group_by_.Clear();
  _internal_metadata_.Clear();
}

bool Aggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Aggregation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dspb.Expr func = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_func()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.Expr group_by = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Aggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Aggregation)
  return false;
#undef DO_
}

void Aggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Expr func = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->func_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->func(static_cast<int>(i)), output);
  }

  // repeated .dspb.Expr group_by = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_by_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_by(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Aggregation)
}

::google::protobuf::uint8* Aggregation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dspb.Expr func = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->func_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->func(static_cast<int>(i)), deterministic, target);
  }

  // repeated .dspb.Expr group_by = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_by_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->group_by(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Aggregation)
  return target;
}

size_t Aggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Aggregation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.Expr func = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->func_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->func(static_cast<int>(i)));
    }
  }

  // repeated .dspb.Expr group_by = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->group_by_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_by(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const Aggregation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Aggregation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Aggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Aggregation)
    MergeFrom(*source);
  }
}

void Aggregation::MergeFrom(const Aggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  func_.MergeFrom(from.func_);
  group_by_.MergeFrom(from.group_by_);
}

void Aggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aggregation::CopyFrom(const Aggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation::IsInitialized() const {
  return true;
}

void Aggregation::Swap(Aggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aggregation::InternalSwap(Aggregation* other) {
  using std::swap;
  func_.InternalSwap(&other->func_);
  group_by_.InternalSwap(&other->group_by_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Aggregation::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Aggregation

// repeated .dspb.Expr func = 1;
int Aggregation::func_size() const {
  return func_.size();
}
void Aggregation::clear_func() {
  func_.Clear();
}
const ::dspb::Expr& Aggregation::func(int index) const {
  // @@protoc_insertion_point(field_get:dspb.Aggregation.func)
  return func_.Get(index);
}
::dspb::Expr* Aggregation::mutable_func(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.Aggregation.func)
  return func_.Mutable(index);
}
::dspb::Expr* Aggregation::add_func() {
  // @@protoc_insertion_point(field_add:dspb.Aggregation.func)
  return func_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Expr >*
Aggregation::mutable_func() {
  // @@protoc_insertion_point(field_mutable_list:dspb.Aggregation.func)
  return &func_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Expr >&
Aggregation::func() const {
  // @@protoc_insertion_point(field_list:dspb.Aggregation.func)
  return func_;
}

// repeated .dspb.Expr group_by = 2;
int Aggregation::group_by_size() const {
  return group_by_.size();
}
void Aggregation::clear_group_by() {
  group_by_.Clear();
}
const ::dspb::Expr& Aggregation::group_by(int index) const {
  // @@protoc_insertion_point(field_get:dspb.Aggregation.group_by)
  return group_by_.Get(index);
}
::dspb::Expr* Aggregation::mutable_group_by(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.Aggregation.group_by)
  return group_by_.Mutable(index);
}
::dspb::Expr* Aggregation::add_group_by() {
  // @@protoc_insertion_point(field_add:dspb.Aggregation.group_by)
  return group_by_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::Expr >*
Aggregation::mutable_group_by() {
  // @@protoc_insertion_point(field_mutable_list:dspb.Aggregation.group_by)
  return &group_by_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::Expr >&
Aggregation::group_by() const {
  // @@protoc_insertion_point(field_list:dspb.Aggregation.group_by)
  return group_by_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Limit::kOffsetFieldNumber;
const int Limit::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Limit::Limit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.Limit)
}
Limit::Limit(const Limit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dspb.Limit)
}

void Limit::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _cached_size_ = 0;
}

Limit::~Limit() {
  // @@protoc_insertion_point(destructor:dspb.Limit)
  SharedDtor();
}

void Limit::SharedDtor() {
}

void Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Limit::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Limit& Limit::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Limit* Limit::New(::google::protobuf::Arena* arena) const {
  Limit* n = new Limit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.Limit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.Limit)
  return false;
#undef DO_
}

void Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->offset(), output);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.Limit)
}

::google::protobuf::uint8* Limit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->offset(), target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.Limit)
  return target;
}

size_t Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.Limit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Limit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  const Limit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Limit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.Limit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.Limit)
    MergeFrom(*source);
  }
}

void Limit::MergeFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Limit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Limit::CopyFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  return true;
}

void Limit::Swap(Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Limit::InternalSwap(Limit* other) {
  using std::swap;
  swap(offset_, other->offset_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Limit::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Limit

// uint64 offset = 1;
void Limit::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Limit::offset() const {
  // @@protoc_insertion_point(field_get:dspb.Limit.offset)
  return offset_;
}
void Limit::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dspb.Limit.offset)
}

// uint64 count = 2;
void Limit::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Limit::count() const {
  // @@protoc_insertion_point(field_get:dspb.Limit.count)
  return count_;
}
void Limit::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dspb.Limit.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSample::kMethodFieldNumber;
const int DataSample::kColumnsFieldNumber;
const int DataSample::kRangeFieldNumber;
const int DataSample::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSample::DataSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.DataSample)
}
DataSample::DataSample(const DataSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::dspb::KeyRange(*from.range_);
  } else {
    range_ = NULL;
  }
  ::memcpy(&ratio_, &from.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&ratio_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:dspb.DataSample)
}

void DataSample::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&range_)) + sizeof(method_));
  _cached_size_ = 0;
}

DataSample::~DataSample() {
  // @@protoc_insertion_point(destructor:dspb.DataSample)
  SharedDtor();
}

void DataSample::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void DataSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSample::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSample& DataSample::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataSample* DataSample::New(::google::protobuf::Arena* arena) const {
  DataSample* n = new DataSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSample::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.DataSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  ::memset(&ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&ratio_)) + sizeof(method_));
  _internal_metadata_.Clear();
}

bool DataSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.DataSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.DataSample.SampleMethod method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::dspb::DataSample_SampleMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.ColumnInfo columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.KeyRange range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.DataSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.DataSample)
  return false;
#undef DO_
}

void DataSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.DataSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.DataSample.SampleMethod method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // repeated .dspb.ColumnInfo columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(static_cast<int>(i)), output);
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_, output);
  }

  // double ratio = 4;
  if (this->ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.DataSample)
}

::google::protobuf::uint8* DataSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.DataSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.DataSample.SampleMethod method = 1;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // repeated .dspb.ColumnInfo columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_, deterministic, target);
  }

  // double ratio = 4;
  if (this->ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.DataSample)
  return target;
}

size_t DataSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.DataSample)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dspb.ColumnInfo columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // .dspb.KeyRange range = 3;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // double ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 + 8;
  }

  // .dspb.DataSample.SampleMethod method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.DataSample)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.DataSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.DataSample)
    MergeFrom(*source);
  }
}

void DataSample::MergeFrom(const DataSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.DataSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_range()) {
    mutable_range()->::dspb::KeyRange::MergeFrom(from.range());
  }
  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void DataSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.DataSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSample::CopyFrom(const DataSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.DataSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSample::IsInitialized() const {
  return true;
}

void DataSample::Swap(DataSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSample::InternalSwap(DataSample* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(range_, other->range_);
  swap(ratio_, other->ratio_);
  swap(method_, other->method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSample::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSample

// .dspb.DataSample.SampleMethod method = 1;
void DataSample::clear_method() {
  method_ = 0;
}
::dspb::DataSample_SampleMethod DataSample::method() const {
  // @@protoc_insertion_point(field_get:dspb.DataSample.method)
  return static_cast< ::dspb::DataSample_SampleMethod >(method_);
}
void DataSample::set_method(::dspb::DataSample_SampleMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:dspb.DataSample.method)
}

// repeated .dspb.ColumnInfo columns = 2;
int DataSample::columns_size() const {
  return columns_.size();
}
void DataSample::clear_columns() {
  columns_.Clear();
}
const ::dspb::ColumnInfo& DataSample::columns(int index) const {
  // @@protoc_insertion_point(field_get:dspb.DataSample.columns)
  return columns_.Get(index);
}
::dspb::ColumnInfo* DataSample::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.DataSample.columns)
  return columns_.Mutable(index);
}
::dspb::ColumnInfo* DataSample::add_columns() {
  // @@protoc_insertion_point(field_add:dspb.DataSample.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::ColumnInfo >*
DataSample::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:dspb.DataSample.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::ColumnInfo >&
DataSample::columns() const {
  // @@protoc_insertion_point(field_list:dspb.DataSample.columns)
  return columns_;
}

// .dspb.KeyRange range = 3;
bool DataSample::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void DataSample::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::dspb::KeyRange& DataSample::range() const {
  const ::dspb::KeyRange* p = range_;
  // @@protoc_insertion_point(field_get:dspb.DataSample.range)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::KeyRange*>(
      &::dspb::_KeyRange_default_instance_);
}
::dspb::KeyRange* DataSample::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::dspb::KeyRange;
  }
  // @@protoc_insertion_point(field_mutable:dspb.DataSample.range)
  return range_;
}
::dspb::KeyRange* DataSample::release_range() {
  // @@protoc_insertion_point(field_release:dspb.DataSample.range)
  
  ::dspb::KeyRange* temp = range_;
  range_ = NULL;
  return temp;
}
void DataSample::set_allocated_range(::dspb::KeyRange* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.DataSample.range)
}

// double ratio = 4;
void DataSample::clear_ratio() {
  ratio_ = 0;
}
double DataSample::ratio() const {
  // @@protoc_insertion_point(field_get:dspb.DataSample.ratio)
  return ratio_;
}
void DataSample::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:dspb.DataSample.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByColumn::kExprFieldNumber;
const int OrderByColumn::kAscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByColumn::OrderByColumn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.OrderByColumn)
}
OrderByColumn::OrderByColumn(const OrderByColumn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expr()) {
    expr_ = new ::dspb::Expr(*from.expr_);
  } else {
    expr_ = NULL;
  }
  asc_ = from.asc_;
  // @@protoc_insertion_point(copy_constructor:dspb.OrderByColumn)
}

void OrderByColumn::SharedCtor() {
  ::memset(&expr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asc_) -
      reinterpret_cast<char*>(&expr_)) + sizeof(asc_));
  _cached_size_ = 0;
}

OrderByColumn::~OrderByColumn() {
  // @@protoc_insertion_point(destructor:dspb.OrderByColumn)
  SharedDtor();
}

void OrderByColumn::SharedDtor() {
  if (this != internal_default_instance()) delete expr_;
}

void OrderByColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderByColumn::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderByColumn& OrderByColumn::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

OrderByColumn* OrderByColumn::New(::google::protobuf::Arena* arena) const {
  OrderByColumn* n = new OrderByColumn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderByColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.OrderByColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && expr_ != NULL) {
    delete expr_;
  }
  expr_ = NULL;
  asc_ = false;
  _internal_metadata_.Clear();
}

bool OrderByColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.OrderByColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.Expr expr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool asc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.OrderByColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.OrderByColumn)
  return false;
#undef DO_
}

void OrderByColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.OrderByColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.Expr expr = 1;
  if (this->has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->expr_, output);
  }

  // bool asc = 2;
  if (this->asc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->asc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.OrderByColumn)
}

::google::protobuf::uint8* OrderByColumn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.OrderByColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.Expr expr = 1;
  if (this->has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->expr_, deterministic, target);
  }

  // bool asc = 2;
  if (this->asc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->asc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.OrderByColumn)
  return target;
}

size_t OrderByColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.OrderByColumn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.Expr expr = 1;
  if (this->has_expr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expr_);
  }

  // bool asc = 2;
  if (this->asc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderByColumn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.OrderByColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByColumn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderByColumn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.OrderByColumn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.OrderByColumn)
    MergeFrom(*source);
  }
}

void OrderByColumn::MergeFrom(const OrderByColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.OrderByColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expr()) {
    mutable_expr()->::dspb::Expr::MergeFrom(from.expr());
  }
  if (from.asc() != 0) {
    set_asc(from.asc());
  }
}

void OrderByColumn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.OrderByColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByColumn::CopyFrom(const OrderByColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.OrderByColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByColumn::IsInitialized() const {
  return true;
}

void OrderByColumn::Swap(OrderByColumn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByColumn::InternalSwap(OrderByColumn* other) {
  using std::swap;
  swap(expr_, other->expr_);
  swap(asc_, other->asc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderByColumn::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderByColumn

// .dspb.Expr expr = 1;
bool OrderByColumn::has_expr() const {
  return this != internal_default_instance() && expr_ != NULL;
}
void OrderByColumn::clear_expr() {
  if (GetArenaNoVirtual() == NULL && expr_ != NULL) delete expr_;
  expr_ = NULL;
}
const ::dspb::Expr& OrderByColumn::expr() const {
  const ::dspb::Expr* p = expr_;
  // @@protoc_insertion_point(field_get:dspb.OrderByColumn.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Expr*>(
      &::dspb::_Expr_default_instance_);
}
::dspb::Expr* OrderByColumn::mutable_expr() {
  
  if (expr_ == NULL) {
    expr_ = new ::dspb::Expr;
  }
  // @@protoc_insertion_point(field_mutable:dspb.OrderByColumn.expr)
  return expr_;
}
::dspb::Expr* OrderByColumn::release_expr() {
  // @@protoc_insertion_point(field_release:dspb.OrderByColumn.expr)
  
  ::dspb::Expr* temp = expr_;
  expr_ = NULL;
  return temp;
}
void OrderByColumn::set_allocated_expr(::dspb::Expr* expr) {
  delete expr_;
  expr_ = expr;
  if (expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.OrderByColumn.expr)
}

// bool asc = 2;
void OrderByColumn::clear_asc() {
  asc_ = false;
}
bool OrderByColumn::asc() const {
  // @@protoc_insertion_point(field_get:dspb.OrderByColumn.asc)
  return asc_;
}
void OrderByColumn::set_asc(bool value) {
  
  asc_ = value;
  // @@protoc_insertion_point(field_set:dspb.OrderByColumn.asc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessorTrace::kProcessedRowsFieldNumber;
const int ProcessorTrace::kElapseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessorTrace::ProcessorTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ProcessorTrace)
}
ProcessorTrace::ProcessorTrace(const ProcessorTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&processed_rows_, &from.processed_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&elapse_time_) -
    reinterpret_cast<char*>(&processed_rows_)) + sizeof(elapse_time_));
  // @@protoc_insertion_point(copy_constructor:dspb.ProcessorTrace)
}

void ProcessorTrace::SharedCtor() {
  ::memset(&processed_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapse_time_) -
      reinterpret_cast<char*>(&processed_rows_)) + sizeof(elapse_time_));
  _cached_size_ = 0;
}

ProcessorTrace::~ProcessorTrace() {
  // @@protoc_insertion_point(destructor:dspb.ProcessorTrace)
  SharedDtor();
}

void ProcessorTrace::SharedDtor() {
}

void ProcessorTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorTrace::descriptor() {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessorTrace& ProcessorTrace::default_instance() {
  protobuf_dspb_2fprocessorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessorTrace* ProcessorTrace::New(::google::protobuf::Arena* arena) const {
  ProcessorTrace* n = new ProcessorTrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessorTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ProcessorTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&processed_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapse_time_) -
      reinterpret_cast<char*>(&processed_rows_)) + sizeof(elapse_time_));
  _internal_metadata_.Clear();
}

bool ProcessorTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ProcessorTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 processed_rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &processed_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 elapse_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elapse_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ProcessorTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ProcessorTrace)
  return false;
#undef DO_
}

void ProcessorTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ProcessorTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 processed_rows = 1;
  if (this->processed_rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->processed_rows(), output);
  }

  // uint64 elapse_time = 2;
  if (this->elapse_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->elapse_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ProcessorTrace)
}

::google::protobuf::uint8* ProcessorTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ProcessorTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 processed_rows = 1;
  if (this->processed_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->processed_rows(), target);
  }

  // uint64 elapse_time = 2;
  if (this->elapse_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->elapse_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ProcessorTrace)
  return target;
}

size_t ProcessorTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ProcessorTrace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 processed_rows = 1;
  if (this->processed_rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->processed_rows());
  }

  // uint64 elapse_time = 2;
  if (this->elapse_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->elapse_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ProcessorTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessorTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ProcessorTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ProcessorTrace)
    MergeFrom(*source);
  }
}

void ProcessorTrace::MergeFrom(const ProcessorTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ProcessorTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processed_rows() != 0) {
    set_processed_rows(from.processed_rows());
  }
  if (from.elapse_time() != 0) {
    set_elapse_time(from.elapse_time());
  }
}

void ProcessorTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ProcessorTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTrace::CopyFrom(const ProcessorTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ProcessorTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTrace::IsInitialized() const {
  return true;
}

void ProcessorTrace::Swap(ProcessorTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessorTrace::InternalSwap(ProcessorTrace* other) {
  using std::swap;
  swap(processed_rows_, other->processed_rows_);
  swap(elapse_time_, other->elapse_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessorTrace::GetMetadata() const {
  protobuf_dspb_2fprocessorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fprocessorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessorTrace

// uint64 processed_rows = 1;
void ProcessorTrace::clear_processed_rows() {
  processed_rows_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ProcessorTrace::processed_rows() const {
  // @@protoc_insertion_point(field_get:dspb.ProcessorTrace.processed_rows)
  return processed_rows_;
}
void ProcessorTrace::set_processed_rows(::google::protobuf::uint64 value) {
  
  processed_rows_ = value;
  // @@protoc_insertion_point(field_set:dspb.ProcessorTrace.processed_rows)
}

// uint64 elapse_time = 2;
void ProcessorTrace::clear_elapse_time() {
  elapse_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ProcessorTrace::elapse_time() const {
  // @@protoc_insertion_point(field_get:dspb.ProcessorTrace.elapse_time)
  return elapse_time_;
}
void ProcessorTrace::set_elapse_time(::google::protobuf::uint64 value) {
  
  elapse_time_ = value;
  // @@protoc_insertion_point(field_set:dspb.ProcessorTrace.elapse_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
