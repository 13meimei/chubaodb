// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/schedule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dspb/schedule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dspb {
class SchReuqest_HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SchReuqest_Header>
     _instance;
} _SchReuqest_Header_default_instance_;
class SchReuqestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SchReuqest>
     _instance;
  const ::dspb::CreateRangeRequest* create_range_;
  const ::dspb::DeleteRangeRequest* delete_range_;
  const ::dspb::TransferRangeLeaderRequest* transfer_range_leader_;
  const ::dspb::GetPeerInfoRequest* get_peer_info_;
  const ::dspb::IsAliveRequest* is_alive_;
  const ::dspb::NodeInfoRequest* node_info_;
  const ::dspb::ChangeRaftMemberRequest* change_raft_member_;
} _SchReuqest_default_instance_;
class SchResponse_HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SchResponse_Header>
     _instance;
} _SchResponse_Header_default_instance_;
class SchResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SchResponse>
     _instance;
  const ::dspb::CreateRangeResponse* create_range_;
  const ::dspb::DeleteRangeResponse* delete_range_;
  const ::dspb::TransferRangeLeaderResponse* transfer_range_leader_;
  const ::dspb::GetPeerInfoResponse* get_peer_info_;
  const ::dspb::IsAliveResponse* is_alive_;
  const ::dspb::NodeInfoResponse* node_info_;
  const ::dspb::ChangeRaftMemberResponse* change_raft_member_;
} _SchResponse_default_instance_;
class CreateRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateRangeRequest>
     _instance;
} _CreateRangeRequest_default_instance_;
class CreateRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateRangeResponse>
     _instance;
} _CreateRangeResponse_default_instance_;
class DeleteRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest>
     _instance;
} _DeleteRangeRequest_default_instance_;
class DeleteRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse>
     _instance;
} _DeleteRangeResponse_default_instance_;
class TransferRangeLeaderRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransferRangeLeaderRequest>
     _instance;
} _TransferRangeLeaderRequest_default_instance_;
class TransferRangeLeaderResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransferRangeLeaderResponse>
     _instance;
} _TransferRangeLeaderResponse_default_instance_;
class GetPeerInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPeerInfoRequest>
     _instance;
} _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPeerInfoResponse>
     _instance;
} _GetPeerInfoResponse_default_instance_;
class IsAliveRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IsAliveRequest>
     _instance;
} _IsAliveRequest_default_instance_;
class IsAliveResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IsAliveResponse>
     _instance;
} _IsAliveResponse_default_instance_;
class NodeInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeInfoRequest>
     _instance;
} _NodeInfoRequest_default_instance_;
class RangeStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeStats>
     _instance;
} _RangeStats_default_instance_;
class RangeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeInfo>
     _instance;
} _RangeInfo_default_instance_;
class NodeStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeStats>
     _instance;
} _NodeStats_default_instance_;
class NodeInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeInfoResponse>
     _instance;
} _NodeInfoResponse_default_instance_;
class ChangeRaftMemberRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeRaftMemberRequest>
     _instance;
} _ChangeRaftMemberRequest_default_instance_;
class ChangeRaftMemberResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeRaftMemberResponse>
     _instance;
} _ChangeRaftMemberResponse_default_instance_;

namespace protobuf_dspb_2fschedule_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchReuqest_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchReuqest_Header, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchReuqest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchReuqest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchReuqest, header_),
  offsetof(SchReuqestDefaultTypeInternal, create_range_),
  offsetof(SchReuqestDefaultTypeInternal, delete_range_),
  offsetof(SchReuqestDefaultTypeInternal, transfer_range_leader_),
  offsetof(SchReuqestDefaultTypeInternal, get_peer_info_),
  offsetof(SchReuqestDefaultTypeInternal, is_alive_),
  offsetof(SchReuqestDefaultTypeInternal, node_info_),
  offsetof(SchReuqestDefaultTypeInternal, change_raft_member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchReuqest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse_Header, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse_Header, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse, header_),
  offsetof(SchResponseDefaultTypeInternal, create_range_),
  offsetof(SchResponseDefaultTypeInternal, delete_range_),
  offsetof(SchResponseDefaultTypeInternal, transfer_range_leader_),
  offsetof(SchResponseDefaultTypeInternal, get_peer_info_),
  offsetof(SchResponseDefaultTypeInternal, is_alive_),
  offsetof(SchResponseDefaultTypeInternal, node_info_),
  offsetof(SchResponseDefaultTypeInternal, change_raft_member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeRequest, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeRequest, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, peer_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderRequest, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, commit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsAliveResponse, alive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, write_bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, write_keys_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, read_bytess_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, read_keys_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, approximate_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, kv_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, peers_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, range_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, range_split_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, snap_sending_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, snap_applying_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, range_leader_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, used_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, write_bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, write_keys_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, read_bytess_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, read_keys_per_sec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, isolated_replicas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, range_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRaftMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRaftMemberRequest, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRaftMemberRequest, range_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRaftMemberRequest, change_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRaftMemberRequest, target_peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRaftMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SchReuqest_Header)},
  { 6, -1, sizeof(SchReuqest)},
  { 20, -1, sizeof(SchResponse_Header)},
  { 27, -1, sizeof(SchResponse)},
  { 41, -1, sizeof(CreateRangeRequest)},
  { 48, -1, sizeof(CreateRangeResponse)},
  { 53, -1, sizeof(DeleteRangeRequest)},
  { 60, -1, sizeof(DeleteRangeResponse)},
  { 65, -1, sizeof(TransferRangeLeaderRequest)},
  { 71, -1, sizeof(TransferRangeLeaderResponse)},
  { 76, -1, sizeof(GetPeerInfoRequest)},
  { 82, -1, sizeof(GetPeerInfoResponse)},
  { 91, -1, sizeof(IsAliveRequest)},
  { 96, -1, sizeof(IsAliveResponse)},
  { 102, -1, sizeof(NodeInfoRequest)},
  { 107, -1, sizeof(RangeStats)},
  { 118, -1, sizeof(RangeInfo)},
  { 127, -1, sizeof(NodeStats)},
  { 143, -1, sizeof(NodeInfoResponse)},
  { 152, -1, sizeof(ChangeRaftMemberRequest)},
  { 161, -1, sizeof(ChangeRaftMemberResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchReuqest_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchReuqest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchResponse_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferRangeLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferRangeLeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsAliveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsAliveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeRaftMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeRaftMemberResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dspb/schedule.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::basepb::protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  ::dspb::protobuf_dspb_2ferror_2eproto::InitDefaults();
  _SchReuqest_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SchReuqest_Header_default_instance_);_SchReuqest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SchReuqest_default_instance_);_SchResponse_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SchResponse_Header_default_instance_);_SchResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SchResponse_default_instance_);_CreateRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateRangeRequest_default_instance_);_CreateRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateRangeResponse_default_instance_);_DeleteRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteRangeRequest_default_instance_);_DeleteRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteRangeResponse_default_instance_);_TransferRangeLeaderRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransferRangeLeaderRequest_default_instance_);_TransferRangeLeaderResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransferRangeLeaderResponse_default_instance_);_GetPeerInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPeerInfoRequest_default_instance_);_GetPeerInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPeerInfoResponse_default_instance_);_IsAliveRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IsAliveRequest_default_instance_);_IsAliveResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IsAliveResponse_default_instance_);_NodeInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeInfoRequest_default_instance_);_RangeStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeStats_default_instance_);_RangeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeInfo_default_instance_);_NodeStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeStats_default_instance_);_NodeInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeInfoResponse_default_instance_);_ChangeRaftMemberRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeRaftMemberRequest_default_instance_);_ChangeRaftMemberResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeRaftMemberResponse_default_instance_);_SchReuqest_default_instance_._instance.get_mutable()->header_ = const_cast< ::dspb::SchReuqest_Header*>(
      ::dspb::SchReuqest_Header::internal_default_instance());
  _SchReuqest_default_instance_.create_range_ = const_cast< ::dspb::CreateRangeRequest*>(
      ::dspb::CreateRangeRequest::internal_default_instance());
  _SchReuqest_default_instance_.delete_range_ = const_cast< ::dspb::DeleteRangeRequest*>(
      ::dspb::DeleteRangeRequest::internal_default_instance());
  _SchReuqest_default_instance_.transfer_range_leader_ = const_cast< ::dspb::TransferRangeLeaderRequest*>(
      ::dspb::TransferRangeLeaderRequest::internal_default_instance());
  _SchReuqest_default_instance_.get_peer_info_ = const_cast< ::dspb::GetPeerInfoRequest*>(
      ::dspb::GetPeerInfoRequest::internal_default_instance());
  _SchReuqest_default_instance_.is_alive_ = const_cast< ::dspb::IsAliveRequest*>(
      ::dspb::IsAliveRequest::internal_default_instance());
  _SchReuqest_default_instance_.node_info_ = const_cast< ::dspb::NodeInfoRequest*>(
      ::dspb::NodeInfoRequest::internal_default_instance());
  _SchReuqest_default_instance_.change_raft_member_ = const_cast< ::dspb::ChangeRaftMemberRequest*>(
      ::dspb::ChangeRaftMemberRequest::internal_default_instance());
  _SchResponse_Header_default_instance_._instance.get_mutable()->error_ = const_cast< ::dspb::Error*>(
      ::dspb::Error::internal_default_instance());
  _SchResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::dspb::SchResponse_Header*>(
      ::dspb::SchResponse_Header::internal_default_instance());
  _SchResponse_default_instance_.create_range_ = const_cast< ::dspb::CreateRangeResponse*>(
      ::dspb::CreateRangeResponse::internal_default_instance());
  _SchResponse_default_instance_.delete_range_ = const_cast< ::dspb::DeleteRangeResponse*>(
      ::dspb::DeleteRangeResponse::internal_default_instance());
  _SchResponse_default_instance_.transfer_range_leader_ = const_cast< ::dspb::TransferRangeLeaderResponse*>(
      ::dspb::TransferRangeLeaderResponse::internal_default_instance());
  _SchResponse_default_instance_.get_peer_info_ = const_cast< ::dspb::GetPeerInfoResponse*>(
      ::dspb::GetPeerInfoResponse::internal_default_instance());
  _SchResponse_default_instance_.is_alive_ = const_cast< ::dspb::IsAliveResponse*>(
      ::dspb::IsAliveResponse::internal_default_instance());
  _SchResponse_default_instance_.node_info_ = const_cast< ::dspb::NodeInfoResponse*>(
      ::dspb::NodeInfoResponse::internal_default_instance());
  _SchResponse_default_instance_.change_raft_member_ = const_cast< ::dspb::ChangeRaftMemberResponse*>(
      ::dspb::ChangeRaftMemberResponse::internal_default_instance());
  _CreateRangeRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _GetPeerInfoResponse_default_instance_._instance.get_mutable()->replica_ = const_cast< ::basepb::Replica*>(
      ::basepb::Replica::internal_default_instance());
  _RangeInfo_default_instance_._instance.get_mutable()->range_ = const_cast< ::basepb::Range*>(
      ::basepb::Range::internal_default_instance());
  _RangeInfo_default_instance_._instance.get_mutable()->stats_ = const_cast< ::dspb::RangeStats*>(
      ::dspb::RangeStats::internal_default_instance());
  _NodeInfoResponse_default_instance_._instance.get_mutable()->stats_ = const_cast< ::dspb::NodeStats*>(
      ::dspb::NodeStats::internal_default_instance());
  _ChangeRaftMemberRequest_default_instance_._instance.get_mutable()->range_epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _ChangeRaftMemberRequest_default_instance_._instance.get_mutable()->target_peer_ = const_cast< ::basepb::Peer*>(
      ::basepb::Peer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023dspb/schedule.proto\022\004dspb\032\023basepb/base"
      "pb.proto\032\020dspb/error.proto\"\307\003\n\nSchReuqes"
      "t\022\'\n\006header\030\001 \001(\0132\027.dspb.SchReuqest.Head"
      "er\0220\n\014create_range\030\002 \001(\0132\030.dspb.CreateRa"
      "ngeRequestH\000\0220\n\014delete_range\030\003 \001(\0132\030.dsp"
      "b.DeleteRangeRequestH\000\022A\n\025transfer_range"
      "_leader\030\004 \001(\0132 .dspb.TransferRangeLeader"
      "RequestH\000\0221\n\rget_peer_info\030\005 \001(\0132\030.dspb."
      "GetPeerInfoRequestH\000\022(\n\010is_alive\030\006 \001(\0132\024"
      ".dspb.IsAliveRequestH\000\022*\n\tnode_info\030\007 \001("
      "\0132\025.dspb.NodeInfoRequestH\000\022;\n\022change_raf"
      "t_member\030\010 \001(\0132\035.dspb.ChangeRaftMemberRe"
      "questH\000\032\034\n\006Header\022\022\n\ncluster_id\030\001 \001(\004B\005\n"
      "\003req\"\355\003\n\013SchResponse\022(\n\006header\030\001 \001(\0132\030.d"
      "spb.SchResponse.Header\0221\n\014create_range\030\002"
      " \001(\0132\031.dspb.CreateRangeResponseH\000\0221\n\014del"
      "ete_range\030\003 \001(\0132\031.dspb.DeleteRangeRespon"
      "seH\000\022B\n\025transfer_range_leader\030\004 \001(\0132!.ds"
      "pb.TransferRangeLeaderResponseH\000\0222\n\rget_"
      "peer_info\030\005 \001(\0132\031.dspb.GetPeerInfoRespon"
      "seH\000\022)\n\010is_alive\030\006 \001(\0132\025.dspb.IsAliveRes"
      "ponseH\000\022+\n\tnode_info\030\007 \001(\0132\026.dspb.NodeIn"
      "foResponseH\000\022<\n\022change_raft_member\030\010 \001(\013"
      "2\036.dspb.ChangeRaftMemberResponseH\000\0328\n\006He"
      "ader\022\022\n\ncluster_id\030\001 \001(\004\022\032\n\005error\030\002 \001(\0132"
      "\013.dspb.ErrorB\006\n\004resp\"B\n\022CreateRangeReque"
      "st\022\034\n\005range\030\001 \001(\0132\r.basepb.Range\022\016\n\006lead"
      "er\030\002 \001(\004\"\025\n\023CreateRangeResponse\"7\n\022Delet"
      "eRangeRequest\022\020\n\010range_id\030\001 \001(\004\022\017\n\007peer_"
      "id\030\002 \001(\004\"\025\n\023DeleteRangeResponse\".\n\032Trans"
      "ferRangeLeaderRequest\022\020\n\010range_id\030\001 \001(\004\""
      "\035\n\033TransferRangeLeaderResponse\"&\n\022GetPee"
      "rInfoRequest\022\020\n\010range_id\030\001 \001(\004\"d\n\023GetPee"
      "rInfoResponse\022 \n\007replica\030\001 \001(\0132\017.basepb."
      "Replica\022\r\n\005index\030\002 \001(\004\022\014\n\004term\030\003 \001(\004\022\016\n\006"
      "commit\030\004 \001(\004\"\020\n\016IsAliveRequest\" \n\017IsAliv"
      "eResponse\022\r\n\005alive\030\001 \001(\010\"\021\n\017NodeInfoRequ"
      "est\"\251\001\n\nRangeStats\022\033\n\023write_bytes_per_se"
      "c\030\001 \001(\004\022\032\n\022write_keys_per_sec\030\002 \001(\004\022\033\n\023r"
      "ead_bytess_per_sec\030\003 \001(\004\022\031\n\021read_keys_pe"
      "r_sec\030\004 \001(\004\022\030\n\020approximate_size\030\005 \001(\004\022\020\n"
      "\010kv_count\030\006 \001(\004\"\202\001\n\tRangeInfo\022\034\n\005range\030\001"
      " \001(\0132\r.basepb.Range\022\037\n\005stats\030\002 \001(\0132\020.dsp"
      "b.RangeStats\022\014\n\004term\030\003 \001(\004\022(\n\014peers_stat"
      "us\030\004 \003(\0132\022.basepb.PeerStatus\"\246\002\n\tNodeSta"
      "ts\022\023\n\013range_count\030\001 \001(\r\022\031\n\021range_split_c"
      "ount\030\002 \001(\r\022\032\n\022snap_sending_count\030\003 \001(\r\022\033"
      "\n\023snap_applying_count\030\004 \001(\r\022\032\n\022range_lea"
      "der_count\030\006 \001(\r\022\020\n\010capacity\030\007 \001(\004\022\021\n\tuse"
      "d_size\030\010 \001(\004\022\033\n\023write_bytes_per_sec\030\n \001("
      "\004\022\032\n\022write_keys_per_sec\030\013 \001(\004\022\033\n\023read_by"
      "tess_per_sec\030\014 \001(\004\022\031\n\021read_keys_per_sec\030"
      "\r \001(\004\"\204\001\n\020NodeInfoResponse\022\017\n\007node_id\030\001 "
      "\001(\004\022\036\n\005stats\030\002 \001(\0132\017.dspb.NodeStats\022\031\n\021i"
      "solated_replicas\030\003 \003(\004\022$\n\013range_infos\030\004 "
      "\003(\0132\017.dspb.RangeInfo\"\357\001\n\027ChangeRaftMembe"
      "rRequest\022\020\n\010range_id\030\001 \001(\004\022\'\n\013range_epoc"
      "h\030\002 \001(\0132\022.basepb.RangeEpoch\022=\n\013change_ty"
      "pe\030\003 \001(\0162(.dspb.ChangeRaftMemberRequest."
      "ChangeType\022!\n\013target_peer\030\004 \001(\0132\014.basepb"
      ".Peer\"7\n\nChangeType\022\016\n\nCT_INVALID\020\000\022\n\n\006C"
      "T_ADD\020\001\022\r\n\tCT_REMOVE\020\002\"\032\n\030ChangeRaftMemb"
      "erResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dspb/schedule.proto", &protobuf_RegisterTypes);
  ::basepb::protobuf_basepb_2fbasepb_2eproto::AddDescriptors();
  ::dspb::protobuf_dspb_2ferror_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dspb_2fschedule_2eproto

const ::google::protobuf::EnumDescriptor* ChangeRaftMemberRequest_ChangeType_descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_enum_descriptors[0];
}
bool ChangeRaftMemberRequest_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::CT_INVALID;
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::CT_ADD;
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::CT_REMOVE;
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::ChangeType_MIN;
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::ChangeType_MAX;
const int ChangeRaftMemberRequest::ChangeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchReuqest_Header::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchReuqest_Header::SchReuqest_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SchReuqest.Header)
}
SchReuqest_Header::SchReuqest_Header(const SchReuqest_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.SchReuqest.Header)
}

void SchReuqest_Header::SharedCtor() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SchReuqest_Header::~SchReuqest_Header() {
  // @@protoc_insertion_point(destructor:dspb.SchReuqest.Header)
  SharedDtor();
}

void SchReuqest_Header::SharedDtor() {
}

void SchReuqest_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchReuqest_Header::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SchReuqest_Header& SchReuqest_Header::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchReuqest_Header* SchReuqest_Header::New(::google::protobuf::Arena* arena) const {
  SchReuqest_Header* n = new SchReuqest_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchReuqest_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SchReuqest.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SchReuqest_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SchReuqest.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SchReuqest.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SchReuqest.Header)
  return false;
#undef DO_
}

void SchReuqest_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SchReuqest.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SchReuqest.Header)
}

::google::protobuf::uint8* SchReuqest_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SchReuqest.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SchReuqest.Header)
  return target;
}

size_t SchReuqest_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SchReuqest.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchReuqest_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SchReuqest.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const SchReuqest_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchReuqest_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SchReuqest.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SchReuqest.Header)
    MergeFrom(*source);
  }
}

void SchReuqest_Header::MergeFrom(const SchReuqest_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SchReuqest.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void SchReuqest_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SchReuqest.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchReuqest_Header::CopyFrom(const SchReuqest_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SchReuqest.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchReuqest_Header::IsInitialized() const {
  return true;
}

void SchReuqest_Header::Swap(SchReuqest_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchReuqest_Header::InternalSwap(SchReuqest_Header* other) {
  using std::swap;
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchReuqest_Header::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchReuqest_Header

// uint64 cluster_id = 1;
void SchReuqest_Header::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SchReuqest_Header::cluster_id() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.Header.cluster_id)
  return cluster_id_;
}
void SchReuqest_Header::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.SchReuqest.Header.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchReuqest::kHeaderFieldNumber;
const int SchReuqest::kCreateRangeFieldNumber;
const int SchReuqest::kDeleteRangeFieldNumber;
const int SchReuqest::kTransferRangeLeaderFieldNumber;
const int SchReuqest::kGetPeerInfoFieldNumber;
const int SchReuqest::kIsAliveFieldNumber;
const int SchReuqest::kNodeInfoFieldNumber;
const int SchReuqest::kChangeRaftMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchReuqest::SchReuqest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SchReuqest)
}
SchReuqest::SchReuqest(const SchReuqest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::dspb::SchReuqest_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_req();
  switch (from.req_case()) {
    case kCreateRange: {
      mutable_create_range()->::dspb::CreateRangeRequest::MergeFrom(from.create_range());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::dspb::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kTransferRangeLeader: {
      mutable_transfer_range_leader()->::dspb::TransferRangeLeaderRequest::MergeFrom(from.transfer_range_leader());
      break;
    }
    case kGetPeerInfo: {
      mutable_get_peer_info()->::dspb::GetPeerInfoRequest::MergeFrom(from.get_peer_info());
      break;
    }
    case kIsAlive: {
      mutable_is_alive()->::dspb::IsAliveRequest::MergeFrom(from.is_alive());
      break;
    }
    case kNodeInfo: {
      mutable_node_info()->::dspb::NodeInfoRequest::MergeFrom(from.node_info());
      break;
    }
    case kChangeRaftMember: {
      mutable_change_raft_member()->::dspb::ChangeRaftMemberRequest::MergeFrom(from.change_raft_member());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.SchReuqest)
}

void SchReuqest::SharedCtor() {
  header_ = NULL;
  clear_has_req();
  _cached_size_ = 0;
}

SchReuqest::~SchReuqest() {
  // @@protoc_insertion_point(destructor:dspb.SchReuqest)
  SharedDtor();
}

void SchReuqest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_req()) {
    clear_req();
  }
}

void SchReuqest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchReuqest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SchReuqest& SchReuqest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchReuqest* SchReuqest::New(::google::protobuf::Arena* arena) const {
  SchReuqest* n = new SchReuqest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchReuqest::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:dspb.SchReuqest)
  switch (req_case()) {
    case kCreateRange: {
      delete req_.create_range_;
      break;
    }
    case kDeleteRange: {
      delete req_.delete_range_;
      break;
    }
    case kTransferRangeLeader: {
      delete req_.transfer_range_leader_;
      break;
    }
    case kGetPeerInfo: {
      delete req_.get_peer_info_;
      break;
    }
    case kIsAlive: {
      delete req_.is_alive_;
      break;
    }
    case kNodeInfo: {
      delete req_.node_info_;
      break;
    }
    case kChangeRaftMember: {
      delete req_.change_raft_member_;
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQ_NOT_SET;
}


void SchReuqest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SchReuqest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_req();
  _internal_metadata_.Clear();
}

bool SchReuqest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SchReuqest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.SchReuqest.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.CreateRangeRequest create_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.DeleteRangeRequest delete_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_range_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetPeerInfoRequest get_peer_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_peer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.IsAliveRequest is_alive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_alive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.NodeInfoRequest node_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ChangeRaftMemberRequest change_raft_member = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_raft_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SchReuqest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SchReuqest)
  return false;
#undef DO_
}

void SchReuqest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SchReuqest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.SchReuqest.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .dspb.CreateRangeRequest create_range = 2;
  if (has_create_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *req_.create_range_, output);
  }

  // .dspb.DeleteRangeRequest delete_range = 3;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *req_.delete_range_, output);
  }

  // .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
  if (has_transfer_range_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *req_.transfer_range_leader_, output);
  }

  // .dspb.GetPeerInfoRequest get_peer_info = 5;
  if (has_get_peer_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *req_.get_peer_info_, output);
  }

  // .dspb.IsAliveRequest is_alive = 6;
  if (has_is_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *req_.is_alive_, output);
  }

  // .dspb.NodeInfoRequest node_info = 7;
  if (has_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *req_.node_info_, output);
  }

  // .dspb.ChangeRaftMemberRequest change_raft_member = 8;
  if (has_change_raft_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *req_.change_raft_member_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SchReuqest)
}

::google::protobuf::uint8* SchReuqest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SchReuqest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.SchReuqest.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .dspb.CreateRangeRequest create_range = 2;
  if (has_create_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *req_.create_range_, deterministic, target);
  }

  // .dspb.DeleteRangeRequest delete_range = 3;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *req_.delete_range_, deterministic, target);
  }

  // .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
  if (has_transfer_range_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *req_.transfer_range_leader_, deterministic, target);
  }

  // .dspb.GetPeerInfoRequest get_peer_info = 5;
  if (has_get_peer_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *req_.get_peer_info_, deterministic, target);
  }

  // .dspb.IsAliveRequest is_alive = 6;
  if (has_is_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *req_.is_alive_, deterministic, target);
  }

  // .dspb.NodeInfoRequest node_info = 7;
  if (has_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *req_.node_info_, deterministic, target);
  }

  // .dspb.ChangeRaftMemberRequest change_raft_member = 8;
  if (has_change_raft_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *req_.change_raft_member_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SchReuqest)
  return target;
}

size_t SchReuqest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SchReuqest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.SchReuqest.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  switch (req_case()) {
    // .dspb.CreateRangeRequest create_range = 2;
    case kCreateRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.create_range_);
      break;
    }
    // .dspb.DeleteRangeRequest delete_range = 3;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.delete_range_);
      break;
    }
    // .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
    case kTransferRangeLeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.transfer_range_leader_);
      break;
    }
    // .dspb.GetPeerInfoRequest get_peer_info = 5;
    case kGetPeerInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.get_peer_info_);
      break;
    }
    // .dspb.IsAliveRequest is_alive = 6;
    case kIsAlive: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.is_alive_);
      break;
    }
    // .dspb.NodeInfoRequest node_info = 7;
    case kNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.node_info_);
      break;
    }
    // .dspb.ChangeRaftMemberRequest change_raft_member = 8;
    case kChangeRaftMember: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.change_raft_member_);
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchReuqest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SchReuqest)
  GOOGLE_DCHECK_NE(&from, this);
  const SchReuqest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchReuqest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SchReuqest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SchReuqest)
    MergeFrom(*source);
  }
}

void SchReuqest::MergeFrom(const SchReuqest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SchReuqest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::dspb::SchReuqest_Header::MergeFrom(from.header());
  }
  switch (from.req_case()) {
    case kCreateRange: {
      mutable_create_range()->::dspb::CreateRangeRequest::MergeFrom(from.create_range());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::dspb::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kTransferRangeLeader: {
      mutable_transfer_range_leader()->::dspb::TransferRangeLeaderRequest::MergeFrom(from.transfer_range_leader());
      break;
    }
    case kGetPeerInfo: {
      mutable_get_peer_info()->::dspb::GetPeerInfoRequest::MergeFrom(from.get_peer_info());
      break;
    }
    case kIsAlive: {
      mutable_is_alive()->::dspb::IsAliveRequest::MergeFrom(from.is_alive());
      break;
    }
    case kNodeInfo: {
      mutable_node_info()->::dspb::NodeInfoRequest::MergeFrom(from.node_info());
      break;
    }
    case kChangeRaftMember: {
      mutable_change_raft_member()->::dspb::ChangeRaftMemberRequest::MergeFrom(from.change_raft_member());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
}

void SchReuqest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SchReuqest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchReuqest::CopyFrom(const SchReuqest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SchReuqest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchReuqest::IsInitialized() const {
  return true;
}

void SchReuqest::Swap(SchReuqest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchReuqest::InternalSwap(SchReuqest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchReuqest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchReuqest

// .dspb.SchReuqest.Header header = 1;
bool SchReuqest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SchReuqest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::dspb::SchReuqest_Header& SchReuqest::header() const {
  const ::dspb::SchReuqest_Header* p = header_;
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SchReuqest_Header*>(
      &::dspb::_SchReuqest_Header_default_instance_);
}
::dspb::SchReuqest_Header* SchReuqest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::dspb::SchReuqest_Header;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.header)
  return header_;
}
::dspb::SchReuqest_Header* SchReuqest::release_header() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.header)
  
  ::dspb::SchReuqest_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void SchReuqest::set_allocated_header(::dspb::SchReuqest_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.header)
}

// .dspb.CreateRangeRequest create_range = 2;
bool SchReuqest::has_create_range() const {
  return req_case() == kCreateRange;
}
void SchReuqest::set_has_create_range() {
  _oneof_case_[0] = kCreateRange;
}
void SchReuqest::clear_create_range() {
  if (has_create_range()) {
    delete req_.create_range_;
    clear_has_req();
  }
}
 const ::dspb::CreateRangeRequest& SchReuqest::create_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.create_range)
  return has_create_range()
      ? *req_.create_range_
      : ::dspb::CreateRangeRequest::default_instance();
}
::dspb::CreateRangeRequest* SchReuqest::mutable_create_range() {
  if (!has_create_range()) {
    clear_req();
    set_has_create_range();
    req_.create_range_ = new ::dspb::CreateRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.create_range)
  return req_.create_range_;
}
::dspb::CreateRangeRequest* SchReuqest::release_create_range() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.create_range)
  if (has_create_range()) {
    clear_has_req();
    ::dspb::CreateRangeRequest* temp = req_.create_range_;
    req_.create_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_create_range(::dspb::CreateRangeRequest* create_range) {
  clear_req();
  if (create_range) {
    set_has_create_range();
    req_.create_range_ = create_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.create_range)
}

// .dspb.DeleteRangeRequest delete_range = 3;
bool SchReuqest::has_delete_range() const {
  return req_case() == kDeleteRange;
}
void SchReuqest::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void SchReuqest::clear_delete_range() {
  if (has_delete_range()) {
    delete req_.delete_range_;
    clear_has_req();
  }
}
 const ::dspb::DeleteRangeRequest& SchReuqest::delete_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.delete_range)
  return has_delete_range()
      ? *req_.delete_range_
      : ::dspb::DeleteRangeRequest::default_instance();
}
::dspb::DeleteRangeRequest* SchReuqest::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_req();
    set_has_delete_range();
    req_.delete_range_ = new ::dspb::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.delete_range)
  return req_.delete_range_;
}
::dspb::DeleteRangeRequest* SchReuqest::release_delete_range() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.delete_range)
  if (has_delete_range()) {
    clear_has_req();
    ::dspb::DeleteRangeRequest* temp = req_.delete_range_;
    req_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_delete_range(::dspb::DeleteRangeRequest* delete_range) {
  clear_req();
  if (delete_range) {
    set_has_delete_range();
    req_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.delete_range)
}

// .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
bool SchReuqest::has_transfer_range_leader() const {
  return req_case() == kTransferRangeLeader;
}
void SchReuqest::set_has_transfer_range_leader() {
  _oneof_case_[0] = kTransferRangeLeader;
}
void SchReuqest::clear_transfer_range_leader() {
  if (has_transfer_range_leader()) {
    delete req_.transfer_range_leader_;
    clear_has_req();
  }
}
 const ::dspb::TransferRangeLeaderRequest& SchReuqest::transfer_range_leader() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.transfer_range_leader)
  return has_transfer_range_leader()
      ? *req_.transfer_range_leader_
      : ::dspb::TransferRangeLeaderRequest::default_instance();
}
::dspb::TransferRangeLeaderRequest* SchReuqest::mutable_transfer_range_leader() {
  if (!has_transfer_range_leader()) {
    clear_req();
    set_has_transfer_range_leader();
    req_.transfer_range_leader_ = new ::dspb::TransferRangeLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.transfer_range_leader)
  return req_.transfer_range_leader_;
}
::dspb::TransferRangeLeaderRequest* SchReuqest::release_transfer_range_leader() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.transfer_range_leader)
  if (has_transfer_range_leader()) {
    clear_has_req();
    ::dspb::TransferRangeLeaderRequest* temp = req_.transfer_range_leader_;
    req_.transfer_range_leader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_transfer_range_leader(::dspb::TransferRangeLeaderRequest* transfer_range_leader) {
  clear_req();
  if (transfer_range_leader) {
    set_has_transfer_range_leader();
    req_.transfer_range_leader_ = transfer_range_leader;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.transfer_range_leader)
}

// .dspb.GetPeerInfoRequest get_peer_info = 5;
bool SchReuqest::has_get_peer_info() const {
  return req_case() == kGetPeerInfo;
}
void SchReuqest::set_has_get_peer_info() {
  _oneof_case_[0] = kGetPeerInfo;
}
void SchReuqest::clear_get_peer_info() {
  if (has_get_peer_info()) {
    delete req_.get_peer_info_;
    clear_has_req();
  }
}
 const ::dspb::GetPeerInfoRequest& SchReuqest::get_peer_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.get_peer_info)
  return has_get_peer_info()
      ? *req_.get_peer_info_
      : ::dspb::GetPeerInfoRequest::default_instance();
}
::dspb::GetPeerInfoRequest* SchReuqest::mutable_get_peer_info() {
  if (!has_get_peer_info()) {
    clear_req();
    set_has_get_peer_info();
    req_.get_peer_info_ = new ::dspb::GetPeerInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.get_peer_info)
  return req_.get_peer_info_;
}
::dspb::GetPeerInfoRequest* SchReuqest::release_get_peer_info() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.get_peer_info)
  if (has_get_peer_info()) {
    clear_has_req();
    ::dspb::GetPeerInfoRequest* temp = req_.get_peer_info_;
    req_.get_peer_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_get_peer_info(::dspb::GetPeerInfoRequest* get_peer_info) {
  clear_req();
  if (get_peer_info) {
    set_has_get_peer_info();
    req_.get_peer_info_ = get_peer_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.get_peer_info)
}

// .dspb.IsAliveRequest is_alive = 6;
bool SchReuqest::has_is_alive() const {
  return req_case() == kIsAlive;
}
void SchReuqest::set_has_is_alive() {
  _oneof_case_[0] = kIsAlive;
}
void SchReuqest::clear_is_alive() {
  if (has_is_alive()) {
    delete req_.is_alive_;
    clear_has_req();
  }
}
 const ::dspb::IsAliveRequest& SchReuqest::is_alive() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.is_alive)
  return has_is_alive()
      ? *req_.is_alive_
      : ::dspb::IsAliveRequest::default_instance();
}
::dspb::IsAliveRequest* SchReuqest::mutable_is_alive() {
  if (!has_is_alive()) {
    clear_req();
    set_has_is_alive();
    req_.is_alive_ = new ::dspb::IsAliveRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.is_alive)
  return req_.is_alive_;
}
::dspb::IsAliveRequest* SchReuqest::release_is_alive() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.is_alive)
  if (has_is_alive()) {
    clear_has_req();
    ::dspb::IsAliveRequest* temp = req_.is_alive_;
    req_.is_alive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_is_alive(::dspb::IsAliveRequest* is_alive) {
  clear_req();
  if (is_alive) {
    set_has_is_alive();
    req_.is_alive_ = is_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.is_alive)
}

// .dspb.NodeInfoRequest node_info = 7;
bool SchReuqest::has_node_info() const {
  return req_case() == kNodeInfo;
}
void SchReuqest::set_has_node_info() {
  _oneof_case_[0] = kNodeInfo;
}
void SchReuqest::clear_node_info() {
  if (has_node_info()) {
    delete req_.node_info_;
    clear_has_req();
  }
}
 const ::dspb::NodeInfoRequest& SchReuqest::node_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.node_info)
  return has_node_info()
      ? *req_.node_info_
      : ::dspb::NodeInfoRequest::default_instance();
}
::dspb::NodeInfoRequest* SchReuqest::mutable_node_info() {
  if (!has_node_info()) {
    clear_req();
    set_has_node_info();
    req_.node_info_ = new ::dspb::NodeInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.node_info)
  return req_.node_info_;
}
::dspb::NodeInfoRequest* SchReuqest::release_node_info() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.node_info)
  if (has_node_info()) {
    clear_has_req();
    ::dspb::NodeInfoRequest* temp = req_.node_info_;
    req_.node_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_node_info(::dspb::NodeInfoRequest* node_info) {
  clear_req();
  if (node_info) {
    set_has_node_info();
    req_.node_info_ = node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.node_info)
}

// .dspb.ChangeRaftMemberRequest change_raft_member = 8;
bool SchReuqest::has_change_raft_member() const {
  return req_case() == kChangeRaftMember;
}
void SchReuqest::set_has_change_raft_member() {
  _oneof_case_[0] = kChangeRaftMember;
}
void SchReuqest::clear_change_raft_member() {
  if (has_change_raft_member()) {
    delete req_.change_raft_member_;
    clear_has_req();
  }
}
 const ::dspb::ChangeRaftMemberRequest& SchReuqest::change_raft_member() const {
  // @@protoc_insertion_point(field_get:dspb.SchReuqest.change_raft_member)
  return has_change_raft_member()
      ? *req_.change_raft_member_
      : ::dspb::ChangeRaftMemberRequest::default_instance();
}
::dspb::ChangeRaftMemberRequest* SchReuqest::mutable_change_raft_member() {
  if (!has_change_raft_member()) {
    clear_req();
    set_has_change_raft_member();
    req_.change_raft_member_ = new ::dspb::ChangeRaftMemberRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchReuqest.change_raft_member)
  return req_.change_raft_member_;
}
::dspb::ChangeRaftMemberRequest* SchReuqest::release_change_raft_member() {
  // @@protoc_insertion_point(field_release:dspb.SchReuqest.change_raft_member)
  if (has_change_raft_member()) {
    clear_has_req();
    ::dspb::ChangeRaftMemberRequest* temp = req_.change_raft_member_;
    req_.change_raft_member_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchReuqest::set_allocated_change_raft_member(::dspb::ChangeRaftMemberRequest* change_raft_member) {
  clear_req();
  if (change_raft_member) {
    set_has_change_raft_member();
    req_.change_raft_member_ = change_raft_member;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchReuqest.change_raft_member)
}

bool SchReuqest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
void SchReuqest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
SchReuqest::ReqCase SchReuqest::req_case() const {
  return SchReuqest::ReqCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchResponse_Header::kClusterIdFieldNumber;
const int SchResponse_Header::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchResponse_Header::SchResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SchResponse.Header)
}
SchResponse_Header::SchResponse_Header(const SchResponse_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::dspb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.SchResponse.Header)
}

void SchResponse_Header::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(cluster_id_));
  _cached_size_ = 0;
}

SchResponse_Header::~SchResponse_Header() {
  // @@protoc_insertion_point(destructor:dspb.SchResponse.Header)
  SharedDtor();
}

void SchResponse_Header::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void SchResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchResponse_Header::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SchResponse_Header& SchResponse_Header::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchResponse_Header* SchResponse_Header::New(::google::protobuf::Arena* arena) const {
  SchResponse_Header* n = new SchResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SchResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SchResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SchResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SchResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SchResponse.Header)
  return false;
#undef DO_
}

void SchResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SchResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .dspb.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SchResponse.Header)
}

::google::protobuf::uint8* SchResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SchResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .dspb.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SchResponse.Header)
  return target;
}

size_t SchResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SchResponse.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SchResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const SchResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SchResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SchResponse.Header)
    MergeFrom(*source);
  }
}

void SchResponse_Header::MergeFrom(const SchResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SchResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::dspb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void SchResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SchResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchResponse_Header::CopyFrom(const SchResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SchResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchResponse_Header::IsInitialized() const {
  return true;
}

void SchResponse_Header::Swap(SchResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchResponse_Header::InternalSwap(SchResponse_Header* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchResponse_Header::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchResponse_Header

// uint64 cluster_id = 1;
void SchResponse_Header::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SchResponse_Header::cluster_id() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.Header.cluster_id)
  return cluster_id_;
}
void SchResponse_Header::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.SchResponse.Header.cluster_id)
}

// .dspb.Error error = 2;
bool SchResponse_Header::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void SchResponse_Header::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::dspb::Error& SchResponse_Header::error() const {
  const ::dspb::Error* p = error_;
  // @@protoc_insertion_point(field_get:dspb.SchResponse.Header.error)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Error*>(
      &::dspb::_Error_default_instance_);
}
::dspb::Error* SchResponse_Header::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::dspb::Error;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.Header.error)
  return error_;
}
::dspb::Error* SchResponse_Header::release_error() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.Header.error)
  
  ::dspb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void SchResponse_Header::set_allocated_error(::dspb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.Header.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchResponse::kHeaderFieldNumber;
const int SchResponse::kCreateRangeFieldNumber;
const int SchResponse::kDeleteRangeFieldNumber;
const int SchResponse::kTransferRangeLeaderFieldNumber;
const int SchResponse::kGetPeerInfoFieldNumber;
const int SchResponse::kIsAliveFieldNumber;
const int SchResponse::kNodeInfoFieldNumber;
const int SchResponse::kChangeRaftMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchResponse::SchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.SchResponse)
}
SchResponse::SchResponse(const SchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::dspb::SchResponse_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_resp();
  switch (from.resp_case()) {
    case kCreateRange: {
      mutable_create_range()->::dspb::CreateRangeResponse::MergeFrom(from.create_range());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::dspb::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kTransferRangeLeader: {
      mutable_transfer_range_leader()->::dspb::TransferRangeLeaderResponse::MergeFrom(from.transfer_range_leader());
      break;
    }
    case kGetPeerInfo: {
      mutable_get_peer_info()->::dspb::GetPeerInfoResponse::MergeFrom(from.get_peer_info());
      break;
    }
    case kIsAlive: {
      mutable_is_alive()->::dspb::IsAliveResponse::MergeFrom(from.is_alive());
      break;
    }
    case kNodeInfo: {
      mutable_node_info()->::dspb::NodeInfoResponse::MergeFrom(from.node_info());
      break;
    }
    case kChangeRaftMember: {
      mutable_change_raft_member()->::dspb::ChangeRaftMemberResponse::MergeFrom(from.change_raft_member());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dspb.SchResponse)
}

void SchResponse::SharedCtor() {
  header_ = NULL;
  clear_has_resp();
  _cached_size_ = 0;
}

SchResponse::~SchResponse() {
  // @@protoc_insertion_point(destructor:dspb.SchResponse)
  SharedDtor();
}

void SchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_resp()) {
    clear_resp();
  }
}

void SchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SchResponse& SchResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchResponse* SchResponse::New(::google::protobuf::Arena* arena) const {
  SchResponse* n = new SchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchResponse::clear_resp() {
// @@protoc_insertion_point(one_of_clear_start:dspb.SchResponse)
  switch (resp_case()) {
    case kCreateRange: {
      delete resp_.create_range_;
      break;
    }
    case kDeleteRange: {
      delete resp_.delete_range_;
      break;
    }
    case kTransferRangeLeader: {
      delete resp_.transfer_range_leader_;
      break;
    }
    case kGetPeerInfo: {
      delete resp_.get_peer_info_;
      break;
    }
    case kIsAlive: {
      delete resp_.is_alive_;
      break;
    }
    case kNodeInfo: {
      delete resp_.node_info_;
      break;
    }
    case kChangeRaftMember: {
      delete resp_.change_raft_member_;
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESP_NOT_SET;
}


void SchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.SchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_resp();
  _internal_metadata_.Clear();
}

bool SchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.SchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dspb.SchResponse.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.CreateRangeResponse create_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.DeleteRangeResponse delete_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_range_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.GetPeerInfoResponse get_peer_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_peer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.IsAliveResponse is_alive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_alive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.NodeInfoResponse node_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ChangeRaftMemberResponse change_raft_member = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_raft_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.SchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.SchResponse)
  return false;
#undef DO_
}

void SchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.SchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.SchResponse.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .dspb.CreateRangeResponse create_range = 2;
  if (has_create_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *resp_.create_range_, output);
  }

  // .dspb.DeleteRangeResponse delete_range = 3;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *resp_.delete_range_, output);
  }

  // .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
  if (has_transfer_range_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *resp_.transfer_range_leader_, output);
  }

  // .dspb.GetPeerInfoResponse get_peer_info = 5;
  if (has_get_peer_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *resp_.get_peer_info_, output);
  }

  // .dspb.IsAliveResponse is_alive = 6;
  if (has_is_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *resp_.is_alive_, output);
  }

  // .dspb.NodeInfoResponse node_info = 7;
  if (has_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *resp_.node_info_, output);
  }

  // .dspb.ChangeRaftMemberResponse change_raft_member = 8;
  if (has_change_raft_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *resp_.change_raft_member_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.SchResponse)
}

::google::protobuf::uint8* SchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.SchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dspb.SchResponse.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .dspb.CreateRangeResponse create_range = 2;
  if (has_create_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *resp_.create_range_, deterministic, target);
  }

  // .dspb.DeleteRangeResponse delete_range = 3;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *resp_.delete_range_, deterministic, target);
  }

  // .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
  if (has_transfer_range_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *resp_.transfer_range_leader_, deterministic, target);
  }

  // .dspb.GetPeerInfoResponse get_peer_info = 5;
  if (has_get_peer_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *resp_.get_peer_info_, deterministic, target);
  }

  // .dspb.IsAliveResponse is_alive = 6;
  if (has_is_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *resp_.is_alive_, deterministic, target);
  }

  // .dspb.NodeInfoResponse node_info = 7;
  if (has_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *resp_.node_info_, deterministic, target);
  }

  // .dspb.ChangeRaftMemberResponse change_raft_member = 8;
  if (has_change_raft_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *resp_.change_raft_member_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.SchResponse)
  return target;
}

size_t SchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.SchResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dspb.SchResponse.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  switch (resp_case()) {
    // .dspb.CreateRangeResponse create_range = 2;
    case kCreateRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.create_range_);
      break;
    }
    // .dspb.DeleteRangeResponse delete_range = 3;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.delete_range_);
      break;
    }
    // .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
    case kTransferRangeLeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.transfer_range_leader_);
      break;
    }
    // .dspb.GetPeerInfoResponse get_peer_info = 5;
    case kGetPeerInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.get_peer_info_);
      break;
    }
    // .dspb.IsAliveResponse is_alive = 6;
    case kIsAlive: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.is_alive_);
      break;
    }
    // .dspb.NodeInfoResponse node_info = 7;
    case kNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.node_info_);
      break;
    }
    // .dspb.ChangeRaftMemberResponse change_raft_member = 8;
    case kChangeRaftMember: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.change_raft_member_);
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.SchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.SchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.SchResponse)
    MergeFrom(*source);
  }
}

void SchResponse::MergeFrom(const SchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.SchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::dspb::SchResponse_Header::MergeFrom(from.header());
  }
  switch (from.resp_case()) {
    case kCreateRange: {
      mutable_create_range()->::dspb::CreateRangeResponse::MergeFrom(from.create_range());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::dspb::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kTransferRangeLeader: {
      mutable_transfer_range_leader()->::dspb::TransferRangeLeaderResponse::MergeFrom(from.transfer_range_leader());
      break;
    }
    case kGetPeerInfo: {
      mutable_get_peer_info()->::dspb::GetPeerInfoResponse::MergeFrom(from.get_peer_info());
      break;
    }
    case kIsAlive: {
      mutable_is_alive()->::dspb::IsAliveResponse::MergeFrom(from.is_alive());
      break;
    }
    case kNodeInfo: {
      mutable_node_info()->::dspb::NodeInfoResponse::MergeFrom(from.node_info());
      break;
    }
    case kChangeRaftMember: {
      mutable_change_raft_member()->::dspb::ChangeRaftMemberResponse::MergeFrom(from.change_raft_member());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
}

void SchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.SchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchResponse::CopyFrom(const SchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.SchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchResponse::IsInitialized() const {
  return true;
}

void SchResponse::Swap(SchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchResponse::InternalSwap(SchResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchResponse

// .dspb.SchResponse.Header header = 1;
bool SchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::dspb::SchResponse_Header& SchResponse::header() const {
  const ::dspb::SchResponse_Header* p = header_;
  // @@protoc_insertion_point(field_get:dspb.SchResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SchResponse_Header*>(
      &::dspb::_SchResponse_Header_default_instance_);
}
::dspb::SchResponse_Header* SchResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::dspb::SchResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.header)
  return header_;
}
::dspb::SchResponse_Header* SchResponse::release_header() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.header)
  
  ::dspb::SchResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void SchResponse::set_allocated_header(::dspb::SchResponse_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.header)
}

// .dspb.CreateRangeResponse create_range = 2;
bool SchResponse::has_create_range() const {
  return resp_case() == kCreateRange;
}
void SchResponse::set_has_create_range() {
  _oneof_case_[0] = kCreateRange;
}
void SchResponse::clear_create_range() {
  if (has_create_range()) {
    delete resp_.create_range_;
    clear_has_resp();
  }
}
 const ::dspb::CreateRangeResponse& SchResponse::create_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.create_range)
  return has_create_range()
      ? *resp_.create_range_
      : ::dspb::CreateRangeResponse::default_instance();
}
::dspb::CreateRangeResponse* SchResponse::mutable_create_range() {
  if (!has_create_range()) {
    clear_resp();
    set_has_create_range();
    resp_.create_range_ = new ::dspb::CreateRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.create_range)
  return resp_.create_range_;
}
::dspb::CreateRangeResponse* SchResponse::release_create_range() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.create_range)
  if (has_create_range()) {
    clear_has_resp();
    ::dspb::CreateRangeResponse* temp = resp_.create_range_;
    resp_.create_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_create_range(::dspb::CreateRangeResponse* create_range) {
  clear_resp();
  if (create_range) {
    set_has_create_range();
    resp_.create_range_ = create_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.create_range)
}

// .dspb.DeleteRangeResponse delete_range = 3;
bool SchResponse::has_delete_range() const {
  return resp_case() == kDeleteRange;
}
void SchResponse::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void SchResponse::clear_delete_range() {
  if (has_delete_range()) {
    delete resp_.delete_range_;
    clear_has_resp();
  }
}
 const ::dspb::DeleteRangeResponse& SchResponse::delete_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.delete_range)
  return has_delete_range()
      ? *resp_.delete_range_
      : ::dspb::DeleteRangeResponse::default_instance();
}
::dspb::DeleteRangeResponse* SchResponse::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_resp();
    set_has_delete_range();
    resp_.delete_range_ = new ::dspb::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.delete_range)
  return resp_.delete_range_;
}
::dspb::DeleteRangeResponse* SchResponse::release_delete_range() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.delete_range)
  if (has_delete_range()) {
    clear_has_resp();
    ::dspb::DeleteRangeResponse* temp = resp_.delete_range_;
    resp_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_delete_range(::dspb::DeleteRangeResponse* delete_range) {
  clear_resp();
  if (delete_range) {
    set_has_delete_range();
    resp_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.delete_range)
}

// .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
bool SchResponse::has_transfer_range_leader() const {
  return resp_case() == kTransferRangeLeader;
}
void SchResponse::set_has_transfer_range_leader() {
  _oneof_case_[0] = kTransferRangeLeader;
}
void SchResponse::clear_transfer_range_leader() {
  if (has_transfer_range_leader()) {
    delete resp_.transfer_range_leader_;
    clear_has_resp();
  }
}
 const ::dspb::TransferRangeLeaderResponse& SchResponse::transfer_range_leader() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.transfer_range_leader)
  return has_transfer_range_leader()
      ? *resp_.transfer_range_leader_
      : ::dspb::TransferRangeLeaderResponse::default_instance();
}
::dspb::TransferRangeLeaderResponse* SchResponse::mutable_transfer_range_leader() {
  if (!has_transfer_range_leader()) {
    clear_resp();
    set_has_transfer_range_leader();
    resp_.transfer_range_leader_ = new ::dspb::TransferRangeLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.transfer_range_leader)
  return resp_.transfer_range_leader_;
}
::dspb::TransferRangeLeaderResponse* SchResponse::release_transfer_range_leader() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.transfer_range_leader)
  if (has_transfer_range_leader()) {
    clear_has_resp();
    ::dspb::TransferRangeLeaderResponse* temp = resp_.transfer_range_leader_;
    resp_.transfer_range_leader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_transfer_range_leader(::dspb::TransferRangeLeaderResponse* transfer_range_leader) {
  clear_resp();
  if (transfer_range_leader) {
    set_has_transfer_range_leader();
    resp_.transfer_range_leader_ = transfer_range_leader;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.transfer_range_leader)
}

// .dspb.GetPeerInfoResponse get_peer_info = 5;
bool SchResponse::has_get_peer_info() const {
  return resp_case() == kGetPeerInfo;
}
void SchResponse::set_has_get_peer_info() {
  _oneof_case_[0] = kGetPeerInfo;
}
void SchResponse::clear_get_peer_info() {
  if (has_get_peer_info()) {
    delete resp_.get_peer_info_;
    clear_has_resp();
  }
}
 const ::dspb::GetPeerInfoResponse& SchResponse::get_peer_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.get_peer_info)
  return has_get_peer_info()
      ? *resp_.get_peer_info_
      : ::dspb::GetPeerInfoResponse::default_instance();
}
::dspb::GetPeerInfoResponse* SchResponse::mutable_get_peer_info() {
  if (!has_get_peer_info()) {
    clear_resp();
    set_has_get_peer_info();
    resp_.get_peer_info_ = new ::dspb::GetPeerInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.get_peer_info)
  return resp_.get_peer_info_;
}
::dspb::GetPeerInfoResponse* SchResponse::release_get_peer_info() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.get_peer_info)
  if (has_get_peer_info()) {
    clear_has_resp();
    ::dspb::GetPeerInfoResponse* temp = resp_.get_peer_info_;
    resp_.get_peer_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_get_peer_info(::dspb::GetPeerInfoResponse* get_peer_info) {
  clear_resp();
  if (get_peer_info) {
    set_has_get_peer_info();
    resp_.get_peer_info_ = get_peer_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.get_peer_info)
}

// .dspb.IsAliveResponse is_alive = 6;
bool SchResponse::has_is_alive() const {
  return resp_case() == kIsAlive;
}
void SchResponse::set_has_is_alive() {
  _oneof_case_[0] = kIsAlive;
}
void SchResponse::clear_is_alive() {
  if (has_is_alive()) {
    delete resp_.is_alive_;
    clear_has_resp();
  }
}
 const ::dspb::IsAliveResponse& SchResponse::is_alive() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.is_alive)
  return has_is_alive()
      ? *resp_.is_alive_
      : ::dspb::IsAliveResponse::default_instance();
}
::dspb::IsAliveResponse* SchResponse::mutable_is_alive() {
  if (!has_is_alive()) {
    clear_resp();
    set_has_is_alive();
    resp_.is_alive_ = new ::dspb::IsAliveResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.is_alive)
  return resp_.is_alive_;
}
::dspb::IsAliveResponse* SchResponse::release_is_alive() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.is_alive)
  if (has_is_alive()) {
    clear_has_resp();
    ::dspb::IsAliveResponse* temp = resp_.is_alive_;
    resp_.is_alive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_is_alive(::dspb::IsAliveResponse* is_alive) {
  clear_resp();
  if (is_alive) {
    set_has_is_alive();
    resp_.is_alive_ = is_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.is_alive)
}

// .dspb.NodeInfoResponse node_info = 7;
bool SchResponse::has_node_info() const {
  return resp_case() == kNodeInfo;
}
void SchResponse::set_has_node_info() {
  _oneof_case_[0] = kNodeInfo;
}
void SchResponse::clear_node_info() {
  if (has_node_info()) {
    delete resp_.node_info_;
    clear_has_resp();
  }
}
 const ::dspb::NodeInfoResponse& SchResponse::node_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.node_info)
  return has_node_info()
      ? *resp_.node_info_
      : ::dspb::NodeInfoResponse::default_instance();
}
::dspb::NodeInfoResponse* SchResponse::mutable_node_info() {
  if (!has_node_info()) {
    clear_resp();
    set_has_node_info();
    resp_.node_info_ = new ::dspb::NodeInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.node_info)
  return resp_.node_info_;
}
::dspb::NodeInfoResponse* SchResponse::release_node_info() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.node_info)
  if (has_node_info()) {
    clear_has_resp();
    ::dspb::NodeInfoResponse* temp = resp_.node_info_;
    resp_.node_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_node_info(::dspb::NodeInfoResponse* node_info) {
  clear_resp();
  if (node_info) {
    set_has_node_info();
    resp_.node_info_ = node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.node_info)
}

// .dspb.ChangeRaftMemberResponse change_raft_member = 8;
bool SchResponse::has_change_raft_member() const {
  return resp_case() == kChangeRaftMember;
}
void SchResponse::set_has_change_raft_member() {
  _oneof_case_[0] = kChangeRaftMember;
}
void SchResponse::clear_change_raft_member() {
  if (has_change_raft_member()) {
    delete resp_.change_raft_member_;
    clear_has_resp();
  }
}
 const ::dspb::ChangeRaftMemberResponse& SchResponse::change_raft_member() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.change_raft_member)
  return has_change_raft_member()
      ? *resp_.change_raft_member_
      : ::dspb::ChangeRaftMemberResponse::default_instance();
}
::dspb::ChangeRaftMemberResponse* SchResponse::mutable_change_raft_member() {
  if (!has_change_raft_member()) {
    clear_resp();
    set_has_change_raft_member();
    resp_.change_raft_member_ = new ::dspb::ChangeRaftMemberResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.change_raft_member)
  return resp_.change_raft_member_;
}
::dspb::ChangeRaftMemberResponse* SchResponse::release_change_raft_member() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.change_raft_member)
  if (has_change_raft_member()) {
    clear_has_resp();
    ::dspb::ChangeRaftMemberResponse* temp = resp_.change_raft_member_;
    resp_.change_raft_member_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SchResponse::set_allocated_change_raft_member(::dspb::ChangeRaftMemberResponse* change_raft_member) {
  clear_resp();
  if (change_raft_member) {
    set_has_change_raft_member();
    resp_.change_raft_member_ = change_raft_member;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.change_raft_member)
}

bool SchResponse::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
void SchResponse::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
SchResponse::RespCase SchResponse::resp_case() const {
  return SchResponse::RespCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRangeRequest::kRangeFieldNumber;
const int CreateRangeRequest::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRangeRequest::CreateRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.CreateRangeRequest)
}
CreateRangeRequest::CreateRangeRequest(const CreateRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::basepb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  leader_ = from.leader_;
  // @@protoc_insertion_point(copy_constructor:dspb.CreateRangeRequest)
}

void CreateRangeRequest::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&range_)) + sizeof(leader_));
  _cached_size_ = 0;
}

CreateRangeRequest::~CreateRangeRequest() {
  // @@protoc_insertion_point(destructor:dspb.CreateRangeRequest)
  SharedDtor();
}

void CreateRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void CreateRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRangeRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRangeRequest& CreateRangeRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRangeRequest* CreateRangeRequest::New(::google::protobuf::Arena* arena) const {
  CreateRangeRequest* n = new CreateRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.CreateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  leader_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool CreateRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.CreateRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.Range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.CreateRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.CreateRangeRequest)
  return false;
#undef DO_
}

void CreateRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.CreateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range range = 1;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_, output);
  }

  // uint64 leader = 2;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leader(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.CreateRangeRequest)
}

::google::protobuf::uint8* CreateRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.CreateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range range = 1;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->range_, deterministic, target);
  }

  // uint64 leader = 2;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leader(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.CreateRangeRequest)
  return target;
}

size_t CreateRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.CreateRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // uint64 leader = 2;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.CreateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.CreateRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.CreateRangeRequest)
    MergeFrom(*source);
  }
}

void CreateRangeRequest::MergeFrom(const CreateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.CreateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::basepb::Range::MergeFrom(from.range());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
}

void CreateRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.CreateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRangeRequest::CopyFrom(const CreateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.CreateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRangeRequest::IsInitialized() const {
  return true;
}

void CreateRangeRequest::Swap(CreateRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRangeRequest::InternalSwap(CreateRangeRequest* other) {
  using std::swap;
  swap(range_, other->range_);
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRangeRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRangeRequest

// .basepb.Range range = 1;
bool CreateRangeRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void CreateRangeRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::basepb::Range& CreateRangeRequest::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:dspb.CreateRangeRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* CreateRangeRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.CreateRangeRequest.range)
  return range_;
}
::basepb::Range* CreateRangeRequest::release_range() {
  // @@protoc_insertion_point(field_release:dspb.CreateRangeRequest.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void CreateRangeRequest::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.CreateRangeRequest.range)
}

// uint64 leader = 2;
void CreateRangeRequest::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CreateRangeRequest::leader() const {
  // @@protoc_insertion_point(field_get:dspb.CreateRangeRequest.leader)
  return leader_;
}
void CreateRangeRequest::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:dspb.CreateRangeRequest.leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRangeResponse::CreateRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.CreateRangeResponse)
}
CreateRangeResponse::CreateRangeResponse(const CreateRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.CreateRangeResponse)
}

void CreateRangeResponse::SharedCtor() {
  _cached_size_ = 0;
}

CreateRangeResponse::~CreateRangeResponse() {
  // @@protoc_insertion_point(destructor:dspb.CreateRangeResponse)
  SharedDtor();
}

void CreateRangeResponse::SharedDtor() {
}

void CreateRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRangeResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRangeResponse& CreateRangeResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRangeResponse* CreateRangeResponse::New(::google::protobuf::Arena* arena) const {
  CreateRangeResponse* n = new CreateRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.CreateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CreateRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.CreateRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.CreateRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.CreateRangeResponse)
  return false;
#undef DO_
}

void CreateRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.CreateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.CreateRangeResponse)
}

::google::protobuf::uint8* CreateRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.CreateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.CreateRangeResponse)
  return target;
}

size_t CreateRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.CreateRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.CreateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.CreateRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.CreateRangeResponse)
    MergeFrom(*source);
  }
}

void CreateRangeResponse::MergeFrom(const CreateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.CreateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.CreateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRangeResponse::CopyFrom(const CreateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.CreateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRangeResponse::IsInitialized() const {
  return true;
}

void CreateRangeResponse::Swap(CreateRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRangeResponse::InternalSwap(CreateRangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRangeResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRangeResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kRangeIdFieldNumber;
const int DeleteRangeRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(peer_id_));
  // @@protoc_insertion_point(copy_constructor:dspb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(peer_id_));
  _cached_size_ = 0;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:dspb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRangeRequest* DeleteRangeRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRangeRequest* n = new DeleteRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(peer_id_));
  _internal_metadata_.Clear();
}

bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.DeleteRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 peer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.DeleteRangeRequest)
  return false;
#undef DO_
}

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // uint64 peer_id = 2;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->peer_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.DeleteRangeRequest)
}

::google::protobuf::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // uint64 peer_id = 2;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->peer_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.DeleteRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 peer_id = 2;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.DeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.DeleteRangeRequest)
    MergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
}

void DeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  swap(peer_id_, other->peer_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeRequest

// uint64 range_id = 1;
void DeleteRangeRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeleteRangeRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.DeleteRangeRequest.range_id)
  return range_id_;
}
void DeleteRangeRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.DeleteRangeRequest.range_id)
}

// uint64 peer_id = 2;
void DeleteRangeRequest::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeleteRangeRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:dspb.DeleteRangeRequest.peer_id)
  return peer_id_;
}
void DeleteRangeRequest::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.DeleteRangeRequest.peer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:dspb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRangeResponse* DeleteRangeResponse::New(::google::protobuf::Arena* arena) const {
  DeleteRangeResponse* n = new DeleteRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.DeleteRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.DeleteRangeResponse)
  return false;
#undef DO_
}

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.DeleteRangeResponse)
}

::google::protobuf::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.DeleteRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.DeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.DeleteRangeResponse)
    MergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferRangeLeaderRequest::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferRangeLeaderRequest::TransferRangeLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TransferRangeLeaderRequest)
}
TransferRangeLeaderRequest::TransferRangeLeaderRequest(const TransferRangeLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.TransferRangeLeaderRequest)
}

void TransferRangeLeaderRequest::SharedCtor() {
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TransferRangeLeaderRequest::~TransferRangeLeaderRequest() {
  // @@protoc_insertion_point(destructor:dspb.TransferRangeLeaderRequest)
  SharedDtor();
}

void TransferRangeLeaderRequest::SharedDtor() {
}

void TransferRangeLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRangeLeaderRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferRangeLeaderRequest& TransferRangeLeaderRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferRangeLeaderRequest* TransferRangeLeaderRequest::New(::google::protobuf::Arena* arena) const {
  TransferRangeLeaderRequest* n = new TransferRangeLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferRangeLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TransferRangeLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TransferRangeLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TransferRangeLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TransferRangeLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TransferRangeLeaderRequest)
  return false;
#undef DO_
}

void TransferRangeLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TransferRangeLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TransferRangeLeaderRequest)
}

::google::protobuf::uint8* TransferRangeLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TransferRangeLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TransferRangeLeaderRequest)
  return target;
}

size_t TransferRangeLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TransferRangeLeaderRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRangeLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TransferRangeLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRangeLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRangeLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TransferRangeLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TransferRangeLeaderRequest)
    MergeFrom(*source);
  }
}

void TransferRangeLeaderRequest::MergeFrom(const TransferRangeLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TransferRangeLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void TransferRangeLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TransferRangeLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRangeLeaderRequest::CopyFrom(const TransferRangeLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TransferRangeLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRangeLeaderRequest::IsInitialized() const {
  return true;
}

void TransferRangeLeaderRequest::Swap(TransferRangeLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRangeLeaderRequest::InternalSwap(TransferRangeLeaderRequest* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferRangeLeaderRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferRangeLeaderRequest

// uint64 range_id = 1;
void TransferRangeLeaderRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TransferRangeLeaderRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.TransferRangeLeaderRequest.range_id)
  return range_id_;
}
void TransferRangeLeaderRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.TransferRangeLeaderRequest.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferRangeLeaderResponse::TransferRangeLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.TransferRangeLeaderResponse)
}
TransferRangeLeaderResponse::TransferRangeLeaderResponse(const TransferRangeLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.TransferRangeLeaderResponse)
}

void TransferRangeLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
}

TransferRangeLeaderResponse::~TransferRangeLeaderResponse() {
  // @@protoc_insertion_point(destructor:dspb.TransferRangeLeaderResponse)
  SharedDtor();
}

void TransferRangeLeaderResponse::SharedDtor() {
}

void TransferRangeLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRangeLeaderResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferRangeLeaderResponse& TransferRangeLeaderResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferRangeLeaderResponse* TransferRangeLeaderResponse::New(::google::protobuf::Arena* arena) const {
  TransferRangeLeaderResponse* n = new TransferRangeLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferRangeLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.TransferRangeLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TransferRangeLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.TransferRangeLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.TransferRangeLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.TransferRangeLeaderResponse)
  return false;
#undef DO_
}

void TransferRangeLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.TransferRangeLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.TransferRangeLeaderResponse)
}

::google::protobuf::uint8* TransferRangeLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.TransferRangeLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.TransferRangeLeaderResponse)
  return target;
}

size_t TransferRangeLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.TransferRangeLeaderResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRangeLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.TransferRangeLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRangeLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRangeLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.TransferRangeLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.TransferRangeLeaderResponse)
    MergeFrom(*source);
  }
}

void TransferRangeLeaderResponse::MergeFrom(const TransferRangeLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.TransferRangeLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransferRangeLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.TransferRangeLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRangeLeaderResponse::CopyFrom(const TransferRangeLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.TransferRangeLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRangeLeaderResponse::IsInitialized() const {
  return true;
}

void TransferRangeLeaderResponse::Swap(TransferRangeLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRangeLeaderResponse::InternalSwap(TransferRangeLeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferRangeLeaderResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferRangeLeaderResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerInfoRequest::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerInfoRequest::GetPeerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetPeerInfoRequest)
}
GetPeerInfoRequest::GetPeerInfoRequest(const GetPeerInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.GetPeerInfoRequest)
}

void GetPeerInfoRequest::SharedCtor() {
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetPeerInfoRequest::~GetPeerInfoRequest() {
  // @@protoc_insertion_point(destructor:dspb.GetPeerInfoRequest)
  SharedDtor();
}

void GetPeerInfoRequest::SharedDtor() {
}

void GetPeerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerInfoRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPeerInfoRequest& GetPeerInfoRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerInfoRequest* GetPeerInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetPeerInfoRequest* n = new GetPeerInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetPeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetPeerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetPeerInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetPeerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetPeerInfoRequest)
  return false;
#undef DO_
}

void GetPeerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetPeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetPeerInfoRequest)
}

::google::protobuf::uint8* GetPeerInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetPeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetPeerInfoRequest)
  return target;
}

size_t GetPeerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetPeerInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetPeerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetPeerInfoRequest)
    MergeFrom(*source);
  }
}

void GetPeerInfoRequest::MergeFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void GetPeerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoRequest::CopyFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoRequest::IsInitialized() const {
  return true;
}

void GetPeerInfoRequest::Swap(GetPeerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerInfoRequest::InternalSwap(GetPeerInfoRequest* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerInfoRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerInfoRequest

// uint64 range_id = 1;
void GetPeerInfoRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoRequest.range_id)
  return range_id_;
}
void GetPeerInfoRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoRequest.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerInfoResponse::kReplicaFieldNumber;
const int GetPeerInfoResponse::kIndexFieldNumber;
const int GetPeerInfoResponse::kTermFieldNumber;
const int GetPeerInfoResponse::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerInfoResponse::GetPeerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.GetPeerInfoResponse)
}
GetPeerInfoResponse::GetPeerInfoResponse(const GetPeerInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_replica()) {
    replica_ = new ::basepb::Replica(*from.replica_);
  } else {
    replica_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_) -
    reinterpret_cast<char*>(&index_)) + sizeof(commit_));
  // @@protoc_insertion_point(copy_constructor:dspb.GetPeerInfoResponse)
}

void GetPeerInfoResponse::SharedCtor() {
  ::memset(&replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&replica_)) + sizeof(commit_));
  _cached_size_ = 0;
}

GetPeerInfoResponse::~GetPeerInfoResponse() {
  // @@protoc_insertion_point(destructor:dspb.GetPeerInfoResponse)
  SharedDtor();
}

void GetPeerInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete replica_;
}

void GetPeerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerInfoResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPeerInfoResponse& GetPeerInfoResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerInfoResponse* GetPeerInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetPeerInfoResponse* n = new GetPeerInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.GetPeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&index_)) + sizeof(commit_));
  _internal_metadata_.Clear();
}

bool GetPeerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.GetPeerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.Replica replica = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.GetPeerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.GetPeerInfoResponse)
  return false;
#undef DO_
}

void GetPeerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.GetPeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Replica replica = 1;
  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->replica_, output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // uint64 commit = 4;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->commit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.GetPeerInfoResponse)
}

::google::protobuf::uint8* GetPeerInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.GetPeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Replica replica = 1;
  if (this->has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->replica_, deterministic, target);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // uint64 commit = 4;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->commit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.GetPeerInfoResponse)
  return target;
}

size_t GetPeerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.GetPeerInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.Replica replica = 1;
  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->replica_);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 commit = 4;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.GetPeerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.GetPeerInfoResponse)
    MergeFrom(*source);
  }
}

void GetPeerInfoResponse::MergeFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replica()) {
    mutable_replica()->::basepb::Replica::MergeFrom(from.replica());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void GetPeerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoResponse::CopyFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoResponse::IsInitialized() const {
  return true;
}

void GetPeerInfoResponse::Swap(GetPeerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerInfoResponse::InternalSwap(GetPeerInfoResponse* other) {
  using std::swap;
  swap(replica_, other->replica_);
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(commit_, other->commit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerInfoResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerInfoResponse

// .basepb.Replica replica = 1;
bool GetPeerInfoResponse::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
void GetPeerInfoResponse::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) delete replica_;
  replica_ = NULL;
}
const ::basepb::Replica& GetPeerInfoResponse::replica() const {
  const ::basepb::Replica* p = replica_;
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Replica*>(
      &::basepb::_Replica_default_instance_);
}
::basepb::Replica* GetPeerInfoResponse::mutable_replica() {
  
  if (replica_ == NULL) {
    replica_ = new ::basepb::Replica;
  }
  // @@protoc_insertion_point(field_mutable:dspb.GetPeerInfoResponse.replica)
  return replica_;
}
::basepb::Replica* GetPeerInfoResponse::release_replica() {
  // @@protoc_insertion_point(field_release:dspb.GetPeerInfoResponse.replica)
  
  ::basepb::Replica* temp = replica_;
  replica_ = NULL;
  return temp;
}
void GetPeerInfoResponse::set_allocated_replica(::basepb::Replica* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.GetPeerInfoResponse.replica)
}

// uint64 index = 2;
void GetPeerInfoResponse::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoResponse::index() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.index)
  return index_;
}
void GetPeerInfoResponse::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoResponse.index)
}

// uint64 term = 3;
void GetPeerInfoResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoResponse::term() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.term)
  return term_;
}
void GetPeerInfoResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoResponse.term)
}

// uint64 commit = 4;
void GetPeerInfoResponse::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoResponse::commit() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.commit)
  return commit_;
}
void GetPeerInfoResponse::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoResponse.commit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsAliveRequest::IsAliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.IsAliveRequest)
}
IsAliveRequest::IsAliveRequest(const IsAliveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.IsAliveRequest)
}

void IsAliveRequest::SharedCtor() {
  _cached_size_ = 0;
}

IsAliveRequest::~IsAliveRequest() {
  // @@protoc_insertion_point(destructor:dspb.IsAliveRequest)
  SharedDtor();
}

void IsAliveRequest::SharedDtor() {
}

void IsAliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsAliveRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsAliveRequest& IsAliveRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsAliveRequest* IsAliveRequest::New(::google::protobuf::Arena* arena) const {
  IsAliveRequest* n = new IsAliveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.IsAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool IsAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.IsAliveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.IsAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.IsAliveRequest)
  return false;
#undef DO_
}

void IsAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.IsAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.IsAliveRequest)
}

::google::protobuf::uint8* IsAliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.IsAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.IsAliveRequest)
  return target;
}

size_t IsAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.IsAliveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.IsAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsAliveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsAliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.IsAliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.IsAliveRequest)
    MergeFrom(*source);
  }
}

void IsAliveRequest::MergeFrom(const IsAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.IsAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IsAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.IsAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsAliveRequest::CopyFrom(const IsAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.IsAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsAliveRequest::IsInitialized() const {
  return true;
}

void IsAliveRequest::Swap(IsAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsAliveRequest::InternalSwap(IsAliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsAliveRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsAliveRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsAliveResponse::kAliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsAliveResponse::IsAliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.IsAliveResponse)
}
IsAliveResponse::IsAliveResponse(const IsAliveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alive_ = from.alive_;
  // @@protoc_insertion_point(copy_constructor:dspb.IsAliveResponse)
}

void IsAliveResponse::SharedCtor() {
  alive_ = false;
  _cached_size_ = 0;
}

IsAliveResponse::~IsAliveResponse() {
  // @@protoc_insertion_point(destructor:dspb.IsAliveResponse)
  SharedDtor();
}

void IsAliveResponse::SharedDtor() {
}

void IsAliveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsAliveResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsAliveResponse& IsAliveResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsAliveResponse* IsAliveResponse::New(::google::protobuf::Arena* arena) const {
  IsAliveResponse* n = new IsAliveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.IsAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alive_ = false;
  _internal_metadata_.Clear();
}

bool IsAliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.IsAliveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool alive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.IsAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.IsAliveResponse)
  return false;
#undef DO_
}

void IsAliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.IsAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool alive = 1;
  if (this->alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->alive(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.IsAliveResponse)
}

::google::protobuf::uint8* IsAliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.IsAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool alive = 1;
  if (this->alive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->alive(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.IsAliveResponse)
  return target;
}

size_t IsAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.IsAliveResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool alive = 1;
  if (this->alive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsAliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.IsAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsAliveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsAliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.IsAliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.IsAliveResponse)
    MergeFrom(*source);
  }
}

void IsAliveResponse::MergeFrom(const IsAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.IsAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alive() != 0) {
    set_alive(from.alive());
  }
}

void IsAliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.IsAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsAliveResponse::CopyFrom(const IsAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.IsAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsAliveResponse::IsInitialized() const {
  return true;
}

void IsAliveResponse::Swap(IsAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsAliveResponse::InternalSwap(IsAliveResponse* other) {
  using std::swap;
  swap(alive_, other->alive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsAliveResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsAliveResponse

// bool alive = 1;
void IsAliveResponse::clear_alive() {
  alive_ = false;
}
bool IsAliveResponse::alive() const {
  // @@protoc_insertion_point(field_get:dspb.IsAliveResponse.alive)
  return alive_;
}
void IsAliveResponse::set_alive(bool value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:dspb.IsAliveResponse.alive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfoRequest::NodeInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.NodeInfoRequest)
}
NodeInfoRequest::NodeInfoRequest(const NodeInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.NodeInfoRequest)
}

void NodeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
}

NodeInfoRequest::~NodeInfoRequest() {
  // @@protoc_insertion_point(destructor:dspb.NodeInfoRequest)
  SharedDtor();
}

void NodeInfoRequest::SharedDtor() {
}

void NodeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfoRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfoRequest& NodeInfoRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeInfoRequest* NodeInfoRequest::New(::google::protobuf::Arena* arena) const {
  NodeInfoRequest* n = new NodeInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.NodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NodeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.NodeInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.NodeInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.NodeInfoRequest)
  return false;
#undef DO_
}

void NodeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.NodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.NodeInfoRequest)
}

::google::protobuf::uint8* NodeInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.NodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.NodeInfoRequest)
  return target;
}

size_t NodeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.NodeInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.NodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.NodeInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.NodeInfoRequest)
    MergeFrom(*source);
  }
}

void NodeInfoRequest::MergeFrom(const NodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.NodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.NodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoRequest::CopyFrom(const NodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.NodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoRequest::IsInitialized() const {
  return true;
}

void NodeInfoRequest::Swap(NodeInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfoRequest::InternalSwap(NodeInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfoRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeStats::kWriteBytesPerSecFieldNumber;
const int RangeStats::kWriteKeysPerSecFieldNumber;
const int RangeStats::kReadBytessPerSecFieldNumber;
const int RangeStats::kReadKeysPerSecFieldNumber;
const int RangeStats::kApproximateSizeFieldNumber;
const int RangeStats::kKvCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeStats::RangeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RangeStats)
}
RangeStats::RangeStats(const RangeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&write_bytes_per_sec_, &from.write_bytes_per_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&kv_count_) -
    reinterpret_cast<char*>(&write_bytes_per_sec_)) + sizeof(kv_count_));
  // @@protoc_insertion_point(copy_constructor:dspb.RangeStats)
}

void RangeStats::SharedCtor() {
  ::memset(&write_bytes_per_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kv_count_) -
      reinterpret_cast<char*>(&write_bytes_per_sec_)) + sizeof(kv_count_));
  _cached_size_ = 0;
}

RangeStats::~RangeStats() {
  // @@protoc_insertion_point(destructor:dspb.RangeStats)
  SharedDtor();
}

void RangeStats::SharedDtor() {
}

void RangeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeStats::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeStats& RangeStats::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeStats* RangeStats::New(::google::protobuf::Arena* arena) const {
  RangeStats* n = new RangeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&write_bytes_per_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kv_count_) -
      reinterpret_cast<char*>(&write_bytes_per_sec_)) + sizeof(kv_count_));
  _internal_metadata_.Clear();
}

bool RangeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RangeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 write_bytes_per_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 write_keys_per_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_keys_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_bytess_per_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_bytess_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_keys_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_keys_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 approximate_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 kv_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kv_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RangeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RangeStats)
  return false;
#undef DO_
}

void RangeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 write_bytes_per_sec = 1;
  if (this->write_bytes_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->write_bytes_per_sec(), output);
  }

  // uint64 write_keys_per_sec = 2;
  if (this->write_keys_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->write_keys_per_sec(), output);
  }

  // uint64 read_bytess_per_sec = 3;
  if (this->read_bytess_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_bytess_per_sec(), output);
  }

  // uint64 read_keys_per_sec = 4;
  if (this->read_keys_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->read_keys_per_sec(), output);
  }

  // uint64 approximate_size = 5;
  if (this->approximate_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->approximate_size(), output);
  }

  // uint64 kv_count = 6;
  if (this->kv_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->kv_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RangeStats)
}

::google::protobuf::uint8* RangeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 write_bytes_per_sec = 1;
  if (this->write_bytes_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->write_bytes_per_sec(), target);
  }

  // uint64 write_keys_per_sec = 2;
  if (this->write_keys_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->write_keys_per_sec(), target);
  }

  // uint64 read_bytess_per_sec = 3;
  if (this->read_bytess_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_bytess_per_sec(), target);
  }

  // uint64 read_keys_per_sec = 4;
  if (this->read_keys_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->read_keys_per_sec(), target);
  }

  // uint64 approximate_size = 5;
  if (this->approximate_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->approximate_size(), target);
  }

  // uint64 kv_count = 6;
  if (this->kv_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->kv_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RangeStats)
  return target;
}

size_t RangeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RangeStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 write_bytes_per_sec = 1;
  if (this->write_bytes_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->write_bytes_per_sec());
  }

  // uint64 write_keys_per_sec = 2;
  if (this->write_keys_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->write_keys_per_sec());
  }

  // uint64 read_bytess_per_sec = 3;
  if (this->read_bytess_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_bytess_per_sec());
  }

  // uint64 read_keys_per_sec = 4;
  if (this->read_keys_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_keys_per_sec());
  }

  // uint64 approximate_size = 5;
  if (this->approximate_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->approximate_size());
  }

  // uint64 kv_count = 6;
  if (this->kv_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->kv_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RangeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RangeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RangeStats)
    MergeFrom(*source);
  }
}

void RangeStats::MergeFrom(const RangeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RangeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.write_bytes_per_sec() != 0) {
    set_write_bytes_per_sec(from.write_bytes_per_sec());
  }
  if (from.write_keys_per_sec() != 0) {
    set_write_keys_per_sec(from.write_keys_per_sec());
  }
  if (from.read_bytess_per_sec() != 0) {
    set_read_bytess_per_sec(from.read_bytess_per_sec());
  }
  if (from.read_keys_per_sec() != 0) {
    set_read_keys_per_sec(from.read_keys_per_sec());
  }
  if (from.approximate_size() != 0) {
    set_approximate_size(from.approximate_size());
  }
  if (from.kv_count() != 0) {
    set_kv_count(from.kv_count());
  }
}

void RangeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RangeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeStats::CopyFrom(const RangeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RangeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeStats::IsInitialized() const {
  return true;
}

void RangeStats::Swap(RangeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeStats::InternalSwap(RangeStats* other) {
  using std::swap;
  swap(write_bytes_per_sec_, other->write_bytes_per_sec_);
  swap(write_keys_per_sec_, other->write_keys_per_sec_);
  swap(read_bytess_per_sec_, other->read_bytess_per_sec_);
  swap(read_keys_per_sec_, other->read_keys_per_sec_);
  swap(approximate_size_, other->approximate_size_);
  swap(kv_count_, other->kv_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeStats::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeStats

// uint64 write_bytes_per_sec = 1;
void RangeStats::clear_write_bytes_per_sec() {
  write_bytes_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::write_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.write_bytes_per_sec)
  return write_bytes_per_sec_;
}
void RangeStats::set_write_bytes_per_sec(::google::protobuf::uint64 value) {
  
  write_bytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.write_bytes_per_sec)
}

// uint64 write_keys_per_sec = 2;
void RangeStats::clear_write_keys_per_sec() {
  write_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::write_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.write_keys_per_sec)
  return write_keys_per_sec_;
}
void RangeStats::set_write_keys_per_sec(::google::protobuf::uint64 value) {
  
  write_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.write_keys_per_sec)
}

// uint64 read_bytess_per_sec = 3;
void RangeStats::clear_read_bytess_per_sec() {
  read_bytess_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::read_bytess_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.read_bytess_per_sec)
  return read_bytess_per_sec_;
}
void RangeStats::set_read_bytess_per_sec(::google::protobuf::uint64 value) {
  
  read_bytess_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.read_bytess_per_sec)
}

// uint64 read_keys_per_sec = 4;
void RangeStats::clear_read_keys_per_sec() {
  read_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::read_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.read_keys_per_sec)
  return read_keys_per_sec_;
}
void RangeStats::set_read_keys_per_sec(::google::protobuf::uint64 value) {
  
  read_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.read_keys_per_sec)
}

// uint64 approximate_size = 5;
void RangeStats::clear_approximate_size() {
  approximate_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::approximate_size() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.approximate_size)
  return approximate_size_;
}
void RangeStats::set_approximate_size(::google::protobuf::uint64 value) {
  
  approximate_size_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.approximate_size)
}

// uint64 kv_count = 6;
void RangeStats::clear_kv_count() {
  kv_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::kv_count() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.kv_count)
  return kv_count_;
}
void RangeStats::set_kv_count(::google::protobuf::uint64 value) {
  
  kv_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.kv_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeInfo::kRangeFieldNumber;
const int RangeInfo::kStatsFieldNumber;
const int RangeInfo::kTermFieldNumber;
const int RangeInfo::kPeersStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeInfo::RangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.RangeInfo)
}
RangeInfo::RangeInfo(const RangeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_status_(from.peers_status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::basepb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::dspb::RangeStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:dspb.RangeInfo)
}

void RangeInfo::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&range_)) + sizeof(term_));
  _cached_size_ = 0;
}

RangeInfo::~RangeInfo() {
  // @@protoc_insertion_point(destructor:dspb.RangeInfo)
  SharedDtor();
}

void RangeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete stats_;
}

void RangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeInfo::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeInfo& RangeInfo::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeInfo* RangeInfo::New(::google::protobuf::Arena* arena) const {
  RangeInfo* n = new RangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_status_.Clear();
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.RangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.Range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.RangeStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.PeerStatus peers_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.RangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.RangeInfo)
  return false;
#undef DO_
}

void RangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range range = 1;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_, output);
  }

  // .dspb.RangeStats stats = 2;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stats_, output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // repeated .basepb.PeerStatus peers_status = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->peers_status(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.RangeInfo)
}

::google::protobuf::uint8* RangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Range range = 1;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->range_, deterministic, target);
  }

  // .dspb.RangeStats stats = 2;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stats_, deterministic, target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // repeated .basepb.PeerStatus peers_status = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->peers_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.RangeInfo)
  return target;
}

size_t RangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.RangeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.PeerStatus peers_status = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers_status(static_cast<int>(i)));
    }
  }

  // .basepb.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // .dspb.RangeStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.RangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.RangeInfo)
    MergeFrom(*source);
  }
}

void RangeInfo::MergeFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_status_.MergeFrom(from.peers_status_);
  if (from.has_range()) {
    mutable_range()->::basepb::Range::MergeFrom(from.range());
  }
  if (from.has_stats()) {
    mutable_stats()->::dspb::RangeStats::MergeFrom(from.stats());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeInfo::CopyFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeInfo::IsInitialized() const {
  return true;
}

void RangeInfo::Swap(RangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeInfo::InternalSwap(RangeInfo* other) {
  using std::swap;
  peers_status_.InternalSwap(&other->peers_status_);
  swap(range_, other->range_);
  swap(stats_, other->stats_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeInfo::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeInfo

// .basepb.Range range = 1;
bool RangeInfo::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void RangeInfo::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::basepb::Range& RangeInfo::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
::basepb::Range* RangeInfo::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeInfo.range)
  return range_;
}
::basepb::Range* RangeInfo::release_range() {
  // @@protoc_insertion_point(field_release:dspb.RangeInfo.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void RangeInfo::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeInfo.range)
}

// .dspb.RangeStats stats = 2;
bool RangeInfo::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void RangeInfo::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::dspb::RangeStats& RangeInfo::stats() const {
  const ::dspb::RangeStats* p = stats_;
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RangeStats*>(
      &::dspb::_RangeStats_default_instance_);
}
::dspb::RangeStats* RangeInfo::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::dspb::RangeStats;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeInfo.stats)
  return stats_;
}
::dspb::RangeStats* RangeInfo::release_stats() {
  // @@protoc_insertion_point(field_release:dspb.RangeInfo.stats)
  
  ::dspb::RangeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void RangeInfo::set_allocated_stats(::dspb::RangeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeInfo.stats)
}

// uint64 term = 3;
void RangeInfo::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeInfo::term() const {
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.term)
  return term_;
}
void RangeInfo::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeInfo.term)
}

// repeated .basepb.PeerStatus peers_status = 4;
int RangeInfo::peers_status_size() const {
  return peers_status_.size();
}
void RangeInfo::clear_peers_status() {
  peers_status_.Clear();
}
const ::basepb::PeerStatus& RangeInfo::peers_status(int index) const {
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.peers_status)
  return peers_status_.Get(index);
}
::basepb::PeerStatus* RangeInfo::mutable_peers_status(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.RangeInfo.peers_status)
  return peers_status_.Mutable(index);
}
::basepb::PeerStatus* RangeInfo::add_peers_status() {
  // @@protoc_insertion_point(field_add:dspb.RangeInfo.peers_status)
  return peers_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >*
RangeInfo::mutable_peers_status() {
  // @@protoc_insertion_point(field_mutable_list:dspb.RangeInfo.peers_status)
  return &peers_status_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >&
RangeInfo::peers_status() const {
  // @@protoc_insertion_point(field_list:dspb.RangeInfo.peers_status)
  return peers_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeStats::kRangeCountFieldNumber;
const int NodeStats::kRangeSplitCountFieldNumber;
const int NodeStats::kSnapSendingCountFieldNumber;
const int NodeStats::kSnapApplyingCountFieldNumber;
const int NodeStats::kRangeLeaderCountFieldNumber;
const int NodeStats::kCapacityFieldNumber;
const int NodeStats::kUsedSizeFieldNumber;
const int NodeStats::kWriteBytesPerSecFieldNumber;
const int NodeStats::kWriteKeysPerSecFieldNumber;
const int NodeStats::kReadBytessPerSecFieldNumber;
const int NodeStats::kReadKeysPerSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeStats::NodeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.NodeStats)
}
NodeStats::NodeStats(const NodeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_count_, &from.range_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_keys_per_sec_) -
    reinterpret_cast<char*>(&range_count_)) + sizeof(read_keys_per_sec_));
  // @@protoc_insertion_point(copy_constructor:dspb.NodeStats)
}

void NodeStats::SharedCtor() {
  ::memset(&range_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_keys_per_sec_) -
      reinterpret_cast<char*>(&range_count_)) + sizeof(read_keys_per_sec_));
  _cached_size_ = 0;
}

NodeStats::~NodeStats() {
  // @@protoc_insertion_point(destructor:dspb.NodeStats)
  SharedDtor();
}

void NodeStats::SharedDtor() {
}

void NodeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStats::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeStats& NodeStats::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeStats* NodeStats::New(::google::protobuf::Arena* arena) const {
  NodeStats* n = new NodeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.NodeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_keys_per_sec_) -
      reinterpret_cast<char*>(&range_count_)) + sizeof(read_keys_per_sec_));
  _internal_metadata_.Clear();
}

bool NodeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.NodeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 range_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 range_split_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_split_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 snap_sending_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snap_sending_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 snap_applying_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snap_applying_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 range_leader_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_leader_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 write_bytes_per_sec = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 write_keys_per_sec = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_keys_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_bytess_per_sec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_bytess_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_keys_per_sec = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_keys_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.NodeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.NodeStats)
  return false;
#undef DO_
}

void NodeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.NodeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 range_count = 1;
  if (this->range_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->range_count(), output);
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range_split_count(), output);
  }

  // uint32 snap_sending_count = 3;
  if (this->snap_sending_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->snap_sending_count(), output);
  }

  // uint32 snap_applying_count = 4;
  if (this->snap_applying_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->snap_applying_count(), output);
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->range_leader_count(), output);
  }

  // uint64 capacity = 7;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->capacity(), output);
  }

  // uint64 used_size = 8;
  if (this->used_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->used_size(), output);
  }

  // uint64 write_bytes_per_sec = 10;
  if (this->write_bytes_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->write_bytes_per_sec(), output);
  }

  // uint64 write_keys_per_sec = 11;
  if (this->write_keys_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->write_keys_per_sec(), output);
  }

  // uint64 read_bytess_per_sec = 12;
  if (this->read_bytess_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->read_bytess_per_sec(), output);
  }

  // uint64 read_keys_per_sec = 13;
  if (this->read_keys_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->read_keys_per_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.NodeStats)
}

::google::protobuf::uint8* NodeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.NodeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 range_count = 1;
  if (this->range_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->range_count(), target);
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range_split_count(), target);
  }

  // uint32 snap_sending_count = 3;
  if (this->snap_sending_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->snap_sending_count(), target);
  }

  // uint32 snap_applying_count = 4;
  if (this->snap_applying_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->snap_applying_count(), target);
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->range_leader_count(), target);
  }

  // uint64 capacity = 7;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->capacity(), target);
  }

  // uint64 used_size = 8;
  if (this->used_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->used_size(), target);
  }

  // uint64 write_bytes_per_sec = 10;
  if (this->write_bytes_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->write_bytes_per_sec(), target);
  }

  // uint64 write_keys_per_sec = 11;
  if (this->write_keys_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->write_keys_per_sec(), target);
  }

  // uint64 read_bytess_per_sec = 12;
  if (this->read_bytess_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->read_bytess_per_sec(), target);
  }

  // uint64 read_keys_per_sec = 13;
  if (this->read_keys_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->read_keys_per_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.NodeStats)
  return target;
}

size_t NodeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.NodeStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 range_count = 1;
  if (this->range_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_count());
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_split_count());
  }

  // uint32 snap_sending_count = 3;
  if (this->snap_sending_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snap_sending_count());
  }

  // uint32 snap_applying_count = 4;
  if (this->snap_applying_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snap_applying_count());
  }

  // uint64 capacity = 7;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  // uint64 used_size = 8;
  if (this->used_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_size());
  }

  // uint64 write_bytes_per_sec = 10;
  if (this->write_bytes_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->write_bytes_per_sec());
  }

  // uint64 write_keys_per_sec = 11;
  if (this->write_keys_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->write_keys_per_sec());
  }

  // uint64 read_bytess_per_sec = 12;
  if (this->read_bytess_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_bytess_per_sec());
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_leader_count());
  }

  // uint64 read_keys_per_sec = 13;
  if (this->read_keys_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_keys_per_sec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.NodeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.NodeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.NodeStats)
    MergeFrom(*source);
  }
}

void NodeStats::MergeFrom(const NodeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.NodeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_count() != 0) {
    set_range_count(from.range_count());
  }
  if (from.range_split_count() != 0) {
    set_range_split_count(from.range_split_count());
  }
  if (from.snap_sending_count() != 0) {
    set_snap_sending_count(from.snap_sending_count());
  }
  if (from.snap_applying_count() != 0) {
    set_snap_applying_count(from.snap_applying_count());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.used_size() != 0) {
    set_used_size(from.used_size());
  }
  if (from.write_bytes_per_sec() != 0) {
    set_write_bytes_per_sec(from.write_bytes_per_sec());
  }
  if (from.write_keys_per_sec() != 0) {
    set_write_keys_per_sec(from.write_keys_per_sec());
  }
  if (from.read_bytess_per_sec() != 0) {
    set_read_bytess_per_sec(from.read_bytess_per_sec());
  }
  if (from.range_leader_count() != 0) {
    set_range_leader_count(from.range_leader_count());
  }
  if (from.read_keys_per_sec() != 0) {
    set_read_keys_per_sec(from.read_keys_per_sec());
  }
}

void NodeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.NodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStats::CopyFrom(const NodeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.NodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStats::IsInitialized() const {
  return true;
}

void NodeStats::Swap(NodeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeStats::InternalSwap(NodeStats* other) {
  using std::swap;
  swap(range_count_, other->range_count_);
  swap(range_split_count_, other->range_split_count_);
  swap(snap_sending_count_, other->snap_sending_count_);
  swap(snap_applying_count_, other->snap_applying_count_);
  swap(capacity_, other->capacity_);
  swap(used_size_, other->used_size_);
  swap(write_bytes_per_sec_, other->write_bytes_per_sec_);
  swap(write_keys_per_sec_, other->write_keys_per_sec_);
  swap(read_bytess_per_sec_, other->read_bytess_per_sec_);
  swap(range_leader_count_, other->range_leader_count_);
  swap(read_keys_per_sec_, other->read_keys_per_sec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeStats::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeStats

// uint32 range_count = 1;
void NodeStats::clear_range_count() {
  range_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::range_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.range_count)
  return range_count_;
}
void NodeStats::set_range_count(::google::protobuf::uint32 value) {
  
  range_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.range_count)
}

// uint32 range_split_count = 2;
void NodeStats::clear_range_split_count() {
  range_split_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::range_split_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.range_split_count)
  return range_split_count_;
}
void NodeStats::set_range_split_count(::google::protobuf::uint32 value) {
  
  range_split_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.range_split_count)
}

// uint32 snap_sending_count = 3;
void NodeStats::clear_snap_sending_count() {
  snap_sending_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::snap_sending_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.snap_sending_count)
  return snap_sending_count_;
}
void NodeStats::set_snap_sending_count(::google::protobuf::uint32 value) {
  
  snap_sending_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.snap_sending_count)
}

// uint32 snap_applying_count = 4;
void NodeStats::clear_snap_applying_count() {
  snap_applying_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::snap_applying_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.snap_applying_count)
  return snap_applying_count_;
}
void NodeStats::set_snap_applying_count(::google::protobuf::uint32 value) {
  
  snap_applying_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.snap_applying_count)
}

// uint32 range_leader_count = 6;
void NodeStats::clear_range_leader_count() {
  range_leader_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::range_leader_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.range_leader_count)
  return range_leader_count_;
}
void NodeStats::set_range_leader_count(::google::protobuf::uint32 value) {
  
  range_leader_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.range_leader_count)
}

// uint64 capacity = 7;
void NodeStats::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::capacity() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.capacity)
  return capacity_;
}
void NodeStats::set_capacity(::google::protobuf::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.capacity)
}

// uint64 used_size = 8;
void NodeStats::clear_used_size() {
  used_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::used_size() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.used_size)
  return used_size_;
}
void NodeStats::set_used_size(::google::protobuf::uint64 value) {
  
  used_size_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.used_size)
}

// uint64 write_bytes_per_sec = 10;
void NodeStats::clear_write_bytes_per_sec() {
  write_bytes_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::write_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.write_bytes_per_sec)
  return write_bytes_per_sec_;
}
void NodeStats::set_write_bytes_per_sec(::google::protobuf::uint64 value) {
  
  write_bytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.write_bytes_per_sec)
}

// uint64 write_keys_per_sec = 11;
void NodeStats::clear_write_keys_per_sec() {
  write_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::write_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.write_keys_per_sec)
  return write_keys_per_sec_;
}
void NodeStats::set_write_keys_per_sec(::google::protobuf::uint64 value) {
  
  write_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.write_keys_per_sec)
}

// uint64 read_bytess_per_sec = 12;
void NodeStats::clear_read_bytess_per_sec() {
  read_bytess_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::read_bytess_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.read_bytess_per_sec)
  return read_bytess_per_sec_;
}
void NodeStats::set_read_bytess_per_sec(::google::protobuf::uint64 value) {
  
  read_bytess_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.read_bytess_per_sec)
}

// uint64 read_keys_per_sec = 13;
void NodeStats::clear_read_keys_per_sec() {
  read_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::read_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.read_keys_per_sec)
  return read_keys_per_sec_;
}
void NodeStats::set_read_keys_per_sec(::google::protobuf::uint64 value) {
  
  read_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.read_keys_per_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfoResponse::kNodeIdFieldNumber;
const int NodeInfoResponse::kStatsFieldNumber;
const int NodeInfoResponse::kIsolatedReplicasFieldNumber;
const int NodeInfoResponse::kRangeInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfoResponse::NodeInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.NodeInfoResponse)
}
NodeInfoResponse::NodeInfoResponse(const NodeInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      isolated_replicas_(from.isolated_replicas_),
      range_infos_(from.range_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::dspb::NodeStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:dspb.NodeInfoResponse)
}

void NodeInfoResponse::SharedCtor() {
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

NodeInfoResponse::~NodeInfoResponse() {
  // @@protoc_insertion_point(destructor:dspb.NodeInfoResponse)
  SharedDtor();
}

void NodeInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete stats_;
}

void NodeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfoResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfoResponse& NodeInfoResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeInfoResponse* NodeInfoResponse::New(::google::protobuf::Arena* arena) const {
  NodeInfoResponse* n = new NodeInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.NodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isolated_replicas_.Clear();
  range_infos_.Clear();
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.NodeInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.NodeStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 isolated_replicas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_isolated_replicas())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_isolated_replicas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dspb.RangeInfo range_infos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.NodeInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.NodeInfoResponse)
  return false;
#undef DO_
}

void NodeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.NodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // .dspb.NodeStats stats = 2;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stats_, output);
  }

  // repeated uint64 isolated_replicas = 3;
  if (this->isolated_replicas_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isolated_replicas_cached_byte_size_));
  }
  for (int i = 0, n = this->isolated_replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->isolated_replicas(i), output);
  }

  // repeated .dspb.RangeInfo range_infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->range_infos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.NodeInfoResponse)
}

::google::protobuf::uint8* NodeInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.NodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // .dspb.NodeStats stats = 2;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stats_, deterministic, target);
  }

  // repeated uint64 isolated_replicas = 3;
  if (this->isolated_replicas_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _isolated_replicas_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->isolated_replicas_, target);
  }

  // repeated .dspb.RangeInfo range_infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->range_infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.NodeInfoResponse)
  return target;
}

size_t NodeInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.NodeInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 isolated_replicas = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->isolated_replicas_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isolated_replicas_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .dspb.RangeInfo range_infos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->range_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_infos(static_cast<int>(i)));
    }
  }

  // .dspb.NodeStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.NodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.NodeInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.NodeInfoResponse)
    MergeFrom(*source);
  }
}

void NodeInfoResponse::MergeFrom(const NodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.NodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  isolated_replicas_.MergeFrom(from.isolated_replicas_);
  range_infos_.MergeFrom(from.range_infos_);
  if (from.has_stats()) {
    mutable_stats()->::dspb::NodeStats::MergeFrom(from.stats());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.NodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoResponse::CopyFrom(const NodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.NodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoResponse::IsInitialized() const {
  return true;
}

void NodeInfoResponse::Swap(NodeInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfoResponse::InternalSwap(NodeInfoResponse* other) {
  using std::swap;
  isolated_replicas_.InternalSwap(&other->isolated_replicas_);
  range_infos_.InternalSwap(&other->range_infos_);
  swap(stats_, other->stats_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfoResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInfoResponse

// uint64 node_id = 1;
void NodeInfoResponse::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeInfoResponse::node_id() const {
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.node_id)
  return node_id_;
}
void NodeInfoResponse::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeInfoResponse.node_id)
}

// .dspb.NodeStats stats = 2;
bool NodeInfoResponse::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void NodeInfoResponse::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::dspb::NodeStats& NodeInfoResponse::stats() const {
  const ::dspb::NodeStats* p = stats_;
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NodeStats*>(
      &::dspb::_NodeStats_default_instance_);
}
::dspb::NodeStats* NodeInfoResponse::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::dspb::NodeStats;
  }
  // @@protoc_insertion_point(field_mutable:dspb.NodeInfoResponse.stats)
  return stats_;
}
::dspb::NodeStats* NodeInfoResponse::release_stats() {
  // @@protoc_insertion_point(field_release:dspb.NodeInfoResponse.stats)
  
  ::dspb::NodeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void NodeInfoResponse::set_allocated_stats(::dspb::NodeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.NodeInfoResponse.stats)
}

// repeated uint64 isolated_replicas = 3;
int NodeInfoResponse::isolated_replicas_size() const {
  return isolated_replicas_.size();
}
void NodeInfoResponse::clear_isolated_replicas() {
  isolated_replicas_.Clear();
}
::google::protobuf::uint64 NodeInfoResponse::isolated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.isolated_replicas)
  return isolated_replicas_.Get(index);
}
void NodeInfoResponse::set_isolated_replicas(int index, ::google::protobuf::uint64 value) {
  isolated_replicas_.Set(index, value);
  // @@protoc_insertion_point(field_set:dspb.NodeInfoResponse.isolated_replicas)
}
void NodeInfoResponse::add_isolated_replicas(::google::protobuf::uint64 value) {
  isolated_replicas_.Add(value);
  // @@protoc_insertion_point(field_add:dspb.NodeInfoResponse.isolated_replicas)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NodeInfoResponse::isolated_replicas() const {
  // @@protoc_insertion_point(field_list:dspb.NodeInfoResponse.isolated_replicas)
  return isolated_replicas_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NodeInfoResponse::mutable_isolated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:dspb.NodeInfoResponse.isolated_replicas)
  return &isolated_replicas_;
}

// repeated .dspb.RangeInfo range_infos = 4;
int NodeInfoResponse::range_infos_size() const {
  return range_infos_.size();
}
void NodeInfoResponse::clear_range_infos() {
  range_infos_.Clear();
}
const ::dspb::RangeInfo& NodeInfoResponse::range_infos(int index) const {
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.range_infos)
  return range_infos_.Get(index);
}
::dspb::RangeInfo* NodeInfoResponse::mutable_range_infos(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.NodeInfoResponse.range_infos)
  return range_infos_.Mutable(index);
}
::dspb::RangeInfo* NodeInfoResponse::add_range_infos() {
  // @@protoc_insertion_point(field_add:dspb.NodeInfoResponse.range_infos)
  return range_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo >*
NodeInfoResponse::mutable_range_infos() {
  // @@protoc_insertion_point(field_mutable_list:dspb.NodeInfoResponse.range_infos)
  return &range_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo >&
NodeInfoResponse::range_infos() const {
  // @@protoc_insertion_point(field_list:dspb.NodeInfoResponse.range_infos)
  return range_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeRaftMemberRequest::kRangeIdFieldNumber;
const int ChangeRaftMemberRequest::kRangeEpochFieldNumber;
const int ChangeRaftMemberRequest::kChangeTypeFieldNumber;
const int ChangeRaftMemberRequest::kTargetPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeRaftMemberRequest::ChangeRaftMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ChangeRaftMemberRequest)
}
ChangeRaftMemberRequest::ChangeRaftMemberRequest(const ChangeRaftMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range_epoch()) {
    range_epoch_ = new ::basepb::RangeEpoch(*from.range_epoch_);
  } else {
    range_epoch_ = NULL;
  }
  if (from.has_target_peer()) {
    target_peer_ = new ::basepb::Peer(*from.target_peer_);
  } else {
    target_peer_ = NULL;
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_type_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(change_type_));
  // @@protoc_insertion_point(copy_constructor:dspb.ChangeRaftMemberRequest)
}

void ChangeRaftMemberRequest::SharedCtor() {
  ::memset(&range_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&range_epoch_)) + sizeof(change_type_));
  _cached_size_ = 0;
}

ChangeRaftMemberRequest::~ChangeRaftMemberRequest() {
  // @@protoc_insertion_point(destructor:dspb.ChangeRaftMemberRequest)
  SharedDtor();
}

void ChangeRaftMemberRequest::SharedDtor() {
  if (this != internal_default_instance()) delete range_epoch_;
  if (this != internal_default_instance()) delete target_peer_;
}

void ChangeRaftMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRaftMemberRequest::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeRaftMemberRequest& ChangeRaftMemberRequest::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeRaftMemberRequest* ChangeRaftMemberRequest::New(::google::protobuf::Arena* arena) const {
  ChangeRaftMemberRequest* n = new ChangeRaftMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeRaftMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ChangeRaftMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) {
    delete range_epoch_;
  }
  range_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) {
    delete target_peer_;
  }
  target_peer_ = NULL;
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(change_type_));
  _internal_metadata_.Clear();
}

bool ChangeRaftMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ChangeRaftMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch range_epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::dspb::ChangeRaftMemberRequest_ChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Peer target_peer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ChangeRaftMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ChangeRaftMemberRequest)
  return false;
#undef DO_
}

void ChangeRaftMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ChangeRaftMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // .basepb.RangeEpoch range_epoch = 2;
  if (this->has_range_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_epoch_, output);
  }

  // .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_type(), output);
  }

  // .basepb.Peer target_peer = 4;
  if (this->has_target_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ChangeRaftMemberRequest)
}

::google::protobuf::uint8* ChangeRaftMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ChangeRaftMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // .basepb.RangeEpoch range_epoch = 2;
  if (this->has_range_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_epoch_, deterministic, target);
  }

  // .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change_type(), target);
  }

  // .basepb.Peer target_peer = 4;
  if (this->has_target_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ChangeRaftMemberRequest)
  return target;
}

size_t ChangeRaftMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ChangeRaftMemberRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.RangeEpoch range_epoch = 2;
  if (this->has_range_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_epoch_);
  }

  // .basepb.Peer target_peer = 4;
  if (this->has_target_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_peer_);
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRaftMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ChangeRaftMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRaftMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeRaftMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ChangeRaftMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ChangeRaftMemberRequest)
    MergeFrom(*source);
  }
}

void ChangeRaftMemberRequest::MergeFrom(const ChangeRaftMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ChangeRaftMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range_epoch()) {
    mutable_range_epoch()->::basepb::RangeEpoch::MergeFrom(from.range_epoch());
  }
  if (from.has_target_peer()) {
    mutable_target_peer()->::basepb::Peer::MergeFrom(from.target_peer());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ChangeRaftMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ChangeRaftMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRaftMemberRequest::CopyFrom(const ChangeRaftMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ChangeRaftMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRaftMemberRequest::IsInitialized() const {
  return true;
}

void ChangeRaftMemberRequest::Swap(ChangeRaftMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeRaftMemberRequest::InternalSwap(ChangeRaftMemberRequest* other) {
  using std::swap;
  swap(range_epoch_, other->range_epoch_);
  swap(target_peer_, other->target_peer_);
  swap(range_id_, other->range_id_);
  swap(change_type_, other->change_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeRaftMemberRequest::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeRaftMemberRequest

// uint64 range_id = 1;
void ChangeRaftMemberRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ChangeRaftMemberRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.range_id)
  return range_id_;
}
void ChangeRaftMemberRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.ChangeRaftMemberRequest.range_id)
}

// .basepb.RangeEpoch range_epoch = 2;
bool ChangeRaftMemberRequest::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
void ChangeRaftMemberRequest::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
const ::basepb::RangeEpoch& ChangeRaftMemberRequest::range_epoch() const {
  const ::basepb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* ChangeRaftMemberRequest::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ChangeRaftMemberRequest.range_epoch)
  return range_epoch_;
}
::basepb::RangeEpoch* ChangeRaftMemberRequest::release_range_epoch() {
  // @@protoc_insertion_point(field_release:dspb.ChangeRaftMemberRequest.range_epoch)
  
  ::basepb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
void ChangeRaftMemberRequest::set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ChangeRaftMemberRequest.range_epoch)
}

// .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
void ChangeRaftMemberRequest::clear_change_type() {
  change_type_ = 0;
}
::dspb::ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::change_type() const {
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.change_type)
  return static_cast< ::dspb::ChangeRaftMemberRequest_ChangeType >(change_type_);
}
void ChangeRaftMemberRequest::set_change_type(::dspb::ChangeRaftMemberRequest_ChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.ChangeRaftMemberRequest.change_type)
}

// .basepb.Peer target_peer = 4;
bool ChangeRaftMemberRequest::has_target_peer() const {
  return this != internal_default_instance() && target_peer_ != NULL;
}
void ChangeRaftMemberRequest::clear_target_peer() {
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) delete target_peer_;
  target_peer_ = NULL;
}
const ::basepb::Peer& ChangeRaftMemberRequest::target_peer() const {
  const ::basepb::Peer* p = target_peer_;
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.target_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
::basepb::Peer* ChangeRaftMemberRequest::mutable_target_peer() {
  
  if (target_peer_ == NULL) {
    target_peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ChangeRaftMemberRequest.target_peer)
  return target_peer_;
}
::basepb::Peer* ChangeRaftMemberRequest::release_target_peer() {
  // @@protoc_insertion_point(field_release:dspb.ChangeRaftMemberRequest.target_peer)
  
  ::basepb::Peer* temp = target_peer_;
  target_peer_ = NULL;
  return temp;
}
void ChangeRaftMemberRequest::set_allocated_target_peer(::basepb::Peer* target_peer) {
  delete target_peer_;
  target_peer_ = target_peer;
  if (target_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ChangeRaftMemberRequest.target_peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeRaftMemberResponse::ChangeRaftMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dspb_2fschedule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dspb.ChangeRaftMemberResponse)
}
ChangeRaftMemberResponse::ChangeRaftMemberResponse(const ChangeRaftMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dspb.ChangeRaftMemberResponse)
}

void ChangeRaftMemberResponse::SharedCtor() {
  _cached_size_ = 0;
}

ChangeRaftMemberResponse::~ChangeRaftMemberResponse() {
  // @@protoc_insertion_point(destructor:dspb.ChangeRaftMemberResponse)
  SharedDtor();
}

void ChangeRaftMemberResponse::SharedDtor() {
}

void ChangeRaftMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRaftMemberResponse::descriptor() {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeRaftMemberResponse& ChangeRaftMemberResponse::default_instance() {
  protobuf_dspb_2fschedule_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeRaftMemberResponse* ChangeRaftMemberResponse::New(::google::protobuf::Arena* arena) const {
  ChangeRaftMemberResponse* n = new ChangeRaftMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeRaftMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dspb.ChangeRaftMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ChangeRaftMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dspb.ChangeRaftMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dspb.ChangeRaftMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dspb.ChangeRaftMemberResponse)
  return false;
#undef DO_
}

void ChangeRaftMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dspb.ChangeRaftMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dspb.ChangeRaftMemberResponse)
}

::google::protobuf::uint8* ChangeRaftMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dspb.ChangeRaftMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dspb.ChangeRaftMemberResponse)
  return target;
}

size_t ChangeRaftMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dspb.ChangeRaftMemberResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRaftMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dspb.ChangeRaftMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRaftMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeRaftMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dspb.ChangeRaftMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dspb.ChangeRaftMemberResponse)
    MergeFrom(*source);
  }
}

void ChangeRaftMemberResponse::MergeFrom(const ChangeRaftMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dspb.ChangeRaftMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChangeRaftMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dspb.ChangeRaftMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRaftMemberResponse::CopyFrom(const ChangeRaftMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dspb.ChangeRaftMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRaftMemberResponse::IsInitialized() const {
  return true;
}

void ChangeRaftMemberResponse::Swap(ChangeRaftMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeRaftMemberResponse::InternalSwap(ChangeRaftMemberResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeRaftMemberResponse::GetMetadata() const {
  protobuf_dspb_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dspb_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeRaftMemberResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dspb

// @@protoc_insertion_point(global_scope)
