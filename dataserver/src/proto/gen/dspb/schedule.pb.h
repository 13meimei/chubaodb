// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/schedule.proto

#ifndef PROTOBUF_dspb_2fschedule_2eproto__INCLUDED
#define PROTOBUF_dspb_2fschedule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basepb/basepb.pb.h"
#include "dspb/error.pb.h"
// @@protoc_insertion_point(includes)
namespace dspb {
class ChangeRaftMemberRequest;
class ChangeRaftMemberRequestDefaultTypeInternal;
extern ChangeRaftMemberRequestDefaultTypeInternal _ChangeRaftMemberRequest_default_instance_;
class ChangeRaftMemberResponse;
class ChangeRaftMemberResponseDefaultTypeInternal;
extern ChangeRaftMemberResponseDefaultTypeInternal _ChangeRaftMemberResponse_default_instance_;
class CreateRangeRequest;
class CreateRangeRequestDefaultTypeInternal;
extern CreateRangeRequestDefaultTypeInternal _CreateRangeRequest_default_instance_;
class CreateRangeResponse;
class CreateRangeResponseDefaultTypeInternal;
extern CreateRangeResponseDefaultTypeInternal _CreateRangeResponse_default_instance_;
class DeleteRangeRequest;
class DeleteRangeRequestDefaultTypeInternal;
extern DeleteRangeRequestDefaultTypeInternal _DeleteRangeRequest_default_instance_;
class DeleteRangeResponse;
class DeleteRangeResponseDefaultTypeInternal;
extern DeleteRangeResponseDefaultTypeInternal _DeleteRangeResponse_default_instance_;
class GetPeerInfoRequest;
class GetPeerInfoRequestDefaultTypeInternal;
extern GetPeerInfoRequestDefaultTypeInternal _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponse;
class GetPeerInfoResponseDefaultTypeInternal;
extern GetPeerInfoResponseDefaultTypeInternal _GetPeerInfoResponse_default_instance_;
class IsAliveRequest;
class IsAliveRequestDefaultTypeInternal;
extern IsAliveRequestDefaultTypeInternal _IsAliveRequest_default_instance_;
class IsAliveResponse;
class IsAliveResponseDefaultTypeInternal;
extern IsAliveResponseDefaultTypeInternal _IsAliveResponse_default_instance_;
class NodeInfoRequest;
class NodeInfoRequestDefaultTypeInternal;
extern NodeInfoRequestDefaultTypeInternal _NodeInfoRequest_default_instance_;
class NodeInfoResponse;
class NodeInfoResponseDefaultTypeInternal;
extern NodeInfoResponseDefaultTypeInternal _NodeInfoResponse_default_instance_;
class NodeStats;
class NodeStatsDefaultTypeInternal;
extern NodeStatsDefaultTypeInternal _NodeStats_default_instance_;
class RangeInfo;
class RangeInfoDefaultTypeInternal;
extern RangeInfoDefaultTypeInternal _RangeInfo_default_instance_;
class RangeStats;
class RangeStatsDefaultTypeInternal;
extern RangeStatsDefaultTypeInternal _RangeStats_default_instance_;
class SchRequest;
class SchRequestDefaultTypeInternal;
extern SchRequestDefaultTypeInternal _SchRequest_default_instance_;
class SchRequest_Header;
class SchRequest_HeaderDefaultTypeInternal;
extern SchRequest_HeaderDefaultTypeInternal _SchRequest_Header_default_instance_;
class SchResponse;
class SchResponseDefaultTypeInternal;
extern SchResponseDefaultTypeInternal _SchResponse_default_instance_;
class SchResponse_Header;
class SchResponse_HeaderDefaultTypeInternal;
extern SchResponse_HeaderDefaultTypeInternal _SchResponse_Header_default_instance_;
class TransferRangeLeaderRequest;
class TransferRangeLeaderRequestDefaultTypeInternal;
extern TransferRangeLeaderRequestDefaultTypeInternal _TransferRangeLeaderRequest_default_instance_;
class TransferRangeLeaderResponse;
class TransferRangeLeaderResponseDefaultTypeInternal;
extern TransferRangeLeaderResponseDefaultTypeInternal _TransferRangeLeaderResponse_default_instance_;
}  // namespace dspb

namespace dspb {

namespace protobuf_dspb_2fschedule_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dspb_2fschedule_2eproto

enum ChangeRaftMemberRequest_ChangeType {
  ChangeRaftMemberRequest_ChangeType_CT_INVALID = 0,
  ChangeRaftMemberRequest_ChangeType_CT_ADD = 1,
  ChangeRaftMemberRequest_ChangeType_CT_REMOVE = 2,
  ChangeRaftMemberRequest_ChangeType_ChangeRaftMemberRequest_ChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChangeRaftMemberRequest_ChangeType_ChangeRaftMemberRequest_ChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChangeRaftMemberRequest_ChangeType_IsValid(int value);
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest_ChangeType_ChangeType_MIN = ChangeRaftMemberRequest_ChangeType_CT_INVALID;
const ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest_ChangeType_ChangeType_MAX = ChangeRaftMemberRequest_ChangeType_CT_REMOVE;
const int ChangeRaftMemberRequest_ChangeType_ChangeType_ARRAYSIZE = ChangeRaftMemberRequest_ChangeType_ChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeRaftMemberRequest_ChangeType_descriptor();
inline const ::std::string& ChangeRaftMemberRequest_ChangeType_Name(ChangeRaftMemberRequest_ChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeRaftMemberRequest_ChangeType_descriptor(), value);
}
inline bool ChangeRaftMemberRequest_ChangeType_Parse(
    const ::std::string& name, ChangeRaftMemberRequest_ChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeRaftMemberRequest_ChangeType>(
    ChangeRaftMemberRequest_ChangeType_descriptor(), name, value);
}
// ===================================================================

class SchRequest_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SchRequest.Header) */ {
 public:
  SchRequest_Header();
  virtual ~SchRequest_Header();

  SchRequest_Header(const SchRequest_Header& from);

  inline SchRequest_Header& operator=(const SchRequest_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchRequest_Header(SchRequest_Header&& from) noexcept
    : SchRequest_Header() {
    *this = ::std::move(from);
  }

  inline SchRequest_Header& operator=(SchRequest_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SchRequest_Header& default_instance();

  static inline const SchRequest_Header* internal_default_instance() {
    return reinterpret_cast<const SchRequest_Header*>(
               &_SchRequest_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SchRequest_Header* other);
  friend void swap(SchRequest_Header& a, SchRequest_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchRequest_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  SchRequest_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SchRequest_Header& from);
  void MergeFrom(const SchRequest_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SchRequest_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint64 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.SchRequest.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cluster_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SchRequest) */ {
 public:
  SchRequest();
  virtual ~SchRequest();

  SchRequest(const SchRequest& from);

  inline SchRequest& operator=(const SchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchRequest(SchRequest&& from) noexcept
    : SchRequest() {
    *this = ::std::move(from);
  }

  inline SchRequest& operator=(SchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SchRequest& default_instance();

  enum ReqCase {
    kCreateRange = 2,
    kDeleteRange = 3,
    kTransferRangeLeader = 4,
    kGetPeerInfo = 5,
    kIsAlive = 6,
    kNodeInfo = 7,
    kChangeRaftMember = 8,
    REQ_NOT_SET = 0,
  };

  static inline const SchRequest* internal_default_instance() {
    return reinterpret_cast<const SchRequest*>(
               &_SchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SchRequest* other);
  friend void swap(SchRequest& a, SchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SchRequest& from);
  void MergeFrom(const SchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SchRequest_Header Header;

  // accessors -------------------------------------------------------

  // .dspb.SchRequest.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::dspb::SchRequest_Header& header() const;
  ::dspb::SchRequest_Header* mutable_header();
  ::dspb::SchRequest_Header* release_header();
  void set_allocated_header(::dspb::SchRequest_Header* header);

  // .dspb.CreateRangeRequest create_range = 2;
  bool has_create_range() const;
  void clear_create_range();
  static const int kCreateRangeFieldNumber = 2;
  const ::dspb::CreateRangeRequest& create_range() const;
  ::dspb::CreateRangeRequest* mutable_create_range();
  ::dspb::CreateRangeRequest* release_create_range();
  void set_allocated_create_range(::dspb::CreateRangeRequest* create_range);

  // .dspb.DeleteRangeRequest delete_range = 3;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 3;
  const ::dspb::DeleteRangeRequest& delete_range() const;
  ::dspb::DeleteRangeRequest* mutable_delete_range();
  ::dspb::DeleteRangeRequest* release_delete_range();
  void set_allocated_delete_range(::dspb::DeleteRangeRequest* delete_range);

  // .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
  bool has_transfer_range_leader() const;
  void clear_transfer_range_leader();
  static const int kTransferRangeLeaderFieldNumber = 4;
  const ::dspb::TransferRangeLeaderRequest& transfer_range_leader() const;
  ::dspb::TransferRangeLeaderRequest* mutable_transfer_range_leader();
  ::dspb::TransferRangeLeaderRequest* release_transfer_range_leader();
  void set_allocated_transfer_range_leader(::dspb::TransferRangeLeaderRequest* transfer_range_leader);

  // .dspb.GetPeerInfoRequest get_peer_info = 5;
  bool has_get_peer_info() const;
  void clear_get_peer_info();
  static const int kGetPeerInfoFieldNumber = 5;
  const ::dspb::GetPeerInfoRequest& get_peer_info() const;
  ::dspb::GetPeerInfoRequest* mutable_get_peer_info();
  ::dspb::GetPeerInfoRequest* release_get_peer_info();
  void set_allocated_get_peer_info(::dspb::GetPeerInfoRequest* get_peer_info);

  // .dspb.IsAliveRequest is_alive = 6;
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 6;
  const ::dspb::IsAliveRequest& is_alive() const;
  ::dspb::IsAliveRequest* mutable_is_alive();
  ::dspb::IsAliveRequest* release_is_alive();
  void set_allocated_is_alive(::dspb::IsAliveRequest* is_alive);

  // .dspb.NodeInfoRequest node_info = 7;
  bool has_node_info() const;
  void clear_node_info();
  static const int kNodeInfoFieldNumber = 7;
  const ::dspb::NodeInfoRequest& node_info() const;
  ::dspb::NodeInfoRequest* mutable_node_info();
  ::dspb::NodeInfoRequest* release_node_info();
  void set_allocated_node_info(::dspb::NodeInfoRequest* node_info);

  // .dspb.ChangeRaftMemberRequest change_raft_member = 8;
  bool has_change_raft_member() const;
  void clear_change_raft_member();
  static const int kChangeRaftMemberFieldNumber = 8;
  const ::dspb::ChangeRaftMemberRequest& change_raft_member() const;
  ::dspb::ChangeRaftMemberRequest* mutable_change_raft_member();
  ::dspb::ChangeRaftMemberRequest* release_change_raft_member();
  void set_allocated_change_raft_member(::dspb::ChangeRaftMemberRequest* change_raft_member);

  ReqCase req_case() const;
  // @@protoc_insertion_point(class_scope:dspb.SchRequest)
 private:
  void set_has_create_range();
  void set_has_delete_range();
  void set_has_transfer_range_leader();
  void set_has_get_peer_info();
  void set_has_is_alive();
  void set_has_node_info();
  void set_has_change_raft_member();

  inline bool has_req() const;
  void clear_req();
  inline void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::SchRequest_Header* header_;
  union ReqUnion {
    ReqUnion() {}
    ::dspb::CreateRangeRequest* create_range_;
    ::dspb::DeleteRangeRequest* delete_range_;
    ::dspb::TransferRangeLeaderRequest* transfer_range_leader_;
    ::dspb::GetPeerInfoRequest* get_peer_info_;
    ::dspb::IsAliveRequest* is_alive_;
    ::dspb::NodeInfoRequest* node_info_;
    ::dspb::ChangeRaftMemberRequest* change_raft_member_;
  } req_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SchResponse_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SchResponse.Header) */ {
 public:
  SchResponse_Header();
  virtual ~SchResponse_Header();

  SchResponse_Header(const SchResponse_Header& from);

  inline SchResponse_Header& operator=(const SchResponse_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchResponse_Header(SchResponse_Header&& from) noexcept
    : SchResponse_Header() {
    *this = ::std::move(from);
  }

  inline SchResponse_Header& operator=(SchResponse_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SchResponse_Header& default_instance();

  static inline const SchResponse_Header* internal_default_instance() {
    return reinterpret_cast<const SchResponse_Header*>(
               &_SchResponse_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SchResponse_Header* other);
  friend void swap(SchResponse_Header& a, SchResponse_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchResponse_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  SchResponse_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SchResponse_Header& from);
  void MergeFrom(const SchResponse_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SchResponse_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dspb.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::dspb::Error& error() const;
  ::dspb::Error* mutable_error();
  ::dspb::Error* release_error();
  void set_allocated_error(::dspb::Error* error);

  // uint64 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint64 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.SchResponse.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::Error* error_;
  ::google::protobuf::uint64 cluster_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.SchResponse) */ {
 public:
  SchResponse();
  virtual ~SchResponse();

  SchResponse(const SchResponse& from);

  inline SchResponse& operator=(const SchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchResponse(SchResponse&& from) noexcept
    : SchResponse() {
    *this = ::std::move(from);
  }

  inline SchResponse& operator=(SchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SchResponse& default_instance();

  enum RespCase {
    kCreateRange = 2,
    kDeleteRange = 3,
    kTransferRangeLeader = 4,
    kGetPeerInfo = 5,
    kIsAlive = 6,
    kNodeInfo = 7,
    kChangeRaftMember = 8,
    RESP_NOT_SET = 0,
  };

  static inline const SchResponse* internal_default_instance() {
    return reinterpret_cast<const SchResponse*>(
               &_SchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SchResponse* other);
  friend void swap(SchResponse& a, SchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SchResponse& from);
  void MergeFrom(const SchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SchResponse_Header Header;

  // accessors -------------------------------------------------------

  // .dspb.SchResponse.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::dspb::SchResponse_Header& header() const;
  ::dspb::SchResponse_Header* mutable_header();
  ::dspb::SchResponse_Header* release_header();
  void set_allocated_header(::dspb::SchResponse_Header* header);

  // .dspb.CreateRangeResponse create_range = 2;
  bool has_create_range() const;
  void clear_create_range();
  static const int kCreateRangeFieldNumber = 2;
  const ::dspb::CreateRangeResponse& create_range() const;
  ::dspb::CreateRangeResponse* mutable_create_range();
  ::dspb::CreateRangeResponse* release_create_range();
  void set_allocated_create_range(::dspb::CreateRangeResponse* create_range);

  // .dspb.DeleteRangeResponse delete_range = 3;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 3;
  const ::dspb::DeleteRangeResponse& delete_range() const;
  ::dspb::DeleteRangeResponse* mutable_delete_range();
  ::dspb::DeleteRangeResponse* release_delete_range();
  void set_allocated_delete_range(::dspb::DeleteRangeResponse* delete_range);

  // .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
  bool has_transfer_range_leader() const;
  void clear_transfer_range_leader();
  static const int kTransferRangeLeaderFieldNumber = 4;
  const ::dspb::TransferRangeLeaderResponse& transfer_range_leader() const;
  ::dspb::TransferRangeLeaderResponse* mutable_transfer_range_leader();
  ::dspb::TransferRangeLeaderResponse* release_transfer_range_leader();
  void set_allocated_transfer_range_leader(::dspb::TransferRangeLeaderResponse* transfer_range_leader);

  // .dspb.GetPeerInfoResponse get_peer_info = 5;
  bool has_get_peer_info() const;
  void clear_get_peer_info();
  static const int kGetPeerInfoFieldNumber = 5;
  const ::dspb::GetPeerInfoResponse& get_peer_info() const;
  ::dspb::GetPeerInfoResponse* mutable_get_peer_info();
  ::dspb::GetPeerInfoResponse* release_get_peer_info();
  void set_allocated_get_peer_info(::dspb::GetPeerInfoResponse* get_peer_info);

  // .dspb.IsAliveResponse is_alive = 6;
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 6;
  const ::dspb::IsAliveResponse& is_alive() const;
  ::dspb::IsAliveResponse* mutable_is_alive();
  ::dspb::IsAliveResponse* release_is_alive();
  void set_allocated_is_alive(::dspb::IsAliveResponse* is_alive);

  // .dspb.NodeInfoResponse node_info = 7;
  bool has_node_info() const;
  void clear_node_info();
  static const int kNodeInfoFieldNumber = 7;
  const ::dspb::NodeInfoResponse& node_info() const;
  ::dspb::NodeInfoResponse* mutable_node_info();
  ::dspb::NodeInfoResponse* release_node_info();
  void set_allocated_node_info(::dspb::NodeInfoResponse* node_info);

  // .dspb.ChangeRaftMemberResponse change_raft_member = 8;
  bool has_change_raft_member() const;
  void clear_change_raft_member();
  static const int kChangeRaftMemberFieldNumber = 8;
  const ::dspb::ChangeRaftMemberResponse& change_raft_member() const;
  ::dspb::ChangeRaftMemberResponse* mutable_change_raft_member();
  ::dspb::ChangeRaftMemberResponse* release_change_raft_member();
  void set_allocated_change_raft_member(::dspb::ChangeRaftMemberResponse* change_raft_member);

  RespCase resp_case() const;
  // @@protoc_insertion_point(class_scope:dspb.SchResponse)
 private:
  void set_has_create_range();
  void set_has_delete_range();
  void set_has_transfer_range_leader();
  void set_has_get_peer_info();
  void set_has_is_alive();
  void set_has_node_info();
  void set_has_change_raft_member();

  inline bool has_resp() const;
  void clear_resp();
  inline void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dspb::SchResponse_Header* header_;
  union RespUnion {
    RespUnion() {}
    ::dspb::CreateRangeResponse* create_range_;
    ::dspb::DeleteRangeResponse* delete_range_;
    ::dspb::TransferRangeLeaderResponse* transfer_range_leader_;
    ::dspb::GetPeerInfoResponse* get_peer_info_;
    ::dspb::IsAliveResponse* is_alive_;
    ::dspb::NodeInfoResponse* node_info_;
    ::dspb::ChangeRaftMemberResponse* change_raft_member_;
  } resp_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.CreateRangeRequest) */ {
 public:
  CreateRangeRequest();
  virtual ~CreateRangeRequest();

  CreateRangeRequest(const CreateRangeRequest& from);

  inline CreateRangeRequest& operator=(const CreateRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRangeRequest(CreateRangeRequest&& from) noexcept
    : CreateRangeRequest() {
    *this = ::std::move(from);
  }

  inline CreateRangeRequest& operator=(CreateRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRangeRequest& default_instance();

  static inline const CreateRangeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRangeRequest*>(
               &_CreateRangeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CreateRangeRequest* other);
  friend void swap(CreateRangeRequest& a, CreateRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRangeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRangeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRangeRequest& from);
  void MergeFrom(const CreateRangeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .basepb.Range range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  const ::basepb::Range& range() const;
  ::basepb::Range* mutable_range();
  ::basepb::Range* release_range();
  void set_allocated_range(::basepb::Range* range);

  // uint64 leader = 2;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  ::google::protobuf::uint64 leader() const;
  void set_leader(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.CreateRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::basepb::Range* range_;
  ::google::protobuf::uint64 leader_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRangeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.CreateRangeResponse) */ {
 public:
  CreateRangeResponse();
  virtual ~CreateRangeResponse();

  CreateRangeResponse(const CreateRangeResponse& from);

  inline CreateRangeResponse& operator=(const CreateRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRangeResponse(CreateRangeResponse&& from) noexcept
    : CreateRangeResponse() {
    *this = ::std::move(from);
  }

  inline CreateRangeResponse& operator=(CreateRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRangeResponse& default_instance();

  static inline const CreateRangeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRangeResponse*>(
               &_CreateRangeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CreateRangeResponse* other);
  friend void swap(CreateRangeResponse& a, CreateRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRangeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRangeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRangeResponse& from);
  void MergeFrom(const CreateRangeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.CreateRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.DeleteRangeRequest) */ {
 public:
  DeleteRangeRequest();
  virtual ~DeleteRangeRequest();

  DeleteRangeRequest(const DeleteRangeRequest& from);

  inline DeleteRangeRequest& operator=(const DeleteRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRangeRequest(DeleteRangeRequest&& from) noexcept
    : DeleteRangeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRangeRequest& operator=(DeleteRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRangeRequest& default_instance();

  static inline const DeleteRangeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeRequest*>(
               &_DeleteRangeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DeleteRangeRequest* other);
  friend void swap(DeleteRangeRequest& a, DeleteRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteRangeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteRangeRequest& from);
  void MergeFrom(const DeleteRangeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 peer_id = 2;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 2;
  ::google::protobuf::uint64 peer_id() const;
  void set_peer_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.DeleteRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 peer_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRangeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.DeleteRangeResponse) */ {
 public:
  DeleteRangeResponse();
  virtual ~DeleteRangeResponse();

  DeleteRangeResponse(const DeleteRangeResponse& from);

  inline DeleteRangeResponse& operator=(const DeleteRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRangeResponse(DeleteRangeResponse&& from) noexcept
    : DeleteRangeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRangeResponse& operator=(DeleteRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRangeResponse& default_instance();

  static inline const DeleteRangeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeResponse*>(
               &_DeleteRangeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DeleteRangeResponse* other);
  friend void swap(DeleteRangeResponse& a, DeleteRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteRangeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteRangeResponse& from);
  void MergeFrom(const DeleteRangeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.DeleteRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferRangeLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.TransferRangeLeaderRequest) */ {
 public:
  TransferRangeLeaderRequest();
  virtual ~TransferRangeLeaderRequest();

  TransferRangeLeaderRequest(const TransferRangeLeaderRequest& from);

  inline TransferRangeLeaderRequest& operator=(const TransferRangeLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferRangeLeaderRequest(TransferRangeLeaderRequest&& from) noexcept
    : TransferRangeLeaderRequest() {
    *this = ::std::move(from);
  }

  inline TransferRangeLeaderRequest& operator=(TransferRangeLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferRangeLeaderRequest& default_instance();

  static inline const TransferRangeLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRangeLeaderRequest*>(
               &_TransferRangeLeaderRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TransferRangeLeaderRequest* other);
  friend void swap(TransferRangeLeaderRequest& a, TransferRangeLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferRangeLeaderRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferRangeLeaderRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferRangeLeaderRequest& from);
  void MergeFrom(const TransferRangeLeaderRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferRangeLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.TransferRangeLeaderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferRangeLeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.TransferRangeLeaderResponse) */ {
 public:
  TransferRangeLeaderResponse();
  virtual ~TransferRangeLeaderResponse();

  TransferRangeLeaderResponse(const TransferRangeLeaderResponse& from);

  inline TransferRangeLeaderResponse& operator=(const TransferRangeLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferRangeLeaderResponse(TransferRangeLeaderResponse&& from) noexcept
    : TransferRangeLeaderResponse() {
    *this = ::std::move(from);
  }

  inline TransferRangeLeaderResponse& operator=(TransferRangeLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferRangeLeaderResponse& default_instance();

  static inline const TransferRangeLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const TransferRangeLeaderResponse*>(
               &_TransferRangeLeaderResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TransferRangeLeaderResponse* other);
  friend void swap(TransferRangeLeaderResponse& a, TransferRangeLeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferRangeLeaderResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferRangeLeaderResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferRangeLeaderResponse& from);
  void MergeFrom(const TransferRangeLeaderResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferRangeLeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.TransferRangeLeaderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetPeerInfoRequest) */ {
 public:
  GetPeerInfoRequest();
  virtual ~GetPeerInfoRequest();

  GetPeerInfoRequest(const GetPeerInfoRequest& from);

  inline GetPeerInfoRequest& operator=(const GetPeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerInfoRequest(GetPeerInfoRequest&& from) noexcept
    : GetPeerInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoRequest& operator=(GetPeerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoRequest& default_instance();

  static inline const GetPeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoRequest*>(
               &_GetPeerInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetPeerInfoRequest* other);
  friend void swap(GetPeerInfoRequest& a, GetPeerInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerInfoRequest& from);
  void MergeFrom(const GetPeerInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.GetPeerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.GetPeerInfoResponse) */ {
 public:
  GetPeerInfoResponse();
  virtual ~GetPeerInfoResponse();

  GetPeerInfoResponse(const GetPeerInfoResponse& from);

  inline GetPeerInfoResponse& operator=(const GetPeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerInfoResponse(GetPeerInfoResponse&& from) noexcept
    : GetPeerInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoResponse& operator=(GetPeerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoResponse& default_instance();

  static inline const GetPeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoResponse*>(
               &_GetPeerInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetPeerInfoResponse* other);
  friend void swap(GetPeerInfoResponse& a, GetPeerInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerInfoResponse& from);
  void MergeFrom(const GetPeerInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .basepb.Replica replica = 1;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 1;
  const ::basepb::Replica& replica() const;
  ::basepb::Replica* mutable_replica();
  ::basepb::Replica* release_replica();
  void set_allocated_replica(::basepb::Replica* replica);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 commit = 4;
  void clear_commit();
  static const int kCommitFieldNumber = 4;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.GetPeerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::basepb::Replica* replica_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IsAliveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.IsAliveRequest) */ {
 public:
  IsAliveRequest();
  virtual ~IsAliveRequest();

  IsAliveRequest(const IsAliveRequest& from);

  inline IsAliveRequest& operator=(const IsAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IsAliveRequest(IsAliveRequest&& from) noexcept
    : IsAliveRequest() {
    *this = ::std::move(from);
  }

  inline IsAliveRequest& operator=(IsAliveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IsAliveRequest& default_instance();

  static inline const IsAliveRequest* internal_default_instance() {
    return reinterpret_cast<const IsAliveRequest*>(
               &_IsAliveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(IsAliveRequest* other);
  friend void swap(IsAliveRequest& a, IsAliveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IsAliveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  IsAliveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IsAliveRequest& from);
  void MergeFrom(const IsAliveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IsAliveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.IsAliveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IsAliveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.IsAliveResponse) */ {
 public:
  IsAliveResponse();
  virtual ~IsAliveResponse();

  IsAliveResponse(const IsAliveResponse& from);

  inline IsAliveResponse& operator=(const IsAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IsAliveResponse(IsAliveResponse&& from) noexcept
    : IsAliveResponse() {
    *this = ::std::move(from);
  }

  inline IsAliveResponse& operator=(IsAliveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IsAliveResponse& default_instance();

  static inline const IsAliveResponse* internal_default_instance() {
    return reinterpret_cast<const IsAliveResponse*>(
               &_IsAliveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(IsAliveResponse* other);
  friend void swap(IsAliveResponse& a, IsAliveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IsAliveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  IsAliveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IsAliveResponse& from);
  void MergeFrom(const IsAliveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IsAliveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool alive = 1;
  void clear_alive();
  static const int kAliveFieldNumber = 1;
  bool alive() const;
  void set_alive(bool value);

  // @@protoc_insertion_point(class_scope:dspb.IsAliveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool alive_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.NodeInfoRequest) */ {
 public:
  NodeInfoRequest();
  virtual ~NodeInfoRequest();

  NodeInfoRequest(const NodeInfoRequest& from);

  inline NodeInfoRequest& operator=(const NodeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfoRequest(NodeInfoRequest&& from) noexcept
    : NodeInfoRequest() {
    *this = ::std::move(from);
  }

  inline NodeInfoRequest& operator=(NodeInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfoRequest& default_instance();

  static inline const NodeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NodeInfoRequest*>(
               &_NodeInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(NodeInfoRequest* other);
  friend void swap(NodeInfoRequest& a, NodeInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeInfoRequest& from);
  void MergeFrom(const NodeInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.NodeInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.RangeStats) */ {
 public:
  RangeStats();
  virtual ~RangeStats();

  RangeStats(const RangeStats& from);

  inline RangeStats& operator=(const RangeStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeStats(RangeStats&& from) noexcept
    : RangeStats() {
    *this = ::std::move(from);
  }

  inline RangeStats& operator=(RangeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeStats& default_instance();

  static inline const RangeStats* internal_default_instance() {
    return reinterpret_cast<const RangeStats*>(
               &_RangeStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(RangeStats* other);
  friend void swap(RangeStats& a, RangeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeStats* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeStats& from);
  void MergeFrom(const RangeStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 write_bytes_per_sec = 1;
  void clear_write_bytes_per_sec();
  static const int kWriteBytesPerSecFieldNumber = 1;
  ::google::protobuf::uint64 write_bytes_per_sec() const;
  void set_write_bytes_per_sec(::google::protobuf::uint64 value);

  // uint64 write_keys_per_sec = 2;
  void clear_write_keys_per_sec();
  static const int kWriteKeysPerSecFieldNumber = 2;
  ::google::protobuf::uint64 write_keys_per_sec() const;
  void set_write_keys_per_sec(::google::protobuf::uint64 value);

  // uint64 read_bytess_per_sec = 3;
  void clear_read_bytess_per_sec();
  static const int kReadBytessPerSecFieldNumber = 3;
  ::google::protobuf::uint64 read_bytess_per_sec() const;
  void set_read_bytess_per_sec(::google::protobuf::uint64 value);

  // uint64 read_keys_per_sec = 4;
  void clear_read_keys_per_sec();
  static const int kReadKeysPerSecFieldNumber = 4;
  ::google::protobuf::uint64 read_keys_per_sec() const;
  void set_read_keys_per_sec(::google::protobuf::uint64 value);

  // uint64 approximate_size = 5;
  void clear_approximate_size();
  static const int kApproximateSizeFieldNumber = 5;
  ::google::protobuf::uint64 approximate_size() const;
  void set_approximate_size(::google::protobuf::uint64 value);

  // uint64 kv_count = 6;
  void clear_kv_count();
  static const int kKvCountFieldNumber = 6;
  ::google::protobuf::uint64 kv_count() const;
  void set_kv_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.RangeStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 write_bytes_per_sec_;
  ::google::protobuf::uint64 write_keys_per_sec_;
  ::google::protobuf::uint64 read_bytess_per_sec_;
  ::google::protobuf::uint64 read_keys_per_sec_;
  ::google::protobuf::uint64 approximate_size_;
  ::google::protobuf::uint64 kv_count_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.RangeInfo) */ {
 public:
  RangeInfo();
  virtual ~RangeInfo();

  RangeInfo(const RangeInfo& from);

  inline RangeInfo& operator=(const RangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeInfo(RangeInfo&& from) noexcept
    : RangeInfo() {
    *this = ::std::move(from);
  }

  inline RangeInfo& operator=(RangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeInfo& default_instance();

  static inline const RangeInfo* internal_default_instance() {
    return reinterpret_cast<const RangeInfo*>(
               &_RangeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(RangeInfo* other);
  friend void swap(RangeInfo& a, RangeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeInfo& from);
  void MergeFrom(const RangeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .basepb.PeerStatus peers_status = 4;
  int peers_status_size() const;
  void clear_peers_status();
  static const int kPeersStatusFieldNumber = 4;
  const ::basepb::PeerStatus& peers_status(int index) const;
  ::basepb::PeerStatus* mutable_peers_status(int index);
  ::basepb::PeerStatus* add_peers_status();
  ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >*
      mutable_peers_status();
  const ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >&
      peers_status() const;

  // .basepb.Range range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  const ::basepb::Range& range() const;
  ::basepb::Range* mutable_range();
  ::basepb::Range* release_range();
  void set_allocated_range(::basepb::Range* range);

  // .dspb.RangeStats stats = 2;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 2;
  const ::dspb::RangeStats& stats() const;
  ::dspb::RangeStats* mutable_stats();
  ::dspb::RangeStats* release_stats();
  void set_allocated_stats(::dspb::RangeStats* stats);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.RangeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus > peers_status_;
  ::basepb::Range* range_;
  ::dspb::RangeStats* stats_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.NodeStats) */ {
 public:
  NodeStats();
  virtual ~NodeStats();

  NodeStats(const NodeStats& from);

  inline NodeStats& operator=(const NodeStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeStats(NodeStats&& from) noexcept
    : NodeStats() {
    *this = ::std::move(from);
  }

  inline NodeStats& operator=(NodeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStats& default_instance();

  static inline const NodeStats* internal_default_instance() {
    return reinterpret_cast<const NodeStats*>(
               &_NodeStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(NodeStats* other);
  friend void swap(NodeStats& a, NodeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeStats* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeStats& from);
  void MergeFrom(const NodeStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 range_count = 1;
  void clear_range_count();
  static const int kRangeCountFieldNumber = 1;
  ::google::protobuf::uint32 range_count() const;
  void set_range_count(::google::protobuf::uint32 value);

  // uint32 range_split_count = 2;
  void clear_range_split_count();
  static const int kRangeSplitCountFieldNumber = 2;
  ::google::protobuf::uint32 range_split_count() const;
  void set_range_split_count(::google::protobuf::uint32 value);

  // uint32 snap_sending_count = 3;
  void clear_snap_sending_count();
  static const int kSnapSendingCountFieldNumber = 3;
  ::google::protobuf::uint32 snap_sending_count() const;
  void set_snap_sending_count(::google::protobuf::uint32 value);

  // uint32 snap_applying_count = 4;
  void clear_snap_applying_count();
  static const int kSnapApplyingCountFieldNumber = 4;
  ::google::protobuf::uint32 snap_applying_count() const;
  void set_snap_applying_count(::google::protobuf::uint32 value);

  // uint64 capacity = 7;
  void clear_capacity();
  static const int kCapacityFieldNumber = 7;
  ::google::protobuf::uint64 capacity() const;
  void set_capacity(::google::protobuf::uint64 value);

  // uint64 used_size = 8;
  void clear_used_size();
  static const int kUsedSizeFieldNumber = 8;
  ::google::protobuf::uint64 used_size() const;
  void set_used_size(::google::protobuf::uint64 value);

  // uint64 write_bytes_per_sec = 10;
  void clear_write_bytes_per_sec();
  static const int kWriteBytesPerSecFieldNumber = 10;
  ::google::protobuf::uint64 write_bytes_per_sec() const;
  void set_write_bytes_per_sec(::google::protobuf::uint64 value);

  // uint64 write_keys_per_sec = 11;
  void clear_write_keys_per_sec();
  static const int kWriteKeysPerSecFieldNumber = 11;
  ::google::protobuf::uint64 write_keys_per_sec() const;
  void set_write_keys_per_sec(::google::protobuf::uint64 value);

  // uint64 read_bytess_per_sec = 12;
  void clear_read_bytess_per_sec();
  static const int kReadBytessPerSecFieldNumber = 12;
  ::google::protobuf::uint64 read_bytess_per_sec() const;
  void set_read_bytess_per_sec(::google::protobuf::uint64 value);

  // uint32 range_leader_count = 6;
  void clear_range_leader_count();
  static const int kRangeLeaderCountFieldNumber = 6;
  ::google::protobuf::uint32 range_leader_count() const;
  void set_range_leader_count(::google::protobuf::uint32 value);

  // uint64 read_keys_per_sec = 13;
  void clear_read_keys_per_sec();
  static const int kReadKeysPerSecFieldNumber = 13;
  ::google::protobuf::uint64 read_keys_per_sec() const;
  void set_read_keys_per_sec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.NodeStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 range_count_;
  ::google::protobuf::uint32 range_split_count_;
  ::google::protobuf::uint32 snap_sending_count_;
  ::google::protobuf::uint32 snap_applying_count_;
  ::google::protobuf::uint64 capacity_;
  ::google::protobuf::uint64 used_size_;
  ::google::protobuf::uint64 write_bytes_per_sec_;
  ::google::protobuf::uint64 write_keys_per_sec_;
  ::google::protobuf::uint64 read_bytess_per_sec_;
  ::google::protobuf::uint32 range_leader_count_;
  ::google::protobuf::uint64 read_keys_per_sec_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.NodeInfoResponse) */ {
 public:
  NodeInfoResponse();
  virtual ~NodeInfoResponse();

  NodeInfoResponse(const NodeInfoResponse& from);

  inline NodeInfoResponse& operator=(const NodeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfoResponse(NodeInfoResponse&& from) noexcept
    : NodeInfoResponse() {
    *this = ::std::move(from);
  }

  inline NodeInfoResponse& operator=(NodeInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfoResponse& default_instance();

  static inline const NodeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const NodeInfoResponse*>(
               &_NodeInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(NodeInfoResponse* other);
  friend void swap(NodeInfoResponse& a, NodeInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeInfoResponse& from);
  void MergeFrom(const NodeInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 isolated_replicas = 3;
  int isolated_replicas_size() const;
  void clear_isolated_replicas();
  static const int kIsolatedReplicasFieldNumber = 3;
  ::google::protobuf::uint64 isolated_replicas(int index) const;
  void set_isolated_replicas(int index, ::google::protobuf::uint64 value);
  void add_isolated_replicas(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      isolated_replicas() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_isolated_replicas();

  // repeated .dspb.RangeInfo range_infos = 4;
  int range_infos_size() const;
  void clear_range_infos();
  static const int kRangeInfosFieldNumber = 4;
  const ::dspb::RangeInfo& range_infos(int index) const;
  ::dspb::RangeInfo* mutable_range_infos(int index);
  ::dspb::RangeInfo* add_range_infos();
  ::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo >*
      mutable_range_infos();
  const ::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo >&
      range_infos() const;

  // .dspb.NodeStats stats = 2;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 2;
  const ::dspb::NodeStats& stats() const;
  ::dspb::NodeStats* mutable_stats();
  ::dspb::NodeStats* release_stats();
  void set_allocated_stats(::dspb::NodeStats* stats);

  // uint64 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dspb.NodeInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > isolated_replicas_;
  mutable int _isolated_replicas_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo > range_infos_;
  ::dspb::NodeStats* stats_;
  ::google::protobuf::uint64 node_id_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeRaftMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ChangeRaftMemberRequest) */ {
 public:
  ChangeRaftMemberRequest();
  virtual ~ChangeRaftMemberRequest();

  ChangeRaftMemberRequest(const ChangeRaftMemberRequest& from);

  inline ChangeRaftMemberRequest& operator=(const ChangeRaftMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeRaftMemberRequest(ChangeRaftMemberRequest&& from) noexcept
    : ChangeRaftMemberRequest() {
    *this = ::std::move(from);
  }

  inline ChangeRaftMemberRequest& operator=(ChangeRaftMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeRaftMemberRequest& default_instance();

  static inline const ChangeRaftMemberRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeRaftMemberRequest*>(
               &_ChangeRaftMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ChangeRaftMemberRequest* other);
  friend void swap(ChangeRaftMemberRequest& a, ChangeRaftMemberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeRaftMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeRaftMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeRaftMemberRequest& from);
  void MergeFrom(const ChangeRaftMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeRaftMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChangeRaftMemberRequest_ChangeType ChangeType;
  static const ChangeType CT_INVALID =
    ChangeRaftMemberRequest_ChangeType_CT_INVALID;
  static const ChangeType CT_ADD =
    ChangeRaftMemberRequest_ChangeType_CT_ADD;
  static const ChangeType CT_REMOVE =
    ChangeRaftMemberRequest_ChangeType_CT_REMOVE;
  static inline bool ChangeType_IsValid(int value) {
    return ChangeRaftMemberRequest_ChangeType_IsValid(value);
  }
  static const ChangeType ChangeType_MIN =
    ChangeRaftMemberRequest_ChangeType_ChangeType_MIN;
  static const ChangeType ChangeType_MAX =
    ChangeRaftMemberRequest_ChangeType_ChangeType_MAX;
  static const int ChangeType_ARRAYSIZE =
    ChangeRaftMemberRequest_ChangeType_ChangeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChangeType_descriptor() {
    return ChangeRaftMemberRequest_ChangeType_descriptor();
  }
  static inline const ::std::string& ChangeType_Name(ChangeType value) {
    return ChangeRaftMemberRequest_ChangeType_Name(value);
  }
  static inline bool ChangeType_Parse(const ::std::string& name,
      ChangeType* value) {
    return ChangeRaftMemberRequest_ChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .basepb.RangeEpoch range_epoch = 2;
  bool has_range_epoch() const;
  void clear_range_epoch();
  static const int kRangeEpochFieldNumber = 2;
  const ::basepb::RangeEpoch& range_epoch() const;
  ::basepb::RangeEpoch* mutable_range_epoch();
  ::basepb::RangeEpoch* release_range_epoch();
  void set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch);

  // .basepb.Peer target_peer = 4;
  bool has_target_peer() const;
  void clear_target_peer();
  static const int kTargetPeerFieldNumber = 4;
  const ::basepb::Peer& target_peer() const;
  ::basepb::Peer* mutable_target_peer();
  ::basepb::Peer* release_target_peer();
  void set_allocated_target_peer(::basepb::Peer* target_peer);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 3;
  ::dspb::ChangeRaftMemberRequest_ChangeType change_type() const;
  void set_change_type(::dspb::ChangeRaftMemberRequest_ChangeType value);

  // @@protoc_insertion_point(class_scope:dspb.ChangeRaftMemberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::basepb::RangeEpoch* range_epoch_;
  ::basepb::Peer* target_peer_;
  ::google::protobuf::uint64 range_id_;
  int change_type_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeRaftMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dspb.ChangeRaftMemberResponse) */ {
 public:
  ChangeRaftMemberResponse();
  virtual ~ChangeRaftMemberResponse();

  ChangeRaftMemberResponse(const ChangeRaftMemberResponse& from);

  inline ChangeRaftMemberResponse& operator=(const ChangeRaftMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeRaftMemberResponse(ChangeRaftMemberResponse&& from) noexcept
    : ChangeRaftMemberResponse() {
    *this = ::std::move(from);
  }

  inline ChangeRaftMemberResponse& operator=(ChangeRaftMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeRaftMemberResponse& default_instance();

  static inline const ChangeRaftMemberResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeRaftMemberResponse*>(
               &_ChangeRaftMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ChangeRaftMemberResponse* other);
  friend void swap(ChangeRaftMemberResponse& a, ChangeRaftMemberResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeRaftMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeRaftMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeRaftMemberResponse& from);
  void MergeFrom(const ChangeRaftMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeRaftMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dspb.ChangeRaftMemberResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_dspb_2fschedule_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchRequest_Header

// uint64 cluster_id = 1;
inline void SchRequest_Header::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SchRequest_Header::cluster_id() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.Header.cluster_id)
  return cluster_id_;
}
inline void SchRequest_Header::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.SchRequest.Header.cluster_id)
}

// -------------------------------------------------------------------

// SchRequest

// .dspb.SchRequest.Header header = 1;
inline bool SchRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void SchRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::dspb::SchRequest_Header& SchRequest::header() const {
  const ::dspb::SchRequest_Header* p = header_;
  // @@protoc_insertion_point(field_get:dspb.SchRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SchRequest_Header*>(
      &::dspb::_SchRequest_Header_default_instance_);
}
inline ::dspb::SchRequest_Header* SchRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::dspb::SchRequest_Header;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.header)
  return header_;
}
inline ::dspb::SchRequest_Header* SchRequest::release_header() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.header)
  
  ::dspb::SchRequest_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SchRequest::set_allocated_header(::dspb::SchRequest_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.header)
}

// .dspb.CreateRangeRequest create_range = 2;
inline bool SchRequest::has_create_range() const {
  return req_case() == kCreateRange;
}
inline void SchRequest::set_has_create_range() {
  _oneof_case_[0] = kCreateRange;
}
inline void SchRequest::clear_create_range() {
  if (has_create_range()) {
    delete req_.create_range_;
    clear_has_req();
  }
}
inline  const ::dspb::CreateRangeRequest& SchRequest::create_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.create_range)
  return has_create_range()
      ? *req_.create_range_
      : ::dspb::CreateRangeRequest::default_instance();
}
inline ::dspb::CreateRangeRequest* SchRequest::mutable_create_range() {
  if (!has_create_range()) {
    clear_req();
    set_has_create_range();
    req_.create_range_ = new ::dspb::CreateRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.create_range)
  return req_.create_range_;
}
inline ::dspb::CreateRangeRequest* SchRequest::release_create_range() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.create_range)
  if (has_create_range()) {
    clear_has_req();
    ::dspb::CreateRangeRequest* temp = req_.create_range_;
    req_.create_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_create_range(::dspb::CreateRangeRequest* create_range) {
  clear_req();
  if (create_range) {
    set_has_create_range();
    req_.create_range_ = create_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.create_range)
}

// .dspb.DeleteRangeRequest delete_range = 3;
inline bool SchRequest::has_delete_range() const {
  return req_case() == kDeleteRange;
}
inline void SchRequest::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void SchRequest::clear_delete_range() {
  if (has_delete_range()) {
    delete req_.delete_range_;
    clear_has_req();
  }
}
inline  const ::dspb::DeleteRangeRequest& SchRequest::delete_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.delete_range)
  return has_delete_range()
      ? *req_.delete_range_
      : ::dspb::DeleteRangeRequest::default_instance();
}
inline ::dspb::DeleteRangeRequest* SchRequest::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_req();
    set_has_delete_range();
    req_.delete_range_ = new ::dspb::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.delete_range)
  return req_.delete_range_;
}
inline ::dspb::DeleteRangeRequest* SchRequest::release_delete_range() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.delete_range)
  if (has_delete_range()) {
    clear_has_req();
    ::dspb::DeleteRangeRequest* temp = req_.delete_range_;
    req_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_delete_range(::dspb::DeleteRangeRequest* delete_range) {
  clear_req();
  if (delete_range) {
    set_has_delete_range();
    req_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.delete_range)
}

// .dspb.TransferRangeLeaderRequest transfer_range_leader = 4;
inline bool SchRequest::has_transfer_range_leader() const {
  return req_case() == kTransferRangeLeader;
}
inline void SchRequest::set_has_transfer_range_leader() {
  _oneof_case_[0] = kTransferRangeLeader;
}
inline void SchRequest::clear_transfer_range_leader() {
  if (has_transfer_range_leader()) {
    delete req_.transfer_range_leader_;
    clear_has_req();
  }
}
inline  const ::dspb::TransferRangeLeaderRequest& SchRequest::transfer_range_leader() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.transfer_range_leader)
  return has_transfer_range_leader()
      ? *req_.transfer_range_leader_
      : ::dspb::TransferRangeLeaderRequest::default_instance();
}
inline ::dspb::TransferRangeLeaderRequest* SchRequest::mutable_transfer_range_leader() {
  if (!has_transfer_range_leader()) {
    clear_req();
    set_has_transfer_range_leader();
    req_.transfer_range_leader_ = new ::dspb::TransferRangeLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.transfer_range_leader)
  return req_.transfer_range_leader_;
}
inline ::dspb::TransferRangeLeaderRequest* SchRequest::release_transfer_range_leader() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.transfer_range_leader)
  if (has_transfer_range_leader()) {
    clear_has_req();
    ::dspb::TransferRangeLeaderRequest* temp = req_.transfer_range_leader_;
    req_.transfer_range_leader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_transfer_range_leader(::dspb::TransferRangeLeaderRequest* transfer_range_leader) {
  clear_req();
  if (transfer_range_leader) {
    set_has_transfer_range_leader();
    req_.transfer_range_leader_ = transfer_range_leader;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.transfer_range_leader)
}

// .dspb.GetPeerInfoRequest get_peer_info = 5;
inline bool SchRequest::has_get_peer_info() const {
  return req_case() == kGetPeerInfo;
}
inline void SchRequest::set_has_get_peer_info() {
  _oneof_case_[0] = kGetPeerInfo;
}
inline void SchRequest::clear_get_peer_info() {
  if (has_get_peer_info()) {
    delete req_.get_peer_info_;
    clear_has_req();
  }
}
inline  const ::dspb::GetPeerInfoRequest& SchRequest::get_peer_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.get_peer_info)
  return has_get_peer_info()
      ? *req_.get_peer_info_
      : ::dspb::GetPeerInfoRequest::default_instance();
}
inline ::dspb::GetPeerInfoRequest* SchRequest::mutable_get_peer_info() {
  if (!has_get_peer_info()) {
    clear_req();
    set_has_get_peer_info();
    req_.get_peer_info_ = new ::dspb::GetPeerInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.get_peer_info)
  return req_.get_peer_info_;
}
inline ::dspb::GetPeerInfoRequest* SchRequest::release_get_peer_info() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.get_peer_info)
  if (has_get_peer_info()) {
    clear_has_req();
    ::dspb::GetPeerInfoRequest* temp = req_.get_peer_info_;
    req_.get_peer_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_get_peer_info(::dspb::GetPeerInfoRequest* get_peer_info) {
  clear_req();
  if (get_peer_info) {
    set_has_get_peer_info();
    req_.get_peer_info_ = get_peer_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.get_peer_info)
}

// .dspb.IsAliveRequest is_alive = 6;
inline bool SchRequest::has_is_alive() const {
  return req_case() == kIsAlive;
}
inline void SchRequest::set_has_is_alive() {
  _oneof_case_[0] = kIsAlive;
}
inline void SchRequest::clear_is_alive() {
  if (has_is_alive()) {
    delete req_.is_alive_;
    clear_has_req();
  }
}
inline  const ::dspb::IsAliveRequest& SchRequest::is_alive() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.is_alive)
  return has_is_alive()
      ? *req_.is_alive_
      : ::dspb::IsAliveRequest::default_instance();
}
inline ::dspb::IsAliveRequest* SchRequest::mutable_is_alive() {
  if (!has_is_alive()) {
    clear_req();
    set_has_is_alive();
    req_.is_alive_ = new ::dspb::IsAliveRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.is_alive)
  return req_.is_alive_;
}
inline ::dspb::IsAliveRequest* SchRequest::release_is_alive() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.is_alive)
  if (has_is_alive()) {
    clear_has_req();
    ::dspb::IsAliveRequest* temp = req_.is_alive_;
    req_.is_alive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_is_alive(::dspb::IsAliveRequest* is_alive) {
  clear_req();
  if (is_alive) {
    set_has_is_alive();
    req_.is_alive_ = is_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.is_alive)
}

// .dspb.NodeInfoRequest node_info = 7;
inline bool SchRequest::has_node_info() const {
  return req_case() == kNodeInfo;
}
inline void SchRequest::set_has_node_info() {
  _oneof_case_[0] = kNodeInfo;
}
inline void SchRequest::clear_node_info() {
  if (has_node_info()) {
    delete req_.node_info_;
    clear_has_req();
  }
}
inline  const ::dspb::NodeInfoRequest& SchRequest::node_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.node_info)
  return has_node_info()
      ? *req_.node_info_
      : ::dspb::NodeInfoRequest::default_instance();
}
inline ::dspb::NodeInfoRequest* SchRequest::mutable_node_info() {
  if (!has_node_info()) {
    clear_req();
    set_has_node_info();
    req_.node_info_ = new ::dspb::NodeInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.node_info)
  return req_.node_info_;
}
inline ::dspb::NodeInfoRequest* SchRequest::release_node_info() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.node_info)
  if (has_node_info()) {
    clear_has_req();
    ::dspb::NodeInfoRequest* temp = req_.node_info_;
    req_.node_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_node_info(::dspb::NodeInfoRequest* node_info) {
  clear_req();
  if (node_info) {
    set_has_node_info();
    req_.node_info_ = node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.node_info)
}

// .dspb.ChangeRaftMemberRequest change_raft_member = 8;
inline bool SchRequest::has_change_raft_member() const {
  return req_case() == kChangeRaftMember;
}
inline void SchRequest::set_has_change_raft_member() {
  _oneof_case_[0] = kChangeRaftMember;
}
inline void SchRequest::clear_change_raft_member() {
  if (has_change_raft_member()) {
    delete req_.change_raft_member_;
    clear_has_req();
  }
}
inline  const ::dspb::ChangeRaftMemberRequest& SchRequest::change_raft_member() const {
  // @@protoc_insertion_point(field_get:dspb.SchRequest.change_raft_member)
  return has_change_raft_member()
      ? *req_.change_raft_member_
      : ::dspb::ChangeRaftMemberRequest::default_instance();
}
inline ::dspb::ChangeRaftMemberRequest* SchRequest::mutable_change_raft_member() {
  if (!has_change_raft_member()) {
    clear_req();
    set_has_change_raft_member();
    req_.change_raft_member_ = new ::dspb::ChangeRaftMemberRequest;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchRequest.change_raft_member)
  return req_.change_raft_member_;
}
inline ::dspb::ChangeRaftMemberRequest* SchRequest::release_change_raft_member() {
  // @@protoc_insertion_point(field_release:dspb.SchRequest.change_raft_member)
  if (has_change_raft_member()) {
    clear_has_req();
    ::dspb::ChangeRaftMemberRequest* temp = req_.change_raft_member_;
    req_.change_raft_member_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchRequest::set_allocated_change_raft_member(::dspb::ChangeRaftMemberRequest* change_raft_member) {
  clear_req();
  if (change_raft_member) {
    set_has_change_raft_member();
    req_.change_raft_member_ = change_raft_member;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchRequest.change_raft_member)
}

inline bool SchRequest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
inline void SchRequest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
inline SchRequest::ReqCase SchRequest::req_case() const {
  return SchRequest::ReqCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SchResponse_Header

// uint64 cluster_id = 1;
inline void SchResponse_Header::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SchResponse_Header::cluster_id() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.Header.cluster_id)
  return cluster_id_;
}
inline void SchResponse_Header::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.SchResponse.Header.cluster_id)
}

// .dspb.Error error = 2;
inline bool SchResponse_Header::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SchResponse_Header::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::dspb::Error& SchResponse_Header::error() const {
  const ::dspb::Error* p = error_;
  // @@protoc_insertion_point(field_get:dspb.SchResponse.Header.error)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::Error*>(
      &::dspb::_Error_default_instance_);
}
inline ::dspb::Error* SchResponse_Header::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::dspb::Error;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.Header.error)
  return error_;
}
inline ::dspb::Error* SchResponse_Header::release_error() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.Header.error)
  
  ::dspb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SchResponse_Header::set_allocated_error(::dspb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.Header.error)
}

// -------------------------------------------------------------------

// SchResponse

// .dspb.SchResponse.Header header = 1;
inline bool SchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void SchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::dspb::SchResponse_Header& SchResponse::header() const {
  const ::dspb::SchResponse_Header* p = header_;
  // @@protoc_insertion_point(field_get:dspb.SchResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::SchResponse_Header*>(
      &::dspb::_SchResponse_Header_default_instance_);
}
inline ::dspb::SchResponse_Header* SchResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::dspb::SchResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.header)
  return header_;
}
inline ::dspb::SchResponse_Header* SchResponse::release_header() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.header)
  
  ::dspb::SchResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SchResponse::set_allocated_header(::dspb::SchResponse_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.header)
}

// .dspb.CreateRangeResponse create_range = 2;
inline bool SchResponse::has_create_range() const {
  return resp_case() == kCreateRange;
}
inline void SchResponse::set_has_create_range() {
  _oneof_case_[0] = kCreateRange;
}
inline void SchResponse::clear_create_range() {
  if (has_create_range()) {
    delete resp_.create_range_;
    clear_has_resp();
  }
}
inline  const ::dspb::CreateRangeResponse& SchResponse::create_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.create_range)
  return has_create_range()
      ? *resp_.create_range_
      : ::dspb::CreateRangeResponse::default_instance();
}
inline ::dspb::CreateRangeResponse* SchResponse::mutable_create_range() {
  if (!has_create_range()) {
    clear_resp();
    set_has_create_range();
    resp_.create_range_ = new ::dspb::CreateRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.create_range)
  return resp_.create_range_;
}
inline ::dspb::CreateRangeResponse* SchResponse::release_create_range() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.create_range)
  if (has_create_range()) {
    clear_has_resp();
    ::dspb::CreateRangeResponse* temp = resp_.create_range_;
    resp_.create_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_create_range(::dspb::CreateRangeResponse* create_range) {
  clear_resp();
  if (create_range) {
    set_has_create_range();
    resp_.create_range_ = create_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.create_range)
}

// .dspb.DeleteRangeResponse delete_range = 3;
inline bool SchResponse::has_delete_range() const {
  return resp_case() == kDeleteRange;
}
inline void SchResponse::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void SchResponse::clear_delete_range() {
  if (has_delete_range()) {
    delete resp_.delete_range_;
    clear_has_resp();
  }
}
inline  const ::dspb::DeleteRangeResponse& SchResponse::delete_range() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.delete_range)
  return has_delete_range()
      ? *resp_.delete_range_
      : ::dspb::DeleteRangeResponse::default_instance();
}
inline ::dspb::DeleteRangeResponse* SchResponse::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_resp();
    set_has_delete_range();
    resp_.delete_range_ = new ::dspb::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.delete_range)
  return resp_.delete_range_;
}
inline ::dspb::DeleteRangeResponse* SchResponse::release_delete_range() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.delete_range)
  if (has_delete_range()) {
    clear_has_resp();
    ::dspb::DeleteRangeResponse* temp = resp_.delete_range_;
    resp_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_delete_range(::dspb::DeleteRangeResponse* delete_range) {
  clear_resp();
  if (delete_range) {
    set_has_delete_range();
    resp_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.delete_range)
}

// .dspb.TransferRangeLeaderResponse transfer_range_leader = 4;
inline bool SchResponse::has_transfer_range_leader() const {
  return resp_case() == kTransferRangeLeader;
}
inline void SchResponse::set_has_transfer_range_leader() {
  _oneof_case_[0] = kTransferRangeLeader;
}
inline void SchResponse::clear_transfer_range_leader() {
  if (has_transfer_range_leader()) {
    delete resp_.transfer_range_leader_;
    clear_has_resp();
  }
}
inline  const ::dspb::TransferRangeLeaderResponse& SchResponse::transfer_range_leader() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.transfer_range_leader)
  return has_transfer_range_leader()
      ? *resp_.transfer_range_leader_
      : ::dspb::TransferRangeLeaderResponse::default_instance();
}
inline ::dspb::TransferRangeLeaderResponse* SchResponse::mutable_transfer_range_leader() {
  if (!has_transfer_range_leader()) {
    clear_resp();
    set_has_transfer_range_leader();
    resp_.transfer_range_leader_ = new ::dspb::TransferRangeLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.transfer_range_leader)
  return resp_.transfer_range_leader_;
}
inline ::dspb::TransferRangeLeaderResponse* SchResponse::release_transfer_range_leader() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.transfer_range_leader)
  if (has_transfer_range_leader()) {
    clear_has_resp();
    ::dspb::TransferRangeLeaderResponse* temp = resp_.transfer_range_leader_;
    resp_.transfer_range_leader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_transfer_range_leader(::dspb::TransferRangeLeaderResponse* transfer_range_leader) {
  clear_resp();
  if (transfer_range_leader) {
    set_has_transfer_range_leader();
    resp_.transfer_range_leader_ = transfer_range_leader;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.transfer_range_leader)
}

// .dspb.GetPeerInfoResponse get_peer_info = 5;
inline bool SchResponse::has_get_peer_info() const {
  return resp_case() == kGetPeerInfo;
}
inline void SchResponse::set_has_get_peer_info() {
  _oneof_case_[0] = kGetPeerInfo;
}
inline void SchResponse::clear_get_peer_info() {
  if (has_get_peer_info()) {
    delete resp_.get_peer_info_;
    clear_has_resp();
  }
}
inline  const ::dspb::GetPeerInfoResponse& SchResponse::get_peer_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.get_peer_info)
  return has_get_peer_info()
      ? *resp_.get_peer_info_
      : ::dspb::GetPeerInfoResponse::default_instance();
}
inline ::dspb::GetPeerInfoResponse* SchResponse::mutable_get_peer_info() {
  if (!has_get_peer_info()) {
    clear_resp();
    set_has_get_peer_info();
    resp_.get_peer_info_ = new ::dspb::GetPeerInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.get_peer_info)
  return resp_.get_peer_info_;
}
inline ::dspb::GetPeerInfoResponse* SchResponse::release_get_peer_info() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.get_peer_info)
  if (has_get_peer_info()) {
    clear_has_resp();
    ::dspb::GetPeerInfoResponse* temp = resp_.get_peer_info_;
    resp_.get_peer_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_get_peer_info(::dspb::GetPeerInfoResponse* get_peer_info) {
  clear_resp();
  if (get_peer_info) {
    set_has_get_peer_info();
    resp_.get_peer_info_ = get_peer_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.get_peer_info)
}

// .dspb.IsAliveResponse is_alive = 6;
inline bool SchResponse::has_is_alive() const {
  return resp_case() == kIsAlive;
}
inline void SchResponse::set_has_is_alive() {
  _oneof_case_[0] = kIsAlive;
}
inline void SchResponse::clear_is_alive() {
  if (has_is_alive()) {
    delete resp_.is_alive_;
    clear_has_resp();
  }
}
inline  const ::dspb::IsAliveResponse& SchResponse::is_alive() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.is_alive)
  return has_is_alive()
      ? *resp_.is_alive_
      : ::dspb::IsAliveResponse::default_instance();
}
inline ::dspb::IsAliveResponse* SchResponse::mutable_is_alive() {
  if (!has_is_alive()) {
    clear_resp();
    set_has_is_alive();
    resp_.is_alive_ = new ::dspb::IsAliveResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.is_alive)
  return resp_.is_alive_;
}
inline ::dspb::IsAliveResponse* SchResponse::release_is_alive() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.is_alive)
  if (has_is_alive()) {
    clear_has_resp();
    ::dspb::IsAliveResponse* temp = resp_.is_alive_;
    resp_.is_alive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_is_alive(::dspb::IsAliveResponse* is_alive) {
  clear_resp();
  if (is_alive) {
    set_has_is_alive();
    resp_.is_alive_ = is_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.is_alive)
}

// .dspb.NodeInfoResponse node_info = 7;
inline bool SchResponse::has_node_info() const {
  return resp_case() == kNodeInfo;
}
inline void SchResponse::set_has_node_info() {
  _oneof_case_[0] = kNodeInfo;
}
inline void SchResponse::clear_node_info() {
  if (has_node_info()) {
    delete resp_.node_info_;
    clear_has_resp();
  }
}
inline  const ::dspb::NodeInfoResponse& SchResponse::node_info() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.node_info)
  return has_node_info()
      ? *resp_.node_info_
      : ::dspb::NodeInfoResponse::default_instance();
}
inline ::dspb::NodeInfoResponse* SchResponse::mutable_node_info() {
  if (!has_node_info()) {
    clear_resp();
    set_has_node_info();
    resp_.node_info_ = new ::dspb::NodeInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.node_info)
  return resp_.node_info_;
}
inline ::dspb::NodeInfoResponse* SchResponse::release_node_info() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.node_info)
  if (has_node_info()) {
    clear_has_resp();
    ::dspb::NodeInfoResponse* temp = resp_.node_info_;
    resp_.node_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_node_info(::dspb::NodeInfoResponse* node_info) {
  clear_resp();
  if (node_info) {
    set_has_node_info();
    resp_.node_info_ = node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.node_info)
}

// .dspb.ChangeRaftMemberResponse change_raft_member = 8;
inline bool SchResponse::has_change_raft_member() const {
  return resp_case() == kChangeRaftMember;
}
inline void SchResponse::set_has_change_raft_member() {
  _oneof_case_[0] = kChangeRaftMember;
}
inline void SchResponse::clear_change_raft_member() {
  if (has_change_raft_member()) {
    delete resp_.change_raft_member_;
    clear_has_resp();
  }
}
inline  const ::dspb::ChangeRaftMemberResponse& SchResponse::change_raft_member() const {
  // @@protoc_insertion_point(field_get:dspb.SchResponse.change_raft_member)
  return has_change_raft_member()
      ? *resp_.change_raft_member_
      : ::dspb::ChangeRaftMemberResponse::default_instance();
}
inline ::dspb::ChangeRaftMemberResponse* SchResponse::mutable_change_raft_member() {
  if (!has_change_raft_member()) {
    clear_resp();
    set_has_change_raft_member();
    resp_.change_raft_member_ = new ::dspb::ChangeRaftMemberResponse;
  }
  // @@protoc_insertion_point(field_mutable:dspb.SchResponse.change_raft_member)
  return resp_.change_raft_member_;
}
inline ::dspb::ChangeRaftMemberResponse* SchResponse::release_change_raft_member() {
  // @@protoc_insertion_point(field_release:dspb.SchResponse.change_raft_member)
  if (has_change_raft_member()) {
    clear_has_resp();
    ::dspb::ChangeRaftMemberResponse* temp = resp_.change_raft_member_;
    resp_.change_raft_member_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SchResponse::set_allocated_change_raft_member(::dspb::ChangeRaftMemberResponse* change_raft_member) {
  clear_resp();
  if (change_raft_member) {
    set_has_change_raft_member();
    resp_.change_raft_member_ = change_raft_member;
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.SchResponse.change_raft_member)
}

inline bool SchResponse::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
inline void SchResponse::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
inline SchResponse::RespCase SchResponse::resp_case() const {
  return SchResponse::RespCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateRangeRequest

// .basepb.Range range = 1;
inline bool CreateRangeRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void CreateRangeRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
inline const ::basepb::Range& CreateRangeRequest::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:dspb.CreateRangeRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
inline ::basepb::Range* CreateRangeRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.CreateRangeRequest.range)
  return range_;
}
inline ::basepb::Range* CreateRangeRequest::release_range() {
  // @@protoc_insertion_point(field_release:dspb.CreateRangeRequest.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void CreateRangeRequest::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.CreateRangeRequest.range)
}

// uint64 leader = 2;
inline void CreateRangeRequest::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateRangeRequest::leader() const {
  // @@protoc_insertion_point(field_get:dspb.CreateRangeRequest.leader)
  return leader_;
}
inline void CreateRangeRequest::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:dspb.CreateRangeRequest.leader)
}

// -------------------------------------------------------------------

// CreateRangeResponse

// -------------------------------------------------------------------

// DeleteRangeRequest

// uint64 range_id = 1;
inline void DeleteRangeRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeleteRangeRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.DeleteRangeRequest.range_id)
  return range_id_;
}
inline void DeleteRangeRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.DeleteRangeRequest.range_id)
}

// uint64 peer_id = 2;
inline void DeleteRangeRequest::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeleteRangeRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:dspb.DeleteRangeRequest.peer_id)
  return peer_id_;
}
inline void DeleteRangeRequest::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.DeleteRangeRequest.peer_id)
}

// -------------------------------------------------------------------

// DeleteRangeResponse

// -------------------------------------------------------------------

// TransferRangeLeaderRequest

// uint64 range_id = 1;
inline void TransferRangeLeaderRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransferRangeLeaderRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.TransferRangeLeaderRequest.range_id)
  return range_id_;
}
inline void TransferRangeLeaderRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.TransferRangeLeaderRequest.range_id)
}

// -------------------------------------------------------------------

// TransferRangeLeaderResponse

// -------------------------------------------------------------------

// GetPeerInfoRequest

// uint64 range_id = 1;
inline void GetPeerInfoRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetPeerInfoRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoRequest.range_id)
  return range_id_;
}
inline void GetPeerInfoRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoRequest.range_id)
}

// -------------------------------------------------------------------

// GetPeerInfoResponse

// .basepb.Replica replica = 1;
inline bool GetPeerInfoResponse::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
inline void GetPeerInfoResponse::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) delete replica_;
  replica_ = NULL;
}
inline const ::basepb::Replica& GetPeerInfoResponse::replica() const {
  const ::basepb::Replica* p = replica_;
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Replica*>(
      &::basepb::_Replica_default_instance_);
}
inline ::basepb::Replica* GetPeerInfoResponse::mutable_replica() {
  
  if (replica_ == NULL) {
    replica_ = new ::basepb::Replica;
  }
  // @@protoc_insertion_point(field_mutable:dspb.GetPeerInfoResponse.replica)
  return replica_;
}
inline ::basepb::Replica* GetPeerInfoResponse::release_replica() {
  // @@protoc_insertion_point(field_release:dspb.GetPeerInfoResponse.replica)
  
  ::basepb::Replica* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void GetPeerInfoResponse::set_allocated_replica(::basepb::Replica* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.GetPeerInfoResponse.replica)
}

// uint64 index = 2;
inline void GetPeerInfoResponse::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetPeerInfoResponse::index() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.index)
  return index_;
}
inline void GetPeerInfoResponse::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoResponse.index)
}

// uint64 term = 3;
inline void GetPeerInfoResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetPeerInfoResponse::term() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.term)
  return term_;
}
inline void GetPeerInfoResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoResponse.term)
}

// uint64 commit = 4;
inline void GetPeerInfoResponse::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetPeerInfoResponse::commit() const {
  // @@protoc_insertion_point(field_get:dspb.GetPeerInfoResponse.commit)
  return commit_;
}
inline void GetPeerInfoResponse::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:dspb.GetPeerInfoResponse.commit)
}

// -------------------------------------------------------------------

// IsAliveRequest

// -------------------------------------------------------------------

// IsAliveResponse

// bool alive = 1;
inline void IsAliveResponse::clear_alive() {
  alive_ = false;
}
inline bool IsAliveResponse::alive() const {
  // @@protoc_insertion_point(field_get:dspb.IsAliveResponse.alive)
  return alive_;
}
inline void IsAliveResponse::set_alive(bool value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:dspb.IsAliveResponse.alive)
}

// -------------------------------------------------------------------

// NodeInfoRequest

// -------------------------------------------------------------------

// RangeStats

// uint64 write_bytes_per_sec = 1;
inline void RangeStats::clear_write_bytes_per_sec() {
  write_bytes_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::write_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.write_bytes_per_sec)
  return write_bytes_per_sec_;
}
inline void RangeStats::set_write_bytes_per_sec(::google::protobuf::uint64 value) {
  
  write_bytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.write_bytes_per_sec)
}

// uint64 write_keys_per_sec = 2;
inline void RangeStats::clear_write_keys_per_sec() {
  write_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::write_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.write_keys_per_sec)
  return write_keys_per_sec_;
}
inline void RangeStats::set_write_keys_per_sec(::google::protobuf::uint64 value) {
  
  write_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.write_keys_per_sec)
}

// uint64 read_bytess_per_sec = 3;
inline void RangeStats::clear_read_bytess_per_sec() {
  read_bytess_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::read_bytess_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.read_bytess_per_sec)
  return read_bytess_per_sec_;
}
inline void RangeStats::set_read_bytess_per_sec(::google::protobuf::uint64 value) {
  
  read_bytess_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.read_bytess_per_sec)
}

// uint64 read_keys_per_sec = 4;
inline void RangeStats::clear_read_keys_per_sec() {
  read_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::read_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.read_keys_per_sec)
  return read_keys_per_sec_;
}
inline void RangeStats::set_read_keys_per_sec(::google::protobuf::uint64 value) {
  
  read_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.read_keys_per_sec)
}

// uint64 approximate_size = 5;
inline void RangeStats::clear_approximate_size() {
  approximate_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::approximate_size() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.approximate_size)
  return approximate_size_;
}
inline void RangeStats::set_approximate_size(::google::protobuf::uint64 value) {
  
  approximate_size_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.approximate_size)
}

// uint64 kv_count = 6;
inline void RangeStats::clear_kv_count() {
  kv_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::kv_count() const {
  // @@protoc_insertion_point(field_get:dspb.RangeStats.kv_count)
  return kv_count_;
}
inline void RangeStats::set_kv_count(::google::protobuf::uint64 value) {
  
  kv_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeStats.kv_count)
}

// -------------------------------------------------------------------

// RangeInfo

// .basepb.Range range = 1;
inline bool RangeInfo::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void RangeInfo::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
inline const ::basepb::Range& RangeInfo::range() const {
  const ::basepb::Range* p = range_;
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.range)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Range*>(
      &::basepb::_Range_default_instance_);
}
inline ::basepb::Range* RangeInfo::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::basepb::Range;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeInfo.range)
  return range_;
}
inline ::basepb::Range* RangeInfo::release_range() {
  // @@protoc_insertion_point(field_release:dspb.RangeInfo.range)
  
  ::basepb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void RangeInfo::set_allocated_range(::basepb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeInfo.range)
}

// .dspb.RangeStats stats = 2;
inline bool RangeInfo::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void RangeInfo::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::dspb::RangeStats& RangeInfo::stats() const {
  const ::dspb::RangeStats* p = stats_;
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::RangeStats*>(
      &::dspb::_RangeStats_default_instance_);
}
inline ::dspb::RangeStats* RangeInfo::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::dspb::RangeStats;
  }
  // @@protoc_insertion_point(field_mutable:dspb.RangeInfo.stats)
  return stats_;
}
inline ::dspb::RangeStats* RangeInfo::release_stats() {
  // @@protoc_insertion_point(field_release:dspb.RangeInfo.stats)
  
  ::dspb::RangeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void RangeInfo::set_allocated_stats(::dspb::RangeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.RangeInfo.stats)
}

// uint64 term = 3;
inline void RangeInfo::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeInfo::term() const {
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.term)
  return term_;
}
inline void RangeInfo::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:dspb.RangeInfo.term)
}

// repeated .basepb.PeerStatus peers_status = 4;
inline int RangeInfo::peers_status_size() const {
  return peers_status_.size();
}
inline void RangeInfo::clear_peers_status() {
  peers_status_.Clear();
}
inline const ::basepb::PeerStatus& RangeInfo::peers_status(int index) const {
  // @@protoc_insertion_point(field_get:dspb.RangeInfo.peers_status)
  return peers_status_.Get(index);
}
inline ::basepb::PeerStatus* RangeInfo::mutable_peers_status(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.RangeInfo.peers_status)
  return peers_status_.Mutable(index);
}
inline ::basepb::PeerStatus* RangeInfo::add_peers_status() {
  // @@protoc_insertion_point(field_add:dspb.RangeInfo.peers_status)
  return peers_status_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >*
RangeInfo::mutable_peers_status() {
  // @@protoc_insertion_point(field_mutable_list:dspb.RangeInfo.peers_status)
  return &peers_status_;
}
inline const ::google::protobuf::RepeatedPtrField< ::basepb::PeerStatus >&
RangeInfo::peers_status() const {
  // @@protoc_insertion_point(field_list:dspb.RangeInfo.peers_status)
  return peers_status_;
}

// -------------------------------------------------------------------

// NodeStats

// uint32 range_count = 1;
inline void NodeStats::clear_range_count() {
  range_count_ = 0u;
}
inline ::google::protobuf::uint32 NodeStats::range_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.range_count)
  return range_count_;
}
inline void NodeStats::set_range_count(::google::protobuf::uint32 value) {
  
  range_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.range_count)
}

// uint32 range_split_count = 2;
inline void NodeStats::clear_range_split_count() {
  range_split_count_ = 0u;
}
inline ::google::protobuf::uint32 NodeStats::range_split_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.range_split_count)
  return range_split_count_;
}
inline void NodeStats::set_range_split_count(::google::protobuf::uint32 value) {
  
  range_split_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.range_split_count)
}

// uint32 snap_sending_count = 3;
inline void NodeStats::clear_snap_sending_count() {
  snap_sending_count_ = 0u;
}
inline ::google::protobuf::uint32 NodeStats::snap_sending_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.snap_sending_count)
  return snap_sending_count_;
}
inline void NodeStats::set_snap_sending_count(::google::protobuf::uint32 value) {
  
  snap_sending_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.snap_sending_count)
}

// uint32 snap_applying_count = 4;
inline void NodeStats::clear_snap_applying_count() {
  snap_applying_count_ = 0u;
}
inline ::google::protobuf::uint32 NodeStats::snap_applying_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.snap_applying_count)
  return snap_applying_count_;
}
inline void NodeStats::set_snap_applying_count(::google::protobuf::uint32 value) {
  
  snap_applying_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.snap_applying_count)
}

// uint32 range_leader_count = 6;
inline void NodeStats::clear_range_leader_count() {
  range_leader_count_ = 0u;
}
inline ::google::protobuf::uint32 NodeStats::range_leader_count() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.range_leader_count)
  return range_leader_count_;
}
inline void NodeStats::set_range_leader_count(::google::protobuf::uint32 value) {
  
  range_leader_count_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.range_leader_count)
}

// uint64 capacity = 7;
inline void NodeStats::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStats::capacity() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.capacity)
  return capacity_;
}
inline void NodeStats::set_capacity(::google::protobuf::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.capacity)
}

// uint64 used_size = 8;
inline void NodeStats::clear_used_size() {
  used_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStats::used_size() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.used_size)
  return used_size_;
}
inline void NodeStats::set_used_size(::google::protobuf::uint64 value) {
  
  used_size_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.used_size)
}

// uint64 write_bytes_per_sec = 10;
inline void NodeStats::clear_write_bytes_per_sec() {
  write_bytes_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStats::write_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.write_bytes_per_sec)
  return write_bytes_per_sec_;
}
inline void NodeStats::set_write_bytes_per_sec(::google::protobuf::uint64 value) {
  
  write_bytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.write_bytes_per_sec)
}

// uint64 write_keys_per_sec = 11;
inline void NodeStats::clear_write_keys_per_sec() {
  write_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStats::write_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.write_keys_per_sec)
  return write_keys_per_sec_;
}
inline void NodeStats::set_write_keys_per_sec(::google::protobuf::uint64 value) {
  
  write_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.write_keys_per_sec)
}

// uint64 read_bytess_per_sec = 12;
inline void NodeStats::clear_read_bytess_per_sec() {
  read_bytess_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStats::read_bytess_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.read_bytess_per_sec)
  return read_bytess_per_sec_;
}
inline void NodeStats::set_read_bytess_per_sec(::google::protobuf::uint64 value) {
  
  read_bytess_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.read_bytess_per_sec)
}

// uint64 read_keys_per_sec = 13;
inline void NodeStats::clear_read_keys_per_sec() {
  read_keys_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStats::read_keys_per_sec() const {
  // @@protoc_insertion_point(field_get:dspb.NodeStats.read_keys_per_sec)
  return read_keys_per_sec_;
}
inline void NodeStats::set_read_keys_per_sec(::google::protobuf::uint64 value) {
  
  read_keys_per_sec_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeStats.read_keys_per_sec)
}

// -------------------------------------------------------------------

// NodeInfoResponse

// uint64 node_id = 1;
inline void NodeInfoResponse::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeInfoResponse::node_id() const {
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.node_id)
  return node_id_;
}
inline void NodeInfoResponse::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.NodeInfoResponse.node_id)
}

// .dspb.NodeStats stats = 2;
inline bool NodeInfoResponse::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void NodeInfoResponse::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::dspb::NodeStats& NodeInfoResponse::stats() const {
  const ::dspb::NodeStats* p = stats_;
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::dspb::NodeStats*>(
      &::dspb::_NodeStats_default_instance_);
}
inline ::dspb::NodeStats* NodeInfoResponse::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::dspb::NodeStats;
  }
  // @@protoc_insertion_point(field_mutable:dspb.NodeInfoResponse.stats)
  return stats_;
}
inline ::dspb::NodeStats* NodeInfoResponse::release_stats() {
  // @@protoc_insertion_point(field_release:dspb.NodeInfoResponse.stats)
  
  ::dspb::NodeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void NodeInfoResponse::set_allocated_stats(::dspb::NodeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.NodeInfoResponse.stats)
}

// repeated uint64 isolated_replicas = 3;
inline int NodeInfoResponse::isolated_replicas_size() const {
  return isolated_replicas_.size();
}
inline void NodeInfoResponse::clear_isolated_replicas() {
  isolated_replicas_.Clear();
}
inline ::google::protobuf::uint64 NodeInfoResponse::isolated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.isolated_replicas)
  return isolated_replicas_.Get(index);
}
inline void NodeInfoResponse::set_isolated_replicas(int index, ::google::protobuf::uint64 value) {
  isolated_replicas_.Set(index, value);
  // @@protoc_insertion_point(field_set:dspb.NodeInfoResponse.isolated_replicas)
}
inline void NodeInfoResponse::add_isolated_replicas(::google::protobuf::uint64 value) {
  isolated_replicas_.Add(value);
  // @@protoc_insertion_point(field_add:dspb.NodeInfoResponse.isolated_replicas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NodeInfoResponse::isolated_replicas() const {
  // @@protoc_insertion_point(field_list:dspb.NodeInfoResponse.isolated_replicas)
  return isolated_replicas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NodeInfoResponse::mutable_isolated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:dspb.NodeInfoResponse.isolated_replicas)
  return &isolated_replicas_;
}

// repeated .dspb.RangeInfo range_infos = 4;
inline int NodeInfoResponse::range_infos_size() const {
  return range_infos_.size();
}
inline void NodeInfoResponse::clear_range_infos() {
  range_infos_.Clear();
}
inline const ::dspb::RangeInfo& NodeInfoResponse::range_infos(int index) const {
  // @@protoc_insertion_point(field_get:dspb.NodeInfoResponse.range_infos)
  return range_infos_.Get(index);
}
inline ::dspb::RangeInfo* NodeInfoResponse::mutable_range_infos(int index) {
  // @@protoc_insertion_point(field_mutable:dspb.NodeInfoResponse.range_infos)
  return range_infos_.Mutable(index);
}
inline ::dspb::RangeInfo* NodeInfoResponse::add_range_infos() {
  // @@protoc_insertion_point(field_add:dspb.NodeInfoResponse.range_infos)
  return range_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo >*
NodeInfoResponse::mutable_range_infos() {
  // @@protoc_insertion_point(field_mutable_list:dspb.NodeInfoResponse.range_infos)
  return &range_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dspb::RangeInfo >&
NodeInfoResponse::range_infos() const {
  // @@protoc_insertion_point(field_list:dspb.NodeInfoResponse.range_infos)
  return range_infos_;
}

// -------------------------------------------------------------------

// ChangeRaftMemberRequest

// uint64 range_id = 1;
inline void ChangeRaftMemberRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChangeRaftMemberRequest::range_id() const {
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.range_id)
  return range_id_;
}
inline void ChangeRaftMemberRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:dspb.ChangeRaftMemberRequest.range_id)
}

// .basepb.RangeEpoch range_epoch = 2;
inline bool ChangeRaftMemberRequest::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
inline void ChangeRaftMemberRequest::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
inline const ::basepb::RangeEpoch& ChangeRaftMemberRequest::range_epoch() const {
  const ::basepb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
inline ::basepb::RangeEpoch* ChangeRaftMemberRequest::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ChangeRaftMemberRequest.range_epoch)
  return range_epoch_;
}
inline ::basepb::RangeEpoch* ChangeRaftMemberRequest::release_range_epoch() {
  // @@protoc_insertion_point(field_release:dspb.ChangeRaftMemberRequest.range_epoch)
  
  ::basepb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
inline void ChangeRaftMemberRequest::set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ChangeRaftMemberRequest.range_epoch)
}

// .dspb.ChangeRaftMemberRequest.ChangeType change_type = 3;
inline void ChangeRaftMemberRequest::clear_change_type() {
  change_type_ = 0;
}
inline ::dspb::ChangeRaftMemberRequest_ChangeType ChangeRaftMemberRequest::change_type() const {
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.change_type)
  return static_cast< ::dspb::ChangeRaftMemberRequest_ChangeType >(change_type_);
}
inline void ChangeRaftMemberRequest::set_change_type(::dspb::ChangeRaftMemberRequest_ChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:dspb.ChangeRaftMemberRequest.change_type)
}

// .basepb.Peer target_peer = 4;
inline bool ChangeRaftMemberRequest::has_target_peer() const {
  return this != internal_default_instance() && target_peer_ != NULL;
}
inline void ChangeRaftMemberRequest::clear_target_peer() {
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) delete target_peer_;
  target_peer_ = NULL;
}
inline const ::basepb::Peer& ChangeRaftMemberRequest::target_peer() const {
  const ::basepb::Peer* p = target_peer_;
  // @@protoc_insertion_point(field_get:dspb.ChangeRaftMemberRequest.target_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
inline ::basepb::Peer* ChangeRaftMemberRequest::mutable_target_peer() {
  
  if (target_peer_ == NULL) {
    target_peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:dspb.ChangeRaftMemberRequest.target_peer)
  return target_peer_;
}
inline ::basepb::Peer* ChangeRaftMemberRequest::release_target_peer() {
  // @@protoc_insertion_point(field_release:dspb.ChangeRaftMemberRequest.target_peer)
  
  ::basepb::Peer* temp = target_peer_;
  target_peer_ = NULL;
  return temp;
}
inline void ChangeRaftMemberRequest::set_allocated_target_peer(::basepb::Peer* target_peer) {
  delete target_peer_;
  target_peer_ = target_peer;
  if (target_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dspb.ChangeRaftMemberRequest.target_peer)
}

// -------------------------------------------------------------------

// ChangeRaftMemberResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dspb::ChangeRaftMemberRequest_ChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dspb::ChangeRaftMemberRequest_ChangeType>() {
  return ::dspb::ChangeRaftMemberRequest_ChangeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dspb_2fschedule_2eproto__INCLUDED
