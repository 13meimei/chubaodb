// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basepb/basepb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "basepb/basepb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace basepb {
class RangePeerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangePeer>
     _instance;
} _RangePeer_default_instance_;
class NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Node>
     _instance;
} _Node_default_instance_;
class PeerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Peer>
     _instance;
} _Peer_default_instance_;
class PeerStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PeerStatus>
     _instance;
} _PeerStatus_default_instance_;
class ReplicaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Replica>
     _instance;
} _Replica_default_instance_;
class RangeEpochDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeEpoch>
     _instance;
} _RangeEpoch_default_instance_;
class RangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Range>
     _instance;
} _Range_default_instance_;
class LeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Leader>
     _instance;
} _Leader_default_instance_;
class DataBaseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DataBase>
     _instance;
} _DataBase_default_instance_;
class ColumnDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Column>
     _instance;
} _Column_default_instance_;
class PrimaryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Primary>
     _instance;
} _Primary_default_instance_;
class TableEpochDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TableEpoch>
     _instance;
} _TableEpoch_default_instance_;
class IndexDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Index>
     _instance;
} _Index_default_instance_;
class TableDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Table>
     _instance;
} _Table_default_instance_;
class WatcherEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WatcherEvent>
     _instance;
} _WatcherEvent_default_instance_;

namespace protobuf_basepb_2fbasepb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePeer, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePeer, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePeer, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, raft_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, admin_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, range_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, last_update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, down_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, snapshotting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatus, applied_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, start_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, end_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEpoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEpoch, conf_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEpoch, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, start_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, end_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, range_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, primary_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, range_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, store_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, parent_range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, node_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBase, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBase, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBase, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBase, create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, unsigned__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, nullable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, default_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, auto_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, col_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Primary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Primary, column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Primary, next_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEpoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEpoch, conf_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEpoch, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, col_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, index_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, expand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, indexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, replica_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, data_range_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, watcher_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatcherEvent, version_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RangePeer)},
  { 8, -1, sizeof(Node)},
  { 23, -1, sizeof(Peer)},
  { 31, -1, sizeof(PeerStatus)},
  { 42, -1, sizeof(Replica)},
  { 51, -1, sizeof(RangeEpoch)},
  { 58, -1, sizeof(Range)},
  { 76, -1, sizeof(Leader)},
  { 84, -1, sizeof(DataBase)},
  { 93, -1, sizeof(Column)},
  { 113, -1, sizeof(Primary)},
  { 120, -1, sizeof(TableEpoch)},
  { 127, -1, sizeof(Index)},
  { 138, -1, sizeof(Table)},
  { 157, -1, sizeof(WatcherEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangePeer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Replica_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeEpoch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Leader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Column_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Primary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableEpoch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatcherEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "basepb/basepb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RangePeer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangePeer_default_instance_);_Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Node_default_instance_);_Peer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Peer_default_instance_);_PeerStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PeerStatus_default_instance_);_Replica_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Replica_default_instance_);_RangeEpoch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeEpoch_default_instance_);_Range_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Range_default_instance_);_Leader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Leader_default_instance_);_DataBase_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DataBase_default_instance_);_Column_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Column_default_instance_);_Primary_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Primary_default_instance_);_TableEpoch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TableEpoch_default_instance_);_Index_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Index_default_instance_);_Table_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Table_default_instance_);_WatcherEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WatcherEvent_default_instance_);_PeerStatus_default_instance_._instance.get_mutable()->peer_ = const_cast< ::basepb::Peer*>(
      ::basepb::Peer::internal_default_instance());
  _Replica_default_instance_._instance.get_mutable()->peer_ = const_cast< ::basepb::Peer*>(
      ::basepb::Peer::internal_default_instance());
  _Range_default_instance_._instance.get_mutable()->range_epoch_ = const_cast< ::basepb::RangeEpoch*>(
      ::basepb::RangeEpoch::internal_default_instance());
  _Primary_default_instance_._instance.get_mutable()->next_ = const_cast< ::basepb::Primary*>(
      ::basepb::Primary::internal_default_instance());
  _Table_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::basepb::TableEpoch*>(
      ::basepb::TableEpoch::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023basepb/basepb.proto\022\006basepb\"U\n\tRangePe"
      "er\022\020\n\010range_id\030\001 \001(\004\022\017\n\007peer_id\030\002 \001(\004\022%\n"
      "\005state\030\003 \001(\0162\026.basepb.RangePeerState\"\360\001\n"
      "\004Node\022\n\n\002id\030\001 \001(\004\022\n\n\002ip\030\002 \001(\t\022\023\n\013server_"
      "port\030\003 \001(\r\022\021\n\traft_port\030\004 \001(\r\022\022\n\nadmin_p"
      "ort\030\005 \001(\r\022 \n\005state\030\006 \001(\0162\021.basepb.NodeSt"
      "ate\022\017\n\007version\030\007 \001(\003\022&\n\013range_peers\030\010 \003("
      "\0132\021.basepb.RangePeer\022\030\n\020last_update_time"
      "\030\t \001(\003\022\037\n\004type\030\n \001(\0162\021.basepb.StoreType\""
      "C\n\004Peer\022\n\n\002id\030\001 \001(\004\022\017\n\007node_id\030\002 \001(\004\022\036\n\004"
      "type\030\003 \001(\0162\020.basepb.PeerType\"\204\001\n\nPeerSta"
      "tus\022\032\n\004peer\030\001 \001(\0132\014.basepb.Peer\022\r\n\005index"
      "\030\002 \001(\004\022\016\n\006commit\030\003 \001(\004\022\024\n\014down_seconds\030\004"
      " \001(\004\022\024\n\014snapshotting\030\005 \001(\010\022\017\n\007applied\030\006 "
      "\001(\004\"[\n\007Replica\022\020\n\010range_id\030\001 \001(\004\022\032\n\004peer"
      "\030\002 \001(\0132\014.basepb.Peer\022\021\n\tstart_key\030\003 \001(\014\022"
      "\017\n\007end_key\030\004 \001(\014\"/\n\nRangeEpoch\022\020\n\010conf_v"
      "er\030\001 \001(\004\022\017\n\007version\030\002 \001(\004\"\311\002\n\005Range\022\n\n\002i"
      "d\030\001 \001(\004\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007end_key\030\003 "
      "\001(\014\022\'\n\013range_epoch\030\004 \001(\0132\022.basepb.RangeE"
      "poch\022\033\n\005peers\030\005 \003(\0132\014.basepb.Peer\022\r\n\005db_"
      "id\030\006 \001(\004\022\020\n\010table_id\030\007 \001(\004\022$\n\014primary_ke"
      "ys\030\010 \003(\0132\016.basepb.Column\022\016\n\006leader\030\t \001(\004"
      "\022%\n\nrange_type\030\n \001(\0162\021.basepb.RangeType\022"
      "%\n\nstore_type\030\013 \001(\0162\021.basepb.StoreType\022\014"
      "\n\004term\030\014 \001(\004\022\027\n\017parent_range_id\030\r \001(\004\">\n"
      "\006Leader\022\020\n\010range_id\030\001 \001(\004\022\017\n\007node_id\030\002 \001"
      "(\004\022\021\n\tnode_addr\030\003 \001(\t\"J\n\010DataBase\022\014\n\004nam"
      "e\030\001 \001(\t\022\n\n\002id\030\002 \001(\004\022\017\n\007version\030\003 \001(\004\022\023\n\013"
      "create_time\030\004 \001(\003\"\273\002\n\006Column\022\014\n\004name\030\001 \001"
      "(\t\022\n\n\002id\030\002 \001(\004\022#\n\tdata_type\030\003 \001(\0162\020.base"
      "pb.DataType\022\020\n\010unsigned\030\004 \001(\010\022\r\n\005scale\030\005"
      " \001(\005\022\021\n\tprecision\030\006 \001(\005\022\020\n\010nullable\030\007 \001("
      "\010\022\023\n\013primary_key\030\010 \001(\004\022\017\n\007ordinal\030\t \001(\005\022"
      "\r\n\005index\030\n \001(\010\022\025\n\rdefault_value\030\013 \001(\014\022\022\n"
      "\nproperties\030\014 \001(\t\022\026\n\016auto_increment\030\r \001("
      "\010\022\016\n\006unique\030\016 \001(\010\022$\n\010col_type\030\017 \001(\0162\022.ba"
      "sepb.ColumnType\"=\n\007Primary\022\023\n\013column_nam"
      "e\030\001 \001(\t\022\035\n\004next\030\002 \001(\0132\017.basepb.Primary\"/"
      "\n\nTableEpoch\022\020\n\010conf_ver\030\001 \001(\004\022\017\n\007versio"
      "n\030\002 \001(\004\"|\n\005Index\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001"
      "(\t\022\021\n\tcol_names\030\003 \003(\t\022\016\n\006unique\030\004 \001(\010\022\017\n"
      "\007comment\030\005 \001(\t\022%\n\nindex_type\030\006 \001(\0162\021.bas"
      "epb.IndexType\"\321\002\n\005Table\022\014\n\004name\030\001 \001(\t\022\017\n"
      "\007db_name\030\002 \001(\t\022\r\n\005db_id\030\003 \001(\004\022\n\n\002id\030\004 \001("
      "\004\022\022\n\nproperties\030\005 \001(\t\022\037\n\007columns\030\006 \003(\0132\016"
      ".basepb.Column\022!\n\005epoch\030\007 \001(\0132\022.basepb.T"
      "ableEpoch\022\023\n\013create_time\030\010 \001(\003\022#\n\006status"
      "\030\t \001(\0162\023.basepb.TableStatus\022\016\n\006expand\030\n "
      "\001(\014\022\036\n\007indexes\030\013 \003(\0132\r.basepb.Index\022\037\n\004t"
      "ype\030\014 \001(\0162\021.basepb.StoreType\022\023\n\013replica_"
      "num\030\r \001(\004\022\026\n\016data_range_num\030\016 \001(\004\"\304\001\n\014Wa"
      "tcherEvent\022)\n\014watcher_type\030\001 \001(\0162\023.basep"
      "b.WatcherType\022%\n\nevent_type\030\002 \001(\0162\021.base"
      "pb.EventType\022\017\n\007node_id\030\003 \001(\004\022\r\n\005db_id\030\004"
      " \001(\004\022\020\n\010table_id\030\005 \001(\004\022\020\n\010range_id\030\006 \001(\004"
      "\022\r\n\005value\030\007 \001(\014\022\017\n\007version\030\010 \001(\004*\231\002\n\010Dat"
      "aType\022\013\n\007Invalid\020\000\022\013\n\007TinyInt\020\001\022\014\n\010Small"
      "Int\020\002\022\r\n\tMediumInt\020\003\022\007\n\003Int\020\004\022\n\n\006BigInt\020"
      "\005\022\007\n\003Bit\020\006\022\t\n\005Float\020\n\022\n\n\006Double\020\013\022\013\n\007Dec"
      "imal\020\014\022\010\n\004Date\020\024\022\r\n\tTimeStamp\020\025\022\014\n\010DateT"
      "ime\020\026\022\010\n\004Time\020\027\022\010\n\004Year\020\030\022\013\n\007Varchar\020\036\022\n"
      "\n\006Binary\020\037\022\010\n\004Char\020 \022\t\n\005NChar\020!\022\010\n\004Text\020"
      "\"\022\r\n\tVarBinary\020#\022\010\n\004Json\020(\022\010\n\004Null\0202*L\n\t"
      "StoreType\022\021\n\rStore_Invalid\020\000\022\r\n\tStore_Ho"
      "t\020\001\022\016\n\nStore_Warm\020\002\022\r\n\tStore_Mix\020\003*9\n\tRa"
      "ngeType\022\017\n\013RNG_Invalid\020\000\022\r\n\tRNG_Index\020\001\022"
      "\014\n\010RNG_Data\020\002*,\n\nColumnType\022\016\n\nCOL_Commo"
      "n\020\000\022\016\n\nCOL_System\020\001*X\n\tNodeState\022\r\n\tN_In"
      "valid\020\000\022\014\n\010N_Online\020\001\022\r\n\tN_Offline\020\002\022\016\n\n"
      "N_Updating\020\003\022\017\n\013N_Offlining\020\004*U\n\016RangePe"
      "erState\022\017\n\013RPS_Invalid\020\000\022\020\n\014RPS_NoLeader"
      "\020\001\022\020\n\014RPS_Follower\020\002\022\016\n\nRPS_Leader\020\003*K\n\010"
      "PeerType\022\024\n\020PeerType_Invalid\020\000\022\023\n\017PeerTy"
      "pe_Normal\020\001\022\024\n\020PeerType_Learner\020\002*1\n\013Tab"
      "leStatus\022\020\n\014TableInvalid\020\000\022\020\n\014TableRunni"
      "ng\020\001*3\n\tIndexType\022\r\n\tI_Invalid\020\000\022\013\n\007I_Bt"
      "ree\020\001\022\n\n\006I_Hash\020\002*N\n\tEventType\022\026\n\022Event_"
      "Type_Invalid\020\000\022\022\n\016Event_Type_PUT\020\001\022\025\n\021Ev"
      "ent_Type_DELETE\020\002*\211\001\n\013WatcherType\022\030\n\024Wat"
      "cher_Type_Invalid\020\000\022\025\n\021Watcher_Type_Node"
      "\020\001\022\031\n\025Watcher_Type_Database\020\002\022\026\n\022Watcher"
      "_Type_Table\020\003\022\026\n\022Watcher_Type_Range\020\004b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "basepb/basepb.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_basepb_2fbasepb_2eproto

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoreType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[1];
}
bool StoreType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RangeType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[2];
}
bool RangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColumnType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[3];
}
bool ColumnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeState_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[4];
}
bool NodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RangePeerState_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[5];
}
bool RangePeerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PeerType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[6];
}
bool PeerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TableStatus_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[7];
}
bool TableStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IndexType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[8];
}
bool IndexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[9];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WatcherType_descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_enum_descriptors[10];
}
bool WatcherType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangePeer::kRangeIdFieldNumber;
const int RangePeer::kPeerIdFieldNumber;
const int RangePeer::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangePeer::RangePeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.RangePeer)
}
RangePeer::RangePeer(const RangePeer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:basepb.RangePeer)
}

void RangePeer::SharedCtor() {
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(state_));
  _cached_size_ = 0;
}

RangePeer::~RangePeer() {
  // @@protoc_insertion_point(destructor:basepb.RangePeer)
  SharedDtor();
}

void RangePeer::SharedDtor() {
}

void RangePeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangePeer::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangePeer& RangePeer::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangePeer* RangePeer::New(::google::protobuf::Arena* arena) const {
  RangePeer* n = new RangePeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.RangePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool RangePeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.RangePeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 peer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangePeerState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::basepb::RangePeerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.RangePeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.RangePeer)
  return false;
#undef DO_
}

void RangePeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.RangePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // uint64 peer_id = 2;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->peer_id(), output);
  }

  // .basepb.RangePeerState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.RangePeer)
}

::google::protobuf::uint8* RangePeer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.RangePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // uint64 peer_id = 2;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->peer_id(), target);
  }

  // .basepb.RangePeerState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.RangePeer)
  return target;
}

size_t RangePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.RangePeer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 peer_id = 2;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->peer_id());
  }

  // .basepb.RangePeerState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangePeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.RangePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const RangePeer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangePeer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.RangePeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.RangePeer)
    MergeFrom(*source);
  }
}

void RangePeer::MergeFrom(const RangePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.RangePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void RangePeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.RangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangePeer::CopyFrom(const RangePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.RangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePeer::IsInitialized() const {
  return true;
}

void RangePeer::Swap(RangePeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangePeer::InternalSwap(RangePeer* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  swap(peer_id_, other->peer_id_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangePeer::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangePeer

// uint64 range_id = 1;
void RangePeer::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangePeer::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.RangePeer.range_id)
  return range_id_;
}
void RangePeer::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangePeer.range_id)
}

// uint64 peer_id = 2;
void RangePeer::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangePeer::peer_id() const {
  // @@protoc_insertion_point(field_get:basepb.RangePeer.peer_id)
  return peer_id_;
}
void RangePeer::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangePeer.peer_id)
}

// .basepb.RangePeerState state = 3;
void RangePeer::clear_state() {
  state_ = 0;
}
::basepb::RangePeerState RangePeer::state() const {
  // @@protoc_insertion_point(field_get:basepb.RangePeer.state)
  return static_cast< ::basepb::RangePeerState >(state_);
}
void RangePeer::set_state(::basepb::RangePeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangePeer.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kIpFieldNumber;
const int Node::kServerPortFieldNumber;
const int Node::kRaftPortFieldNumber;
const int Node::kAdminPortFieldNumber;
const int Node::kStateFieldNumber;
const int Node::kVersionFieldNumber;
const int Node::kRangePeersFieldNumber;
const int Node::kLastUpdateTimeFieldNumber;
const int Node::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      range_peers_(from.range_peers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:basepb.Node)
}

void Node::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:basepb.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_peers_.Clear();
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Node.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 raft_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raft_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 admin_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.NodeState state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::basepb::NodeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.RangePeer range_peers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_update_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.StoreType type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::basepb::StoreType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Node.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

  // uint32 raft_port = 4;
  if (this->raft_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raft_port(), output);
  }

  // uint32 admin_port = 5;
  if (this->admin_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->admin_port(), output);
  }

  // .basepb.NodeState state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // int64 version = 7;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->version(), output);
  }

  // repeated .basepb.RangePeer range_peers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->range_peers(static_cast<int>(i)), output);
  }

  // int64 last_update_time = 9;
  if (this->last_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->last_update_time(), output);
  }

  // .basepb.StoreType type = 10;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Node.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }

  // uint32 raft_port = 4;
  if (this->raft_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raft_port(), target);
  }

  // uint32 admin_port = 5;
  if (this->admin_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->admin_port(), target);
  }

  // .basepb.NodeState state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // int64 version = 7;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->version(), target);
  }

  // repeated .basepb.RangePeer range_peers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->range_peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->range_peers(static_cast<int>(i)), deterministic, target);
  }

  // int64 last_update_time = 9;
  if (this->last_update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->last_update_time(), target);
  }

  // .basepb.StoreType type = 10;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.RangePeer range_peers = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->range_peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_peers(static_cast<int>(i)));
    }
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_port());
  }

  // uint32 raft_port = 4;
  if (this->raft_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raft_port());
  }

  // uint32 admin_port = 5;
  if (this->admin_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->admin_port());
  }

  // .basepb.NodeState state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // int64 version = 7;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // int64 last_update_time = 9;
  if (this->last_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_update_time());
  }

  // .basepb.StoreType type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_peers_.MergeFrom(from.range_peers_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
  if (from.raft_port() != 0) {
    set_raft_port(from.raft_port());
  }
  if (from.admin_port() != 0) {
    set_admin_port(from.admin_port());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.last_update_time() != 0) {
    set_last_update_time(from.last_update_time());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  range_peers_.InternalSwap(&other->range_peers_);
  ip_.Swap(&other->ip_);
  swap(id_, other->id_);
  swap(server_port_, other->server_port_);
  swap(raft_port_, other->raft_port_);
  swap(admin_port_, other->admin_port_);
  swap(state_, other->state_);
  swap(version_, other->version_);
  swap(last_update_time_, other->last_update_time_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// uint64 id = 1;
void Node::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Node::id() const {
  // @@protoc_insertion_point(field_get:basepb.Node.id)
  return id_;
}
void Node::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.id)
}

// string ip = 2;
void Node::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node::ip() const {
  // @@protoc_insertion_point(field_get:basepb.Node.ip)
  return ip_.GetNoArena();
}
void Node::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Node.ip)
}
#if LANG_CXX11
void Node::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Node.ip)
}
#endif
void Node::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Node.ip)
}
void Node::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Node.ip)
}
::std::string* Node::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Node.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_ip() {
  // @@protoc_insertion_point(field_release:basepb.Node.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:basepb.Node.ip)
}

// uint32 server_port = 3;
void Node::clear_server_port() {
  server_port_ = 0u;
}
::google::protobuf::uint32 Node::server_port() const {
  // @@protoc_insertion_point(field_get:basepb.Node.server_port)
  return server_port_;
}
void Node::set_server_port(::google::protobuf::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.server_port)
}

// uint32 raft_port = 4;
void Node::clear_raft_port() {
  raft_port_ = 0u;
}
::google::protobuf::uint32 Node::raft_port() const {
  // @@protoc_insertion_point(field_get:basepb.Node.raft_port)
  return raft_port_;
}
void Node::set_raft_port(::google::protobuf::uint32 value) {
  
  raft_port_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.raft_port)
}

// uint32 admin_port = 5;
void Node::clear_admin_port() {
  admin_port_ = 0u;
}
::google::protobuf::uint32 Node::admin_port() const {
  // @@protoc_insertion_point(field_get:basepb.Node.admin_port)
  return admin_port_;
}
void Node::set_admin_port(::google::protobuf::uint32 value) {
  
  admin_port_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.admin_port)
}

// .basepb.NodeState state = 6;
void Node::clear_state() {
  state_ = 0;
}
::basepb::NodeState Node::state() const {
  // @@protoc_insertion_point(field_get:basepb.Node.state)
  return static_cast< ::basepb::NodeState >(state_);
}
void Node::set_state(::basepb::NodeState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.state)
}

// int64 version = 7;
void Node::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Node::version() const {
  // @@protoc_insertion_point(field_get:basepb.Node.version)
  return version_;
}
void Node::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.version)
}

// repeated .basepb.RangePeer range_peers = 8;
int Node::range_peers_size() const {
  return range_peers_.size();
}
void Node::clear_range_peers() {
  range_peers_.Clear();
}
const ::basepb::RangePeer& Node::range_peers(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Node.range_peers)
  return range_peers_.Get(index);
}
::basepb::RangePeer* Node::mutable_range_peers(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Node.range_peers)
  return range_peers_.Mutable(index);
}
::basepb::RangePeer* Node::add_range_peers() {
  // @@protoc_insertion_point(field_add:basepb.Node.range_peers)
  return range_peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::RangePeer >*
Node::mutable_range_peers() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Node.range_peers)
  return &range_peers_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::RangePeer >&
Node::range_peers() const {
  // @@protoc_insertion_point(field_list:basepb.Node.range_peers)
  return range_peers_;
}

// int64 last_update_time = 9;
void Node::clear_last_update_time() {
  last_update_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Node::last_update_time() const {
  // @@protoc_insertion_point(field_get:basepb.Node.last_update_time)
  return last_update_time_;
}
void Node::set_last_update_time(::google::protobuf::int64 value) {
  
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.last_update_time)
}

// .basepb.StoreType type = 10;
void Node::clear_type() {
  type_ = 0;
}
::basepb::StoreType Node::type() const {
  // @@protoc_insertion_point(field_get:basepb.Node.type)
  return static_cast< ::basepb::StoreType >(type_);
}
void Node::set_type(::basepb::StoreType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kIdFieldNumber;
const int Peer::kNodeIdFieldNumber;
const int Peer::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:basepb.Peer)
}

void Peer::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _cached_size_ = 0;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:basepb.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.PeerType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::basepb::PeerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // .basepb.PeerType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // .basepb.PeerType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Peer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // .basepb.PeerType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(node_id_, other->node_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// uint64 id = 1;
void Peer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Peer::id() const {
  // @@protoc_insertion_point(field_get:basepb.Peer.id)
  return id_;
}
void Peer::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Peer.id)
}

// uint64 node_id = 2;
void Peer::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Peer::node_id() const {
  // @@protoc_insertion_point(field_get:basepb.Peer.node_id)
  return node_id_;
}
void Peer::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Peer.node_id)
}

// .basepb.PeerType type = 3;
void Peer::clear_type() {
  type_ = 0;
}
::basepb::PeerType Peer::type() const {
  // @@protoc_insertion_point(field_get:basepb.Peer.type)
  return static_cast< ::basepb::PeerType >(type_);
}
void Peer::set_type(::basepb::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Peer.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerStatus::kPeerFieldNumber;
const int PeerStatus::kIndexFieldNumber;
const int PeerStatus::kCommitFieldNumber;
const int PeerStatus::kDownSecondsFieldNumber;
const int PeerStatus::kSnapshottingFieldNumber;
const int PeerStatus::kAppliedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerStatus::PeerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.PeerStatus)
}
PeerStatus::PeerStatus(const PeerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::basepb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&snapshotting_) -
    reinterpret_cast<char*>(&index_)) + sizeof(snapshotting_));
  // @@protoc_insertion_point(copy_constructor:basepb.PeerStatus)
}

void PeerStatus::SharedCtor() {
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snapshotting_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(snapshotting_));
  _cached_size_ = 0;
}

PeerStatus::~PeerStatus() {
  // @@protoc_insertion_point(destructor:basepb.PeerStatus)
  SharedDtor();
}

void PeerStatus::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void PeerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerStatus::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerStatus& PeerStatus::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerStatus* PeerStatus::New(::google::protobuf::Arena* arena) const {
  PeerStatus* n = new PeerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.PeerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snapshotting_) -
      reinterpret_cast<char*>(&index_)) + sizeof(snapshotting_));
  _internal_metadata_.Clear();
}

bool PeerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.PeerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 down_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &down_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool snapshotting = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshotting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 applied = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.PeerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.PeerStatus)
  return false;
#undef DO_
}

void PeerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.PeerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
  }

  // uint64 down_seconds = 4;
  if (this->down_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->down_seconds(), output);
  }

  // bool snapshotting = 5;
  if (this->snapshotting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->snapshotting(), output);
  }

  // uint64 applied = 6;
  if (this->applied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->applied(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.PeerStatus)
}

::google::protobuf::uint8* PeerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.PeerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, deterministic, target);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
  }

  // uint64 down_seconds = 4;
  if (this->down_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->down_seconds(), target);
  }

  // bool snapshotting = 5;
  if (this->snapshotting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->snapshotting(), target);
  }

  // uint64 applied = 6;
  if (this->applied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->applied(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.PeerStatus)
  return target;
}

size_t PeerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.PeerStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .basepb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // uint64 down_seconds = 4;
  if (this->down_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->down_seconds());
  }

  // uint64 applied = 6;
  if (this->applied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applied());
  }

  // bool snapshotting = 5;
  if (this->snapshotting() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.PeerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.PeerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.PeerStatus)
    MergeFrom(*source);
  }
}

void PeerStatus::MergeFrom(const PeerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.PeerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::basepb::Peer::MergeFrom(from.peer());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.down_seconds() != 0) {
    set_down_seconds(from.down_seconds());
  }
  if (from.applied() != 0) {
    set_applied(from.applied());
  }
  if (from.snapshotting() != 0) {
    set_snapshotting(from.snapshotting());
  }
}

void PeerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.PeerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerStatus::CopyFrom(const PeerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.PeerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerStatus::IsInitialized() const {
  return true;
}

void PeerStatus::Swap(PeerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerStatus::InternalSwap(PeerStatus* other) {
  using std::swap;
  swap(peer_, other->peer_);
  swap(index_, other->index_);
  swap(commit_, other->commit_);
  swap(down_seconds_, other->down_seconds_);
  swap(applied_, other->applied_);
  swap(snapshotting_, other->snapshotting_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerStatus::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerStatus

// .basepb.Peer peer = 1;
bool PeerStatus::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void PeerStatus::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::basepb::Peer& PeerStatus::peer() const {
  const ::basepb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
::basepb::Peer* PeerStatus::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:basepb.PeerStatus.peer)
  return peer_;
}
::basepb::Peer* PeerStatus::release_peer() {
  // @@protoc_insertion_point(field_release:basepb.PeerStatus.peer)
  
  ::basepb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void PeerStatus::set_allocated_peer(::basepb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.PeerStatus.peer)
}

// uint64 index = 2;
void PeerStatus::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PeerStatus::index() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.index)
  return index_;
}
void PeerStatus::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.index)
}

// uint64 commit = 3;
void PeerStatus::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PeerStatus::commit() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.commit)
  return commit_;
}
void PeerStatus::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.commit)
}

// uint64 down_seconds = 4;
void PeerStatus::clear_down_seconds() {
  down_seconds_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PeerStatus::down_seconds() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.down_seconds)
  return down_seconds_;
}
void PeerStatus::set_down_seconds(::google::protobuf::uint64 value) {
  
  down_seconds_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.down_seconds)
}

// bool snapshotting = 5;
void PeerStatus::clear_snapshotting() {
  snapshotting_ = false;
}
bool PeerStatus::snapshotting() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.snapshotting)
  return snapshotting_;
}
void PeerStatus::set_snapshotting(bool value) {
  
  snapshotting_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.snapshotting)
}

// uint64 applied = 6;
void PeerStatus::clear_applied() {
  applied_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PeerStatus::applied() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.applied)
  return applied_;
}
void PeerStatus::set_applied(::google::protobuf::uint64 value) {
  
  applied_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.applied)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Replica::kRangeIdFieldNumber;
const int Replica::kPeerFieldNumber;
const int Replica::kStartKeyFieldNumber;
const int Replica::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Replica::Replica()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Replica)
}
Replica::Replica(const Replica& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_peer()) {
    peer_ = new ::basepb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:basepb.Replica)
}

void Replica::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

Replica::~Replica() {
  // @@protoc_insertion_point(destructor:basepb.Replica)
  SharedDtor();
}

void Replica::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_;
}

void Replica::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Replica::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Replica& Replica::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Replica* Replica::New(::google::protobuf::Arena* arena) const {
  Replica* n = new Replica;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Replica::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Replica)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Replica::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Replica)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Replica)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Replica)
  return false;
#undef DO_
}

void Replica::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Replica)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // .basepb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_key(), output);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Replica)
}

::google::protobuf::uint8* Replica::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Replica)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // .basepb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, deterministic, target);
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_key(), target);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Replica)
  return target;
}

size_t Replica::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Replica)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // .basepb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Replica::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Replica)
  GOOGLE_DCHECK_NE(&from, this);
  const Replica* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Replica>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Replica)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Replica)
    MergeFrom(*source);
  }
}

void Replica::MergeFrom(const Replica& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Replica)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_peer()) {
    mutable_peer()->::basepb::Peer::MergeFrom(from.peer());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void Replica::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Replica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replica::CopyFrom(const Replica& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Replica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replica::IsInitialized() const {
  return true;
}

void Replica::Swap(Replica* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Replica::InternalSwap(Replica* other) {
  using std::swap;
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  swap(peer_, other->peer_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Replica::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Replica

// uint64 range_id = 1;
void Replica::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Replica::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.Replica.range_id)
  return range_id_;
}
void Replica::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Replica.range_id)
}

// .basepb.Peer peer = 2;
bool Replica::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void Replica::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::basepb::Peer& Replica::peer() const {
  const ::basepb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:basepb.Replica.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
::basepb::Peer* Replica::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Replica.peer)
  return peer_;
}
::basepb::Peer* Replica::release_peer() {
  // @@protoc_insertion_point(field_release:basepb.Replica.peer)
  
  ::basepb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void Replica::set_allocated_peer(::basepb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Replica.peer)
}

// bytes start_key = 3;
void Replica::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Replica::start_key() const {
  // @@protoc_insertion_point(field_get:basepb.Replica.start_key)
  return start_key_.GetNoArena();
}
void Replica::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Replica.start_key)
}
#if LANG_CXX11
void Replica::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Replica.start_key)
}
#endif
void Replica::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Replica.start_key)
}
void Replica::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Replica.start_key)
}
::std::string* Replica::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Replica.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Replica::release_start_key() {
  // @@protoc_insertion_point(field_release:basepb.Replica.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Replica::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Replica.start_key)
}

// bytes end_key = 4;
void Replica::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Replica::end_key() const {
  // @@protoc_insertion_point(field_get:basepb.Replica.end_key)
  return end_key_.GetNoArena();
}
void Replica::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Replica.end_key)
}
#if LANG_CXX11
void Replica::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Replica.end_key)
}
#endif
void Replica::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Replica.end_key)
}
void Replica::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Replica.end_key)
}
::std::string* Replica::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Replica.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Replica::release_end_key() {
  // @@protoc_insertion_point(field_release:basepb.Replica.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Replica::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Replica.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeEpoch::kConfVerFieldNumber;
const int RangeEpoch::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeEpoch::RangeEpoch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.RangeEpoch)
}
RangeEpoch::RangeEpoch(const RangeEpoch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&conf_ver_, &from.conf_ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&conf_ver_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:basepb.RangeEpoch)
}

void RangeEpoch::SharedCtor() {
  ::memset(&conf_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&conf_ver_)) + sizeof(version_));
  _cached_size_ = 0;
}

RangeEpoch::~RangeEpoch() {
  // @@protoc_insertion_point(destructor:basepb.RangeEpoch)
  SharedDtor();
}

void RangeEpoch::SharedDtor() {
}

void RangeEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeEpoch::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeEpoch& RangeEpoch::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeEpoch* RangeEpoch::New(::google::protobuf::Arena* arena) const {
  RangeEpoch* n = new RangeEpoch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.RangeEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&conf_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&conf_ver_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool RangeEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.RangeEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 conf_ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conf_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.RangeEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.RangeEpoch)
  return false;
#undef DO_
}

void RangeEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.RangeEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 conf_ver = 1;
  if (this->conf_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->conf_ver(), output);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.RangeEpoch)
}

::google::protobuf::uint8* RangeEpoch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.RangeEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 conf_ver = 1;
  if (this->conf_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->conf_ver(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.RangeEpoch)
  return target;
}

size_t RangeEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.RangeEpoch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 conf_ver = 1;
  if (this->conf_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->conf_ver());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeEpoch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.RangeEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeEpoch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeEpoch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.RangeEpoch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.RangeEpoch)
    MergeFrom(*source);
  }
}

void RangeEpoch::MergeFrom(const RangeEpoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.RangeEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conf_ver() != 0) {
    set_conf_ver(from.conf_ver());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void RangeEpoch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.RangeEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeEpoch::CopyFrom(const RangeEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.RangeEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeEpoch::IsInitialized() const {
  return true;
}

void RangeEpoch::Swap(RangeEpoch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeEpoch::InternalSwap(RangeEpoch* other) {
  using std::swap;
  swap(conf_ver_, other->conf_ver_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeEpoch::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeEpoch

// uint64 conf_ver = 1;
void RangeEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:basepb.RangeEpoch.conf_ver)
  return conf_ver_;
}
void RangeEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangeEpoch.conf_ver)
}

// uint64 version = 2;
void RangeEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeEpoch::version() const {
  // @@protoc_insertion_point(field_get:basepb.RangeEpoch.version)
  return version_;
}
void RangeEpoch::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangeEpoch.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kIdFieldNumber;
const int Range::kStartKeyFieldNumber;
const int Range::kEndKeyFieldNumber;
const int Range::kRangeEpochFieldNumber;
const int Range::kPeersFieldNumber;
const int Range::kDbIdFieldNumber;
const int Range::kTableIdFieldNumber;
const int Range::kPrimaryKeysFieldNumber;
const int Range::kLeaderFieldNumber;
const int Range::kRangeTypeFieldNumber;
const int Range::kStoreTypeFieldNumber;
const int Range::kTermFieldNumber;
const int Range::kParentRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_(from.peers_),
      primary_keys_(from.primary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_range_epoch()) {
    range_epoch_ = new ::basepb::RangeEpoch(*from.range_epoch_);
  } else {
    range_epoch_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_range_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_range_id_));
  // @@protoc_insertion_point(copy_constructor:basepb.Range)
}

void Range::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_range_id_) -
      reinterpret_cast<char*>(&range_epoch_)) + sizeof(parent_range_id_));
  _cached_size_ = 0;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:basepb.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_epoch_;
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Range& Range::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Range* Range::New(::google::protobuf::Arena* arena) const {
  Range* n = new Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  primary_keys_.Clear();
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) {
    delete range_epoch_;
  }
  range_epoch_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_range_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_range_id_));
  _internal_metadata_.Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeEpoch range_epoch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Peer peers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Column primary_keys = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leader = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.RangeType range_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_range_type(static_cast< ::basepb::RangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.StoreType store_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_store_type(static_cast< ::basepb::StoreType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 parent_range_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // .basepb.RangeEpoch range_epoch = 4;
  if (this->has_range_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->range_epoch_, output);
  }

  // repeated .basepb.Peer peers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->peers(static_cast<int>(i)), output);
  }

  // uint64 db_id = 6;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->db_id(), output);
  }

  // uint64 table_id = 7;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->table_id(), output);
  }

  // repeated .basepb.Column primary_keys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->primary_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->primary_keys(static_cast<int>(i)), output);
  }

  // uint64 leader = 9;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->leader(), output);
  }

  // .basepb.RangeType range_type = 10;
  if (this->range_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->range_type(), output);
  }

  // .basepb.StoreType store_type = 11;
  if (this->store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->store_type(), output);
  }

  // uint64 term = 12;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->term(), output);
  }

  // uint64 parent_range_id = 13;
  if (this->parent_range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->parent_range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // .basepb.RangeEpoch range_epoch = 4;
  if (this->has_range_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->range_epoch_, deterministic, target);
  }

  // repeated .basepb.Peer peers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->peers(static_cast<int>(i)), deterministic, target);
  }

  // uint64 db_id = 6;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->db_id(), target);
  }

  // uint64 table_id = 7;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->table_id(), target);
  }

  // repeated .basepb.Column primary_keys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->primary_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->primary_keys(static_cast<int>(i)), deterministic, target);
  }

  // uint64 leader = 9;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->leader(), target);
  }

  // .basepb.RangeType range_type = 10;
  if (this->range_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->range_type(), target);
  }

  // .basepb.StoreType store_type = 11;
  if (this->store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->store_type(), target);
  }

  // uint64 term = 12;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->term(), target);
  }

  // uint64 parent_range_id = 13;
  if (this->parent_range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->parent_range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.Peer peers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(static_cast<int>(i)));
    }
  }

  // repeated .basepb.Column primary_keys = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->primary_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primary_keys(static_cast<int>(i)));
    }
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // .basepb.RangeEpoch range_epoch = 4;
  if (this->has_range_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_epoch_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 db_id = 6;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 7;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint64 leader = 9;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  // .basepb.RangeType range_type = 10;
  if (this->range_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->range_type());
  }

  // .basepb.StoreType store_type = 11;
  if (this->store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->store_type());
  }

  // uint64 term = 12;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 parent_range_id = 13;
  if (this->parent_range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  primary_keys_.MergeFrom(from.primary_keys_);
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_range_epoch()) {
    mutable_range_epoch()->::basepb::RangeEpoch::MergeFrom(from.range_epoch());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
  if (from.range_type() != 0) {
    set_range_type(from.range_type());
  }
  if (from.store_type() != 0) {
    set_store_type(from.store_type());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.parent_range_id() != 0) {
    set_parent_range_id(from.parent_range_id());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  using std::swap;
  peers_.InternalSwap(&other->peers_);
  primary_keys_.InternalSwap(&other->primary_keys_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  swap(range_epoch_, other->range_epoch_);
  swap(id_, other->id_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(leader_, other->leader_);
  swap(range_type_, other->range_type_);
  swap(store_type_, other->store_type_);
  swap(term_, other->term_);
  swap(parent_range_id_, other->parent_range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// uint64 id = 1;
void Range::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Range::id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.id)
  return id_;
}
void Range::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.id)
}

// bytes start_key = 2;
void Range::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Range::start_key() const {
  // @@protoc_insertion_point(field_get:basepb.Range.start_key)
  return start_key_.GetNoArena();
}
void Range::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Range.start_key)
}
#if LANG_CXX11
void Range::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Range.start_key)
}
#endif
void Range::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Range.start_key)
}
void Range::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Range.start_key)
}
::std::string* Range::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Range.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Range::release_start_key() {
  // @@protoc_insertion_point(field_release:basepb.Range.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Range::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Range.start_key)
}

// bytes end_key = 3;
void Range::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Range::end_key() const {
  // @@protoc_insertion_point(field_get:basepb.Range.end_key)
  return end_key_.GetNoArena();
}
void Range::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Range.end_key)
}
#if LANG_CXX11
void Range::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Range.end_key)
}
#endif
void Range::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Range.end_key)
}
void Range::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Range.end_key)
}
::std::string* Range::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Range.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Range::release_end_key() {
  // @@protoc_insertion_point(field_release:basepb.Range.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Range::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Range.end_key)
}

// .basepb.RangeEpoch range_epoch = 4;
bool Range::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
void Range::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
const ::basepb::RangeEpoch& Range::range_epoch() const {
  const ::basepb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:basepb.Range.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
::basepb::RangeEpoch* Range::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Range.range_epoch)
  return range_epoch_;
}
::basepb::RangeEpoch* Range::release_range_epoch() {
  // @@protoc_insertion_point(field_release:basepb.Range.range_epoch)
  
  ::basepb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
void Range::set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Range.range_epoch)
}

// repeated .basepb.Peer peers = 5;
int Range::peers_size() const {
  return peers_.size();
}
void Range::clear_peers() {
  peers_.Clear();
}
const ::basepb::Peer& Range::peers(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Range.peers)
  return peers_.Get(index);
}
::basepb::Peer* Range::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Range.peers)
  return peers_.Mutable(index);
}
::basepb::Peer* Range::add_peers() {
  // @@protoc_insertion_point(field_add:basepb.Range.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Peer >*
Range::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Range.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Peer >&
Range::peers() const {
  // @@protoc_insertion_point(field_list:basepb.Range.peers)
  return peers_;
}

// uint64 db_id = 6;
void Range::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Range::db_id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.db_id)
  return db_id_;
}
void Range::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.db_id)
}

// uint64 table_id = 7;
void Range::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Range::table_id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.table_id)
  return table_id_;
}
void Range::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.table_id)
}

// repeated .basepb.Column primary_keys = 8;
int Range::primary_keys_size() const {
  return primary_keys_.size();
}
void Range::clear_primary_keys() {
  primary_keys_.Clear();
}
const ::basepb::Column& Range::primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Range.primary_keys)
  return primary_keys_.Get(index);
}
::basepb::Column* Range::mutable_primary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Range.primary_keys)
  return primary_keys_.Mutable(index);
}
::basepb::Column* Range::add_primary_keys() {
  // @@protoc_insertion_point(field_add:basepb.Range.primary_keys)
  return primary_keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Column >*
Range::mutable_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Range.primary_keys)
  return &primary_keys_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
Range::primary_keys() const {
  // @@protoc_insertion_point(field_list:basepb.Range.primary_keys)
  return primary_keys_;
}

// uint64 leader = 9;
void Range::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Range::leader() const {
  // @@protoc_insertion_point(field_get:basepb.Range.leader)
  return leader_;
}
void Range::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.leader)
}

// .basepb.RangeType range_type = 10;
void Range::clear_range_type() {
  range_type_ = 0;
}
::basepb::RangeType Range::range_type() const {
  // @@protoc_insertion_point(field_get:basepb.Range.range_type)
  return static_cast< ::basepb::RangeType >(range_type_);
}
void Range::set_range_type(::basepb::RangeType value) {
  
  range_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.range_type)
}

// .basepb.StoreType store_type = 11;
void Range::clear_store_type() {
  store_type_ = 0;
}
::basepb::StoreType Range::store_type() const {
  // @@protoc_insertion_point(field_get:basepb.Range.store_type)
  return static_cast< ::basepb::StoreType >(store_type_);
}
void Range::set_store_type(::basepb::StoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.store_type)
}

// uint64 term = 12;
void Range::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Range::term() const {
  // @@protoc_insertion_point(field_get:basepb.Range.term)
  return term_;
}
void Range::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.term)
}

// uint64 parent_range_id = 13;
void Range::clear_parent_range_id() {
  parent_range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Range::parent_range_id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.parent_range_id)
  return parent_range_id_;
}
void Range::set_parent_range_id(::google::protobuf::uint64 value) {
  
  parent_range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.parent_range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leader::kRangeIdFieldNumber;
const int Leader::kNodeIdFieldNumber;
const int Leader::kNodeAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leader::Leader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Leader)
}
Leader::Leader(const Leader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_addr().size() > 0) {
    node_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_addr_);
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:basepb.Leader)
}

void Leader::SharedCtor() {
  node_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

Leader::~Leader() {
  // @@protoc_insertion_point(destructor:basepb.Leader)
  SharedDtor();
}

void Leader::SharedDtor() {
  node_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Leader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leader::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Leader& Leader::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Leader* Leader::New(::google::protobuf::Arena* arena) const {
  Leader* n = new Leader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leader::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(node_id_));
  _internal_metadata_.Clear();
}

bool Leader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Leader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_addr().data(), static_cast<int>(this->node_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Leader.node_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Leader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Leader)
  return false;
#undef DO_
}

void Leader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // string node_addr = 3;
  if (this->node_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_addr().data(), static_cast<int>(this->node_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Leader.node_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Leader)
}

::google::protobuf::uint8* Leader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // string node_addr = 3;
  if (this->node_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_addr().data(), static_cast<int>(this->node_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Leader.node_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Leader)
  return target;
}

size_t Leader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Leader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_addr = 3;
  if (this->node_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_addr());
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Leader)
  GOOGLE_DCHECK_NE(&from, this);
  const Leader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Leader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Leader)
    MergeFrom(*source);
  }
}

void Leader::MergeFrom(const Leader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Leader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_addr().size() > 0) {

    node_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_addr_);
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void Leader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Leader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leader::CopyFrom(const Leader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Leader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leader::IsInitialized() const {
  return true;
}

void Leader::Swap(Leader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leader::InternalSwap(Leader* other) {
  using std::swap;
  node_addr_.Swap(&other->node_addr_);
  swap(range_id_, other->range_id_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leader::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leader

// uint64 range_id = 1;
void Leader::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Leader::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.Leader.range_id)
  return range_id_;
}
void Leader::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Leader.range_id)
}

// uint64 node_id = 2;
void Leader::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Leader::node_id() const {
  // @@protoc_insertion_point(field_get:basepb.Leader.node_id)
  return node_id_;
}
void Leader::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Leader.node_id)
}

// string node_addr = 3;
void Leader::clear_node_addr() {
  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Leader::node_addr() const {
  // @@protoc_insertion_point(field_get:basepb.Leader.node_addr)
  return node_addr_.GetNoArena();
}
void Leader::set_node_addr(const ::std::string& value) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Leader.node_addr)
}
#if LANG_CXX11
void Leader::set_node_addr(::std::string&& value) {
  
  node_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Leader.node_addr)
}
#endif
void Leader::set_node_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Leader.node_addr)
}
void Leader::set_node_addr(const char* value, size_t size) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Leader.node_addr)
}
::std::string* Leader::mutable_node_addr() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Leader.node_addr)
  return node_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Leader::release_node_addr() {
  // @@protoc_insertion_point(field_release:basepb.Leader.node_addr)
  
  return node_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leader::set_allocated_node_addr(::std::string* node_addr) {
  if (node_addr != NULL) {
    
  } else {
    
  }
  node_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_addr);
  // @@protoc_insertion_point(field_set_allocated:basepb.Leader.node_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataBase::kNameFieldNumber;
const int DataBase::kIdFieldNumber;
const int DataBase::kVersionFieldNumber;
const int DataBase::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataBase::DataBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.DataBase)
}
DataBase::DataBase(const DataBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:basepb.DataBase)
}

void DataBase::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  _cached_size_ = 0;
}

DataBase::~DataBase() {
  // @@protoc_insertion_point(destructor:basepb.DataBase)
  SharedDtor();
}

void DataBase::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataBase::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataBase& DataBase::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataBase* DataBase::New(::google::protobuf::Arena* arena) const {
  DataBase* n = new DataBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataBase::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.DataBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

bool DataBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.DataBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.DataBase.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.DataBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.DataBase)
  return false;
#undef DO_
}

void DataBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.DataBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.DataBase.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  // int64 create_time = 4;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.DataBase)
}

::google::protobuf::uint8* DataBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.DataBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.DataBase.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  // int64 create_time = 4;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.DataBase)
  return target;
}

size_t DataBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.DataBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // int64 create_time = 4;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.DataBase)
  GOOGLE_DCHECK_NE(&from, this);
  const DataBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.DataBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.DataBase)
    MergeFrom(*source);
  }
}

void DataBase::MergeFrom(const DataBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.DataBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
}

void DataBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.DataBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBase::CopyFrom(const DataBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.DataBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBase::IsInitialized() const {
  return true;
}

void DataBase::Swap(DataBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataBase::InternalSwap(DataBase* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(version_, other->version_);
  swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataBase::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataBase

// string name = 1;
void DataBase::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataBase::name() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.name)
  return name_.GetNoArena();
}
void DataBase::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.DataBase.name)
}
#if LANG_CXX11
void DataBase::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.DataBase.name)
}
#endif
void DataBase::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.DataBase.name)
}
void DataBase::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.DataBase.name)
}
::std::string* DataBase::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.DataBase.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataBase::release_name() {
  // @@protoc_insertion_point(field_release:basepb.DataBase.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataBase::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.DataBase.name)
}

// uint64 id = 2;
void DataBase::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DataBase::id() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.id)
  return id_;
}
void DataBase::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.DataBase.id)
}

// uint64 version = 3;
void DataBase::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DataBase::version() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.version)
  return version_;
}
void DataBase::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.DataBase.version)
}

// int64 create_time = 4;
void DataBase::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DataBase::create_time() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.create_time)
  return create_time_;
}
void DataBase::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:basepb.DataBase.create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Column::kNameFieldNumber;
const int Column::kIdFieldNumber;
const int Column::kDataTypeFieldNumber;
const int Column::kUnsignedFieldNumber;
const int Column::kScaleFieldNumber;
const int Column::kPrecisionFieldNumber;
const int Column::kNullableFieldNumber;
const int Column::kPrimaryKeyFieldNumber;
const int Column::kOrdinalFieldNumber;
const int Column::kIndexFieldNumber;
const int Column::kDefaultValueFieldNumber;
const int Column::kPropertiesFieldNumber;
const int Column::kAutoIncrementFieldNumber;
const int Column::kUniqueFieldNumber;
const int Column::kColTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Column::Column()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Column)
}
Column::Column(const Column& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.default_value().size() > 0) {
    default_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_value_);
  }
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.properties().size() > 0) {
    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(col_type_));
  // @@protoc_insertion_point(copy_constructor:basepb.Column)
}

void Column::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(col_type_));
  _cached_size_ = 0;
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:basepb.Column)
  SharedDtor();
}

void Column::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Column& Column::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Column* Column::New(::google::protobuf::Arena* arena) const {
  Column* n = new Column;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(col_type_));
  _internal_metadata_.Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Column.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.DataType data_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::basepb::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unsigned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unsigned__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 precision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nullable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 primary_key = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ordinal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool index = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes default_value = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string properties = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_properties()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->properties().data(), static_cast<int>(this->properties().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Column.properties"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_increment = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.ColumnType col_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_col_type(static_cast< ::basepb::ColumnType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Column)
  return false;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Column.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // .basepb.DataType data_type = 3;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }

  // bool unsigned = 4;
  if (this->unsigned_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unsigned_(), output);
  }

  // int32 scale = 5;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scale(), output);
  }

  // int32 precision = 6;
  if (this->precision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->precision(), output);
  }

  // bool nullable = 7;
  if (this->nullable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->nullable(), output);
  }

  // uint64 primary_key = 8;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->primary_key(), output);
  }

  // int32 ordinal = 9;
  if (this->ordinal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ordinal(), output);
  }

  // bool index = 10;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->index(), output);
  }

  // bytes default_value = 11;
  if (this->default_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->default_value(), output);
  }

  // string properties = 12;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Column.properties");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->properties(), output);
  }

  // bool auto_increment = 13;
  if (this->auto_increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->auto_increment(), output);
  }

  // bool unique = 14;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->unique(), output);
  }

  // .basepb.ColumnType col_type = 15;
  if (this->col_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->col_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Column)
}

::google::protobuf::uint8* Column::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Column.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // .basepb.DataType data_type = 3;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }

  // bool unsigned = 4;
  if (this->unsigned_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unsigned_(), target);
  }

  // int32 scale = 5;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scale(), target);
  }

  // int32 precision = 6;
  if (this->precision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->precision(), target);
  }

  // bool nullable = 7;
  if (this->nullable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->nullable(), target);
  }

  // uint64 primary_key = 8;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->primary_key(), target);
  }

  // int32 ordinal = 9;
  if (this->ordinal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ordinal(), target);
  }

  // bool index = 10;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->index(), target);
  }

  // bytes default_value = 11;
  if (this->default_value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->default_value(), target);
  }

  // string properties = 12;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Column.properties");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->properties(), target);
  }

  // bool auto_increment = 13;
  if (this->auto_increment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->auto_increment(), target);
  }

  // bool unique = 14;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->unique(), target);
  }

  // .basepb.ColumnType col_type = 15;
  if (this->col_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->col_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Column)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes default_value = 11;
  if (this->default_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->default_value());
  }

  // string properties = 12;
  if (this->properties().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->properties());
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // .basepb.DataType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // int32 scale = 5;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  // uint64 primary_key = 8;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->primary_key());
  }

  // int32 precision = 6;
  if (this->precision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  // bool unsigned = 4;
  if (this->unsigned_() != 0) {
    total_size += 1 + 1;
  }

  // bool nullable = 7;
  if (this->nullable() != 0) {
    total_size += 1 + 1;
  }

  // bool index = 10;
  if (this->index() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_increment = 13;
  if (this->auto_increment() != 0) {
    total_size += 1 + 1;
  }

  // int32 ordinal = 9;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordinal());
  }

  // bool unique = 14;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  // .basepb.ColumnType col_type = 15;
  if (this->col_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->col_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Column)
  GOOGLE_DCHECK_NE(&from, this);
  const Column* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Column>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Column)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Column)
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.default_value().size() > 0) {

    default_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_value_);
  }
  if (from.properties().size() > 0) {

    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.precision() != 0) {
    set_precision(from.precision());
  }
  if (from.unsigned_() != 0) {
    set_unsigned_(from.unsigned_());
  }
  if (from.nullable() != 0) {
    set_nullable(from.nullable());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.auto_increment() != 0) {
    set_auto_increment(from.auto_increment());
  }
  if (from.ordinal() != 0) {
    set_ordinal(from.ordinal());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
  if (from.col_type() != 0) {
    set_col_type(from.col_type());
  }
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::Swap(Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Column::InternalSwap(Column* other) {
  using std::swap;
  name_.Swap(&other->name_);
  default_value_.Swap(&other->default_value_);
  properties_.Swap(&other->properties_);
  swap(id_, other->id_);
  swap(data_type_, other->data_type_);
  swap(scale_, other->scale_);
  swap(primary_key_, other->primary_key_);
  swap(precision_, other->precision_);
  swap(unsigned__, other->unsigned__);
  swap(nullable_, other->nullable_);
  swap(index_, other->index_);
  swap(auto_increment_, other->auto_increment_);
  swap(ordinal_, other->ordinal_);
  swap(unique_, other->unique_);
  swap(col_type_, other->col_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Column

// string name = 1;
void Column::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:basepb.Column.name)
  return name_.GetNoArena();
}
void Column::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Column.name)
}
#if LANG_CXX11
void Column::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Column.name)
}
#endif
void Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Column.name)
}
void Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Column.name)
}
::std::string* Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Column.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:basepb.Column.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Column::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Column.name)
}

// uint64 id = 2;
void Column::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Column::id() const {
  // @@protoc_insertion_point(field_get:basepb.Column.id)
  return id_;
}
void Column::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.id)
}

// .basepb.DataType data_type = 3;
void Column::clear_data_type() {
  data_type_ = 0;
}
::basepb::DataType Column::data_type() const {
  // @@protoc_insertion_point(field_get:basepb.Column.data_type)
  return static_cast< ::basepb::DataType >(data_type_);
}
void Column::set_data_type(::basepb::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.data_type)
}

// bool unsigned = 4;
void Column::clear_unsigned_() {
  unsigned__ = false;
}
bool Column::unsigned_() const {
  // @@protoc_insertion_point(field_get:basepb.Column.unsigned)
  return unsigned__;
}
void Column::set_unsigned_(bool value) {
  
  unsigned__ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.unsigned)
}

// int32 scale = 5;
void Column::clear_scale() {
  scale_ = 0;
}
::google::protobuf::int32 Column::scale() const {
  // @@protoc_insertion_point(field_get:basepb.Column.scale)
  return scale_;
}
void Column::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.scale)
}

// int32 precision = 6;
void Column::clear_precision() {
  precision_ = 0;
}
::google::protobuf::int32 Column::precision() const {
  // @@protoc_insertion_point(field_get:basepb.Column.precision)
  return precision_;
}
void Column::set_precision(::google::protobuf::int32 value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.precision)
}

// bool nullable = 7;
void Column::clear_nullable() {
  nullable_ = false;
}
bool Column::nullable() const {
  // @@protoc_insertion_point(field_get:basepb.Column.nullable)
  return nullable_;
}
void Column::set_nullable(bool value) {
  
  nullable_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.nullable)
}

// uint64 primary_key = 8;
void Column::clear_primary_key() {
  primary_key_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Column::primary_key() const {
  // @@protoc_insertion_point(field_get:basepb.Column.primary_key)
  return primary_key_;
}
void Column::set_primary_key(::google::protobuf::uint64 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.primary_key)
}

// int32 ordinal = 9;
void Column::clear_ordinal() {
  ordinal_ = 0;
}
::google::protobuf::int32 Column::ordinal() const {
  // @@protoc_insertion_point(field_get:basepb.Column.ordinal)
  return ordinal_;
}
void Column::set_ordinal(::google::protobuf::int32 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.ordinal)
}

// bool index = 10;
void Column::clear_index() {
  index_ = false;
}
bool Column::index() const {
  // @@protoc_insertion_point(field_get:basepb.Column.index)
  return index_;
}
void Column::set_index(bool value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.index)
}

// bytes default_value = 11;
void Column::clear_default_value() {
  default_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Column::default_value() const {
  // @@protoc_insertion_point(field_get:basepb.Column.default_value)
  return default_value_.GetNoArena();
}
void Column::set_default_value(const ::std::string& value) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Column.default_value)
}
#if LANG_CXX11
void Column::set_default_value(::std::string&& value) {
  
  default_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Column.default_value)
}
#endif
void Column::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Column.default_value)
}
void Column::set_default_value(const void* value, size_t size) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Column.default_value)
}
::std::string* Column::mutable_default_value() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Column.default_value)
  return default_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Column::release_default_value() {
  // @@protoc_insertion_point(field_release:basepb.Column.default_value)
  
  return default_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Column::set_allocated_default_value(::std::string* default_value) {
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_value);
  // @@protoc_insertion_point(field_set_allocated:basepb.Column.default_value)
}

// string properties = 12;
void Column::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Column::properties() const {
  // @@protoc_insertion_point(field_get:basepb.Column.properties)
  return properties_.GetNoArena();
}
void Column::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Column.properties)
}
#if LANG_CXX11
void Column::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Column.properties)
}
#endif
void Column::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Column.properties)
}
void Column::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Column.properties)
}
::std::string* Column::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Column.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Column::release_properties() {
  // @@protoc_insertion_point(field_release:basepb.Column.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Column::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:basepb.Column.properties)
}

// bool auto_increment = 13;
void Column::clear_auto_increment() {
  auto_increment_ = false;
}
bool Column::auto_increment() const {
  // @@protoc_insertion_point(field_get:basepb.Column.auto_increment)
  return auto_increment_;
}
void Column::set_auto_increment(bool value) {
  
  auto_increment_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.auto_increment)
}

// bool unique = 14;
void Column::clear_unique() {
  unique_ = false;
}
bool Column::unique() const {
  // @@protoc_insertion_point(field_get:basepb.Column.unique)
  return unique_;
}
void Column::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.unique)
}

// .basepb.ColumnType col_type = 15;
void Column::clear_col_type() {
  col_type_ = 0;
}
::basepb::ColumnType Column::col_type() const {
  // @@protoc_insertion_point(field_get:basepb.Column.col_type)
  return static_cast< ::basepb::ColumnType >(col_type_);
}
void Column::set_col_type(::basepb::ColumnType value) {
  
  col_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.col_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Primary::kColumnNameFieldNumber;
const int Primary::kNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Primary::Primary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Primary)
}
Primary::Primary(const Primary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.column_name().size() > 0) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  if (from.has_next()) {
    next_ = new ::basepb::Primary(*from.next_);
  } else {
    next_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:basepb.Primary)
}

void Primary::SharedCtor() {
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_ = NULL;
  _cached_size_ = 0;
}

Primary::~Primary() {
  // @@protoc_insertion_point(destructor:basepb.Primary)
  SharedDtor();
}

void Primary::SharedDtor() {
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete next_;
}

void Primary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Primary::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Primary& Primary::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Primary* Primary::New(::google::protobuf::Arena* arena) const {
  Primary* n = new Primary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Primary::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && next_ != NULL) {
    delete next_;
  }
  next_ = NULL;
  _internal_metadata_.Clear();
}

bool Primary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Primary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string column_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_name().data(), static_cast<int>(this->column_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Primary.column_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.Primary next = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Primary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Primary)
  return false;
#undef DO_
}

void Primary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Primary.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->column_name(), output);
  }

  // .basepb.Primary next = 2;
  if (this->has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->next_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Primary)
}

::google::protobuf::uint8* Primary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Primary.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->column_name(), target);
  }

  // .basepb.Primary next = 2;
  if (this->has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->next_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Primary)
  return target;
}

size_t Primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Primary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string column_name = 1;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column_name());
  }

  // .basepb.Primary next = 2;
  if (this->has_next()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->next_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Primary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Primary)
  GOOGLE_DCHECK_NE(&from, this);
  const Primary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Primary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Primary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Primary)
    MergeFrom(*source);
  }
}

void Primary::MergeFrom(const Primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Primary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.column_name().size() > 0) {

    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  if (from.has_next()) {
    mutable_next()->::basepb::Primary::MergeFrom(from.next());
  }
}

void Primary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Primary::CopyFrom(const Primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Primary::IsInitialized() const {
  return true;
}

void Primary::Swap(Primary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Primary::InternalSwap(Primary* other) {
  using std::swap;
  column_name_.Swap(&other->column_name_);
  swap(next_, other->next_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Primary::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Primary

// string column_name = 1;
void Primary::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Primary::column_name() const {
  // @@protoc_insertion_point(field_get:basepb.Primary.column_name)
  return column_name_.GetNoArena();
}
void Primary::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Primary.column_name)
}
#if LANG_CXX11
void Primary::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Primary.column_name)
}
#endif
void Primary::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Primary.column_name)
}
void Primary::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Primary.column_name)
}
::std::string* Primary::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Primary.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Primary::release_column_name() {
  // @@protoc_insertion_point(field_release:basepb.Primary.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Primary::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Primary.column_name)
}

// .basepb.Primary next = 2;
bool Primary::has_next() const {
  return this != internal_default_instance() && next_ != NULL;
}
void Primary::clear_next() {
  if (GetArenaNoVirtual() == NULL && next_ != NULL) delete next_;
  next_ = NULL;
}
const ::basepb::Primary& Primary::next() const {
  const ::basepb::Primary* p = next_;
  // @@protoc_insertion_point(field_get:basepb.Primary.next)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Primary*>(
      &::basepb::_Primary_default_instance_);
}
::basepb::Primary* Primary::mutable_next() {
  
  if (next_ == NULL) {
    next_ = new ::basepb::Primary;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Primary.next)
  return next_;
}
::basepb::Primary* Primary::release_next() {
  // @@protoc_insertion_point(field_release:basepb.Primary.next)
  
  ::basepb::Primary* temp = next_;
  next_ = NULL;
  return temp;
}
void Primary::set_allocated_next(::basepb::Primary* next) {
  delete next_;
  next_ = next;
  if (next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Primary.next)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableEpoch::kConfVerFieldNumber;
const int TableEpoch::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableEpoch::TableEpoch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.TableEpoch)
}
TableEpoch::TableEpoch(const TableEpoch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&conf_ver_, &from.conf_ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&conf_ver_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:basepb.TableEpoch)
}

void TableEpoch::SharedCtor() {
  ::memset(&conf_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&conf_ver_)) + sizeof(version_));
  _cached_size_ = 0;
}

TableEpoch::~TableEpoch() {
  // @@protoc_insertion_point(destructor:basepb.TableEpoch)
  SharedDtor();
}

void TableEpoch::SharedDtor() {
}

void TableEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableEpoch::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableEpoch& TableEpoch::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableEpoch* TableEpoch::New(::google::protobuf::Arena* arena) const {
  TableEpoch* n = new TableEpoch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.TableEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&conf_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&conf_ver_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool TableEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.TableEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 conf_ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conf_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.TableEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.TableEpoch)
  return false;
#undef DO_
}

void TableEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.TableEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 conf_ver = 1;
  if (this->conf_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->conf_ver(), output);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.TableEpoch)
}

::google::protobuf::uint8* TableEpoch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.TableEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 conf_ver = 1;
  if (this->conf_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->conf_ver(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.TableEpoch)
  return target;
}

size_t TableEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.TableEpoch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 conf_ver = 1;
  if (this->conf_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->conf_ver());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableEpoch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.TableEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  const TableEpoch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableEpoch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.TableEpoch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.TableEpoch)
    MergeFrom(*source);
  }
}

void TableEpoch::MergeFrom(const TableEpoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.TableEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conf_ver() != 0) {
    set_conf_ver(from.conf_ver());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void TableEpoch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.TableEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableEpoch::CopyFrom(const TableEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.TableEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEpoch::IsInitialized() const {
  return true;
}

void TableEpoch::Swap(TableEpoch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableEpoch::InternalSwap(TableEpoch* other) {
  using std::swap;
  swap(conf_ver_, other->conf_ver_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableEpoch::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableEpoch

// uint64 conf_ver = 1;
void TableEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TableEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:basepb.TableEpoch.conf_ver)
  return conf_ver_;
}
void TableEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:basepb.TableEpoch.conf_ver)
}

// uint64 version = 2;
void TableEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TableEpoch::version() const {
  // @@protoc_insertion_point(field_get:basepb.TableEpoch.version)
  return version_;
}
void TableEpoch::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.TableEpoch.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kIdFieldNumber;
const int Index::kNameFieldNumber;
const int Index::kColNamesFieldNumber;
const int Index::kUniqueFieldNumber;
const int Index::kCommentFieldNumber;
const int Index::kIndexTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Index)
}
Index::Index(const Index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      col_names_(from.col_names_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(index_type_));
  // @@protoc_insertion_point(copy_constructor:basepb.Index)
}

void Index::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(index_type_));
  _cached_size_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:basepb.Index)
  SharedDtor();
}

void Index::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Index& Index::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Index* Index::New(::google::protobuf::Arena* arena) const {
  Index* n = new Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_names_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(index_type_));
  _internal_metadata_.Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Index.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string col_names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_col_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_names(this->col_names_size() - 1).data(),
            static_cast<int>(this->col_names(this->col_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Index.col_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Index.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.IndexType index_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_index_type(static_cast< ::basepb::IndexType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Index.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string col_names = 3;
  for (int i = 0, n = this->col_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_names(i).data(), static_cast<int>(this->col_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Index.col_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->col_names(i), output);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unique(), output);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Index.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment(), output);
  }

  // .basepb.IndexType index_type = 6;
  if (this->index_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->index_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Index.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string col_names = 3;
  for (int i = 0, n = this->col_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_names(i).data(), static_cast<int>(this->col_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Index.col_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->col_names(i), target);
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unique(), target);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Index.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  // .basepb.IndexType index_type = 6;
  if (this->index_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->index_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Index)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string col_names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->col_names_size());
  for (int i = 0, n = this->col_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->col_names(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // bool unique = 4;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  // .basepb.IndexType index_type = 6;
  if (this->index_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->index_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_names_.MergeFrom(from.col_names_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
  if (from.index_type() != 0) {
    set_index_type(from.index_type());
  }
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  using std::swap;
  col_names_.InternalSwap(&other->col_names_);
  name_.Swap(&other->name_);
  comment_.Swap(&other->comment_);
  swap(id_, other->id_);
  swap(unique_, other->unique_);
  swap(index_type_, other->index_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Index

// uint64 id = 1;
void Index::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Index::id() const {
  // @@protoc_insertion_point(field_get:basepb.Index.id)
  return id_;
}
void Index::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Index.id)
}

// string name = 2;
void Index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Index::name() const {
  // @@protoc_insertion_point(field_get:basepb.Index.name)
  return name_.GetNoArena();
}
void Index::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Index.name)
}
#if LANG_CXX11
void Index::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Index.name)
}
#endif
void Index::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Index.name)
}
void Index::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Index.name)
}
::std::string* Index::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Index::release_name() {
  // @@protoc_insertion_point(field_release:basepb.Index.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Index::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Index.name)
}

// repeated string col_names = 3;
int Index::col_names_size() const {
  return col_names_.size();
}
void Index::clear_col_names() {
  col_names_.Clear();
}
const ::std::string& Index::col_names(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Index.col_names)
  return col_names_.Get(index);
}
::std::string* Index::mutable_col_names(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Index.col_names)
  return col_names_.Mutable(index);
}
void Index::set_col_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:basepb.Index.col_names)
  col_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Index::set_col_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:basepb.Index.col_names)
  col_names_.Mutable(index)->assign(std::move(value));
}
#endif
void Index::set_col_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:basepb.Index.col_names)
}
void Index::set_col_names(int index, const char* value, size_t size) {
  col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basepb.Index.col_names)
}
::std::string* Index::add_col_names() {
  // @@protoc_insertion_point(field_add_mutable:basepb.Index.col_names)
  return col_names_.Add();
}
void Index::add_col_names(const ::std::string& value) {
  col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:basepb.Index.col_names)
}
#if LANG_CXX11
void Index::add_col_names(::std::string&& value) {
  col_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:basepb.Index.col_names)
}
#endif
void Index::add_col_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:basepb.Index.col_names)
}
void Index::add_col_names(const char* value, size_t size) {
  col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:basepb.Index.col_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Index::col_names() const {
  // @@protoc_insertion_point(field_list:basepb.Index.col_names)
  return col_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Index::mutable_col_names() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Index.col_names)
  return &col_names_;
}

// bool unique = 4;
void Index::clear_unique() {
  unique_ = false;
}
bool Index::unique() const {
  // @@protoc_insertion_point(field_get:basepb.Index.unique)
  return unique_;
}
void Index::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:basepb.Index.unique)
}

// string comment = 5;
void Index::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Index::comment() const {
  // @@protoc_insertion_point(field_get:basepb.Index.comment)
  return comment_.GetNoArena();
}
void Index::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Index.comment)
}
#if LANG_CXX11
void Index::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Index.comment)
}
#endif
void Index::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Index.comment)
}
void Index::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Index.comment)
}
::std::string* Index::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Index.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Index::release_comment() {
  // @@protoc_insertion_point(field_release:basepb.Index.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Index::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:basepb.Index.comment)
}

// .basepb.IndexType index_type = 6;
void Index::clear_index_type() {
  index_type_ = 0;
}
::basepb::IndexType Index::index_type() const {
  // @@protoc_insertion_point(field_get:basepb.Index.index_type)
  return static_cast< ::basepb::IndexType >(index_type_);
}
void Index::set_index_type(::basepb::IndexType value) {
  
  index_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Index.index_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNameFieldNumber;
const int Table::kDbNameFieldNumber;
const int Table::kDbIdFieldNumber;
const int Table::kIdFieldNumber;
const int Table::kPropertiesFieldNumber;
const int Table::kColumnsFieldNumber;
const int Table::kEpochFieldNumber;
const int Table::kCreateTimeFieldNumber;
const int Table::kStatusFieldNumber;
const int Table::kExpandFieldNumber;
const int Table::kIndexesFieldNumber;
const int Table::kTypeFieldNumber;
const int Table::kReplicaNumFieldNumber;
const int Table::kDataRangeNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      indexes_(from.indexes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.properties().size() > 0) {
    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  expand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expand().size() > 0) {
    expand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expand_);
  }
  if (from.has_epoch()) {
    epoch_ = new ::basepb::TableEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_range_num_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(data_range_num_));
  // @@protoc_insertion_point(copy_constructor:basepb.Table)
}

void Table::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_range_num_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(data_range_num_));
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:basepb.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete epoch_;
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  indexes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_range_num_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(data_range_num_));
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Table.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Table.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string properties = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_properties()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->properties().data(), static_cast<int>(this->properties().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "basepb.Table.properties"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Column columns = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.TableEpoch epoch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.TableStatus status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::basepb::TableStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes expand = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_expand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .basepb.Index indexes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indexes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.StoreType type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::basepb::StoreType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 replica_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replica_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 data_range_num = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_range_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Table.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // uint64 db_id = 3;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->db_id(), output);
  }

  // uint64 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // string properties = 5;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Table.properties");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->properties(), output);
  }

  // repeated .basepb.Column columns = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->columns(static_cast<int>(i)), output);
  }

  // .basepb.TableEpoch epoch = 7;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->epoch_, output);
  }

  // int64 create_time = 8;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->create_time(), output);
  }

  // .basepb.TableStatus status = 9;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->status(), output);
  }

  // bytes expand = 10;
  if (this->expand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->expand(), output);
  }

  // repeated .basepb.Index indexes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indexes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->indexes(static_cast<int>(i)), output);
  }

  // .basepb.StoreType type = 12;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // uint64 replica_num = 13;
  if (this->replica_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->replica_num(), output);
  }

  // uint64 data_range_num = 14;
  if (this->data_range_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->data_range_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Table.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // uint64 db_id = 3;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->db_id(), target);
  }

  // uint64 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // string properties = 5;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "basepb.Table.properties");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->properties(), target);
  }

  // repeated .basepb.Column columns = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // .basepb.TableEpoch epoch = 7;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->epoch_, deterministic, target);
  }

  // int64 create_time = 8;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->create_time(), target);
  }

  // .basepb.TableStatus status = 9;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->status(), target);
  }

  // bytes expand = 10;
  if (this->expand().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->expand(), target);
  }

  // repeated .basepb.Index indexes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indexes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->indexes(static_cast<int>(i)), deterministic, target);
  }

  // .basepb.StoreType type = 12;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // uint64 replica_num = 13;
  if (this->replica_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->replica_num(), target);
  }

  // uint64 data_range_num = 14;
  if (this->data_range_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->data_range_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.Table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .basepb.Column columns = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // repeated .basepb.Index indexes = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->indexes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexes(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string properties = 5;
  if (this->properties().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->properties());
  }

  // bytes expand = 10;
  if (this->expand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->expand());
  }

  // .basepb.TableEpoch epoch = 7;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // uint64 db_id = 3;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // int64 create_time = 8;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // .basepb.TableStatus status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .basepb.StoreType type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint64 replica_num = 13;
  if (this->replica_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->replica_num());
  }

  // uint64 data_range_num = 14;
  if (this->data_range_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data_range_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  indexes_.MergeFrom(from.indexes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.properties().size() > 0) {

    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  if (from.expand().size() > 0) {

    expand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expand_);
  }
  if (from.has_epoch()) {
    mutable_epoch()->::basepb::TableEpoch::MergeFrom(from.epoch());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.replica_num() != 0) {
    set_replica_num(from.replica_num());
  }
  if (from.data_range_num() != 0) {
    set_data_range_num(from.data_range_num());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  indexes_.InternalSwap(&other->indexes_);
  name_.Swap(&other->name_);
  db_name_.Swap(&other->db_name_);
  properties_.Swap(&other->properties_);
  expand_.Swap(&other->expand_);
  swap(epoch_, other->epoch_);
  swap(db_id_, other->db_id_);
  swap(id_, other->id_);
  swap(create_time_, other->create_time_);
  swap(status_, other->status_);
  swap(type_, other->type_);
  swap(replica_num_, other->replica_num_);
  swap(data_range_num_, other->data_range_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// string name = 1;
void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:basepb.Table.name)
  return name_.GetNoArena();
}
void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.name)
}
#if LANG_CXX11
void Table::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.name)
}
#endif
void Table::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.name)
}
void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.name)
}
::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:basepb.Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.name)
}

// string db_name = 2;
void Table::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Table::db_name() const {
  // @@protoc_insertion_point(field_get:basepb.Table.db_name)
  return db_name_.GetNoArena();
}
void Table::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.db_name)
}
#if LANG_CXX11
void Table::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.db_name)
}
#endif
void Table::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.db_name)
}
void Table::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.db_name)
}
::std::string* Table::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Table::release_db_name() {
  // @@protoc_insertion_point(field_release:basepb.Table.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.db_name)
}

// uint64 db_id = 3;
void Table::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Table::db_id() const {
  // @@protoc_insertion_point(field_get:basepb.Table.db_id)
  return db_id_;
}
void Table::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.db_id)
}

// uint64 id = 4;
void Table::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Table::id() const {
  // @@protoc_insertion_point(field_get:basepb.Table.id)
  return id_;
}
void Table::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.id)
}

// string properties = 5;
void Table::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Table::properties() const {
  // @@protoc_insertion_point(field_get:basepb.Table.properties)
  return properties_.GetNoArena();
}
void Table::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.properties)
}
#if LANG_CXX11
void Table::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.properties)
}
#endif
void Table::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.properties)
}
void Table::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.properties)
}
::std::string* Table::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Table::release_properties() {
  // @@protoc_insertion_point(field_release:basepb.Table.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.properties)
}

// repeated .basepb.Column columns = 6;
int Table::columns_size() const {
  return columns_.size();
}
void Table::clear_columns() {
  columns_.Clear();
}
const ::basepb::Column& Table::columns(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Table.columns)
  return columns_.Get(index);
}
::basepb::Column* Table::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Table.columns)
  return columns_.Mutable(index);
}
::basepb::Column* Table::add_columns() {
  // @@protoc_insertion_point(field_add:basepb.Table.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Column >*
Table::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Table.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
Table::columns() const {
  // @@protoc_insertion_point(field_list:basepb.Table.columns)
  return columns_;
}

// .basepb.TableEpoch epoch = 7;
bool Table::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void Table::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::basepb::TableEpoch& Table::epoch() const {
  const ::basepb::TableEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:basepb.Table.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::TableEpoch*>(
      &::basepb::_TableEpoch_default_instance_);
}
::basepb::TableEpoch* Table::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::basepb::TableEpoch;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Table.epoch)
  return epoch_;
}
::basepb::TableEpoch* Table::release_epoch() {
  // @@protoc_insertion_point(field_release:basepb.Table.epoch)
  
  ::basepb::TableEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void Table::set_allocated_epoch(::basepb::TableEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.epoch)
}

// int64 create_time = 8;
void Table::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Table::create_time() const {
  // @@protoc_insertion_point(field_get:basepb.Table.create_time)
  return create_time_;
}
void Table::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.create_time)
}

// .basepb.TableStatus status = 9;
void Table::clear_status() {
  status_ = 0;
}
::basepb::TableStatus Table::status() const {
  // @@protoc_insertion_point(field_get:basepb.Table.status)
  return static_cast< ::basepb::TableStatus >(status_);
}
void Table::set_status(::basepb::TableStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.status)
}

// bytes expand = 10;
void Table::clear_expand() {
  expand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Table::expand() const {
  // @@protoc_insertion_point(field_get:basepb.Table.expand)
  return expand_.GetNoArena();
}
void Table::set_expand(const ::std::string& value) {
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.expand)
}
#if LANG_CXX11
void Table::set_expand(::std::string&& value) {
  
  expand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.expand)
}
#endif
void Table::set_expand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.expand)
}
void Table::set_expand(const void* value, size_t size) {
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.expand)
}
::std::string* Table::mutable_expand() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.expand)
  return expand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Table::release_expand() {
  // @@protoc_insertion_point(field_release:basepb.Table.expand)
  
  return expand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_allocated_expand(::std::string* expand) {
  if (expand != NULL) {
    
  } else {
    
  }
  expand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expand);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.expand)
}

// repeated .basepb.Index indexes = 11;
int Table::indexes_size() const {
  return indexes_.size();
}
void Table::clear_indexes() {
  indexes_.Clear();
}
const ::basepb::Index& Table::indexes(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Table.indexes)
  return indexes_.Get(index);
}
::basepb::Index* Table::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Table.indexes)
  return indexes_.Mutable(index);
}
::basepb::Index* Table::add_indexes() {
  // @@protoc_insertion_point(field_add:basepb.Table.indexes)
  return indexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::basepb::Index >*
Table::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Table.indexes)
  return &indexes_;
}
const ::google::protobuf::RepeatedPtrField< ::basepb::Index >&
Table::indexes() const {
  // @@protoc_insertion_point(field_list:basepb.Table.indexes)
  return indexes_;
}

// .basepb.StoreType type = 12;
void Table::clear_type() {
  type_ = 0;
}
::basepb::StoreType Table::type() const {
  // @@protoc_insertion_point(field_get:basepb.Table.type)
  return static_cast< ::basepb::StoreType >(type_);
}
void Table::set_type(::basepb::StoreType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.type)
}

// uint64 replica_num = 13;
void Table::clear_replica_num() {
  replica_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Table::replica_num() const {
  // @@protoc_insertion_point(field_get:basepb.Table.replica_num)
  return replica_num_;
}
void Table::set_replica_num(::google::protobuf::uint64 value) {
  
  replica_num_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.replica_num)
}

// uint64 data_range_num = 14;
void Table::clear_data_range_num() {
  data_range_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Table::data_range_num() const {
  // @@protoc_insertion_point(field_get:basepb.Table.data_range_num)
  return data_range_num_;
}
void Table::set_data_range_num(::google::protobuf::uint64 value) {
  
  data_range_num_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.data_range_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatcherEvent::kWatcherTypeFieldNumber;
const int WatcherEvent::kEventTypeFieldNumber;
const int WatcherEvent::kNodeIdFieldNumber;
const int WatcherEvent::kDbIdFieldNumber;
const int WatcherEvent::kTableIdFieldNumber;
const int WatcherEvent::kRangeIdFieldNumber;
const int WatcherEvent::kValueFieldNumber;
const int WatcherEvent::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatcherEvent::WatcherEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:basepb.WatcherEvent)
}
WatcherEvent::WatcherEvent(const WatcherEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&watcher_type_, &from.watcher_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&watcher_type_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:basepb.WatcherEvent)
}

void WatcherEvent::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&watcher_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&watcher_type_)) + sizeof(version_));
  _cached_size_ = 0;
}

WatcherEvent::~WatcherEvent() {
  // @@protoc_insertion_point(destructor:basepb.WatcherEvent)
  SharedDtor();
}

void WatcherEvent::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatcherEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatcherEvent::descriptor() {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WatcherEvent& WatcherEvent::default_instance() {
  protobuf_basepb_2fbasepb_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatcherEvent* WatcherEvent::New(::google::protobuf::Arena* arena) const {
  WatcherEvent* n = new WatcherEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatcherEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:basepb.WatcherEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&watcher_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&watcher_type_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

bool WatcherEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:basepb.WatcherEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .basepb.WatcherType watcher_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_watcher_type(static_cast< ::basepb::WatcherType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .basepb.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::basepb::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:basepb.WatcherEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:basepb.WatcherEvent)
  return false;
#undef DO_
}

void WatcherEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:basepb.WatcherEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.WatcherType watcher_type = 1;
  if (this->watcher_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->watcher_type(), output);
  }

  // .basepb.EventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // uint64 node_id = 3;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->node_id(), output);
  }

  // uint64 db_id = 4;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->db_id(), output);
  }

  // uint64 table_id = 5;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->table_id(), output);
  }

  // uint64 range_id = 6;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->range_id(), output);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->value(), output);
  }

  // uint64 version = 8;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:basepb.WatcherEvent)
}

::google::protobuf::uint8* WatcherEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:basepb.WatcherEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .basepb.WatcherType watcher_type = 1;
  if (this->watcher_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->watcher_type(), target);
  }

  // .basepb.EventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // uint64 node_id = 3;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->node_id(), target);
  }

  // uint64 db_id = 4;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->db_id(), target);
  }

  // uint64 table_id = 5;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->table_id(), target);
  }

  // uint64 range_id = 6;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->range_id(), target);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->value(), target);
  }

  // uint64 version = 8;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:basepb.WatcherEvent)
  return target;
}

size_t WatcherEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:basepb.WatcherEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .basepb.WatcherType watcher_type = 1;
  if (this->watcher_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->watcher_type());
  }

  // .basepb.EventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  // uint64 node_id = 3;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 db_id = 4;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 5;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint64 range_id = 6;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 version = 8;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatcherEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:basepb.WatcherEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const WatcherEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatcherEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:basepb.WatcherEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:basepb.WatcherEvent)
    MergeFrom(*source);
  }
}

void WatcherEvent::MergeFrom(const WatcherEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:basepb.WatcherEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.watcher_type() != 0) {
    set_watcher_type(from.watcher_type());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void WatcherEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:basepb.WatcherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatcherEvent::CopyFrom(const WatcherEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:basepb.WatcherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatcherEvent::IsInitialized() const {
  return true;
}

void WatcherEvent::Swap(WatcherEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatcherEvent::InternalSwap(WatcherEvent* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(watcher_type_, other->watcher_type_);
  swap(event_type_, other->event_type_);
  swap(node_id_, other->node_id_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(range_id_, other->range_id_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatcherEvent::GetMetadata() const {
  protobuf_basepb_2fbasepb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_basepb_2fbasepb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatcherEvent

// .basepb.WatcherType watcher_type = 1;
void WatcherEvent::clear_watcher_type() {
  watcher_type_ = 0;
}
::basepb::WatcherType WatcherEvent::watcher_type() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.watcher_type)
  return static_cast< ::basepb::WatcherType >(watcher_type_);
}
void WatcherEvent::set_watcher_type(::basepb::WatcherType value) {
  
  watcher_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.watcher_type)
}

// .basepb.EventType event_type = 2;
void WatcherEvent::clear_event_type() {
  event_type_ = 0;
}
::basepb::EventType WatcherEvent::event_type() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.event_type)
  return static_cast< ::basepb::EventType >(event_type_);
}
void WatcherEvent::set_event_type(::basepb::EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.event_type)
}

// uint64 node_id = 3;
void WatcherEvent::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WatcherEvent::node_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.node_id)
  return node_id_;
}
void WatcherEvent::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.node_id)
}

// uint64 db_id = 4;
void WatcherEvent::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WatcherEvent::db_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.db_id)
  return db_id_;
}
void WatcherEvent::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.db_id)
}

// uint64 table_id = 5;
void WatcherEvent::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WatcherEvent::table_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.table_id)
  return table_id_;
}
void WatcherEvent::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.table_id)
}

// uint64 range_id = 6;
void WatcherEvent::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WatcherEvent::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.range_id)
  return range_id_;
}
void WatcherEvent::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.range_id)
}

// bytes value = 7;
void WatcherEvent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WatcherEvent::value() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.value)
  return value_.GetNoArena();
}
void WatcherEvent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.value)
}
#if LANG_CXX11
void WatcherEvent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.WatcherEvent.value)
}
#endif
void WatcherEvent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.WatcherEvent.value)
}
void WatcherEvent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.WatcherEvent.value)
}
::std::string* WatcherEvent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:basepb.WatcherEvent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WatcherEvent::release_value() {
  // @@protoc_insertion_point(field_release:basepb.WatcherEvent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WatcherEvent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:basepb.WatcherEvent.value)
}

// uint64 version = 8;
void WatcherEvent::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WatcherEvent::version() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.version)
  return version_;
}
void WatcherEvent::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace basepb

// @@protoc_insertion_point(global_scope)
