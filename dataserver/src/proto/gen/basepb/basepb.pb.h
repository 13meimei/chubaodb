// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basepb/basepb.proto

#ifndef PROTOBUF_basepb_2fbasepb_2eproto__INCLUDED
#define PROTOBUF_basepb_2fbasepb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace basepb {
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class DataBase;
class DataBaseDefaultTypeInternal;
extern DataBaseDefaultTypeInternal _DataBase_default_instance_;
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class Leader;
class LeaderDefaultTypeInternal;
extern LeaderDefaultTypeInternal _Leader_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class PeerStatus;
class PeerStatusDefaultTypeInternal;
extern PeerStatusDefaultTypeInternal _PeerStatus_default_instance_;
class Primary;
class PrimaryDefaultTypeInternal;
extern PrimaryDefaultTypeInternal _Primary_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RangeEpoch;
class RangeEpochDefaultTypeInternal;
extern RangeEpochDefaultTypeInternal _RangeEpoch_default_instance_;
class RangePeer;
class RangePeerDefaultTypeInternal;
extern RangePeerDefaultTypeInternal _RangePeer_default_instance_;
class Replica;
class ReplicaDefaultTypeInternal;
extern ReplicaDefaultTypeInternal _Replica_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableEpoch;
class TableEpochDefaultTypeInternal;
extern TableEpochDefaultTypeInternal _TableEpoch_default_instance_;
class WatcherEvent;
class WatcherEventDefaultTypeInternal;
extern WatcherEventDefaultTypeInternal _WatcherEvent_default_instance_;
}  // namespace basepb

namespace basepb {

namespace protobuf_basepb_2fbasepb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_basepb_2fbasepb_2eproto

enum DataType {
  Invalid = 0,
  TinyInt = 1,
  SmallInt = 2,
  MediumInt = 3,
  Int = 4,
  BigInt = 5,
  Bit = 6,
  Float = 10,
  Double = 11,
  Decimal = 12,
  Date = 20,
  TimeStamp = 21,
  DateTime = 22,
  Time = 23,
  Year = 24,
  Varchar = 30,
  Binary = 31,
  Char = 32,
  NChar = 33,
  Text = 34,
  VarBinary = 35,
  Json = 40,
  Null = 50,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = Invalid;
const DataType DataType_MAX = Null;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum StoreType {
  Store_Invalid = 0,
  Store_Hot = 1,
  Store_Warm = 2,
  Store_Mix = 3,
  StoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StoreType_IsValid(int value);
const StoreType StoreType_MIN = Store_Invalid;
const StoreType StoreType_MAX = Store_Mix;
const int StoreType_ARRAYSIZE = StoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoreType_descriptor();
inline const ::std::string& StoreType_Name(StoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoreType_descriptor(), value);
}
inline bool StoreType_Parse(
    const ::std::string& name, StoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoreType>(
    StoreType_descriptor(), name, value);
}
enum RangeType {
  RNG_Invalid = 0,
  RNG_Index = 1,
  RNG_Data = 2,
  RangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RangeType_IsValid(int value);
const RangeType RangeType_MIN = RNG_Invalid;
const RangeType RangeType_MAX = RNG_Data;
const int RangeType_ARRAYSIZE = RangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RangeType_descriptor();
inline const ::std::string& RangeType_Name(RangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RangeType_descriptor(), value);
}
inline bool RangeType_Parse(
    const ::std::string& name, RangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RangeType>(
    RangeType_descriptor(), name, value);
}
enum ColumnType {
  COL_Common = 0,
  COL_System = 1,
  ColumnType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ColumnType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ColumnType_IsValid(int value);
const ColumnType ColumnType_MIN = COL_Common;
const ColumnType ColumnType_MAX = COL_System;
const int ColumnType_ARRAYSIZE = ColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnType_descriptor();
inline const ::std::string& ColumnType_Name(ColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnType_descriptor(), value);
}
inline bool ColumnType_Parse(
    const ::std::string& name, ColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnType>(
    ColumnType_descriptor(), name, value);
}
enum NodeState {
  N_Invalid = 0,
  N_Online = 1,
  N_Offline = 2,
  N_Updating = 3,
  N_Offlining = 4,
  NodeState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NodeState_IsValid(int value);
const NodeState NodeState_MIN = N_Invalid;
const NodeState NodeState_MAX = N_Offlining;
const int NodeState_ARRAYSIZE = NodeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeState_descriptor();
inline const ::std::string& NodeState_Name(NodeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeState_descriptor(), value);
}
inline bool NodeState_Parse(
    const ::std::string& name, NodeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeState>(
    NodeState_descriptor(), name, value);
}
enum RangePeerState {
  RPS_Invalid = 0,
  RPS_NoLeader = 1,
  RPS_Follower = 2,
  RPS_Leader = 3,
  RangePeerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RangePeerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RangePeerState_IsValid(int value);
const RangePeerState RangePeerState_MIN = RPS_Invalid;
const RangePeerState RangePeerState_MAX = RPS_Leader;
const int RangePeerState_ARRAYSIZE = RangePeerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RangePeerState_descriptor();
inline const ::std::string& RangePeerState_Name(RangePeerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RangePeerState_descriptor(), value);
}
inline bool RangePeerState_Parse(
    const ::std::string& name, RangePeerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RangePeerState>(
    RangePeerState_descriptor(), name, value);
}
enum PeerType {
  PeerType_Invalid = 0,
  PeerType_Normal = 1,
  PeerType_Learner = 2,
  PeerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerType_IsValid(int value);
const PeerType PeerType_MIN = PeerType_Invalid;
const PeerType PeerType_MAX = PeerType_Learner;
const int PeerType_ARRAYSIZE = PeerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerType_descriptor();
inline const ::std::string& PeerType_Name(PeerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerType_descriptor(), value);
}
inline bool PeerType_Parse(
    const ::std::string& name, PeerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerType>(
    PeerType_descriptor(), name, value);
}
enum TableStatus {
  TableInvalid = 0,
  TableRunning = 1,
  TableStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TableStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TableStatus_IsValid(int value);
const TableStatus TableStatus_MIN = TableInvalid;
const TableStatus TableStatus_MAX = TableRunning;
const int TableStatus_ARRAYSIZE = TableStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableStatus_descriptor();
inline const ::std::string& TableStatus_Name(TableStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableStatus_descriptor(), value);
}
inline bool TableStatus_Parse(
    const ::std::string& name, TableStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableStatus>(
    TableStatus_descriptor(), name, value);
}
enum IndexType {
  I_Invalid = 0,
  I_Btree = 1,
  I_Hash = 2,
  IndexType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IndexType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IndexType_IsValid(int value);
const IndexType IndexType_MIN = I_Invalid;
const IndexType IndexType_MAX = I_Hash;
const int IndexType_ARRAYSIZE = IndexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexType_descriptor();
inline const ::std::string& IndexType_Name(IndexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexType_descriptor(), value);
}
inline bool IndexType_Parse(
    const ::std::string& name, IndexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexType>(
    IndexType_descriptor(), name, value);
}
enum EventType {
  Event_Type_Invalid = 0,
  Event_Type_PUT = 1,
  Event_Type_DELETE = 2,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = Event_Type_Invalid;
const EventType EventType_MAX = Event_Type_DELETE;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
enum WatcherType {
  Watcher_Type_Invalid = 0,
  Watcher_Type_Node = 1,
  Watcher_Type_Database = 2,
  Watcher_Type_Table = 3,
  Watcher_Type_Range = 4,
  WatcherType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WatcherType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WatcherType_IsValid(int value);
const WatcherType WatcherType_MIN = Watcher_Type_Invalid;
const WatcherType WatcherType_MAX = Watcher_Type_Range;
const int WatcherType_ARRAYSIZE = WatcherType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WatcherType_descriptor();
inline const ::std::string& WatcherType_Name(WatcherType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WatcherType_descriptor(), value);
}
inline bool WatcherType_Parse(
    const ::std::string& name, WatcherType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WatcherType>(
    WatcherType_descriptor(), name, value);
}
// ===================================================================

class RangePeer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.RangePeer) */ {
 public:
  RangePeer();
  virtual ~RangePeer();

  RangePeer(const RangePeer& from);

  inline RangePeer& operator=(const RangePeer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangePeer(RangePeer&& from) noexcept
    : RangePeer() {
    *this = ::std::move(from);
  }

  inline RangePeer& operator=(RangePeer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangePeer& default_instance();

  static inline const RangePeer* internal_default_instance() {
    return reinterpret_cast<const RangePeer*>(
               &_RangePeer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RangePeer* other);
  friend void swap(RangePeer& a, RangePeer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangePeer* New() const PROTOBUF_FINAL { return New(NULL); }

  RangePeer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangePeer& from);
  void MergeFrom(const RangePeer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangePeer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 peer_id = 2;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 2;
  ::google::protobuf::uint64 peer_id() const;
  void set_peer_id(::google::protobuf::uint64 value);

  // .basepb.RangePeerState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::basepb::RangePeerState state() const;
  void set_state(::basepb::RangePeerState value);

  // @@protoc_insertion_point(class_scope:basepb.RangePeer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 peer_id_;
  int state_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .basepb.RangePeer range_peers = 8;
  int range_peers_size() const;
  void clear_range_peers();
  static const int kRangePeersFieldNumber = 8;
  const ::basepb::RangePeer& range_peers(int index) const;
  ::basepb::RangePeer* mutable_range_peers(int index);
  ::basepb::RangePeer* add_range_peers();
  ::google::protobuf::RepeatedPtrField< ::basepb::RangePeer >*
      mutable_range_peers();
  const ::google::protobuf::RepeatedPtrField< ::basepb::RangePeer >&
      range_peers() const;

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 server_port = 3;
  void clear_server_port();
  static const int kServerPortFieldNumber = 3;
  ::google::protobuf::uint32 server_port() const;
  void set_server_port(::google::protobuf::uint32 value);

  // uint32 raft_port = 4;
  void clear_raft_port();
  static const int kRaftPortFieldNumber = 4;
  ::google::protobuf::uint32 raft_port() const;
  void set_raft_port(::google::protobuf::uint32 value);

  // uint32 admin_port = 5;
  void clear_admin_port();
  static const int kAdminPortFieldNumber = 5;
  ::google::protobuf::uint32 admin_port() const;
  void set_admin_port(::google::protobuf::uint32 value);

  // .basepb.NodeState state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::basepb::NodeState state() const;
  void set_state(::basepb::NodeState value);

  // int64 version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // int64 last_update_time = 9;
  void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 9;
  ::google::protobuf::int64 last_update_time() const;
  void set_last_update_time(::google::protobuf::int64 value);

  // .basepb.StoreType type = 10;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::basepb::StoreType type() const;
  void set_type(::basepb::StoreType value);

  // @@protoc_insertion_point(class_scope:basepb.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::basepb::RangePeer > range_peers_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 raft_port_;
  ::google::protobuf::uint32 admin_port_;
  int state_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::int64 last_update_time_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // .basepb.PeerType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::basepb::PeerType type() const;
  void set_type(::basepb::PeerType value);

  // @@protoc_insertion_point(class_scope:basepb.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 node_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.PeerStatus) */ {
 public:
  PeerStatus();
  virtual ~PeerStatus();

  PeerStatus(const PeerStatus& from);

  inline PeerStatus& operator=(const PeerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerStatus(PeerStatus&& from) noexcept
    : PeerStatus() {
    *this = ::std::move(from);
  }

  inline PeerStatus& operator=(PeerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerStatus& default_instance();

  static inline const PeerStatus* internal_default_instance() {
    return reinterpret_cast<const PeerStatus*>(
               &_PeerStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PeerStatus* other);
  friend void swap(PeerStatus& a, PeerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerStatus& from);
  void MergeFrom(const PeerStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .basepb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::basepb::Peer& peer() const;
  ::basepb::Peer* mutable_peer();
  ::basepb::Peer* release_peer();
  void set_allocated_peer(::basepb::Peer* peer);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 commit = 3;
  void clear_commit();
  static const int kCommitFieldNumber = 3;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // uint64 down_seconds = 4;
  void clear_down_seconds();
  static const int kDownSecondsFieldNumber = 4;
  ::google::protobuf::uint64 down_seconds() const;
  void set_down_seconds(::google::protobuf::uint64 value);

  // uint64 applied = 6;
  void clear_applied();
  static const int kAppliedFieldNumber = 6;
  ::google::protobuf::uint64 applied() const;
  void set_applied(::google::protobuf::uint64 value);

  // bool snapshotting = 5;
  void clear_snapshotting();
  static const int kSnapshottingFieldNumber = 5;
  bool snapshotting() const;
  void set_snapshotting(bool value);

  // @@protoc_insertion_point(class_scope:basepb.PeerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::basepb::Peer* peer_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 commit_;
  ::google::protobuf::uint64 down_seconds_;
  ::google::protobuf::uint64 applied_;
  bool snapshotting_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Replica : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Replica) */ {
 public:
  Replica();
  virtual ~Replica();

  Replica(const Replica& from);

  inline Replica& operator=(const Replica& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Replica(Replica&& from) noexcept
    : Replica() {
    *this = ::std::move(from);
  }

  inline Replica& operator=(Replica&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Replica& default_instance();

  static inline const Replica* internal_default_instance() {
    return reinterpret_cast<const Replica*>(
               &_Replica_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Replica* other);
  friend void swap(Replica& a, Replica& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Replica* New() const PROTOBUF_FINAL { return New(NULL); }

  Replica* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Replica& from);
  void MergeFrom(const Replica& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Replica* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes start_key = 3;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 3;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 4;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // .basepb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::basepb::Peer& peer() const;
  ::basepb::Peer* mutable_peer();
  ::basepb::Peer* release_peer();
  void set_allocated_peer(::basepb::Peer* peer);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.Replica)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::basepb::Peer* peer_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeEpoch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.RangeEpoch) */ {
 public:
  RangeEpoch();
  virtual ~RangeEpoch();

  RangeEpoch(const RangeEpoch& from);

  inline RangeEpoch& operator=(const RangeEpoch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeEpoch(RangeEpoch&& from) noexcept
    : RangeEpoch() {
    *this = ::std::move(from);
  }

  inline RangeEpoch& operator=(RangeEpoch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeEpoch& default_instance();

  static inline const RangeEpoch* internal_default_instance() {
    return reinterpret_cast<const RangeEpoch*>(
               &_RangeEpoch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RangeEpoch* other);
  friend void swap(RangeEpoch& a, RangeEpoch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeEpoch* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeEpoch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeEpoch& from);
  void MergeFrom(const RangeEpoch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeEpoch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 conf_ver = 1;
  void clear_conf_ver();
  static const int kConfVerFieldNumber = 1;
  ::google::protobuf::uint64 conf_ver() const;
  void set_conf_ver(::google::protobuf::uint64 value);

  // uint64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.RangeEpoch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 conf_ver_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const PROTOBUF_FINAL { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .basepb.Peer peers = 5;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 5;
  const ::basepb::Peer& peers(int index) const;
  ::basepb::Peer* mutable_peers(int index);
  ::basepb::Peer* add_peers();
  ::google::protobuf::RepeatedPtrField< ::basepb::Peer >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::basepb::Peer >&
      peers() const;

  // repeated .basepb.Column primary_keys = 8;
  int primary_keys_size() const;
  void clear_primary_keys();
  static const int kPrimaryKeysFieldNumber = 8;
  const ::basepb::Column& primary_keys(int index) const;
  ::basepb::Column* mutable_primary_keys(int index);
  ::basepb::Column* add_primary_keys();
  ::google::protobuf::RepeatedPtrField< ::basepb::Column >*
      mutable_primary_keys();
  const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
      primary_keys() const;

  // bytes start_key = 2;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 3;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // .basepb.RangeEpoch range_epoch = 4;
  bool has_range_epoch() const;
  void clear_range_epoch();
  static const int kRangeEpochFieldNumber = 4;
  const ::basepb::RangeEpoch& range_epoch() const;
  ::basepb::RangeEpoch* mutable_range_epoch();
  ::basepb::RangeEpoch* release_range_epoch();
  void set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 db_id = 6;
  void clear_db_id();
  static const int kDbIdFieldNumber = 6;
  ::google::protobuf::uint64 db_id() const;
  void set_db_id(::google::protobuf::uint64 value);

  // uint64 table_id = 7;
  void clear_table_id();
  static const int kTableIdFieldNumber = 7;
  ::google::protobuf::uint64 table_id() const;
  void set_table_id(::google::protobuf::uint64 value);

  // uint64 leader = 9;
  void clear_leader();
  static const int kLeaderFieldNumber = 9;
  ::google::protobuf::uint64 leader() const;
  void set_leader(::google::protobuf::uint64 value);

  // .basepb.RangeType range_type = 10;
  void clear_range_type();
  static const int kRangeTypeFieldNumber = 10;
  ::basepb::RangeType range_type() const;
  void set_range_type(::basepb::RangeType value);

  // .basepb.StoreType store_type = 11;
  void clear_store_type();
  static const int kStoreTypeFieldNumber = 11;
  ::basepb::StoreType store_type() const;
  void set_store_type(::basepb::StoreType value);

  // uint64 term = 12;
  void clear_term();
  static const int kTermFieldNumber = 12;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 parent_range_id = 13;
  void clear_parent_range_id();
  static const int kParentRangeIdFieldNumber = 13;
  ::google::protobuf::uint64 parent_range_id() const;
  void set_parent_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::basepb::Peer > peers_;
  ::google::protobuf::RepeatedPtrField< ::basepb::Column > primary_keys_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::basepb::RangeEpoch* range_epoch_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 db_id_;
  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint64 leader_;
  int range_type_;
  int store_type_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 parent_range_id_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Leader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Leader) */ {
 public:
  Leader();
  virtual ~Leader();

  Leader(const Leader& from);

  inline Leader& operator=(const Leader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Leader(Leader&& from) noexcept
    : Leader() {
    *this = ::std::move(from);
  }

  inline Leader& operator=(Leader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Leader& default_instance();

  static inline const Leader* internal_default_instance() {
    return reinterpret_cast<const Leader*>(
               &_Leader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Leader* other);
  friend void swap(Leader& a, Leader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Leader* New() const PROTOBUF_FINAL { return New(NULL); }

  Leader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Leader& from);
  void MergeFrom(const Leader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Leader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_addr = 3;
  void clear_node_addr();
  static const int kNodeAddrFieldNumber = 3;
  const ::std::string& node_addr() const;
  void set_node_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_node_addr(::std::string&& value);
  #endif
  void set_node_addr(const char* value);
  void set_node_addr(const char* value, size_t size);
  ::std::string* mutable_node_addr();
  ::std::string* release_node_addr();
  void set_allocated_node_addr(::std::string* node_addr);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.Leader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_addr_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 node_id_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.DataBase) */ {
 public:
  DataBase();
  virtual ~DataBase();

  DataBase(const DataBase& from);

  inline DataBase& operator=(const DataBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBase(DataBase&& from) noexcept
    : DataBase() {
    *this = ::std::move(from);
  }

  inline DataBase& operator=(DataBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBase& default_instance();

  static inline const DataBase* internal_default_instance() {
    return reinterpret_cast<const DataBase*>(
               &_DataBase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DataBase* other);
  friend void swap(DataBase& a, DataBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBase* New() const PROTOBUF_FINAL { return New(NULL); }

  DataBase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataBase& from);
  void MergeFrom(const DataBase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // int64 create_time = 4;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:basepb.DataBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::int64 create_time_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Column : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Column) */ {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Column& default_instance();

  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Column* other);
  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const PROTOBUF_FINAL { return New(NULL); }

  Column* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Column* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes default_value = 11;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 11;
  const ::std::string& default_value() const;
  void set_default_value(const ::std::string& value);
  #if LANG_CXX11
  void set_default_value(::std::string&& value);
  #endif
  void set_default_value(const char* value);
  void set_default_value(const void* value, size_t size);
  ::std::string* mutable_default_value();
  ::std::string* release_default_value();
  void set_allocated_default_value(::std::string* default_value);

  // string properties = 12;
  void clear_properties();
  static const int kPropertiesFieldNumber = 12;
  const ::std::string& properties() const;
  void set_properties(const ::std::string& value);
  #if LANG_CXX11
  void set_properties(::std::string&& value);
  #endif
  void set_properties(const char* value);
  void set_properties(const char* value, size_t size);
  ::std::string* mutable_properties();
  ::std::string* release_properties();
  void set_allocated_properties(::std::string* properties);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // .basepb.DataType data_type = 3;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 3;
  ::basepb::DataType data_type() const;
  void set_data_type(::basepb::DataType value);

  // int32 scale = 5;
  void clear_scale();
  static const int kScaleFieldNumber = 5;
  ::google::protobuf::int32 scale() const;
  void set_scale(::google::protobuf::int32 value);

  // uint64 primary_key = 8;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 8;
  ::google::protobuf::uint64 primary_key() const;
  void set_primary_key(::google::protobuf::uint64 value);

  // int32 precision = 6;
  void clear_precision();
  static const int kPrecisionFieldNumber = 6;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // bool unsigned = 4;
  void clear_unsigned_();
  static const int kUnsignedFieldNumber = 4;
  bool unsigned_() const;
  void set_unsigned_(bool value);

  // bool nullable = 7;
  void clear_nullable();
  static const int kNullableFieldNumber = 7;
  bool nullable() const;
  void set_nullable(bool value);

  // bool index = 10;
  void clear_index();
  static const int kIndexFieldNumber = 10;
  bool index() const;
  void set_index(bool value);

  // bool auto_increment = 13;
  void clear_auto_increment();
  static const int kAutoIncrementFieldNumber = 13;
  bool auto_increment() const;
  void set_auto_increment(bool value);

  // int32 ordinal = 9;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 9;
  ::google::protobuf::int32 ordinal() const;
  void set_ordinal(::google::protobuf::int32 value);

  // bool unique = 14;
  void clear_unique();
  static const int kUniqueFieldNumber = 14;
  bool unique() const;
  void set_unique(bool value);

  // .basepb.ColumnType col_type = 15;
  void clear_col_type();
  static const int kColTypeFieldNumber = 15;
  ::basepb::ColumnType col_type() const;
  void set_col_type(::basepb::ColumnType value);

  // @@protoc_insertion_point(class_scope:basepb.Column)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr default_value_;
  ::google::protobuf::internal::ArenaStringPtr properties_;
  ::google::protobuf::uint64 id_;
  int data_type_;
  ::google::protobuf::int32 scale_;
  ::google::protobuf::uint64 primary_key_;
  ::google::protobuf::int32 precision_;
  bool unsigned__;
  bool nullable_;
  bool index_;
  bool auto_increment_;
  ::google::protobuf::int32 ordinal_;
  bool unique_;
  int col_type_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Primary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Primary) */ {
 public:
  Primary();
  virtual ~Primary();

  Primary(const Primary& from);

  inline Primary& operator=(const Primary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Primary(Primary&& from) noexcept
    : Primary() {
    *this = ::std::move(from);
  }

  inline Primary& operator=(Primary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Primary& default_instance();

  static inline const Primary* internal_default_instance() {
    return reinterpret_cast<const Primary*>(
               &_Primary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Primary* other);
  friend void swap(Primary& a, Primary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Primary* New() const PROTOBUF_FINAL { return New(NULL); }

  Primary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Primary& from);
  void MergeFrom(const Primary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Primary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string column_name = 1;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // .basepb.Primary next = 2;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 2;
  const ::basepb::Primary& next() const;
  ::basepb::Primary* mutable_next();
  ::basepb::Primary* release_next();
  void set_allocated_next(::basepb::Primary* next);

  // @@protoc_insertion_point(class_scope:basepb.Primary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  ::basepb::Primary* next_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableEpoch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.TableEpoch) */ {
 public:
  TableEpoch();
  virtual ~TableEpoch();

  TableEpoch(const TableEpoch& from);

  inline TableEpoch& operator=(const TableEpoch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableEpoch(TableEpoch&& from) noexcept
    : TableEpoch() {
    *this = ::std::move(from);
  }

  inline TableEpoch& operator=(TableEpoch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableEpoch& default_instance();

  static inline const TableEpoch* internal_default_instance() {
    return reinterpret_cast<const TableEpoch*>(
               &_TableEpoch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TableEpoch* other);
  friend void swap(TableEpoch& a, TableEpoch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableEpoch* New() const PROTOBUF_FINAL { return New(NULL); }

  TableEpoch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableEpoch& from);
  void MergeFrom(const TableEpoch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableEpoch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 conf_ver = 1;
  void clear_conf_ver();
  static const int kConfVerFieldNumber = 1;
  ::google::protobuf::uint64 conf_ver() const;
  void set_conf_ver(::google::protobuf::uint64 value);

  // uint64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.TableEpoch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 conf_ver_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const PROTOBUF_FINAL { return New(NULL); }

  Index* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string col_names = 3;
  int col_names_size() const;
  void clear_col_names();
  static const int kColNamesFieldNumber = 3;
  const ::std::string& col_names(int index) const;
  ::std::string* mutable_col_names(int index);
  void set_col_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_col_names(int index, ::std::string&& value);
  #endif
  void set_col_names(int index, const char* value);
  void set_col_names(int index, const char* value, size_t size);
  ::std::string* add_col_names();
  void add_col_names(const ::std::string& value);
  #if LANG_CXX11
  void add_col_names(::std::string&& value);
  #endif
  void add_col_names(const char* value);
  void add_col_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& col_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_col_names();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string comment = 5;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // bool unique = 4;
  void clear_unique();
  static const int kUniqueFieldNumber = 4;
  bool unique() const;
  void set_unique(bool value);

  // .basepb.IndexType index_type = 6;
  void clear_index_type();
  static const int kIndexTypeFieldNumber = 6;
  ::basepb::IndexType index_type() const;
  void set_index_type(::basepb::IndexType value);

  // @@protoc_insertion_point(class_scope:basepb.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> col_names_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::uint64 id_;
  bool unique_;
  int index_type_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .basepb.Column columns = 6;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 6;
  const ::basepb::Column& columns(int index) const;
  ::basepb::Column* mutable_columns(int index);
  ::basepb::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::basepb::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
      columns() const;

  // repeated .basepb.Index indexes = 11;
  int indexes_size() const;
  void clear_indexes();
  static const int kIndexesFieldNumber = 11;
  const ::basepb::Index& indexes(int index) const;
  ::basepb::Index* mutable_indexes(int index);
  ::basepb::Index* add_indexes();
  ::google::protobuf::RepeatedPtrField< ::basepb::Index >*
      mutable_indexes();
  const ::google::protobuf::RepeatedPtrField< ::basepb::Index >&
      indexes() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string db_name = 2;
  void clear_db_name();
  static const int kDbNameFieldNumber = 2;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // string properties = 5;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::std::string& properties() const;
  void set_properties(const ::std::string& value);
  #if LANG_CXX11
  void set_properties(::std::string&& value);
  #endif
  void set_properties(const char* value);
  void set_properties(const char* value, size_t size);
  ::std::string* mutable_properties();
  ::std::string* release_properties();
  void set_allocated_properties(::std::string* properties);

  // bytes expand = 10;
  void clear_expand();
  static const int kExpandFieldNumber = 10;
  const ::std::string& expand() const;
  void set_expand(const ::std::string& value);
  #if LANG_CXX11
  void set_expand(::std::string&& value);
  #endif
  void set_expand(const char* value);
  void set_expand(const void* value, size_t size);
  ::std::string* mutable_expand();
  ::std::string* release_expand();
  void set_allocated_expand(::std::string* expand);

  // .basepb.TableEpoch epoch = 7;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 7;
  const ::basepb::TableEpoch& epoch() const;
  ::basepb::TableEpoch* mutable_epoch();
  ::basepb::TableEpoch* release_epoch();
  void set_allocated_epoch(::basepb::TableEpoch* epoch);

  // uint64 db_id = 3;
  void clear_db_id();
  static const int kDbIdFieldNumber = 3;
  ::google::protobuf::uint64 db_id() const;
  void set_db_id(::google::protobuf::uint64 value);

  // uint64 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 create_time = 8;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 8;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // .basepb.TableStatus status = 9;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::basepb::TableStatus status() const;
  void set_status(::basepb::TableStatus value);

  // .basepb.StoreType type = 12;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::basepb::StoreType type() const;
  void set_type(::basepb::StoreType value);

  // uint64 replica_num = 13;
  void clear_replica_num();
  static const int kReplicaNumFieldNumber = 13;
  ::google::protobuf::uint64 replica_num() const;
  void set_replica_num(::google::protobuf::uint64 value);

  // uint64 data_range_num = 14;
  void clear_data_range_num();
  static const int kDataRangeNumFieldNumber = 14;
  ::google::protobuf::uint64 data_range_num() const;
  void set_data_range_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::basepb::Column > columns_;
  ::google::protobuf::RepeatedPtrField< ::basepb::Index > indexes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr properties_;
  ::google::protobuf::internal::ArenaStringPtr expand_;
  ::basepb::TableEpoch* epoch_;
  ::google::protobuf::uint64 db_id_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 create_time_;
  int status_;
  int type_;
  ::google::protobuf::uint64 replica_num_;
  ::google::protobuf::uint64 data_range_num_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WatcherEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:basepb.WatcherEvent) */ {
 public:
  WatcherEvent();
  virtual ~WatcherEvent();

  WatcherEvent(const WatcherEvent& from);

  inline WatcherEvent& operator=(const WatcherEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatcherEvent(WatcherEvent&& from) noexcept
    : WatcherEvent() {
    *this = ::std::move(from);
  }

  inline WatcherEvent& operator=(WatcherEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WatcherEvent& default_instance();

  static inline const WatcherEvent* internal_default_instance() {
    return reinterpret_cast<const WatcherEvent*>(
               &_WatcherEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(WatcherEvent* other);
  friend void swap(WatcherEvent& a, WatcherEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatcherEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  WatcherEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WatcherEvent& from);
  void MergeFrom(const WatcherEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WatcherEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 7;
  void clear_value();
  static const int kValueFieldNumber = 7;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .basepb.WatcherType watcher_type = 1;
  void clear_watcher_type();
  static const int kWatcherTypeFieldNumber = 1;
  ::basepb::WatcherType watcher_type() const;
  void set_watcher_type(::basepb::WatcherType value);

  // .basepb.EventType event_type = 2;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::basepb::EventType event_type() const;
  void set_event_type(::basepb::EventType value);

  // uint64 node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // uint64 db_id = 4;
  void clear_db_id();
  static const int kDbIdFieldNumber = 4;
  ::google::protobuf::uint64 db_id() const;
  void set_db_id(::google::protobuf::uint64 value);

  // uint64 table_id = 5;
  void clear_table_id();
  static const int kTableIdFieldNumber = 5;
  ::google::protobuf::uint64 table_id() const;
  void set_table_id(::google::protobuf::uint64 value);

  // uint64 range_id = 6;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 6;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 version = 8;
  void clear_version();
  static const int kVersionFieldNumber = 8;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:basepb.WatcherEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int watcher_type_;
  int event_type_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 db_id_;
  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_basepb_2fbasepb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RangePeer

// uint64 range_id = 1;
inline void RangePeer::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangePeer::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.RangePeer.range_id)
  return range_id_;
}
inline void RangePeer::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangePeer.range_id)
}

// uint64 peer_id = 2;
inline void RangePeer::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangePeer::peer_id() const {
  // @@protoc_insertion_point(field_get:basepb.RangePeer.peer_id)
  return peer_id_;
}
inline void RangePeer::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangePeer.peer_id)
}

// .basepb.RangePeerState state = 3;
inline void RangePeer::clear_state() {
  state_ = 0;
}
inline ::basepb::RangePeerState RangePeer::state() const {
  // @@protoc_insertion_point(field_get:basepb.RangePeer.state)
  return static_cast< ::basepb::RangePeerState >(state_);
}
inline void RangePeer::set_state(::basepb::RangePeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangePeer.state)
}

// -------------------------------------------------------------------

// Node

// uint64 id = 1;
inline void Node::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Node::id() const {
  // @@protoc_insertion_point(field_get:basepb.Node.id)
  return id_;
}
inline void Node::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.id)
}

// string ip = 2;
inline void Node::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::ip() const {
  // @@protoc_insertion_point(field_get:basepb.Node.ip)
  return ip_.GetNoArena();
}
inline void Node::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Node.ip)
}
#if LANG_CXX11
inline void Node::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Node.ip)
}
#endif
inline void Node::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Node.ip)
}
inline void Node::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Node.ip)
}
inline ::std::string* Node::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Node.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_ip() {
  // @@protoc_insertion_point(field_release:basepb.Node.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:basepb.Node.ip)
}

// uint32 server_port = 3;
inline void Node::clear_server_port() {
  server_port_ = 0u;
}
inline ::google::protobuf::uint32 Node::server_port() const {
  // @@protoc_insertion_point(field_get:basepb.Node.server_port)
  return server_port_;
}
inline void Node::set_server_port(::google::protobuf::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.server_port)
}

// uint32 raft_port = 4;
inline void Node::clear_raft_port() {
  raft_port_ = 0u;
}
inline ::google::protobuf::uint32 Node::raft_port() const {
  // @@protoc_insertion_point(field_get:basepb.Node.raft_port)
  return raft_port_;
}
inline void Node::set_raft_port(::google::protobuf::uint32 value) {
  
  raft_port_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.raft_port)
}

// uint32 admin_port = 5;
inline void Node::clear_admin_port() {
  admin_port_ = 0u;
}
inline ::google::protobuf::uint32 Node::admin_port() const {
  // @@protoc_insertion_point(field_get:basepb.Node.admin_port)
  return admin_port_;
}
inline void Node::set_admin_port(::google::protobuf::uint32 value) {
  
  admin_port_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.admin_port)
}

// .basepb.NodeState state = 6;
inline void Node::clear_state() {
  state_ = 0;
}
inline ::basepb::NodeState Node::state() const {
  // @@protoc_insertion_point(field_get:basepb.Node.state)
  return static_cast< ::basepb::NodeState >(state_);
}
inline void Node::set_state(::basepb::NodeState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.state)
}

// int64 version = 7;
inline void Node::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Node::version() const {
  // @@protoc_insertion_point(field_get:basepb.Node.version)
  return version_;
}
inline void Node::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.version)
}

// repeated .basepb.RangePeer range_peers = 8;
inline int Node::range_peers_size() const {
  return range_peers_.size();
}
inline void Node::clear_range_peers() {
  range_peers_.Clear();
}
inline const ::basepb::RangePeer& Node::range_peers(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Node.range_peers)
  return range_peers_.Get(index);
}
inline ::basepb::RangePeer* Node::mutable_range_peers(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Node.range_peers)
  return range_peers_.Mutable(index);
}
inline ::basepb::RangePeer* Node::add_range_peers() {
  // @@protoc_insertion_point(field_add:basepb.Node.range_peers)
  return range_peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::basepb::RangePeer >*
Node::mutable_range_peers() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Node.range_peers)
  return &range_peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::basepb::RangePeer >&
Node::range_peers() const {
  // @@protoc_insertion_point(field_list:basepb.Node.range_peers)
  return range_peers_;
}

// int64 last_update_time = 9;
inline void Node::clear_last_update_time() {
  last_update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Node::last_update_time() const {
  // @@protoc_insertion_point(field_get:basepb.Node.last_update_time)
  return last_update_time_;
}
inline void Node::set_last_update_time(::google::protobuf::int64 value) {
  
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.last_update_time)
}

// .basepb.StoreType type = 10;
inline void Node::clear_type() {
  type_ = 0;
}
inline ::basepb::StoreType Node::type() const {
  // @@protoc_insertion_point(field_get:basepb.Node.type)
  return static_cast< ::basepb::StoreType >(type_);
}
inline void Node::set_type(::basepb::StoreType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Node.type)
}

// -------------------------------------------------------------------

// Peer

// uint64 id = 1;
inline void Peer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::id() const {
  // @@protoc_insertion_point(field_get:basepb.Peer.id)
  return id_;
}
inline void Peer::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Peer.id)
}

// uint64 node_id = 2;
inline void Peer::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::node_id() const {
  // @@protoc_insertion_point(field_get:basepb.Peer.node_id)
  return node_id_;
}
inline void Peer::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Peer.node_id)
}

// .basepb.PeerType type = 3;
inline void Peer::clear_type() {
  type_ = 0;
}
inline ::basepb::PeerType Peer::type() const {
  // @@protoc_insertion_point(field_get:basepb.Peer.type)
  return static_cast< ::basepb::PeerType >(type_);
}
inline void Peer::set_type(::basepb::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Peer.type)
}

// -------------------------------------------------------------------

// PeerStatus

// .basepb.Peer peer = 1;
inline bool PeerStatus::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void PeerStatus::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::basepb::Peer& PeerStatus::peer() const {
  const ::basepb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
inline ::basepb::Peer* PeerStatus::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:basepb.PeerStatus.peer)
  return peer_;
}
inline ::basepb::Peer* PeerStatus::release_peer() {
  // @@protoc_insertion_point(field_release:basepb.PeerStatus.peer)
  
  ::basepb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void PeerStatus::set_allocated_peer(::basepb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.PeerStatus.peer)
}

// uint64 index = 2;
inline void PeerStatus::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PeerStatus::index() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.index)
  return index_;
}
inline void PeerStatus::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.index)
}

// uint64 commit = 3;
inline void PeerStatus::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PeerStatus::commit() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.commit)
  return commit_;
}
inline void PeerStatus::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.commit)
}

// uint64 down_seconds = 4;
inline void PeerStatus::clear_down_seconds() {
  down_seconds_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PeerStatus::down_seconds() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.down_seconds)
  return down_seconds_;
}
inline void PeerStatus::set_down_seconds(::google::protobuf::uint64 value) {
  
  down_seconds_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.down_seconds)
}

// bool snapshotting = 5;
inline void PeerStatus::clear_snapshotting() {
  snapshotting_ = false;
}
inline bool PeerStatus::snapshotting() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.snapshotting)
  return snapshotting_;
}
inline void PeerStatus::set_snapshotting(bool value) {
  
  snapshotting_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.snapshotting)
}

// uint64 applied = 6;
inline void PeerStatus::clear_applied() {
  applied_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PeerStatus::applied() const {
  // @@protoc_insertion_point(field_get:basepb.PeerStatus.applied)
  return applied_;
}
inline void PeerStatus::set_applied(::google::protobuf::uint64 value) {
  
  applied_ = value;
  // @@protoc_insertion_point(field_set:basepb.PeerStatus.applied)
}

// -------------------------------------------------------------------

// Replica

// uint64 range_id = 1;
inline void Replica::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Replica::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.Replica.range_id)
  return range_id_;
}
inline void Replica::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Replica.range_id)
}

// .basepb.Peer peer = 2;
inline bool Replica::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void Replica::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::basepb::Peer& Replica::peer() const {
  const ::basepb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:basepb.Replica.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Peer*>(
      &::basepb::_Peer_default_instance_);
}
inline ::basepb::Peer* Replica::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::basepb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Replica.peer)
  return peer_;
}
inline ::basepb::Peer* Replica::release_peer() {
  // @@protoc_insertion_point(field_release:basepb.Replica.peer)
  
  ::basepb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void Replica::set_allocated_peer(::basepb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Replica.peer)
}

// bytes start_key = 3;
inline void Replica::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Replica::start_key() const {
  // @@protoc_insertion_point(field_get:basepb.Replica.start_key)
  return start_key_.GetNoArena();
}
inline void Replica::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Replica.start_key)
}
#if LANG_CXX11
inline void Replica::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Replica.start_key)
}
#endif
inline void Replica::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Replica.start_key)
}
inline void Replica::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Replica.start_key)
}
inline ::std::string* Replica::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Replica.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Replica::release_start_key() {
  // @@protoc_insertion_point(field_release:basepb.Replica.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Replica.start_key)
}

// bytes end_key = 4;
inline void Replica::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Replica::end_key() const {
  // @@protoc_insertion_point(field_get:basepb.Replica.end_key)
  return end_key_.GetNoArena();
}
inline void Replica::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Replica.end_key)
}
#if LANG_CXX11
inline void Replica::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Replica.end_key)
}
#endif
inline void Replica::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Replica.end_key)
}
inline void Replica::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Replica.end_key)
}
inline ::std::string* Replica::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Replica.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Replica::release_end_key() {
  // @@protoc_insertion_point(field_release:basepb.Replica.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Replica.end_key)
}

// -------------------------------------------------------------------

// RangeEpoch

// uint64 conf_ver = 1;
inline void RangeEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:basepb.RangeEpoch.conf_ver)
  return conf_ver_;
}
inline void RangeEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangeEpoch.conf_ver)
}

// uint64 version = 2;
inline void RangeEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeEpoch::version() const {
  // @@protoc_insertion_point(field_get:basepb.RangeEpoch.version)
  return version_;
}
inline void RangeEpoch::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.RangeEpoch.version)
}

// -------------------------------------------------------------------

// Range

// uint64 id = 1;
inline void Range::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.id)
  return id_;
}
inline void Range::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.id)
}

// bytes start_key = 2;
inline void Range::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Range::start_key() const {
  // @@protoc_insertion_point(field_get:basepb.Range.start_key)
  return start_key_.GetNoArena();
}
inline void Range::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Range.start_key)
}
#if LANG_CXX11
inline void Range::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Range.start_key)
}
#endif
inline void Range::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Range.start_key)
}
inline void Range::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Range.start_key)
}
inline ::std::string* Range::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Range.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Range::release_start_key() {
  // @@protoc_insertion_point(field_release:basepb.Range.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Range::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Range.start_key)
}

// bytes end_key = 3;
inline void Range::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Range::end_key() const {
  // @@protoc_insertion_point(field_get:basepb.Range.end_key)
  return end_key_.GetNoArena();
}
inline void Range::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Range.end_key)
}
#if LANG_CXX11
inline void Range::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Range.end_key)
}
#endif
inline void Range::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Range.end_key)
}
inline void Range::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Range.end_key)
}
inline ::std::string* Range::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Range.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Range::release_end_key() {
  // @@protoc_insertion_point(field_release:basepb.Range.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Range::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:basepb.Range.end_key)
}

// .basepb.RangeEpoch range_epoch = 4;
inline bool Range::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
inline void Range::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
inline const ::basepb::RangeEpoch& Range::range_epoch() const {
  const ::basepb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:basepb.Range.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::RangeEpoch*>(
      &::basepb::_RangeEpoch_default_instance_);
}
inline ::basepb::RangeEpoch* Range::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::basepb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Range.range_epoch)
  return range_epoch_;
}
inline ::basepb::RangeEpoch* Range::release_range_epoch() {
  // @@protoc_insertion_point(field_release:basepb.Range.range_epoch)
  
  ::basepb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
inline void Range::set_allocated_range_epoch(::basepb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Range.range_epoch)
}

// repeated .basepb.Peer peers = 5;
inline int Range::peers_size() const {
  return peers_.size();
}
inline void Range::clear_peers() {
  peers_.Clear();
}
inline const ::basepb::Peer& Range::peers(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Range.peers)
  return peers_.Get(index);
}
inline ::basepb::Peer* Range::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Range.peers)
  return peers_.Mutable(index);
}
inline ::basepb::Peer* Range::add_peers() {
  // @@protoc_insertion_point(field_add:basepb.Range.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::basepb::Peer >*
Range::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Range.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::basepb::Peer >&
Range::peers() const {
  // @@protoc_insertion_point(field_list:basepb.Range.peers)
  return peers_;
}

// uint64 db_id = 6;
inline void Range::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::db_id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.db_id)
  return db_id_;
}
inline void Range::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.db_id)
}

// uint64 table_id = 7;
inline void Range::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::table_id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.table_id)
  return table_id_;
}
inline void Range::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.table_id)
}

// repeated .basepb.Column primary_keys = 8;
inline int Range::primary_keys_size() const {
  return primary_keys_.size();
}
inline void Range::clear_primary_keys() {
  primary_keys_.Clear();
}
inline const ::basepb::Column& Range::primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Range.primary_keys)
  return primary_keys_.Get(index);
}
inline ::basepb::Column* Range::mutable_primary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Range.primary_keys)
  return primary_keys_.Mutable(index);
}
inline ::basepb::Column* Range::add_primary_keys() {
  // @@protoc_insertion_point(field_add:basepb.Range.primary_keys)
  return primary_keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::basepb::Column >*
Range::mutable_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Range.primary_keys)
  return &primary_keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
Range::primary_keys() const {
  // @@protoc_insertion_point(field_list:basepb.Range.primary_keys)
  return primary_keys_;
}

// uint64 leader = 9;
inline void Range::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::leader() const {
  // @@protoc_insertion_point(field_get:basepb.Range.leader)
  return leader_;
}
inline void Range::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.leader)
}

// .basepb.RangeType range_type = 10;
inline void Range::clear_range_type() {
  range_type_ = 0;
}
inline ::basepb::RangeType Range::range_type() const {
  // @@protoc_insertion_point(field_get:basepb.Range.range_type)
  return static_cast< ::basepb::RangeType >(range_type_);
}
inline void Range::set_range_type(::basepb::RangeType value) {
  
  range_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.range_type)
}

// .basepb.StoreType store_type = 11;
inline void Range::clear_store_type() {
  store_type_ = 0;
}
inline ::basepb::StoreType Range::store_type() const {
  // @@protoc_insertion_point(field_get:basepb.Range.store_type)
  return static_cast< ::basepb::StoreType >(store_type_);
}
inline void Range::set_store_type(::basepb::StoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.store_type)
}

// uint64 term = 12;
inline void Range::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::term() const {
  // @@protoc_insertion_point(field_get:basepb.Range.term)
  return term_;
}
inline void Range::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.term)
}

// uint64 parent_range_id = 13;
inline void Range::clear_parent_range_id() {
  parent_range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::parent_range_id() const {
  // @@protoc_insertion_point(field_get:basepb.Range.parent_range_id)
  return parent_range_id_;
}
inline void Range::set_parent_range_id(::google::protobuf::uint64 value) {
  
  parent_range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Range.parent_range_id)
}

// -------------------------------------------------------------------

// Leader

// uint64 range_id = 1;
inline void Leader::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Leader::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.Leader.range_id)
  return range_id_;
}
inline void Leader::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Leader.range_id)
}

// uint64 node_id = 2;
inline void Leader::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Leader::node_id() const {
  // @@protoc_insertion_point(field_get:basepb.Leader.node_id)
  return node_id_;
}
inline void Leader::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Leader.node_id)
}

// string node_addr = 3;
inline void Leader::clear_node_addr() {
  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Leader::node_addr() const {
  // @@protoc_insertion_point(field_get:basepb.Leader.node_addr)
  return node_addr_.GetNoArena();
}
inline void Leader::set_node_addr(const ::std::string& value) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Leader.node_addr)
}
#if LANG_CXX11
inline void Leader::set_node_addr(::std::string&& value) {
  
  node_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Leader.node_addr)
}
#endif
inline void Leader::set_node_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Leader.node_addr)
}
inline void Leader::set_node_addr(const char* value, size_t size) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Leader.node_addr)
}
inline ::std::string* Leader::mutable_node_addr() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Leader.node_addr)
  return node_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leader::release_node_addr() {
  // @@protoc_insertion_point(field_release:basepb.Leader.node_addr)
  
  return node_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leader::set_allocated_node_addr(::std::string* node_addr) {
  if (node_addr != NULL) {
    
  } else {
    
  }
  node_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_addr);
  // @@protoc_insertion_point(field_set_allocated:basepb.Leader.node_addr)
}

// -------------------------------------------------------------------

// DataBase

// string name = 1;
inline void DataBase::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBase::name() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.name)
  return name_.GetNoArena();
}
inline void DataBase::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.DataBase.name)
}
#if LANG_CXX11
inline void DataBase::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.DataBase.name)
}
#endif
inline void DataBase::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.DataBase.name)
}
inline void DataBase::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.DataBase.name)
}
inline ::std::string* DataBase::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.DataBase.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBase::release_name() {
  // @@protoc_insertion_point(field_release:basepb.DataBase.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBase::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.DataBase.name)
}

// uint64 id = 2;
inline void DataBase::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataBase::id() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.id)
  return id_;
}
inline void DataBase::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.DataBase.id)
}

// uint64 version = 3;
inline void DataBase::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataBase::version() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.version)
  return version_;
}
inline void DataBase::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.DataBase.version)
}

// int64 create_time = 4;
inline void DataBase::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataBase::create_time() const {
  // @@protoc_insertion_point(field_get:basepb.DataBase.create_time)
  return create_time_;
}
inline void DataBase::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:basepb.DataBase.create_time)
}

// -------------------------------------------------------------------

// Column

// string name = 1;
inline void Column::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:basepb.Column.name)
  return name_.GetNoArena();
}
inline void Column::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Column.name)
}
#if LANG_CXX11
inline void Column::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Column.name)
}
#endif
inline void Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Column.name)
}
inline void Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Column.name)
}
inline ::std::string* Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Column.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:basepb.Column.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Column.name)
}

// uint64 id = 2;
inline void Column::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Column::id() const {
  // @@protoc_insertion_point(field_get:basepb.Column.id)
  return id_;
}
inline void Column::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.id)
}

// .basepb.DataType data_type = 3;
inline void Column::clear_data_type() {
  data_type_ = 0;
}
inline ::basepb::DataType Column::data_type() const {
  // @@protoc_insertion_point(field_get:basepb.Column.data_type)
  return static_cast< ::basepb::DataType >(data_type_);
}
inline void Column::set_data_type(::basepb::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.data_type)
}

// bool unsigned = 4;
inline void Column::clear_unsigned_() {
  unsigned__ = false;
}
inline bool Column::unsigned_() const {
  // @@protoc_insertion_point(field_get:basepb.Column.unsigned)
  return unsigned__;
}
inline void Column::set_unsigned_(bool value) {
  
  unsigned__ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.unsigned)
}

// int32 scale = 5;
inline void Column::clear_scale() {
  scale_ = 0;
}
inline ::google::protobuf::int32 Column::scale() const {
  // @@protoc_insertion_point(field_get:basepb.Column.scale)
  return scale_;
}
inline void Column::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.scale)
}

// int32 precision = 6;
inline void Column::clear_precision() {
  precision_ = 0;
}
inline ::google::protobuf::int32 Column::precision() const {
  // @@protoc_insertion_point(field_get:basepb.Column.precision)
  return precision_;
}
inline void Column::set_precision(::google::protobuf::int32 value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.precision)
}

// bool nullable = 7;
inline void Column::clear_nullable() {
  nullable_ = false;
}
inline bool Column::nullable() const {
  // @@protoc_insertion_point(field_get:basepb.Column.nullable)
  return nullable_;
}
inline void Column::set_nullable(bool value) {
  
  nullable_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.nullable)
}

// uint64 primary_key = 8;
inline void Column::clear_primary_key() {
  primary_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Column::primary_key() const {
  // @@protoc_insertion_point(field_get:basepb.Column.primary_key)
  return primary_key_;
}
inline void Column::set_primary_key(::google::protobuf::uint64 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.primary_key)
}

// int32 ordinal = 9;
inline void Column::clear_ordinal() {
  ordinal_ = 0;
}
inline ::google::protobuf::int32 Column::ordinal() const {
  // @@protoc_insertion_point(field_get:basepb.Column.ordinal)
  return ordinal_;
}
inline void Column::set_ordinal(::google::protobuf::int32 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.ordinal)
}

// bool index = 10;
inline void Column::clear_index() {
  index_ = false;
}
inline bool Column::index() const {
  // @@protoc_insertion_point(field_get:basepb.Column.index)
  return index_;
}
inline void Column::set_index(bool value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.index)
}

// bytes default_value = 11;
inline void Column::clear_default_value() {
  default_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::default_value() const {
  // @@protoc_insertion_point(field_get:basepb.Column.default_value)
  return default_value_.GetNoArena();
}
inline void Column::set_default_value(const ::std::string& value) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Column.default_value)
}
#if LANG_CXX11
inline void Column::set_default_value(::std::string&& value) {
  
  default_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Column.default_value)
}
#endif
inline void Column::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Column.default_value)
}
inline void Column::set_default_value(const void* value, size_t size) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Column.default_value)
}
inline ::std::string* Column::mutable_default_value() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Column.default_value)
  return default_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_default_value() {
  // @@protoc_insertion_point(field_release:basepb.Column.default_value)
  
  return default_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_default_value(::std::string* default_value) {
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_value);
  // @@protoc_insertion_point(field_set_allocated:basepb.Column.default_value)
}

// string properties = 12;
inline void Column::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::properties() const {
  // @@protoc_insertion_point(field_get:basepb.Column.properties)
  return properties_.GetNoArena();
}
inline void Column::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Column.properties)
}
#if LANG_CXX11
inline void Column::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Column.properties)
}
#endif
inline void Column::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Column.properties)
}
inline void Column::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Column.properties)
}
inline ::std::string* Column::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Column.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_properties() {
  // @@protoc_insertion_point(field_release:basepb.Column.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:basepb.Column.properties)
}

// bool auto_increment = 13;
inline void Column::clear_auto_increment() {
  auto_increment_ = false;
}
inline bool Column::auto_increment() const {
  // @@protoc_insertion_point(field_get:basepb.Column.auto_increment)
  return auto_increment_;
}
inline void Column::set_auto_increment(bool value) {
  
  auto_increment_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.auto_increment)
}

// bool unique = 14;
inline void Column::clear_unique() {
  unique_ = false;
}
inline bool Column::unique() const {
  // @@protoc_insertion_point(field_get:basepb.Column.unique)
  return unique_;
}
inline void Column::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.unique)
}

// .basepb.ColumnType col_type = 15;
inline void Column::clear_col_type() {
  col_type_ = 0;
}
inline ::basepb::ColumnType Column::col_type() const {
  // @@protoc_insertion_point(field_get:basepb.Column.col_type)
  return static_cast< ::basepb::ColumnType >(col_type_);
}
inline void Column::set_col_type(::basepb::ColumnType value) {
  
  col_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Column.col_type)
}

// -------------------------------------------------------------------

// Primary

// string column_name = 1;
inline void Primary::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Primary::column_name() const {
  // @@protoc_insertion_point(field_get:basepb.Primary.column_name)
  return column_name_.GetNoArena();
}
inline void Primary::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Primary.column_name)
}
#if LANG_CXX11
inline void Primary::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Primary.column_name)
}
#endif
inline void Primary::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Primary.column_name)
}
inline void Primary::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Primary.column_name)
}
inline ::std::string* Primary::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Primary.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Primary::release_column_name() {
  // @@protoc_insertion_point(field_release:basepb.Primary.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Primary::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Primary.column_name)
}

// .basepb.Primary next = 2;
inline bool Primary::has_next() const {
  return this != internal_default_instance() && next_ != NULL;
}
inline void Primary::clear_next() {
  if (GetArenaNoVirtual() == NULL && next_ != NULL) delete next_;
  next_ = NULL;
}
inline const ::basepb::Primary& Primary::next() const {
  const ::basepb::Primary* p = next_;
  // @@protoc_insertion_point(field_get:basepb.Primary.next)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::Primary*>(
      &::basepb::_Primary_default_instance_);
}
inline ::basepb::Primary* Primary::mutable_next() {
  
  if (next_ == NULL) {
    next_ = new ::basepb::Primary;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Primary.next)
  return next_;
}
inline ::basepb::Primary* Primary::release_next() {
  // @@protoc_insertion_point(field_release:basepb.Primary.next)
  
  ::basepb::Primary* temp = next_;
  next_ = NULL;
  return temp;
}
inline void Primary::set_allocated_next(::basepb::Primary* next) {
  delete next_;
  next_ = next;
  if (next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Primary.next)
}

// -------------------------------------------------------------------

// TableEpoch

// uint64 conf_ver = 1;
inline void TableEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:basepb.TableEpoch.conf_ver)
  return conf_ver_;
}
inline void TableEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:basepb.TableEpoch.conf_ver)
}

// uint64 version = 2;
inline void TableEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableEpoch::version() const {
  // @@protoc_insertion_point(field_get:basepb.TableEpoch.version)
  return version_;
}
inline void TableEpoch::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.TableEpoch.version)
}

// -------------------------------------------------------------------

// Index

// uint64 id = 1;
inline void Index::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Index::id() const {
  // @@protoc_insertion_point(field_get:basepb.Index.id)
  return id_;
}
inline void Index::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Index.id)
}

// string name = 2;
inline void Index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index::name() const {
  // @@protoc_insertion_point(field_get:basepb.Index.name)
  return name_.GetNoArena();
}
inline void Index::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Index.name)
}
#if LANG_CXX11
inline void Index::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Index.name)
}
#endif
inline void Index::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Index.name)
}
inline void Index::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Index.name)
}
inline ::std::string* Index::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_name() {
  // @@protoc_insertion_point(field_release:basepb.Index.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Index.name)
}

// repeated string col_names = 3;
inline int Index::col_names_size() const {
  return col_names_.size();
}
inline void Index::clear_col_names() {
  col_names_.Clear();
}
inline const ::std::string& Index::col_names(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Index.col_names)
  return col_names_.Get(index);
}
inline ::std::string* Index::mutable_col_names(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Index.col_names)
  return col_names_.Mutable(index);
}
inline void Index::set_col_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:basepb.Index.col_names)
  col_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Index::set_col_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:basepb.Index.col_names)
  col_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Index::set_col_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:basepb.Index.col_names)
}
inline void Index::set_col_names(int index, const char* value, size_t size) {
  col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basepb.Index.col_names)
}
inline ::std::string* Index::add_col_names() {
  // @@protoc_insertion_point(field_add_mutable:basepb.Index.col_names)
  return col_names_.Add();
}
inline void Index::add_col_names(const ::std::string& value) {
  col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:basepb.Index.col_names)
}
#if LANG_CXX11
inline void Index::add_col_names(::std::string&& value) {
  col_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:basepb.Index.col_names)
}
#endif
inline void Index::add_col_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:basepb.Index.col_names)
}
inline void Index::add_col_names(const char* value, size_t size) {
  col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:basepb.Index.col_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Index::col_names() const {
  // @@protoc_insertion_point(field_list:basepb.Index.col_names)
  return col_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Index::mutable_col_names() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Index.col_names)
  return &col_names_;
}

// bool unique = 4;
inline void Index::clear_unique() {
  unique_ = false;
}
inline bool Index::unique() const {
  // @@protoc_insertion_point(field_get:basepb.Index.unique)
  return unique_;
}
inline void Index::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:basepb.Index.unique)
}

// string comment = 5;
inline void Index::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index::comment() const {
  // @@protoc_insertion_point(field_get:basepb.Index.comment)
  return comment_.GetNoArena();
}
inline void Index::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Index.comment)
}
#if LANG_CXX11
inline void Index::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Index.comment)
}
#endif
inline void Index::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Index.comment)
}
inline void Index::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Index.comment)
}
inline ::std::string* Index::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Index.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_comment() {
  // @@protoc_insertion_point(field_release:basepb.Index.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:basepb.Index.comment)
}

// .basepb.IndexType index_type = 6;
inline void Index::clear_index_type() {
  index_type_ = 0;
}
inline ::basepb::IndexType Index::index_type() const {
  // @@protoc_insertion_point(field_get:basepb.Index.index_type)
  return static_cast< ::basepb::IndexType >(index_type_);
}
inline void Index::set_index_type(::basepb::IndexType value) {
  
  index_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Index.index_type)
}

// -------------------------------------------------------------------

// Table

// string name = 1;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:basepb.Table.name)
  return name_.GetNoArena();
}
inline void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.name)
}
#if LANG_CXX11
inline void Table::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.name)
}
#endif
inline void Table::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.name)
}
inline ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:basepb.Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.name)
}

// string db_name = 2;
inline void Table::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::db_name() const {
  // @@protoc_insertion_point(field_get:basepb.Table.db_name)
  return db_name_.GetNoArena();
}
inline void Table::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.db_name)
}
#if LANG_CXX11
inline void Table::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.db_name)
}
#endif
inline void Table::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.db_name)
}
inline void Table::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.db_name)
}
inline ::std::string* Table::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_db_name() {
  // @@protoc_insertion_point(field_release:basepb.Table.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.db_name)
}

// uint64 db_id = 3;
inline void Table::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Table::db_id() const {
  // @@protoc_insertion_point(field_get:basepb.Table.db_id)
  return db_id_;
}
inline void Table::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.db_id)
}

// uint64 id = 4;
inline void Table::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Table::id() const {
  // @@protoc_insertion_point(field_get:basepb.Table.id)
  return id_;
}
inline void Table::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.id)
}

// string properties = 5;
inline void Table::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::properties() const {
  // @@protoc_insertion_point(field_get:basepb.Table.properties)
  return properties_.GetNoArena();
}
inline void Table::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.properties)
}
#if LANG_CXX11
inline void Table::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.properties)
}
#endif
inline void Table::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.properties)
}
inline void Table::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.properties)
}
inline ::std::string* Table::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_properties() {
  // @@protoc_insertion_point(field_release:basepb.Table.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.properties)
}

// repeated .basepb.Column columns = 6;
inline int Table::columns_size() const {
  return columns_.size();
}
inline void Table::clear_columns() {
  columns_.Clear();
}
inline const ::basepb::Column& Table::columns(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Table.columns)
  return columns_.Get(index);
}
inline ::basepb::Column* Table::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Table.columns)
  return columns_.Mutable(index);
}
inline ::basepb::Column* Table::add_columns() {
  // @@protoc_insertion_point(field_add:basepb.Table.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::basepb::Column >*
Table::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Table.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::basepb::Column >&
Table::columns() const {
  // @@protoc_insertion_point(field_list:basepb.Table.columns)
  return columns_;
}

// .basepb.TableEpoch epoch = 7;
inline bool Table::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
inline void Table::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
inline const ::basepb::TableEpoch& Table::epoch() const {
  const ::basepb::TableEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:basepb.Table.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::basepb::TableEpoch*>(
      &::basepb::_TableEpoch_default_instance_);
}
inline ::basepb::TableEpoch* Table::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::basepb::TableEpoch;
  }
  // @@protoc_insertion_point(field_mutable:basepb.Table.epoch)
  return epoch_;
}
inline ::basepb::TableEpoch* Table::release_epoch() {
  // @@protoc_insertion_point(field_release:basepb.Table.epoch)
  
  ::basepb::TableEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
inline void Table::set_allocated_epoch(::basepb::TableEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.epoch)
}

// int64 create_time = 8;
inline void Table::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Table::create_time() const {
  // @@protoc_insertion_point(field_get:basepb.Table.create_time)
  return create_time_;
}
inline void Table::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.create_time)
}

// .basepb.TableStatus status = 9;
inline void Table::clear_status() {
  status_ = 0;
}
inline ::basepb::TableStatus Table::status() const {
  // @@protoc_insertion_point(field_get:basepb.Table.status)
  return static_cast< ::basepb::TableStatus >(status_);
}
inline void Table::set_status(::basepb::TableStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.status)
}

// bytes expand = 10;
inline void Table::clear_expand() {
  expand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::expand() const {
  // @@protoc_insertion_point(field_get:basepb.Table.expand)
  return expand_.GetNoArena();
}
inline void Table::set_expand(const ::std::string& value) {
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.Table.expand)
}
#if LANG_CXX11
inline void Table::set_expand(::std::string&& value) {
  
  expand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.Table.expand)
}
#endif
inline void Table::set_expand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.Table.expand)
}
inline void Table::set_expand(const void* value, size_t size) {
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.Table.expand)
}
inline ::std::string* Table::mutable_expand() {
  
  // @@protoc_insertion_point(field_mutable:basepb.Table.expand)
  return expand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_expand() {
  // @@protoc_insertion_point(field_release:basepb.Table.expand)
  
  return expand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_expand(::std::string* expand) {
  if (expand != NULL) {
    
  } else {
    
  }
  expand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expand);
  // @@protoc_insertion_point(field_set_allocated:basepb.Table.expand)
}

// repeated .basepb.Index indexes = 11;
inline int Table::indexes_size() const {
  return indexes_.size();
}
inline void Table::clear_indexes() {
  indexes_.Clear();
}
inline const ::basepb::Index& Table::indexes(int index) const {
  // @@protoc_insertion_point(field_get:basepb.Table.indexes)
  return indexes_.Get(index);
}
inline ::basepb::Index* Table::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:basepb.Table.indexes)
  return indexes_.Mutable(index);
}
inline ::basepb::Index* Table::add_indexes() {
  // @@protoc_insertion_point(field_add:basepb.Table.indexes)
  return indexes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::basepb::Index >*
Table::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:basepb.Table.indexes)
  return &indexes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::basepb::Index >&
Table::indexes() const {
  // @@protoc_insertion_point(field_list:basepb.Table.indexes)
  return indexes_;
}

// .basepb.StoreType type = 12;
inline void Table::clear_type() {
  type_ = 0;
}
inline ::basepb::StoreType Table::type() const {
  // @@protoc_insertion_point(field_get:basepb.Table.type)
  return static_cast< ::basepb::StoreType >(type_);
}
inline void Table::set_type(::basepb::StoreType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.type)
}

// uint64 replica_num = 13;
inline void Table::clear_replica_num() {
  replica_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Table::replica_num() const {
  // @@protoc_insertion_point(field_get:basepb.Table.replica_num)
  return replica_num_;
}
inline void Table::set_replica_num(::google::protobuf::uint64 value) {
  
  replica_num_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.replica_num)
}

// uint64 data_range_num = 14;
inline void Table::clear_data_range_num() {
  data_range_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Table::data_range_num() const {
  // @@protoc_insertion_point(field_get:basepb.Table.data_range_num)
  return data_range_num_;
}
inline void Table::set_data_range_num(::google::protobuf::uint64 value) {
  
  data_range_num_ = value;
  // @@protoc_insertion_point(field_set:basepb.Table.data_range_num)
}

// -------------------------------------------------------------------

// WatcherEvent

// .basepb.WatcherType watcher_type = 1;
inline void WatcherEvent::clear_watcher_type() {
  watcher_type_ = 0;
}
inline ::basepb::WatcherType WatcherEvent::watcher_type() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.watcher_type)
  return static_cast< ::basepb::WatcherType >(watcher_type_);
}
inline void WatcherEvent::set_watcher_type(::basepb::WatcherType value) {
  
  watcher_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.watcher_type)
}

// .basepb.EventType event_type = 2;
inline void WatcherEvent::clear_event_type() {
  event_type_ = 0;
}
inline ::basepb::EventType WatcherEvent::event_type() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.event_type)
  return static_cast< ::basepb::EventType >(event_type_);
}
inline void WatcherEvent::set_event_type(::basepb::EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.event_type)
}

// uint64 node_id = 3;
inline void WatcherEvent::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WatcherEvent::node_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.node_id)
  return node_id_;
}
inline void WatcherEvent::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.node_id)
}

// uint64 db_id = 4;
inline void WatcherEvent::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WatcherEvent::db_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.db_id)
  return db_id_;
}
inline void WatcherEvent::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.db_id)
}

// uint64 table_id = 5;
inline void WatcherEvent::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WatcherEvent::table_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.table_id)
  return table_id_;
}
inline void WatcherEvent::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.table_id)
}

// uint64 range_id = 6;
inline void WatcherEvent::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WatcherEvent::range_id() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.range_id)
  return range_id_;
}
inline void WatcherEvent::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.range_id)
}

// bytes value = 7;
inline void WatcherEvent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatcherEvent::value() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.value)
  return value_.GetNoArena();
}
inline void WatcherEvent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.value)
}
#if LANG_CXX11
inline void WatcherEvent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:basepb.WatcherEvent.value)
}
#endif
inline void WatcherEvent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:basepb.WatcherEvent.value)
}
inline void WatcherEvent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:basepb.WatcherEvent.value)
}
inline ::std::string* WatcherEvent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:basepb.WatcherEvent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatcherEvent::release_value() {
  // @@protoc_insertion_point(field_release:basepb.WatcherEvent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatcherEvent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:basepb.WatcherEvent.value)
}

// uint64 version = 8;
inline void WatcherEvent::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WatcherEvent::version() const {
  // @@protoc_insertion_point(field_get:basepb.WatcherEvent.version)
  return version_;
}
inline void WatcherEvent::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:basepb.WatcherEvent.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace basepb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::basepb::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::DataType>() {
  return ::basepb::DataType_descriptor();
}
template <> struct is_proto_enum< ::basepb::StoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::StoreType>() {
  return ::basepb::StoreType_descriptor();
}
template <> struct is_proto_enum< ::basepb::RangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::RangeType>() {
  return ::basepb::RangeType_descriptor();
}
template <> struct is_proto_enum< ::basepb::ColumnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::ColumnType>() {
  return ::basepb::ColumnType_descriptor();
}
template <> struct is_proto_enum< ::basepb::NodeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::NodeState>() {
  return ::basepb::NodeState_descriptor();
}
template <> struct is_proto_enum< ::basepb::RangePeerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::RangePeerState>() {
  return ::basepb::RangePeerState_descriptor();
}
template <> struct is_proto_enum< ::basepb::PeerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::PeerType>() {
  return ::basepb::PeerType_descriptor();
}
template <> struct is_proto_enum< ::basepb::TableStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::TableStatus>() {
  return ::basepb::TableStatus_descriptor();
}
template <> struct is_proto_enum< ::basepb::IndexType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::IndexType>() {
  return ::basepb::IndexType_descriptor();
}
template <> struct is_proto_enum< ::basepb::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::EventType>() {
  return ::basepb::EventType_descriptor();
}
template <> struct is_proto_enum< ::basepb::WatcherType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basepb::WatcherType>() {
  return ::basepb::WatcherType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_basepb_2fbasepb_2eproto__INCLUDED
