// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chubaodb {
namespace raft {
namespace impl {
namespace pb {
class PeerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Peer>
     _instance;
} _Peer_default_instance_;
class ConfChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConfChange>
     _instance;
} _ConfChange_default_instance_;
class EntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Entry>
     _instance;
} _Entry_default_instance_;
class HeartbeatContextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatContext>
     _instance;
} _HeartbeatContext_default_instance_;
class SnapshotMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SnapshotMeta>
     _instance;
} _SnapshotMeta_default_instance_;
class SnapshotDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Snapshot>
     _instance;
} _Snapshot_default_instance_;
class MessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Message>
     _instance;
} _Message_default_instance_;
class HardStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HardState>
     _instance;
} _HardState_default_instance_;
class TruncateMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TruncateMeta>
     _instance;
} _TruncateMeta_default_instance_;
class IndexItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexItem>
     _instance;
} _IndexItem_default_instance_;
class LogIndexDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogIndex>
     _instance;
} _LogIndex_default_instance_;

namespace protobuf_raft_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, peer_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, flags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatContext, ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, datas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, final_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, read_sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, reject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, reject_hint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, hb_ctx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, snapshot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, vote_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateMeta, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateMeta, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogIndex, items_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Peer)},
  { 8, -1, sizeof(ConfChange)},
  { 16, -1, sizeof(Entry)},
  { 26, -1, sizeof(HeartbeatContext)},
  { 32, -1, sizeof(SnapshotMeta)},
  { 41, -1, sizeof(Snapshot)},
  { 51, -1, sizeof(Message)},
  { 70, -1, sizeof(HardState)},
  { 78, -1, sizeof(TruncateMeta)},
  { 85, -1, sizeof(IndexItem)},
  { 93, -1, sizeof(LogIndex)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartbeatContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Snapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HardState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TruncateMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogIndex_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "raft.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Peer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Peer_default_instance_);_ConfChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConfChange_default_instance_);_Entry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Entry_default_instance_);_HeartbeatContext_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeartbeatContext_default_instance_);_SnapshotMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SnapshotMeta_default_instance_);_Snapshot_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Snapshot_default_instance_);_Message_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Message_default_instance_);_HardState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HardState_default_instance_);_TruncateMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TruncateMeta_default_instance_);_IndexItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexItem_default_instance_);_LogIndex_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogIndex_default_instance_);_ConfChange_default_instance_._instance.get_mutable()->peer_ = const_cast< ::chubaodb::raft::impl::pb::Peer*>(
      ::chubaodb::raft::impl::pb::Peer::internal_default_instance());
  _Snapshot_default_instance_._instance.get_mutable()->meta_ = const_cast< ::chubaodb::raft::impl::pb::SnapshotMeta*>(
      ::chubaodb::raft::impl::pb::SnapshotMeta::internal_default_instance());
  _Message_default_instance_._instance.get_mutable()->hb_ctx_ = const_cast< ::chubaodb::raft::impl::pb::HeartbeatContext*>(
      ::chubaodb::raft::impl::pb::HeartbeatContext::internal_default_instance());
  _Message_default_instance_._instance.get_mutable()->snapshot_ = const_cast< ::chubaodb::raft::impl::pb::Snapshot*>(
      ::chubaodb::raft::impl::pb::Snapshot::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nraft.proto\022\025chubaodb.raft.impl.pb\"W\n\004P"
      "eer\022-\n\004type\030\001 \001(\0162\037.chubaodb.raft.impl.p"
      "b.PeerType\022\017\n\007node_id\030\002 \001(\004\022\017\n\007peer_id\030\003"
      " \001(\004\"}\n\nConfChange\0223\n\004type\030\001 \001(\0162%.chuba"
      "odb.raft.impl.pb.ConfChangeType\022)\n\004Peer\030"
      "\002 \001(\0132\033.chubaodb.raft.impl.pb.Peer\022\017\n\007co"
      "ntext\030\003 \001(\014\"q\n\005Entry\022.\n\004type\030\001 \001(\0162 .chu"
      "baodb.raft.impl.pb.EntryType\022\r\n\005index\030\002 "
      "\001(\004\022\014\n\004term\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\r\n\005flags"
      "\030\005 \001(\r\"\037\n\020HeartbeatContext\022\013\n\003ids\030\001 \003(\004\""
      "h\n\014SnapshotMeta\022\r\n\005index\030\001 \001(\004\022\014\n\004term\030\002"
      " \001(\004\022*\n\005peers\030\003 \003(\0132\033.chubaodb.raft.impl"
      ".pb.Peer\022\017\n\007context\030\004 \001(\014\"v\n\010Snapshot\022\014\n"
      "\004uuid\030\001 \001(\004\0221\n\004meta\030\002 \001(\0132#.chubaodb.raf"
      "t.impl.pb.SnapshotMeta\022\r\n\005datas\030\003 \003(\014\022\r\n"
      "\005final\030\004 \001(\010\022\013\n\003seq\030\005 \001(\003\"\373\002\n\007Message\0220\n"
      "\004type\030\001 \001(\0162\".chubaodb.raft.impl.pb.Mess"
      "ageType\022\n\n\002id\030\002 \001(\004\022\014\n\004from\030\003 \001(\004\022\n\n\002to\030"
      "\004 \001(\004\022\014\n\004term\030\005 \001(\004\022\016\n\006commit\030\006 \001(\004\022\025\n\rr"
      "ead_sequence\030\007 \001(\004\022\020\n\010log_term\030\010 \001(\004\022\021\n\t"
      "log_index\030\t \001(\004\022-\n\007entries\030\n \003(\0132\034.chuba"
      "odb.raft.impl.pb.Entry\022\016\n\006reject\030\014 \001(\010\022\023"
      "\n\013reject_hint\030\r \001(\004\0227\n\006hb_ctx\030\016 \001(\0132\'.ch"
      "ubaodb.raft.impl.pb.HeartbeatContext\0221\n\010"
      "snapshot\030\017 \001(\0132\037.chubaodb.raft.impl.pb.S"
      "napshot\"7\n\tHardState\022\014\n\004term\030\001 \001(\004\022\016\n\006co"
      "mmit\030\002 \001(\004\022\014\n\004vote\030\003 \001(\004\"+\n\014TruncateMeta"
      "\022\r\n\005index\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\"8\n\tIndexIt"
      "em\022\r\n\005index\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\022\016\n\006offse"
      "t\030\003 \001(\r\";\n\010LogIndex\022/\n\005items\030\001 \003(\0132 .chu"
      "baodb.raft.impl.pb.IndexItem*-\n\010PeerType"
      "\022\017\n\013PEER_NORMAL\020\000\022\020\n\014PEER_LEARNER\020\001*P\n\016C"
      "onfChangeType\022\021\n\rCONF_ADD_PEER\020\000\022\024\n\020CONF"
      "_REMOVE_PEER\020\001\022\025\n\021CONF_PROMOTE_PEER\020\002*L\n"
      "\tEntryType\022\026\n\022ENTRY_TYPE_INVALID\020\000\022\020\n\014EN"
      "TRY_NORMAL\020\001\022\025\n\021ENTRY_CONF_CHANGE\020\002*\252\003\n\013"
      "MessageType\022\030\n\024MESSAGE_TYPE_INVALID\020\000\022\032\n"
      "\026APPEND_ENTRIES_REQUEST\020\001\022\033\n\027APPEND_ENTR"
      "IES_RESPONSE\020\002\022\020\n\014VOTE_REQUEST\020\003\022\021\n\rVOTE"
      "_RESPONSE\020\004\022\025\n\021HEARTBEAT_REQUEST\020\005\022\026\n\022HE"
      "ARTBEAT_RESPONSE\020\006\022\024\n\020SNAPSHOT_REQUEST\020\007"
      "\022\020\n\014SNAPSHOT_ACK\020\t\022\021\n\rLOCAL_MSG_HUP\020\n\022\022\n"
      "\016LOCAL_MSG_PROP\020\013\022\022\n\016LOCAL_MSG_TICK\020\014\022\024\n"
      "\020PRE_VOTE_REQUEST\020\r\022\025\n\021PRE_VOTE_RESPONSE"
      "\020\016\022\031\n\025LOCAL_SNAPSHOT_STATUS\020\017\022\030\n\024LOCAL_M"
      "SG_READ_INDEX\020\020\022\026\n\022READ_INDEX_REQUEST\020\021\022"
      "\027\n\023READ_INDEX_RESPONSE\020\022b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_raft_2eproto

const ::google::protobuf::EnumDescriptor* PeerType_descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_enum_descriptors[0];
}
bool PeerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_enum_descriptors[1];
}
bool ConfChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_enum_descriptors[2];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_enum_descriptors[3];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kTypeFieldNumber;
const int Peer::kNodeIdFieldNumber;
const int Peer::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.Peer)
}

void Peer::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(type_));
  _cached_size_ = 0;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chubaodb.raft.impl.pb.PeerType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chubaodb::raft::impl::pb::PeerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.PeerType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // uint64 peer_id = 3;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->peer_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.PeerType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // uint64 peer_id = 3;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->peer_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.Peer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 peer_id = 3;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->peer_id());
  }

  // .chubaodb.raft.impl.pb.PeerType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(peer_id_, other->peer_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// .chubaodb.raft.impl.pb.PeerType type = 1;
void Peer::clear_type() {
  type_ = 0;
}
::chubaodb::raft::impl::pb::PeerType Peer::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Peer.type)
  return static_cast< ::chubaodb::raft::impl::pb::PeerType >(type_);
}
void Peer::set_type(::chubaodb::raft::impl::pb::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Peer.type)
}

// uint64 node_id = 2;
void Peer::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Peer::node_id() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Peer.node_id)
  return node_id_;
}
void Peer::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Peer.node_id)
}

// uint64 peer_id = 3;
void Peer::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Peer::peer_id() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Peer.peer_id)
  return peer_id_;
}
void Peer::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Peer.peer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfChange::kTypeFieldNumber;
const int ConfChange::kPeerFieldNumber;
const int ConfChange::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfChange::ConfChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.ConfChange)
}
ConfChange::ConfChange(const ConfChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.context().size() > 0) {
    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from.has_peer()) {
    peer_ = new ::chubaodb::raft::impl::pb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.ConfChange)
}

void ConfChange::SharedCtor() {
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(type_));
  _cached_size_ = 0;
}

ConfChange::~ConfChange() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.ConfChange)
  SharedDtor();
}

void ConfChange::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_;
}

void ConfChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfChange::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfChange& ConfChange::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfChange* ConfChange::New(::google::protobuf::Arena* arena) const {
  ConfChange* n = new ConfChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfChange::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.ConfChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ConfChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.ConfChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chubaodb.raft.impl.pb.ConfChangeType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chubaodb::raft::impl::pb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chubaodb.raft.impl.pb.Peer Peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.ConfChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.ConfChange)
  return false;
#undef DO_
}

void ConfChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.ConfChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.ConfChangeType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .chubaodb.raft.impl.pb.Peer Peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // bytes context = 3;
  if (this->context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->context(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.ConfChange)
}

::google::protobuf::uint8* ConfChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.ConfChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.ConfChangeType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .chubaodb.raft.impl.pb.Peer Peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, deterministic, target);
  }

  // bytes context = 3;
  if (this->context().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->context(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.ConfChange)
  return target;
}

size_t ConfChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.ConfChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes context = 3;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->context());
  }

  // .chubaodb.raft.impl.pb.Peer Peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // .chubaodb.raft.impl.pb.ConfChangeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.ConfChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.ConfChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.ConfChange)
    MergeFrom(*source);
  }
}

void ConfChange::MergeFrom(const ConfChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.ConfChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from.has_peer()) {
    mutable_peer()->::chubaodb::raft::impl::pb::Peer::MergeFrom(from.peer());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ConfChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.ConfChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfChange::CopyFrom(const ConfChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.ConfChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfChange::IsInitialized() const {
  return true;
}

void ConfChange::Swap(ConfChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfChange::InternalSwap(ConfChange* other) {
  using std::swap;
  context_.Swap(&other->context_);
  swap(peer_, other->peer_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfChange::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfChange

// .chubaodb.raft.impl.pb.ConfChangeType type = 1;
void ConfChange::clear_type() {
  type_ = 0;
}
::chubaodb::raft::impl::pb::ConfChangeType ConfChange::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.ConfChange.type)
  return static_cast< ::chubaodb::raft::impl::pb::ConfChangeType >(type_);
}
void ConfChange::set_type(::chubaodb::raft::impl::pb::ConfChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.ConfChange.type)
}

// .chubaodb.raft.impl.pb.Peer Peer = 2;
bool ConfChange::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void ConfChange::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::chubaodb::raft::impl::pb::Peer& ConfChange::peer() const {
  const ::chubaodb::raft::impl::pb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.ConfChange.Peer)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::Peer*>(
      &::chubaodb::raft::impl::pb::_Peer_default_instance_);
}
::chubaodb::raft::impl::pb::Peer* ConfChange::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::chubaodb::raft::impl::pb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.ConfChange.Peer)
  return peer_;
}
::chubaodb::raft::impl::pb::Peer* ConfChange::release_peer() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.ConfChange.Peer)
  
  ::chubaodb::raft::impl::pb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void ConfChange::set_allocated_peer(::chubaodb::raft::impl::pb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.ConfChange.Peer)
}

// bytes context = 3;
void ConfChange::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.ConfChange.context)
  return context_.GetNoArena();
}
void ConfChange::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.ConfChange.context)
}
#if LANG_CXX11
void ConfChange::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chubaodb.raft.impl.pb.ConfChange.context)
}
#endif
void ConfChange::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.ConfChange.context)
}
void ConfChange::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.ConfChange.context)
}
::std::string* ConfChange::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.ConfChange.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.ConfChange.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfChange::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.ConfChange.context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kTypeFieldNumber;
const int Entry::kIndexFieldNumber;
const int Entry::kTermFieldNumber;
const int Entry::kDataFieldNumber;
const int Entry::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.Entry)
}

void Entry::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  _cached_size_ = 0;
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entry& Entry::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chubaodb.raft.impl.pb.EntryType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chubaodb::raft::impl::pb::EntryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.EntryType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // uint32 flags = 5;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.EntryType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // uint32 flags = 5;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.Entry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // .chubaodb.raft.impl.pb.EntryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 flags = 5;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(type_, other->type_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// .chubaodb.raft.impl.pb.EntryType type = 1;
void Entry::clear_type() {
  type_ = 0;
}
::chubaodb::raft::impl::pb::EntryType Entry::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.type)
  return static_cast< ::chubaodb::raft::impl::pb::EntryType >(type_);
}
void Entry::set_type(::chubaodb::raft::impl::pb::EntryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.type)
}

// uint64 index = 2;
void Entry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.index)
  return index_;
}
void Entry::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.index)
}

// uint64 term = 3;
void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.term)
  return term_;
}
void Entry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.term)
}

// bytes data = 4;
void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.data)
  return data_.GetNoArena();
}
void Entry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.data)
}
#if LANG_CXX11
void Entry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chubaodb.raft.impl.pb.Entry.data)
}
#endif
void Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.Entry.data)
}
void Entry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.Entry.data)
}
::std::string* Entry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Entry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Entry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Entry.data)
}

// uint32 flags = 5;
void Entry::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 Entry::flags() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.flags)
  return flags_;
}
void Entry::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatContext::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatContext::HeartbeatContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.HeartbeatContext)
}
HeartbeatContext::HeartbeatContext(const HeartbeatContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.HeartbeatContext)
}

void HeartbeatContext::SharedCtor() {
  _cached_size_ = 0;
}

HeartbeatContext::~HeartbeatContext() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.HeartbeatContext)
  SharedDtor();
}

void HeartbeatContext::SharedDtor() {
}

void HeartbeatContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatContext::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartbeatContext& HeartbeatContext::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartbeatContext* HeartbeatContext::New(::google::protobuf::Arena* arena) const {
  HeartbeatContext* n = new HeartbeatContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatContext::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.HeartbeatContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

bool HeartbeatContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.HeartbeatContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.HeartbeatContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.HeartbeatContext)
  return false;
#undef DO_
}

void HeartbeatContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.HeartbeatContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ids_cached_byte_size_));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.HeartbeatContext)
}

::google::protobuf::uint8* HeartbeatContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.HeartbeatContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.HeartbeatContext)
  return target;
}

size_t HeartbeatContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.HeartbeatContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.HeartbeatContext)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.HeartbeatContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.HeartbeatContext)
    MergeFrom(*source);
  }
}

void HeartbeatContext::MergeFrom(const HeartbeatContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.HeartbeatContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void HeartbeatContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.HeartbeatContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatContext::CopyFrom(const HeartbeatContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.HeartbeatContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatContext::IsInitialized() const {
  return true;
}

void HeartbeatContext::Swap(HeartbeatContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatContext::InternalSwap(HeartbeatContext* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatContext::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatContext

// repeated uint64 ids = 1;
int HeartbeatContext::ids_size() const {
  return ids_.size();
}
void HeartbeatContext::clear_ids() {
  ids_.Clear();
}
::google::protobuf::uint64 HeartbeatContext::ids(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HeartbeatContext.ids)
  return ids_.Get(index);
}
void HeartbeatContext::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HeartbeatContext.ids)
}
void HeartbeatContext::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.HeartbeatContext.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
HeartbeatContext::ids() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.HeartbeatContext.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
HeartbeatContext::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.HeartbeatContext.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotMeta::kIndexFieldNumber;
const int SnapshotMeta::kTermFieldNumber;
const int SnapshotMeta::kPeersFieldNumber;
const int SnapshotMeta::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotMeta::SnapshotMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.SnapshotMeta)
}
SnapshotMeta::SnapshotMeta(const SnapshotMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_(from.peers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.context().size() > 0) {
    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&index_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.SnapshotMeta)
}

void SnapshotMeta::SharedCtor() {
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&index_)) + sizeof(term_));
  _cached_size_ = 0;
}

SnapshotMeta::~SnapshotMeta() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.SnapshotMeta)
  SharedDtor();
}

void SnapshotMeta::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMeta::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotMeta& SnapshotMeta::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotMeta* SnapshotMeta::New(::google::protobuf::Arena* arena) const {
  SnapshotMeta* n = new SnapshotMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.SnapshotMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&index_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

bool SnapshotMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.SnapshotMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chubaodb.raft.impl.pb.Peer peers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes context = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.SnapshotMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.SnapshotMeta)
  return false;
#undef DO_
}

void SnapshotMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.SnapshotMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // repeated .chubaodb.raft.impl.pb.Peer peers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->peers(static_cast<int>(i)), output);
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->context(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.SnapshotMeta)
}

::google::protobuf::uint8* SnapshotMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.SnapshotMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // repeated .chubaodb.raft.impl.pb.Peer peers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->peers(static_cast<int>(i)), deterministic, target);
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->context(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.SnapshotMeta)
  return target;
}

size_t SnapshotMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.SnapshotMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chubaodb.raft.impl.pb.Peer peers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(static_cast<int>(i)));
    }
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->context());
  }

  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.SnapshotMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.SnapshotMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.SnapshotMeta)
    MergeFrom(*source);
  }
}

void SnapshotMeta::MergeFrom(const SnapshotMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.SnapshotMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void SnapshotMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.SnapshotMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMeta::CopyFrom(const SnapshotMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.SnapshotMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMeta::IsInitialized() const {
  return true;
}

void SnapshotMeta::Swap(SnapshotMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotMeta::InternalSwap(SnapshotMeta* other) {
  using std::swap;
  peers_.InternalSwap(&other->peers_);
  context_.Swap(&other->context_);
  swap(index_, other->index_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotMeta::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotMeta

// uint64 index = 1;
void SnapshotMeta::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SnapshotMeta::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.index)
  return index_;
}
void SnapshotMeta::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.SnapshotMeta.index)
}

// uint64 term = 2;
void SnapshotMeta::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SnapshotMeta::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.term)
  return term_;
}
void SnapshotMeta::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.SnapshotMeta.term)
}

// repeated .chubaodb.raft.impl.pb.Peer peers = 3;
int SnapshotMeta::peers_size() const {
  return peers_.size();
}
void SnapshotMeta::clear_peers() {
  peers_.Clear();
}
const ::chubaodb::raft::impl::pb::Peer& SnapshotMeta::peers(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_.Get(index);
}
::chubaodb::raft::impl::pb::Peer* SnapshotMeta::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_.Mutable(index);
}
::chubaodb::raft::impl::pb::Peer* SnapshotMeta::add_peers() {
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer >*
SnapshotMeta::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer >&
SnapshotMeta::peers() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_;
}

// bytes context = 4;
void SnapshotMeta::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotMeta::context() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.context)
  return context_.GetNoArena();
}
void SnapshotMeta::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
#if LANG_CXX11
void SnapshotMeta::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
#endif
void SnapshotMeta::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
void SnapshotMeta::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
::std::string* SnapshotMeta::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.SnapshotMeta.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotMeta::release_context() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.SnapshotMeta.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotMeta::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.SnapshotMeta.context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kUuidFieldNumber;
const int Snapshot::kMetaFieldNumber;
const int Snapshot::kDatasFieldNumber;
const int Snapshot::kFinalFieldNumber;
const int Snapshot::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      datas_(from.datas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::chubaodb::raft::impl::pb::SnapshotMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(final_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.Snapshot)
}

void Snapshot::SharedCtor() {
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(final_));
  _cached_size_ = 0;
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void Snapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snapshot::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snapshot& Snapshot::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

Snapshot* Snapshot::New(::google::protobuf::Arena* arena) const {
  Snapshot* n = new Snapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(final_));
  _internal_metadata_.Clear();
}

bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.Snapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes datas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_datas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool final = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.Snapshot)
  return false;
#undef DO_
}

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (this->uuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->meta_, output);
  }

  // repeated bytes datas = 3;
  for (int i = 0, n = this->datas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->datas(i), output);
  }

  // bool final = 4;
  if (this->final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->final(), output);
  }

  // int64 seq = 5;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (this->uuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->meta_, deterministic, target);
  }

  // repeated bytes datas = 3;
  for (int i = 0, n = this->datas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->datas(i), target);
  }

  // bool final = 4;
  if (this->final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->final(), target);
  }

  // int64 seq = 5;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.Snapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes datas = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->datas_size());
  for (int i = 0, n = this->datas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datas(i));
  }

  // .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  // uint64 uuid = 1;
  if (this->uuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  // int64 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq());
  }

  // bool final = 4;
  if (this->final() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
  if (from.has_meta()) {
    mutable_meta()->::chubaodb::raft::impl::pb::SnapshotMeta::MergeFrom(from.meta());
  }
  if (from.uuid() != 0) {
    set_uuid(from.uuid());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.final() != 0) {
    set_final(from.final());
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  datas_.InternalSwap(&other->datas_);
  swap(meta_, other->meta_);
  swap(uuid_, other->uuid_);
  swap(seq_, other->seq_);
  swap(final_, other->final_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Snapshot

// uint64 uuid = 1;
void Snapshot::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Snapshot::uuid() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.uuid)
  return uuid_;
}
void Snapshot::set_uuid(::google::protobuf::uint64 value) {
  
  uuid_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.uuid)
}

// .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
bool Snapshot::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void Snapshot::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::chubaodb::raft::impl::pb::SnapshotMeta& Snapshot::meta() const {
  const ::chubaodb::raft::impl::pb::SnapshotMeta* p = meta_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::SnapshotMeta*>(
      &::chubaodb::raft::impl::pb::_SnapshotMeta_default_instance_);
}
::chubaodb::raft::impl::pb::SnapshotMeta* Snapshot::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::chubaodb::raft::impl::pb::SnapshotMeta;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Snapshot.meta)
  return meta_;
}
::chubaodb::raft::impl::pb::SnapshotMeta* Snapshot::release_meta() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Snapshot.meta)
  
  ::chubaodb::raft::impl::pb::SnapshotMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Snapshot::set_allocated_meta(::chubaodb::raft::impl::pb::SnapshotMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Snapshot.meta)
}

// repeated bytes datas = 3;
int Snapshot::datas_size() const {
  return datas_.size();
}
void Snapshot::clear_datas() {
  datas_.Clear();
}
const ::std::string& Snapshot::datas(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_.Get(index);
}
::std::string* Snapshot::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_.Mutable(index);
}
void Snapshot::set_datas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.datas)
  datas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Snapshot::set_datas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.datas)
  datas_.Mutable(index)->assign(std::move(value));
}
#endif
void Snapshot::set_datas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.Snapshot.datas)
}
void Snapshot::set_datas(int index, const void* value, size_t size) {
  datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.Snapshot.datas)
}
::std::string* Snapshot::add_datas() {
  // @@protoc_insertion_point(field_add_mutable:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_.Add();
}
void Snapshot::add_datas(const ::std::string& value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.Snapshot.datas)
}
#if LANG_CXX11
void Snapshot::add_datas(::std::string&& value) {
  datas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.Snapshot.datas)
}
#endif
void Snapshot::add_datas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chubaodb.raft.impl.pb.Snapshot.datas)
}
void Snapshot::add_datas(const void* value, size_t size) {
  datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chubaodb.raft.impl.pb.Snapshot.datas)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Snapshot::datas() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Snapshot::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.Snapshot.datas)
  return &datas_;
}

// bool final = 4;
void Snapshot::clear_final() {
  final_ = false;
}
bool Snapshot::final() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.final)
  return final_;
}
void Snapshot::set_final(bool value) {
  
  final_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.final)
}

// int64 seq = 5;
void Snapshot::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Snapshot::seq() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.seq)
  return seq_;
}
void Snapshot::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kIdFieldNumber;
const int Message::kFromFieldNumber;
const int Message::kToFieldNumber;
const int Message::kTermFieldNumber;
const int Message::kCommitFieldNumber;
const int Message::kReadSequenceFieldNumber;
const int Message::kLogTermFieldNumber;
const int Message::kLogIndexFieldNumber;
const int Message::kEntriesFieldNumber;
const int Message::kRejectFieldNumber;
const int Message::kRejectHintFieldNumber;
const int Message::kHbCtxFieldNumber;
const int Message::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hb_ctx()) {
    hb_ctx_ = new ::chubaodb::raft::impl::pb::HeartbeatContext(*from.hb_ctx_);
  } else {
    hb_ctx_ = NULL;
  }
  if (from.has_snapshot()) {
    snapshot_ = new ::chubaodb::raft::impl::pb::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reject_hint_) -
    reinterpret_cast<char*>(&id_)) + sizeof(reject_hint_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.Message)
}

void Message::SharedCtor() {
  ::memset(&hb_ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reject_hint_) -
      reinterpret_cast<char*>(&hb_ctx_)) + sizeof(reject_hint_));
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) delete hb_ctx_;
  if (this != internal_default_instance()) delete snapshot_;
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaNoVirtual() == NULL && hb_ctx_ != NULL) {
    delete hb_ctx_;
  }
  hb_ctx_ = NULL;
  if (GetArenaNoVirtual() == NULL && snapshot_ != NULL) {
    delete snapshot_;
  }
  snapshot_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reject_hint_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reject_hint_));
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chubaodb.raft.impl.pb.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chubaodb::raft::impl::pb::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_sequence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 log_term = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 log_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chubaodb.raft.impl.pb.Entry entries = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reject = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reject_hint = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reject_hint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hb_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from(), output);
  }

  // uint64 to = 4;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to(), output);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  // uint64 commit = 6;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commit(), output);
  }

  // uint64 read_sequence = 7;
  if (this->read_sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->read_sequence(), output);
  }

  // uint64 log_term = 8;
  if (this->log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->log_term(), output);
  }

  // uint64 log_index = 9;
  if (this->log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->log_index(), output);
  }

  // repeated .chubaodb.raft.impl.pb.Entry entries = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->entries(static_cast<int>(i)), output);
  }

  // bool reject = 12;
  if (this->reject() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->reject(), output);
  }

  // uint64 reject_hint = 13;
  if (this->reject_hint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->reject_hint(), output);
  }

  // .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
  if (this->has_hb_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hb_ctx_, output);
  }

  // .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
  if (this->has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->snapshot_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chubaodb.raft.impl.pb.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from(), target);
  }

  // uint64 to = 4;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to(), target);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  // uint64 commit = 6;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commit(), target);
  }

  // uint64 read_sequence = 7;
  if (this->read_sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->read_sequence(), target);
  }

  // uint64 log_term = 8;
  if (this->log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->log_term(), target);
  }

  // uint64 log_index = 9;
  if (this->log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->log_index(), target);
  }

  // repeated .chubaodb.raft.impl.pb.Entry entries = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->entries(static_cast<int>(i)), deterministic, target);
  }

  // bool reject = 12;
  if (this->reject() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->reject(), target);
  }

  // uint64 reject_hint = 13;
  if (this->reject_hint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->reject_hint(), target);
  }

  // .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
  if (this->has_hb_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->hb_ctx_, deterministic, target);
  }

  // .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
  if (this->has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->snapshot_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chubaodb.raft.impl.pb.Entry entries = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  // .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
  if (this->has_hb_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hb_ctx_);
  }

  // .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snapshot_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->from());
  }

  // uint64 to = 4;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->to());
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 commit = 6;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // .chubaodb.raft.impl.pb.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool reject = 12;
  if (this->reject() != 0) {
    total_size += 1 + 1;
  }

  // uint64 read_sequence = 7;
  if (this->read_sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_sequence());
  }

  // uint64 log_term = 8;
  if (this->log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_term());
  }

  // uint64 log_index = 9;
  if (this->log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_index());
  }

  // uint64 reject_hint = 13;
  if (this->reject_hint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reject_hint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_hb_ctx()) {
    mutable_hb_ctx()->::chubaodb::raft::impl::pb::HeartbeatContext::MergeFrom(from.hb_ctx());
  }
  if (from.has_snapshot()) {
    mutable_snapshot()->::chubaodb::raft::impl::pb::Snapshot::MergeFrom(from.snapshot());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.reject() != 0) {
    set_reject(from.reject());
  }
  if (from.read_sequence() != 0) {
    set_read_sequence(from.read_sequence());
  }
  if (from.log_term() != 0) {
    set_log_term(from.log_term());
  }
  if (from.log_index() != 0) {
    set_log_index(from.log_index());
  }
  if (from.reject_hint() != 0) {
    set_reject_hint(from.reject_hint());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  entries_.InternalSwap(&other->entries_);
  swap(hb_ctx_, other->hb_ctx_);
  swap(snapshot_, other->snapshot_);
  swap(id_, other->id_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(term_, other->term_);
  swap(commit_, other->commit_);
  swap(type_, other->type_);
  swap(reject_, other->reject_);
  swap(read_sequence_, other->read_sequence_);
  swap(log_term_, other->log_term_);
  swap(log_index_, other->log_index_);
  swap(reject_hint_, other->reject_hint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// .chubaodb.raft.impl.pb.MessageType type = 1;
void Message::clear_type() {
  type_ = 0;
}
::chubaodb::raft::impl::pb::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.type)
  return static_cast< ::chubaodb::raft::impl::pb::MessageType >(type_);
}
void Message::set_type(::chubaodb::raft::impl::pb::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.type)
}

// uint64 id = 2;
void Message::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::id() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.id)
  return id_;
}
void Message::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.id)
}

// uint64 from = 3;
void Message::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.from)
  return from_;
}
void Message::set_from(::google::protobuf::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.from)
}

// uint64 to = 4;
void Message::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.to)
  return to_;
}
void Message::set_to(::google::protobuf::uint64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.to)
}

// uint64 term = 5;
void Message::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.term)
  return term_;
}
void Message::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.term)
}

// uint64 commit = 6;
void Message::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.commit)
  return commit_;
}
void Message::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.commit)
}

// uint64 read_sequence = 7;
void Message::clear_read_sequence() {
  read_sequence_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::read_sequence() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.read_sequence)
  return read_sequence_;
}
void Message::set_read_sequence(::google::protobuf::uint64 value) {
  
  read_sequence_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.read_sequence)
}

// uint64 log_term = 8;
void Message::clear_log_term() {
  log_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::log_term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.log_term)
  return log_term_;
}
void Message::set_log_term(::google::protobuf::uint64 value) {
  
  log_term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.log_term)
}

// uint64 log_index = 9;
void Message::clear_log_index() {
  log_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::log_index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.log_index)
  return log_index_;
}
void Message::set_log_index(::google::protobuf::uint64 value) {
  
  log_index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.log_index)
}

// repeated .chubaodb.raft.impl.pb.Entry entries = 10;
int Message::entries_size() const {
  return entries_.size();
}
void Message::clear_entries() {
  entries_.Clear();
}
const ::chubaodb::raft::impl::pb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.entries)
  return entries_.Get(index);
}
::chubaodb::raft::impl::pb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Message.entries)
  return entries_.Mutable(index);
}
::chubaodb::raft::impl::pb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.Message.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.Message.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.Message.entries)
  return entries_;
}

// bool reject = 12;
void Message::clear_reject() {
  reject_ = false;
}
bool Message::reject() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.reject)
  return reject_;
}
void Message::set_reject(bool value) {
  
  reject_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.reject)
}

// uint64 reject_hint = 13;
void Message::clear_reject_hint() {
  reject_hint_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Message::reject_hint() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.reject_hint)
  return reject_hint_;
}
void Message::set_reject_hint(::google::protobuf::uint64 value) {
  
  reject_hint_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.reject_hint)
}

// .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
bool Message::has_hb_ctx() const {
  return this != internal_default_instance() && hb_ctx_ != NULL;
}
void Message::clear_hb_ctx() {
  if (GetArenaNoVirtual() == NULL && hb_ctx_ != NULL) delete hb_ctx_;
  hb_ctx_ = NULL;
}
const ::chubaodb::raft::impl::pb::HeartbeatContext& Message::hb_ctx() const {
  const ::chubaodb::raft::impl::pb::HeartbeatContext* p = hb_ctx_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.hb_ctx)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::HeartbeatContext*>(
      &::chubaodb::raft::impl::pb::_HeartbeatContext_default_instance_);
}
::chubaodb::raft::impl::pb::HeartbeatContext* Message::mutable_hb_ctx() {
  
  if (hb_ctx_ == NULL) {
    hb_ctx_ = new ::chubaodb::raft::impl::pb::HeartbeatContext;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Message.hb_ctx)
  return hb_ctx_;
}
::chubaodb::raft::impl::pb::HeartbeatContext* Message::release_hb_ctx() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Message.hb_ctx)
  
  ::chubaodb::raft::impl::pb::HeartbeatContext* temp = hb_ctx_;
  hb_ctx_ = NULL;
  return temp;
}
void Message::set_allocated_hb_ctx(::chubaodb::raft::impl::pb::HeartbeatContext* hb_ctx) {
  delete hb_ctx_;
  hb_ctx_ = hb_ctx;
  if (hb_ctx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Message.hb_ctx)
}

// .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
bool Message::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != NULL;
}
void Message::clear_snapshot() {
  if (GetArenaNoVirtual() == NULL && snapshot_ != NULL) delete snapshot_;
  snapshot_ = NULL;
}
const ::chubaodb::raft::impl::pb::Snapshot& Message::snapshot() const {
  const ::chubaodb::raft::impl::pb::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::Snapshot*>(
      &::chubaodb::raft::impl::pb::_Snapshot_default_instance_);
}
::chubaodb::raft::impl::pb::Snapshot* Message::mutable_snapshot() {
  
  if (snapshot_ == NULL) {
    snapshot_ = new ::chubaodb::raft::impl::pb::Snapshot;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Message.snapshot)
  return snapshot_;
}
::chubaodb::raft::impl::pb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Message.snapshot)
  
  ::chubaodb::raft::impl::pb::Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
void Message::set_allocated_snapshot(::chubaodb::raft::impl::pb::Snapshot* snapshot) {
  delete snapshot_;
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Message.snapshot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardState::kTermFieldNumber;
const int HardState::kCommitFieldNumber;
const int HardState::kVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardState::HardState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.HardState)
}
HardState::HardState(const HardState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_) -
    reinterpret_cast<char*>(&term_)) + sizeof(vote_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.HardState)
}

void HardState::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_));
  _cached_size_ = 0;
}

HardState::~HardState() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.HardState)
  SharedDtor();
}

void HardState::SharedDtor() {
}

void HardState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardState::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HardState& HardState::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

HardState* HardState::New(::google::protobuf::Arena* arena) const {
  HardState* n = new HardState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardState::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.HardState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_));
  _internal_metadata_.Clear();
}

bool HardState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.HardState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 vote = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.HardState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.HardState)
  return false;
#undef DO_
}

void HardState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.HardState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // uint64 commit = 2;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit(), output);
  }

  // uint64 vote = 3;
  if (this->vote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->vote(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.HardState)
}

::google::protobuf::uint8* HardState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.HardState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // uint64 commit = 2;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit(), target);
  }

  // uint64 vote = 3;
  if (this->vote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->vote(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.HardState)
  return target;
}

size_t HardState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.HardState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 commit = 2;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // uint64 vote = 3;
  if (this->vote() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vote());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.HardState)
  GOOGLE_DCHECK_NE(&from, this);
  const HardState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HardState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.HardState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.HardState)
    MergeFrom(*source);
  }
}

void HardState::MergeFrom(const HardState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.HardState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.vote() != 0) {
    set_vote(from.vote());
  }
}

void HardState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.HardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardState::CopyFrom(const HardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.HardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardState::IsInitialized() const {
  return true;
}

void HardState::Swap(HardState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardState::InternalSwap(HardState* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(commit_, other->commit_);
  swap(vote_, other->vote_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardState::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardState

// uint64 term = 1;
void HardState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HardState.term)
  return term_;
}
void HardState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HardState.term)
}

// uint64 commit = 2;
void HardState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HardState.commit)
  return commit_;
}
void HardState::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HardState.commit)
}

// uint64 vote = 3;
void HardState::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HardState.vote)
  return vote_;
}
void HardState::set_vote(::google::protobuf::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HardState.vote)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncateMeta::kIndexFieldNumber;
const int TruncateMeta::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncateMeta::TruncateMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.TruncateMeta)
}
TruncateMeta::TruncateMeta(const TruncateMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&index_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.TruncateMeta)
}

void TruncateMeta::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&index_)) + sizeof(term_));
  _cached_size_ = 0;
}

TruncateMeta::~TruncateMeta() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.TruncateMeta)
  SharedDtor();
}

void TruncateMeta::SharedDtor() {
}

void TruncateMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateMeta::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TruncateMeta& TruncateMeta::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

TruncateMeta* TruncateMeta::New(::google::protobuf::Arena* arena) const {
  TruncateMeta* n = new TruncateMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TruncateMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.TruncateMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&index_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

bool TruncateMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.TruncateMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.TruncateMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.TruncateMeta)
  return false;
#undef DO_
}

void TruncateMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.TruncateMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.TruncateMeta)
}

::google::protobuf::uint8* TruncateMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.TruncateMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.TruncateMeta)
  return target;
}

size_t TruncateMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.TruncateMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.TruncateMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncateMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TruncateMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.TruncateMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.TruncateMeta)
    MergeFrom(*source);
  }
}

void TruncateMeta::MergeFrom(const TruncateMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.TruncateMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void TruncateMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.TruncateMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateMeta::CopyFrom(const TruncateMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.TruncateMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateMeta::IsInitialized() const {
  return true;
}

void TruncateMeta::Swap(TruncateMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncateMeta::InternalSwap(TruncateMeta* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TruncateMeta::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TruncateMeta

// uint64 index = 1;
void TruncateMeta::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TruncateMeta::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.TruncateMeta.index)
  return index_;
}
void TruncateMeta::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.TruncateMeta.index)
}

// uint64 term = 2;
void TruncateMeta::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TruncateMeta::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.TruncateMeta.term)
  return term_;
}
void TruncateMeta::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.TruncateMeta.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexItem::kIndexFieldNumber;
const int IndexItem::kTermFieldNumber;
const int IndexItem::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexItem::IndexItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.IndexItem)
}
IndexItem::IndexItem(const IndexItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&index_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.IndexItem)
}

void IndexItem::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&index_)) + sizeof(offset_));
  _cached_size_ = 0;
}

IndexItem::~IndexItem() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.IndexItem)
  SharedDtor();
}

void IndexItem::SharedDtor() {
}

void IndexItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexItem::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexItem& IndexItem::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexItem* IndexItem::New(::google::protobuf::Arena* arena) const {
  IndexItem* n = new IndexItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexItem::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.IndexItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&index_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

bool IndexItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.IndexItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.IndexItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.IndexItem)
  return false;
#undef DO_
}

void IndexItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.IndexItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.IndexItem)
}

::google::protobuf::uint8* IndexItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.IndexItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.IndexItem)
  return target;
}

size_t IndexItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.IndexItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.IndexItem)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.IndexItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.IndexItem)
    MergeFrom(*source);
  }
}

void IndexItem::MergeFrom(const IndexItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.IndexItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void IndexItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.IndexItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexItem::CopyFrom(const IndexItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.IndexItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexItem::IsInitialized() const {
  return true;
}

void IndexItem::Swap(IndexItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexItem::InternalSwap(IndexItem* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexItem::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexItem

// uint64 index = 1;
void IndexItem::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IndexItem::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.IndexItem.index)
  return index_;
}
void IndexItem::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.IndexItem.index)
}

// uint64 term = 2;
void IndexItem::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IndexItem::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.IndexItem.term)
  return term_;
}
void IndexItem::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.IndexItem.term)
}

// uint32 offset = 3;
void IndexItem::clear_offset() {
  offset_ = 0u;
}
::google::protobuf::uint32 IndexItem::offset() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.IndexItem.offset)
  return offset_;
}
void IndexItem::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.IndexItem.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogIndex::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogIndex::LogIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chubaodb.raft.impl.pb.LogIndex)
}
LogIndex::LogIndex(const LogIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chubaodb.raft.impl.pb.LogIndex)
}

void LogIndex::SharedCtor() {
  _cached_size_ = 0;
}

LogIndex::~LogIndex() {
  // @@protoc_insertion_point(destructor:chubaodb.raft.impl.pb.LogIndex)
  SharedDtor();
}

void LogIndex::SharedDtor() {
}

void LogIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogIndex::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogIndex& LogIndex::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogIndex* LogIndex::New(::google::protobuf::Arena* arena) const {
  LogIndex* n = new LogIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:chubaodb.raft.impl.pb.LogIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool LogIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chubaodb.raft.impl.pb.LogIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chubaodb.raft.impl.pb.LogIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chubaodb.raft.impl.pb.LogIndex)
  return false;
#undef DO_
}

void LogIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chubaodb.raft.impl.pb.LogIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chubaodb.raft.impl.pb.LogIndex)
}

::google::protobuf::uint8* LogIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chubaodb.raft.impl.pb.LogIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chubaodb.raft.impl.pb.LogIndex)
  return target;
}

size_t LogIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chubaodb.raft.impl.pb.LogIndex)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chubaodb.raft.impl.pb.LogIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const LogIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chubaodb.raft.impl.pb.LogIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chubaodb.raft.impl.pb.LogIndex)
    MergeFrom(*source);
  }
}

void LogIndex::MergeFrom(const LogIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chubaodb.raft.impl.pb.LogIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void LogIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chubaodb.raft.impl.pb.LogIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogIndex::CopyFrom(const LogIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chubaodb.raft.impl.pb.LogIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogIndex::IsInitialized() const {
  return true;
}

void LogIndex::Swap(LogIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogIndex::InternalSwap(LogIndex* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogIndex::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogIndex

// repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
int LogIndex::items_size() const {
  return items_.size();
}
void LogIndex::clear_items() {
  items_.Clear();
}
const ::chubaodb::raft::impl::pb::IndexItem& LogIndex::items(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.LogIndex.items)
  return items_.Get(index);
}
::chubaodb::raft::impl::pb::IndexItem* LogIndex::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.LogIndex.items)
  return items_.Mutable(index);
}
::chubaodb::raft::impl::pb::IndexItem* LogIndex::add_items() {
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.LogIndex.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem >*
LogIndex::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.LogIndex.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem >&
LogIndex::items() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.LogIndex.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace impl
}  // namespace raft
}  // namespace chubaodb

// @@protoc_insertion_point(global_scope)
