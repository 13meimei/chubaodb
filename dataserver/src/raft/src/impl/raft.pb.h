// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_raft_2eproto__INCLUDED
#define PROTOBUF_raft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace chubaodb {
namespace raft {
namespace impl {
namespace pb {
class ConfChange;
class ConfChangeDefaultTypeInternal;
extern ConfChangeDefaultTypeInternal _ConfChange_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class HardState;
class HardStateDefaultTypeInternal;
extern HardStateDefaultTypeInternal _HardState_default_instance_;
class HeartbeatContext;
class HeartbeatContextDefaultTypeInternal;
extern HeartbeatContextDefaultTypeInternal _HeartbeatContext_default_instance_;
class IndexItem;
class IndexItemDefaultTypeInternal;
extern IndexItemDefaultTypeInternal _IndexItem_default_instance_;
class LogIndex;
class LogIndexDefaultTypeInternal;
extern LogIndexDefaultTypeInternal _LogIndex_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SnapshotMeta;
class SnapshotMetaDefaultTypeInternal;
extern SnapshotMetaDefaultTypeInternal _SnapshotMeta_default_instance_;
class TruncateMeta;
class TruncateMetaDefaultTypeInternal;
extern TruncateMetaDefaultTypeInternal _TruncateMeta_default_instance_;
}  // namespace pb
}  // namespace impl
}  // namespace raft
}  // namespace chubaodb

namespace chubaodb {
namespace raft {
namespace impl {
namespace pb {

namespace protobuf_raft_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_raft_2eproto

enum PeerType {
  PEER_NORMAL = 0,
  PEER_LEARNER = 1,
  PeerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerType_IsValid(int value);
const PeerType PeerType_MIN = PEER_NORMAL;
const PeerType PeerType_MAX = PEER_LEARNER;
const int PeerType_ARRAYSIZE = PeerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerType_descriptor();
inline const ::std::string& PeerType_Name(PeerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerType_descriptor(), value);
}
inline bool PeerType_Parse(
    const ::std::string& name, PeerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerType>(
    PeerType_descriptor(), name, value);
}
enum ConfChangeType {
  CONF_ADD_PEER = 0,
  CONF_REMOVE_PEER = 1,
  CONF_PROMOTE_PEER = 2,
  ConfChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfChangeType_IsValid(int value);
const ConfChangeType ConfChangeType_MIN = CONF_ADD_PEER;
const ConfChangeType ConfChangeType_MAX = CONF_PROMOTE_PEER;
const int ConfChangeType_ARRAYSIZE = ConfChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor();
inline const ::std::string& ConfChangeType_Name(ConfChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfChangeType_descriptor(), value);
}
inline bool ConfChangeType_Parse(
    const ::std::string& name, ConfChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfChangeType>(
    ConfChangeType_descriptor(), name, value);
}
enum EntryType {
  ENTRY_TYPE_INVALID = 0,
  ENTRY_NORMAL = 1,
  ENTRY_CONF_CHANGE = 2,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntryType_IsValid(int value);
const EntryType EntryType_MIN = ENTRY_TYPE_INVALID;
const EntryType EntryType_MAX = ENTRY_CONF_CHANGE;
const int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntryType_descriptor();
inline const ::std::string& EntryType_Name(EntryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntryType_descriptor(), value);
}
inline bool EntryType_Parse(
    const ::std::string& name, EntryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum MessageType {
  MESSAGE_TYPE_INVALID = 0,
  APPEND_ENTRIES_REQUEST = 1,
  APPEND_ENTRIES_RESPONSE = 2,
  VOTE_REQUEST = 3,
  VOTE_RESPONSE = 4,
  HEARTBEAT_REQUEST = 5,
  HEARTBEAT_RESPONSE = 6,
  SNAPSHOT_REQUEST = 7,
  SNAPSHOT_ACK = 9,
  LOCAL_MSG_HUP = 10,
  LOCAL_MSG_PROP = 11,
  LOCAL_MSG_TICK = 12,
  PRE_VOTE_REQUEST = 13,
  PRE_VOTE_RESPONSE = 14,
  LOCAL_SNAPSHOT_STATUS = 15,
  LOCAL_MSG_READ = 16,
  READ_INDEX_REQUEST = 17,
  READ_INDEX_RESPONSE = 18,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MESSAGE_TYPE_INVALID;
const MessageType MessageType_MAX = READ_INDEX_RESPONSE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // uint64 peer_id = 3;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  ::google::protobuf::uint64 peer_id() const;
  void set_peer_id(::google::protobuf::uint64 value);

  // .chubaodb.raft.impl.pb.PeerType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::chubaodb::raft::impl::pb::PeerType type() const;
  void set_type(::chubaodb::raft::impl::pb::PeerType value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 peer_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.ConfChange) */ {
 public:
  ConfChange();
  virtual ~ConfChange();

  ConfChange(const ConfChange& from);

  inline ConfChange& operator=(const ConfChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfChange(ConfChange&& from) noexcept
    : ConfChange() {
    *this = ::std::move(from);
  }

  inline ConfChange& operator=(ConfChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfChange& default_instance();

  static inline const ConfChange* internal_default_instance() {
    return reinterpret_cast<const ConfChange*>(
               &_ConfChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ConfChange* other);
  friend void swap(ConfChange& a, ConfChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfChange* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfChange& from);
  void MergeFrom(const ConfChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes context = 3;
  void clear_context();
  static const int kContextFieldNumber = 3;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // .chubaodb.raft.impl.pb.Peer Peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::chubaodb::raft::impl::pb::Peer& peer() const;
  ::chubaodb::raft::impl::pb::Peer* mutable_peer();
  ::chubaodb::raft::impl::pb::Peer* release_peer();
  void set_allocated_peer(::chubaodb::raft::impl::pb::Peer* peer);

  // .chubaodb.raft.impl.pb.ConfChangeType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::chubaodb::raft::impl::pb::ConfChangeType type() const;
  void set_type(::chubaodb::raft::impl::pb::ConfChangeType value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.ConfChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::chubaodb::raft::impl::pb::Peer* peer_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // .chubaodb.raft.impl.pb.EntryType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::chubaodb::raft::impl::pb::EntryType type() const;
  void set_type(::chubaodb::raft::impl::pb::EntryType value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.HeartbeatContext) */ {
 public:
  HeartbeatContext();
  virtual ~HeartbeatContext();

  HeartbeatContext(const HeartbeatContext& from);

  inline HeartbeatContext& operator=(const HeartbeatContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatContext(HeartbeatContext&& from) noexcept
    : HeartbeatContext() {
    *this = ::std::move(from);
  }

  inline HeartbeatContext& operator=(HeartbeatContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatContext& default_instance();

  static inline const HeartbeatContext* internal_default_instance() {
    return reinterpret_cast<const HeartbeatContext*>(
               &_HeartbeatContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HeartbeatContext* other);
  friend void swap(HeartbeatContext& a, HeartbeatContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatContext* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartbeatContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartbeatContext& from);
  void MergeFrom(const HeartbeatContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartbeatContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::uint64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::uint64 value);
  void add_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.HeartbeatContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ids_;
  mutable int _ids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.SnapshotMeta) */ {
 public:
  SnapshotMeta();
  virtual ~SnapshotMeta();

  SnapshotMeta(const SnapshotMeta& from);

  inline SnapshotMeta& operator=(const SnapshotMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotMeta(SnapshotMeta&& from) noexcept
    : SnapshotMeta() {
    *this = ::std::move(from);
  }

  inline SnapshotMeta& operator=(SnapshotMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotMeta& default_instance();

  static inline const SnapshotMeta* internal_default_instance() {
    return reinterpret_cast<const SnapshotMeta*>(
               &_SnapshotMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SnapshotMeta* other);
  friend void swap(SnapshotMeta& a, SnapshotMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotMeta& from);
  void MergeFrom(const SnapshotMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chubaodb.raft.impl.pb.Peer peers = 3;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 3;
  const ::chubaodb::raft::impl::pb::Peer& peers(int index) const;
  ::chubaodb::raft::impl::pb::Peer* mutable_peers(int index);
  ::chubaodb::raft::impl::pb::Peer* add_peers();
  ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer >&
      peers() const;

  // bytes context = 4;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.SnapshotMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer > peers_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Snapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snapshot& default_instance();

  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Snapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Snapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes datas = 3;
  int datas_size() const;
  void clear_datas();
  static const int kDatasFieldNumber = 3;
  const ::std::string& datas(int index) const;
  ::std::string* mutable_datas(int index);
  void set_datas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_datas(int index, ::std::string&& value);
  #endif
  void set_datas(int index, const char* value);
  void set_datas(int index, const void* value, size_t size);
  ::std::string* add_datas();
  void add_datas(const ::std::string& value);
  #if LANG_CXX11
  void add_datas(::std::string&& value);
  #endif
  void add_datas(const char* value);
  void add_datas(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& datas() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datas();

  // .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 2;
  const ::chubaodb::raft::impl::pb::SnapshotMeta& meta() const;
  ::chubaodb::raft::impl::pb::SnapshotMeta* mutable_meta();
  ::chubaodb::raft::impl::pb::SnapshotMeta* release_meta();
  void set_allocated_meta(::chubaodb::raft::impl::pb::SnapshotMeta* meta);

  // uint64 uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  ::google::protobuf::uint64 uuid() const;
  void set_uuid(::google::protobuf::uint64 value);

  // int64 seq = 5;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // bool final = 4;
  void clear_final();
  static const int kFinalFieldNumber = 4;
  bool final() const;
  void set_final(bool value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.Snapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datas_;
  ::chubaodb::raft::impl::pb::SnapshotMeta* meta_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int64 seq_;
  bool final_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chubaodb.raft.impl.pb.Entry entries = 10;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 10;
  const ::chubaodb::raft::impl::pb::Entry& entries(int index) const;
  ::chubaodb::raft::impl::pb::Entry* mutable_entries(int index);
  ::chubaodb::raft::impl::pb::Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry >&
      entries() const;

  // .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
  bool has_hb_ctx() const;
  void clear_hb_ctx();
  static const int kHbCtxFieldNumber = 14;
  const ::chubaodb::raft::impl::pb::HeartbeatContext& hb_ctx() const;
  ::chubaodb::raft::impl::pb::HeartbeatContext* mutable_hb_ctx();
  ::chubaodb::raft::impl::pb::HeartbeatContext* release_hb_ctx();
  void set_allocated_hb_ctx(::chubaodb::raft::impl::pb::HeartbeatContext* hb_ctx);

  // .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 15;
  const ::chubaodb::raft::impl::pb::Snapshot& snapshot() const;
  ::chubaodb::raft::impl::pb::Snapshot* mutable_snapshot();
  ::chubaodb::raft::impl::pb::Snapshot* release_snapshot();
  void set_allocated_snapshot(::chubaodb::raft::impl::pb::Snapshot* snapshot);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  ::google::protobuf::uint64 from() const;
  void set_from(::google::protobuf::uint64 value);

  // uint64 to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  ::google::protobuf::uint64 to() const;
  void set_to(::google::protobuf::uint64 value);

  // uint64 term = 5;
  void clear_term();
  static const int kTermFieldNumber = 5;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 commit = 6;
  void clear_commit();
  static const int kCommitFieldNumber = 6;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // .chubaodb.raft.impl.pb.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::chubaodb::raft::impl::pb::MessageType type() const;
  void set_type(::chubaodb::raft::impl::pb::MessageType value);

  // bool reject = 12;
  void clear_reject();
  static const int kRejectFieldNumber = 12;
  bool reject() const;
  void set_reject(bool value);

  // uint64 read_sequence = 7;
  void clear_read_sequence();
  static const int kReadSequenceFieldNumber = 7;
  ::google::protobuf::uint64 read_sequence() const;
  void set_read_sequence(::google::protobuf::uint64 value);

  // uint64 log_term = 8;
  void clear_log_term();
  static const int kLogTermFieldNumber = 8;
  ::google::protobuf::uint64 log_term() const;
  void set_log_term(::google::protobuf::uint64 value);

  // uint64 log_index = 9;
  void clear_log_index();
  static const int kLogIndexFieldNumber = 9;
  ::google::protobuf::uint64 log_index() const;
  void set_log_index(::google::protobuf::uint64 value);

  // uint64 reject_hint = 13;
  void clear_reject_hint();
  static const int kRejectHintFieldNumber = 13;
  ::google::protobuf::uint64 reject_hint() const;
  void set_reject_hint(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry > entries_;
  ::chubaodb::raft::impl::pb::HeartbeatContext* hb_ctx_;
  ::chubaodb::raft::impl::pb::Snapshot* snapshot_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 from_;
  ::google::protobuf::uint64 to_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_;
  int type_;
  bool reject_;
  ::google::protobuf::uint64 read_sequence_;
  ::google::protobuf::uint64 log_term_;
  ::google::protobuf::uint64 log_index_;
  ::google::protobuf::uint64 reject_hint_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HardState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.HardState) */ {
 public:
  HardState();
  virtual ~HardState();

  HardState(const HardState& from);

  inline HardState& operator=(const HardState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HardState(HardState&& from) noexcept
    : HardState() {
    *this = ::std::move(from);
  }

  inline HardState& operator=(HardState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HardState& default_instance();

  static inline const HardState* internal_default_instance() {
    return reinterpret_cast<const HardState*>(
               &_HardState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(HardState* other);
  friend void swap(HardState& a, HardState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HardState* New() const PROTOBUF_FINAL { return New(NULL); }

  HardState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HardState& from);
  void MergeFrom(const HardState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HardState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 commit = 2;
  void clear_commit();
  static const int kCommitFieldNumber = 2;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // uint64 vote = 3;
  void clear_vote();
  static const int kVoteFieldNumber = 3;
  ::google::protobuf::uint64 vote() const;
  void set_vote(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.HardState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_;
  ::google::protobuf::uint64 vote_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TruncateMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.TruncateMeta) */ {
 public:
  TruncateMeta();
  virtual ~TruncateMeta();

  TruncateMeta(const TruncateMeta& from);

  inline TruncateMeta& operator=(const TruncateMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncateMeta(TruncateMeta&& from) noexcept
    : TruncateMeta() {
    *this = ::std::move(from);
  }

  inline TruncateMeta& operator=(TruncateMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncateMeta& default_instance();

  static inline const TruncateMeta* internal_default_instance() {
    return reinterpret_cast<const TruncateMeta*>(
               &_TruncateMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TruncateMeta* other);
  friend void swap(TruncateMeta& a, TruncateMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncateMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TruncateMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TruncateMeta& from);
  void MergeFrom(const TruncateMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TruncateMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.TruncateMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.IndexItem) */ {
 public:
  IndexItem();
  virtual ~IndexItem();

  IndexItem(const IndexItem& from);

  inline IndexItem& operator=(const IndexItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexItem(IndexItem&& from) noexcept
    : IndexItem() {
    *this = ::std::move(from);
  }

  inline IndexItem& operator=(IndexItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexItem& default_instance();

  static inline const IndexItem* internal_default_instance() {
    return reinterpret_cast<const IndexItem*>(
               &_IndexItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(IndexItem* other);
  friend void swap(IndexItem& a, IndexItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexItem* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexItem& from);
  void MergeFrom(const IndexItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.IndexItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint32 offset_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chubaodb.raft.impl.pb.LogIndex) */ {
 public:
  LogIndex();
  virtual ~LogIndex();

  LogIndex(const LogIndex& from);

  inline LogIndex& operator=(const LogIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogIndex(LogIndex&& from) noexcept
    : LogIndex() {
    *this = ::std::move(from);
  }

  inline LogIndex& operator=(LogIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogIndex& default_instance();

  static inline const LogIndex* internal_default_instance() {
    return reinterpret_cast<const LogIndex*>(
               &_LogIndex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LogIndex* other);
  friend void swap(LogIndex& a, LogIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  LogIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogIndex& from);
  void MergeFrom(const LogIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::chubaodb::raft::impl::pb::IndexItem& items(int index) const;
  ::chubaodb::raft::impl::pb::IndexItem* mutable_items(int index);
  ::chubaodb::raft::impl::pb::IndexItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:chubaodb.raft.impl.pb.LogIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem > items_;
  mutable int _cached_size_;
  friend struct protobuf_raft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Peer

// .chubaodb.raft.impl.pb.PeerType type = 1;
inline void Peer::clear_type() {
  type_ = 0;
}
inline ::chubaodb::raft::impl::pb::PeerType Peer::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Peer.type)
  return static_cast< ::chubaodb::raft::impl::pb::PeerType >(type_);
}
inline void Peer::set_type(::chubaodb::raft::impl::pb::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Peer.type)
}

// uint64 node_id = 2;
inline void Peer::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::node_id() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Peer.node_id)
  return node_id_;
}
inline void Peer::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Peer.node_id)
}

// uint64 peer_id = 3;
inline void Peer::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::peer_id() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Peer.peer_id)
  return peer_id_;
}
inline void Peer::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Peer.peer_id)
}

// -------------------------------------------------------------------

// ConfChange

// .chubaodb.raft.impl.pb.ConfChangeType type = 1;
inline void ConfChange::clear_type() {
  type_ = 0;
}
inline ::chubaodb::raft::impl::pb::ConfChangeType ConfChange::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.ConfChange.type)
  return static_cast< ::chubaodb::raft::impl::pb::ConfChangeType >(type_);
}
inline void ConfChange::set_type(::chubaodb::raft::impl::pb::ConfChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.ConfChange.type)
}

// .chubaodb.raft.impl.pb.Peer Peer = 2;
inline bool ConfChange::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void ConfChange::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::chubaodb::raft::impl::pb::Peer& ConfChange::peer() const {
  const ::chubaodb::raft::impl::pb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.ConfChange.Peer)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::Peer*>(
      &::chubaodb::raft::impl::pb::_Peer_default_instance_);
}
inline ::chubaodb::raft::impl::pb::Peer* ConfChange::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::chubaodb::raft::impl::pb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.ConfChange.Peer)
  return peer_;
}
inline ::chubaodb::raft::impl::pb::Peer* ConfChange::release_peer() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.ConfChange.Peer)
  
  ::chubaodb::raft::impl::pb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ConfChange::set_allocated_peer(::chubaodb::raft::impl::pb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.ConfChange.Peer)
}

// bytes context = 3;
inline void ConfChange::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.ConfChange.context)
  return context_.GetNoArena();
}
inline void ConfChange::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.ConfChange.context)
}
#if LANG_CXX11
inline void ConfChange::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chubaodb.raft.impl.pb.ConfChange.context)
}
#endif
inline void ConfChange::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.ConfChange.context)
}
inline void ConfChange::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.ConfChange.context)
}
inline ::std::string* ConfChange::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.ConfChange.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.ConfChange.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfChange::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.ConfChange.context)
}

// -------------------------------------------------------------------

// Entry

// .chubaodb.raft.impl.pb.EntryType type = 1;
inline void Entry::clear_type() {
  type_ = 0;
}
inline ::chubaodb::raft::impl::pb::EntryType Entry::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.type)
  return static_cast< ::chubaodb::raft::impl::pb::EntryType >(type_);
}
inline void Entry::set_type(::chubaodb::raft::impl::pb::EntryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.type)
}

// uint64 index = 2;
inline void Entry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.index)
  return index_;
}
inline void Entry::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.index)
}

// uint64 term = 3;
inline void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.term)
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.term)
}

// bytes data = 4;
inline void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Entry.data)
  return data_.GetNoArena();
}
inline void Entry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Entry.data)
}
#if LANG_CXX11
inline void Entry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chubaodb.raft.impl.pb.Entry.data)
}
#endif
inline void Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.Entry.data)
}
inline void Entry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.Entry.data)
}
inline ::std::string* Entry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Entry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Entry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Entry.data)
}

// -------------------------------------------------------------------

// HeartbeatContext

// repeated uint64 ids = 1;
inline int HeartbeatContext::ids_size() const {
  return ids_.size();
}
inline void HeartbeatContext::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint64 HeartbeatContext::ids(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HeartbeatContext.ids)
  return ids_.Get(index);
}
inline void HeartbeatContext::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HeartbeatContext.ids)
}
inline void HeartbeatContext::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.HeartbeatContext.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
HeartbeatContext::ids() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.HeartbeatContext.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
HeartbeatContext::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.HeartbeatContext.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// SnapshotMeta

// uint64 index = 1;
inline void SnapshotMeta::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SnapshotMeta::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.index)
  return index_;
}
inline void SnapshotMeta::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.SnapshotMeta.index)
}

// uint64 term = 2;
inline void SnapshotMeta::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SnapshotMeta::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.term)
  return term_;
}
inline void SnapshotMeta::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.SnapshotMeta.term)
}

// repeated .chubaodb.raft.impl.pb.Peer peers = 3;
inline int SnapshotMeta::peers_size() const {
  return peers_.size();
}
inline void SnapshotMeta::clear_peers() {
  peers_.Clear();
}
inline const ::chubaodb::raft::impl::pb::Peer& SnapshotMeta::peers(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_.Get(index);
}
inline ::chubaodb::raft::impl::pb::Peer* SnapshotMeta::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_.Mutable(index);
}
inline ::chubaodb::raft::impl::pb::Peer* SnapshotMeta::add_peers() {
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer >*
SnapshotMeta::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Peer >&
SnapshotMeta::peers() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.SnapshotMeta.peers)
  return peers_;
}

// bytes context = 4;
inline void SnapshotMeta::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotMeta::context() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.SnapshotMeta.context)
  return context_.GetNoArena();
}
inline void SnapshotMeta::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
#if LANG_CXX11
inline void SnapshotMeta::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
#endif
inline void SnapshotMeta::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
inline void SnapshotMeta::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.SnapshotMeta.context)
}
inline ::std::string* SnapshotMeta::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.SnapshotMeta.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotMeta::release_context() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.SnapshotMeta.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotMeta::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.SnapshotMeta.context)
}

// -------------------------------------------------------------------

// Snapshot

// uint64 uuid = 1;
inline void Snapshot::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Snapshot::uuid() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.uuid)
  return uuid_;
}
inline void Snapshot::set_uuid(::google::protobuf::uint64 value) {
  
  uuid_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.uuid)
}

// .chubaodb.raft.impl.pb.SnapshotMeta meta = 2;
inline bool Snapshot::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void Snapshot::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::chubaodb::raft::impl::pb::SnapshotMeta& Snapshot::meta() const {
  const ::chubaodb::raft::impl::pb::SnapshotMeta* p = meta_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::SnapshotMeta*>(
      &::chubaodb::raft::impl::pb::_SnapshotMeta_default_instance_);
}
inline ::chubaodb::raft::impl::pb::SnapshotMeta* Snapshot::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::chubaodb::raft::impl::pb::SnapshotMeta;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Snapshot.meta)
  return meta_;
}
inline ::chubaodb::raft::impl::pb::SnapshotMeta* Snapshot::release_meta() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Snapshot.meta)
  
  ::chubaodb::raft::impl::pb::SnapshotMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void Snapshot::set_allocated_meta(::chubaodb::raft::impl::pb::SnapshotMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Snapshot.meta)
}

// repeated bytes datas = 3;
inline int Snapshot::datas_size() const {
  return datas_.size();
}
inline void Snapshot::clear_datas() {
  datas_.Clear();
}
inline const ::std::string& Snapshot::datas(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_.Get(index);
}
inline ::std::string* Snapshot::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_.Mutable(index);
}
inline void Snapshot::set_datas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.datas)
  datas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Snapshot::set_datas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.datas)
  datas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Snapshot::set_datas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chubaodb.raft.impl.pb.Snapshot.datas)
}
inline void Snapshot::set_datas(int index, const void* value, size_t size) {
  datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chubaodb.raft.impl.pb.Snapshot.datas)
}
inline ::std::string* Snapshot::add_datas() {
  // @@protoc_insertion_point(field_add_mutable:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_.Add();
}
inline void Snapshot::add_datas(const ::std::string& value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.Snapshot.datas)
}
#if LANG_CXX11
inline void Snapshot::add_datas(::std::string&& value) {
  datas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.Snapshot.datas)
}
#endif
inline void Snapshot::add_datas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chubaodb.raft.impl.pb.Snapshot.datas)
}
inline void Snapshot::add_datas(const void* value, size_t size) {
  datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chubaodb.raft.impl.pb.Snapshot.datas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Snapshot::datas() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.Snapshot.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Snapshot::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.Snapshot.datas)
  return &datas_;
}

// bool final = 4;
inline void Snapshot::clear_final() {
  final_ = false;
}
inline bool Snapshot::final() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.final)
  return final_;
}
inline void Snapshot::set_final(bool value) {
  
  final_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.final)
}

// int64 seq = 5;
inline void Snapshot::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Snapshot::seq() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Snapshot.seq)
  return seq_;
}
inline void Snapshot::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Snapshot.seq)
}

// -------------------------------------------------------------------

// Message

// .chubaodb.raft.impl.pb.MessageType type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::chubaodb::raft::impl::pb::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.type)
  return static_cast< ::chubaodb::raft::impl::pb::MessageType >(type_);
}
inline void Message::set_type(::chubaodb::raft::impl::pb::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.type)
}

// uint64 id = 2;
inline void Message::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::id() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.id)
  return id_;
}
inline void Message::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.id)
}

// uint64 from = 3;
inline void Message::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.from)
  return from_;
}
inline void Message::set_from(::google::protobuf::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.from)
}

// uint64 to = 4;
inline void Message::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.to)
  return to_;
}
inline void Message::set_to(::google::protobuf::uint64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.to)
}

// uint64 term = 5;
inline void Message::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.term)
  return term_;
}
inline void Message::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.term)
}

// uint64 commit = 6;
inline void Message::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.commit)
  return commit_;
}
inline void Message::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.commit)
}

// uint64 read_sequence = 7;
inline void Message::clear_read_sequence() {
  read_sequence_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::read_sequence() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.read_sequence)
  return read_sequence_;
}
inline void Message::set_read_sequence(::google::protobuf::uint64 value) {
  
  read_sequence_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.read_sequence)
}

// uint64 log_term = 8;
inline void Message::clear_log_term() {
  log_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::log_term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.log_term)
  return log_term_;
}
inline void Message::set_log_term(::google::protobuf::uint64 value) {
  
  log_term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.log_term)
}

// uint64 log_index = 9;
inline void Message::clear_log_index() {
  log_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::log_index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.log_index)
  return log_index_;
}
inline void Message::set_log_index(::google::protobuf::uint64 value) {
  
  log_index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.log_index)
}

// repeated .chubaodb.raft.impl.pb.Entry entries = 10;
inline int Message::entries_size() const {
  return entries_.size();
}
inline void Message::clear_entries() {
  entries_.Clear();
}
inline const ::chubaodb::raft::impl::pb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.entries)
  return entries_.Get(index);
}
inline ::chubaodb::raft::impl::pb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Message.entries)
  return entries_.Mutable(index);
}
inline ::chubaodb::raft::impl::pb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.Message.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.Message.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.Message.entries)
  return entries_;
}

// bool reject = 12;
inline void Message::clear_reject() {
  reject_ = false;
}
inline bool Message::reject() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.reject)
  return reject_;
}
inline void Message::set_reject(bool value) {
  
  reject_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.reject)
}

// uint64 reject_hint = 13;
inline void Message::clear_reject_hint() {
  reject_hint_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::reject_hint() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.reject_hint)
  return reject_hint_;
}
inline void Message::set_reject_hint(::google::protobuf::uint64 value) {
  
  reject_hint_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.Message.reject_hint)
}

// .chubaodb.raft.impl.pb.HeartbeatContext hb_ctx = 14;
inline bool Message::has_hb_ctx() const {
  return this != internal_default_instance() && hb_ctx_ != NULL;
}
inline void Message::clear_hb_ctx() {
  if (GetArenaNoVirtual() == NULL && hb_ctx_ != NULL) delete hb_ctx_;
  hb_ctx_ = NULL;
}
inline const ::chubaodb::raft::impl::pb::HeartbeatContext& Message::hb_ctx() const {
  const ::chubaodb::raft::impl::pb::HeartbeatContext* p = hb_ctx_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.hb_ctx)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::HeartbeatContext*>(
      &::chubaodb::raft::impl::pb::_HeartbeatContext_default_instance_);
}
inline ::chubaodb::raft::impl::pb::HeartbeatContext* Message::mutable_hb_ctx() {
  
  if (hb_ctx_ == NULL) {
    hb_ctx_ = new ::chubaodb::raft::impl::pb::HeartbeatContext;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Message.hb_ctx)
  return hb_ctx_;
}
inline ::chubaodb::raft::impl::pb::HeartbeatContext* Message::release_hb_ctx() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Message.hb_ctx)
  
  ::chubaodb::raft::impl::pb::HeartbeatContext* temp = hb_ctx_;
  hb_ctx_ = NULL;
  return temp;
}
inline void Message::set_allocated_hb_ctx(::chubaodb::raft::impl::pb::HeartbeatContext* hb_ctx) {
  delete hb_ctx_;
  hb_ctx_ = hb_ctx;
  if (hb_ctx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Message.hb_ctx)
}

// .chubaodb.raft.impl.pb.Snapshot snapshot = 15;
inline bool Message::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != NULL;
}
inline void Message::clear_snapshot() {
  if (GetArenaNoVirtual() == NULL && snapshot_ != NULL) delete snapshot_;
  snapshot_ = NULL;
}
inline const ::chubaodb::raft::impl::pb::Snapshot& Message::snapshot() const {
  const ::chubaodb::raft::impl::pb::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.Message.snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::chubaodb::raft::impl::pb::Snapshot*>(
      &::chubaodb::raft::impl::pb::_Snapshot_default_instance_);
}
inline ::chubaodb::raft::impl::pb::Snapshot* Message::mutable_snapshot() {
  
  if (snapshot_ == NULL) {
    snapshot_ = new ::chubaodb::raft::impl::pb::Snapshot;
  }
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.Message.snapshot)
  return snapshot_;
}
inline ::chubaodb::raft::impl::pb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:chubaodb.raft.impl.pb.Message.snapshot)
  
  ::chubaodb::raft::impl::pb::Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
inline void Message::set_allocated_snapshot(::chubaodb::raft::impl::pb::Snapshot* snapshot) {
  delete snapshot_;
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chubaodb.raft.impl.pb.Message.snapshot)
}

// -------------------------------------------------------------------

// HardState

// uint64 term = 1;
inline void HardState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HardState.term)
  return term_;
}
inline void HardState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HardState.term)
}

// uint64 commit = 2;
inline void HardState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HardState.commit)
  return commit_;
}
inline void HardState::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HardState.commit)
}

// uint64 vote = 3;
inline void HardState::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.HardState.vote)
  return vote_;
}
inline void HardState::set_vote(::google::protobuf::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.HardState.vote)
}

// -------------------------------------------------------------------

// TruncateMeta

// uint64 index = 1;
inline void TruncateMeta::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TruncateMeta::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.TruncateMeta.index)
  return index_;
}
inline void TruncateMeta::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.TruncateMeta.index)
}

// uint64 term = 2;
inline void TruncateMeta::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TruncateMeta::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.TruncateMeta.term)
  return term_;
}
inline void TruncateMeta::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.TruncateMeta.term)
}

// -------------------------------------------------------------------

// IndexItem

// uint64 index = 1;
inline void IndexItem::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IndexItem::index() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.IndexItem.index)
  return index_;
}
inline void IndexItem::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.IndexItem.index)
}

// uint64 term = 2;
inline void IndexItem::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IndexItem::term() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.IndexItem.term)
  return term_;
}
inline void IndexItem::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.IndexItem.term)
}

// uint32 offset = 3;
inline void IndexItem::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 IndexItem::offset() const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.IndexItem.offset)
  return offset_;
}
inline void IndexItem::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:chubaodb.raft.impl.pb.IndexItem.offset)
}

// -------------------------------------------------------------------

// LogIndex

// repeated .chubaodb.raft.impl.pb.IndexItem items = 1;
inline int LogIndex::items_size() const {
  return items_.size();
}
inline void LogIndex::clear_items() {
  items_.Clear();
}
inline const ::chubaodb::raft::impl::pb::IndexItem& LogIndex::items(int index) const {
  // @@protoc_insertion_point(field_get:chubaodb.raft.impl.pb.LogIndex.items)
  return items_.Get(index);
}
inline ::chubaodb::raft::impl::pb::IndexItem* LogIndex::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:chubaodb.raft.impl.pb.LogIndex.items)
  return items_.Mutable(index);
}
inline ::chubaodb::raft::impl::pb::IndexItem* LogIndex::add_items() {
  // @@protoc_insertion_point(field_add:chubaodb.raft.impl.pb.LogIndex.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem >*
LogIndex::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:chubaodb.raft.impl.pb.LogIndex.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chubaodb::raft::impl::pb::IndexItem >&
LogIndex::items() const {
  // @@protoc_insertion_point(field_list:chubaodb.raft.impl.pb.LogIndex.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace impl
}  // namespace raft
}  // namespace chubaodb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chubaodb::raft::impl::pb::PeerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chubaodb::raft::impl::pb::PeerType>() {
  return ::chubaodb::raft::impl::pb::PeerType_descriptor();
}
template <> struct is_proto_enum< ::chubaodb::raft::impl::pb::ConfChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chubaodb::raft::impl::pb::ConfChangeType>() {
  return ::chubaodb::raft::impl::pb::ConfChangeType_descriptor();
}
template <> struct is_proto_enum< ::chubaodb::raft::impl::pb::EntryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chubaodb::raft::impl::pb::EntryType>() {
  return ::chubaodb::raft::impl::pb::EntryType_descriptor();
}
template <> struct is_proto_enum< ::chubaodb::raft::impl::pb::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chubaodb::raft::impl::pb::MessageType>() {
  return ::chubaodb::raft::impl::pb::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2eproto__INCLUDED
